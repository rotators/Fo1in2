/*

	Generic trap floor
	Reverted to (slightly improved) vanilla traps script for now, because obj_dude auto-disarming
	this stuff looked stupid.
	Generally trap scripts should be revisited at a later time.

	TODO: Add visible scenery that can be disarmed a la Fallout 2!

*/

/* Include Files */
#include "..\headers\define.h"

#define NAME                    SCRIPT_TRAPFLOR

#include "..\headers\command.h"

/* Standard Script Procedures */
procedure start;

variable Passed_Times;

#define LVAR_TrapTriggered 		(0)

procedure start begin
end

procedure spatial_p_proc begin
   if (is_success(roll_vs_skill( source_obj, SKILL_TRAPS, 0 )) and (local_var(LVAR_TrapTriggered) == 0)) then begin
      give_exp_points(EXP_TRAPS_NORMAL);
      reg_anim_clear( source_obj );
      if (source_obj != dude_obj) then begin
         display_msg(obj_name(source_obj) + mstr(100));
      end
      else begin
         Passed_Times := Passed_Times + 1;
         if (Passed_Times > 2) then begin
            set_local_var(LVAR_TrapTriggered, 1);
         end
         display_msg(mstr(101));
      end
   end
   else begin
      if (local_var(LVAR_TrapTriggered) == 0) then begin
         set_local_var(LVAR_TrapTriggered, 1);
         explosion(tile_num(source_obj), elevation(source_obj), random(10, 30));
      end
   end
end


/*
//
// ---TRAP SCRIPT---  Sduibek
//
#include "..\headers\define.h"

procedure start; // SCRIPT 509 (TRAPFLOR)		// WHERE:	The Glow and Thief's Circle
procedure boom;
variable CritFailDmg := 0;
variable Traps_roll := 0;
variable XP := 0;
// local_var(0) == Detected?
// local_var(1) == Disarmed (1) or Triggered (2)
// local_var(2) == #ofTimes

// SCRIPT 509 (TRAPFLOR) <-- msgs are from this

procedure start
begin
	if (script_action == spatial_proc) then begin// spatial_p_proc - Player is on or near hex of the location or object this script is using
		if (source_obj == dude_obj) or party_member_obj(obj_pid(source_obj)) then begin// new check (party member)
			set_local_var(2, local_var(2) + 1);
			XP := 0;
			CritFailDmg := 0;
			Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
			if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
				CritFailDmg := 10;
			end
			else begin
				if not(local_var(0)) then begin
					if is_success(Traps_roll) then begin
						set_local_var(0, 1);
						if is_critical(Traps_roll) then begin
							XP := XP + 50;
						end
						else begin
							XP := XP + 25;
						end
						reg_anim_clear( dude_obj );
						if source_obj != dude_obj then begin
							reg_anim_clear( source_obj );
						end
						display_msg(message_str(SCRIPT_TRAPFLOR, 101));
						anim( dude_obj, ANIM_magic_hands_middle, 0 );
						Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
						if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
							CritFailDmg := 10;
							call boom;
						end
						else begin
							if is_success(Traps_roll) then begin
								set_local_var(1, 1);
								if is_critical(Traps_roll) then begin
									XP := XP + 100;
								end
								else begin
									XP := XP + 50;
								end
								display_msg(message_str(SCRIPT_TRAPFLOR, 107));
							end
							else begin
								display_msg(message_str(SCRIPT_TRAPFLOR, 111));
							end
						end
						if XP then begin
							display_msg(message_str(SCRIPT_TRAPFLOR, 104) + XP + message_str(SCRIPT_TRAPFLOR, 105));
							give_exp_points(XP);
						end
					end
					else begin
						call boom;
					end
				end
				else begin
					if not(local_var(1)) then begin
						if local_var(2) <= 3 then begin
							Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
							reg_anim_clear( dude_obj );
							if source_obj != dude_obj then begin
								reg_anim_clear( source_obj );
							end
							anim( dude_obj, ANIM_magic_hands_middle, 0 );
							if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
								CritFailDmg := 10;
								call boom;
							end
							else begin
								if is_success(Traps_roll) then begin
									set_local_var(1, 1);
									if is_critical(Traps_roll) then begin
										XP := XP + 100;
									end
									else begin
										XP := XP + 50;
									end
									display_msg(message_str(SCRIPT_TRAPFLOR, 107));
									if XP then begin
										display_msg(message_str(SCRIPT_TRAPFLOR, 104) + XP + message_str(SCRIPT_TRAPFLOR, 105));
										give_exp_points(XP);
									end
								end
								else begin
									if local_var(2) < 3 then begin
										display_msg(message_str(SCRIPT_TRAPFLOR, 111));
									end
									else begin
										call boom;
									end
								end
							end
						end
						else begin
							call boom;
						end
					end
				end
			end
			if local_var(1) then begin
				destroy_object(self_obj);
			end
		end
	end
end

procedure boom
begin
	if local_var(2) <= 1 then begin
		if source_obj == dude_obj then begin
			display_msg(message_str(SCRIPT_TRAPFLOR, 109));
		end
		else begin
			display_msg(proto_data(obj_pid(source_obj), 1) + message_str(SCRIPT_TRAPFLOR, 108));
		end
	end
	else begin
		if source_obj == dude_obj then begin
			display_msg(message_str(SCRIPT_TRAPFLOR, 114));
		end
		else begin
			display_msg(proto_data(obj_pid(source_obj), 1) + message_str(SCRIPT_TRAPFLOR, 113));
		end
	end
	set_local_var(1, 2);
//	explosion(tile_num(source_obj), elevation(source_obj), 0);
	play_sfx("WHN1XXX1");
	if source_obj == dude_obj then begin
		critter_dmg( dude_obj, random(10 + (difficulty_level * 5), 20 + (difficulty_level * 10)) + CritFailDmg, DMG_explosion );
	end
	else begin
		critter_dmg( source_obj, random(10 + (difficulty_level * 5), 20 + (difficulty_level * 10)) + CritFailDmg, DMG_explosion );
		critter_dmg( dude_obj, random(10 + (difficulty_level * 5), 20 + (difficulty_level * 10)) + CritFailDmg, DMG_explosion );
	end
end
*/
//	#define DMG_normal_dam   0
//	#define DMG_laser        1
//	#define DMG_plasma       3
//	#define DMG_electrical   4
//	#define DMG_emp          5
