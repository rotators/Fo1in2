#include "..\headers\define.h"
#include "..\headers\command.h"

#define NAME                    	SCRIPT_DOOR

/* Door close distance */
/* How far do you want the last object that used the door to get away before it closes */
#define DOOR_CLOSE_DIST                 (10) //(3)

/* Timer id's */
#define TIMER_CLOSE                     (1)

#define is_metal_door 						(self_pid == PID_DOOR_METAL_EW or self_pid == PID_DOOR_METAL_NS or self_pid == PID_VDOOR_OLD_METAL_NS or self_pid == PID_VDOOR_OLD_METAL_EW)
#define is_wood_door 						not(is_metal_door)

/* Penalties for forcing the door open using strength */
#define Crowbar_Bonus                   (0)

/* Max and Min damage for the trap */
#define DOOR_STRENGTH                   (2)
#define MIN_DAMAGE                      (10)
#define MAX_DAMAGE                      (20)
#define Crowbar_Strain                  (2)

procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_update_p_proc;
procedure map_enter_p_proc;

procedure Pry_Door;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

//local_var(LVAR_HALLDED_Door) == HALLDED | self is Hallded locked door
//local_var(5) == HALLDED | Hallded lock was picked?
//local_var(6) == HALLDED | has init Hallded door?
//local_var(7) == GotExpForPicking (NOT USED)

#define LVAR_HALLDED_Door 				(4)
#define LVAR_Explosion_Attempts 		(8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable GhDorGrd_Ptr;


/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
	if (self_tile == 17128) and (CUR_MAP_HALLDED) then begin
		set_local_var(LVAR_HALLDED_Door, 1);//  HALLDED | self is Hallded locked door
		if (local_var(6) != 1) and (map_first_run) then begin
			set_local_var(5, 0);
			set_map_var(11, 1);
			set_local_var(6, 1);
		end
	end
end

procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
             (checkPartyMembersNearDoor == false) and
             ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
              (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
            obj_close(self_obj);
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end

procedure map_enter_p_proc begin
	if local_var(LVAR_HALLDED_Door) then begin//  HALLDED | self is Hallded locked door
		if necropolis_invaded then begin
			destroy_object(self_obj);
		end

		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			if ((map_var(11) == 0) or (local_var(5) == 1) or (map_var(12) == 1)) then begin
				obj_unlock(self_obj);
			end
		end
		else if (local_var(5) == 1) then begin
			obj_unlock(self_obj);
		end
		else if (local_var(5) == 0) and (map_var(12) != 1) then begin
			obj_close(self_obj);
			obj_lock(self_obj);
		end
	end
end

procedure map_update_p_proc begin
	if local_var(LVAR_HALLDED_Door) then begin//  HALLDED | self is Hallded locked door
		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			if ((map_var(11) == 0) or (local_var(5) == 1) or (map_var(12) == 1)) then begin
				obj_unlock(self_obj);
			end
		end
		else if (local_var(5) == 1) then begin
			obj_unlock(self_obj);
		end
		else if (local_var(5) == 0) and (map_var(12) != 1) then begin
			obj_close(self_obj);
			obj_lock(self_obj);
		end
	end
end

procedure use_p_proc begin
	if local_var(LVAR_HALLDED_Door) then begin//  HALLDED | self is Hallded locked door
//		if (map_var(11) == 1) then begin
//			obj_lock(self_obj);
//		end
//		else begin
//			if (map_var(11) == 0) then begin
//				obj_unlock(self_obj);
//			end
//		end
		if ((map_var(11) == 1) and (source_obj == dude_obj)) then begin
			if (local_var(5) == 0) then begin
				if (GhDorGrd_Ptr != 0) and not(combat_is_initialized) then begin
					float_msg(GhDorGrd_Ptr, message_str(SCRIPT_GHDORGRD, 101), 0);
					obj_lock(self_obj);
					script_overrides;
					display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
				end
				else begin
					obj_lock(self_obj);
					script_overrides;
					display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
				end
			end
			else begin
				if (local_var(5) == 1) then begin
					if (GhDorGrd_Ptr != 0) then begin
						if not(dude_is_sneaking) and (source_obj == dude_obj) then begin
							script_overrides;
							set_global_var( GVAR_SET_DOOR_GUARD_WARNING, 1 );
						end
						else begin
							if dude_is_sneaking and is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0)) and (source_obj == dude_obj) then begin
								obj_unlock(self_obj);
							end
						end
					end
					else begin
						obj_unlock(self_obj);
					end
				end
			end
		end
	end

   if fo1in2_auto_doors_closing then begin
   //	debug("door will close");
      last_source_obj := source_obj;
      add_timer_event(self_obj, 10, TIMER_CLOSE);
	end
end

procedure use_skill_on_p_proc begin
variable Skills_Roll;

	if local_var(LVAR_HALLDED_Door) then begin//  HALLDED | self is Hallded locked door
		if (map_var(11) == 1) and (local_var(5) == 0) then begin
			if (action_being_used == SKILL_LOCKPICK) then begin//-- LOCKPICK
				script_overrides;
				Skills_Roll := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0);

				// Unlock the door:
				if (is_success(Skills_Roll)) then begin
					obj_unlock(self_obj);
					set_local_var(5, 1);
					display_msg(mstr(100));
					give_exp_points(25);
					display_msg(message_str(SCRIPT_GENCHAT, 103) + "25" + message_str(SCRIPT_GENCHAT, 104));
				end
				else begin
					// beyond capabilities to open:
					if (is_critical(Skills_Roll)) then begin
						jam_lock(self_obj);
						display_msg(mstr(110));
					end
					// unable to pick the lock:
					else begin
						display_msg(mstr(103));
					end
				end
			end
		end

		// Door is already open:
		else begin
			display_msg(mstr(109));
		end
	end
end

procedure use_obj_on_p_proc begin
   variable Tool;
   variable Skills_Roll;
   Tool:=obj_pid(obj_being_used_with);

	if local_var(LVAR_HALLDED_Door) then begin//  HALLDED | self is Hallded locked door
		Skills_Roll := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 20);

		if ((Tool == PID_LOCKPICKS) and (map_var(11) == 1)) then begin
			if (local_var(5) == 0) then begin
				script_overrides;

				// Door unlocked:
				if (is_success(Skills_Roll)) then begin
					obj_unlock(self_obj);
					set_local_var(5, 1);
					display_msg(mstr(100));
					display_msg(message_str(SCRIPT_GENCHAT, 103) + EXP_LOCKPICK_NORMAL + message_str(SCRIPT_GENCHAT, 104));
					give_exp_points(EXP_LOCKPICK_NORMAL);
				end
				else begin
					// Lockpicks broken:
					if (is_critical(Skills_Roll)) then begin
						rm_obj_from_inven(dude_obj, Tool);
						destroy_object(Tool);
						display_msg(mstr(101));
					end
					// Not able to open the door:
					else begin
						display_msg(mstr(103));
					end
				end
			end
			// Door is already open:
			else begin
				display_msg(mstr(109));
			end
		end

		else if ((Tool == PID_CROWBAR) and (map_var(11) == 1)) then begin
			script_overrides;
			call Pry_Door;
   	end
	end

end

procedure damage_p_proc begin
  /************ Wood Door ****************/
	if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
	   if is_wood_door then begin
			obj_unlock(self_obj);
			destroy_object(self_obj);
	   end

	  /************ Metal Door ****************/

	   else if is_metal_door then begin
	       set_local_var(LVAR_Explosion_Attempts,local_var(LVAR_Explosion_Attempts)+1);
	       if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
	           obj_unlock(self_obj);
	           destroy_object(self_obj);
	       end
	   end
	end
   else begin
       display_msg(mstr(193));
   end
end

procedure description_p_proc begin
	if (obj_is_locked(self_obj)) then begin
		display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
	end
end

procedure Pry_Door begin
   variable Stat_Roll;
   script_overrides;

   Stat_Roll:=do_check(source_obj,STAT_st,Crowbar_Bonus);

   if (is_success(Stat_Roll)) then begin
       obj_unlock(self_obj);

       if (source_obj == dude_obj) then begin
           display_msg(mstr(176));
       end

       else begin
           display_msg(mstr(181));
       end
   end

   else if (is_critical(Stat_Roll)) then begin
       critter_dmg(source_obj,Crowbar_Strain,(DMG_normal_dam BWOR DMG_BYPASS_ARMOR));

       if (source_obj == dude_obj) then begin
           if (Crowbar_Strain == 1) then begin
               display_msg(mstr(177));
           end
           else begin
               display_msg(mstr(178)+Crowbar_Strain+mstr(179));
           end
       end

       else begin
           if (get_is_male( source_obj )) then begin
               if (Crowbar_Strain == 1) then begin
                   display_msg(mstr(182));
               end
               else begin
                   display_msg(mstr(183)+Crowbar_Strain+mstr(184));
               end
           end

           else begin
               if (Crowbar_Strain == 1) then begin
                   display_msg(mstr(186));
               end
               else begin
                   display_msg(mstr(187)+Crowbar_Strain+mstr(188));
               end
           end
       end
   end

   else begin
       if (source_obj == dude_obj) then begin
           display_msg(mstr(180));
       end

       else begin
           display_msg(mstr(185));
       end
   end
end
