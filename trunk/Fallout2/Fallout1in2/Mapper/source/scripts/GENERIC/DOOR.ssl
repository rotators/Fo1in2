/*

   Door script, not sure where this is used?!

*/

#include "..\headers\define.h"
#include "..\headers\command.h"

#define NAME                    	SCRIPT_DOOR

/* Door close distance */
/* How far do you want the last object that used the door to get away before it closes */
#define DOOR_CLOSE_DIST                 (10) //(3)

/* Timer id's */
#define TIMER_CLOSE                     (1)

#define is_metal_door 						(self_pid == PID_DOOR_METAL_EW or self_pid == PID_DOOR_METAL_NS)
#define is_wood_door 						not(is_metal_door)

/* Penalties for forcing the door open using strength */
#define Crowbar_Bonus                   (0)

/* Max and Min damage for the trap */
#define DOOR_STRENGTH                   (2)
#define MIN_DAMAGE                      (10)
#define MAX_DAMAGE                      (20)
#define Crowbar_Strain                  (2)

procedure start;
procedure timed_event_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_update_p_proc;
procedure damage_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

//local_var(4) == HALLDED | self is Hallded locked door
//local_var(5) == HALLDED | Hallded lock was picked?
//local_var(6) == HALLDED | has init Hallded door?
//local_var(7) == GotExpForPicking (NOT USED)

#define LVAR_Explosion_Attempts 		(8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable Cur_Door_Ptr;


/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
             (checkPartyMembersNearDoor == false) and
             ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
              (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
            obj_close(self_obj);
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end

procedure use_p_proc begin
	if not(CUR_AREA_MILITARY_BASE) then begin
		if (local_var(0) == 0) then begin
			obj_lock(self_obj);
		end
		else begin
			obj_unlock(self_obj);
		end
		if ((local_var(0) == 0) and (source_obj == dude_obj)) then begin
			script_overrides;
			display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
		end
	end

   if fo1in2_auto_doors_closing then begin
      last_source_obj := source_obj;
      add_timer_event(self_obj, 10, TIMER_CLOSE);
	end
end

procedure use_skill_on_p_proc begin
	if not(CUR_AREA_MILITARY_BASE) then begin
		variable LVar0 := 0;
		if (local_var(0) == 0) then begin
			if (action_being_used == SKILL_LOCKPICK) then begin
				script_overrides;
				LVar0 := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0);
				if (is_success(LVar0)) then begin
					set_local_var(0, 1);
					display_msg(message_str(SCRIPT_DOOR, 100));//{100}{}{You unlock the door.}
					give_exp_points(25);
					display_msg(message_str(SCRIPT_GENCHAT, 103) + "25" + message_str(SCRIPT_GENCHAT, 104));
				end
				else begin
					if (is_critical(LVar0)) then begin
						jam_lock(self_obj);
						display_msg(message_str(SCRIPT_DOOR, 110));//{110}{}{The lock is beyond your ability to pick.}
					end
					else begin
						display_msg(message_str(SCRIPT_DOOR, 103));//{103}{}{You were not able to pick the lock.}
					end
				end
			end
		end
		else begin
			display_msg(message_str(SCRIPT_DOOR, 109));//{109}{}{The door is already unlocked.}
		end
	end
end

procedure description_p_proc begin
   if not(CUR_AREA_MILITARY_BASE) then begin
		if (local_var(0) == 0) then begin
			display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
		end
	end
end

procedure use_obj_on_p_proc begin
   if not(CUR_AREA_MILITARY_BASE) then begin
		variable LVar0 := 0;
		variable LVar1 := 0;
		LVar0 := obj_being_used_with;
		LVar1 := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 20);
		if ((obj_pid(LVar0) == PID_LOCKPICKS) and (local_var(0) == 0)) then begin
			script_overrides;
			if (is_success(LVar1)) then begin
				set_local_var(0, 1);
				display_msg(message_str(SCRIPT_DOOR, 100));//{100}{}{You unlock the door.}
				display_msg(message_str(SCRIPT_GENCHAT, 103) + "25" + message_str(SCRIPT_GENCHAT, 104));
				give_exp_points(25);
			end
			else begin
				if (is_critical(LVar1)) then begin
					rm_obj_from_inven(dude_obj, LVar0);
					destroy_object(LVar0);
					display_msg(message_str(SCRIPT_DOOR, 101));//{101}{}{You broke your lockpicks!}
				end
				else begin
					display_msg(message_str(SCRIPT_DOOR, 103));//{103}{}{You were not able to pick the lock.}
				end
			end
		end
	end
end

procedure map_update_p_proc begin
   if not(CUR_AREA_MILITARY_BASE) then begin
		if (local_var(0) == 0) then begin
			obj_lock(self_obj);
		end
		else begin
			obj_unlock(self_obj);
		end
	end
end

procedure damage_p_proc begin
	if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      if not(CUR_AREA_MILITARY_BASE) then begin
			set_local_var(1, 1);
			destroy_object(self_obj);
		end
		else if CUR_AREA_MILITARY_BASE then begin
			if not(global_var( GVAR_FIXT_BUGFIXES_ONLY )) then begin
				set_local_var(1, 1);
				destroy_object(self_obj);
			end
		end
	end
   else begin
       display_msg(mstr(193));
   end
end
