/******************************************************************************************
        Item: Player car
        Location: local maps
        Description: handles the create & remove of the player car at various locations
******************************************************************************************/


/* Include Files */
#include "..\headers\define.h"
#include "..\headers\maps.h"
#include "..\headers\updatmap.h"
#include "..\headers\command.h"

#include "..\headers\necropolis.h"
#include "..\headers\sfall\main.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;

procedure car_travel_check_hook;
procedure car_travel;
procedure check_vehicle_trunk;
procedure check_vehicle_location;
procedure spawn_car;

#define is_car_created						((tile_contains_obj_pid(car_hex,car_elev,PID_DRIVABLE_MOTO1)) or (tile_contains_obj_pid(car_hex,car_elev,PID_DRIVABLE_MOTO2)))
#define location_valid						car_hex != 0

#define set_spawn_hex(x)					if get_car_from_worldmap then set_car_current_map; \
													car_hex := x


#define LARGE_CENTER_OFFSET_X         (2.5)
#define LARGE_CENTER_OFFSET_Y         (3.5)
#define LARGE_RADIUS                  (25.0)
#define DISTANCE_FROM_TOWN_LARGE(x, y, tx, ty)         (abs(x-(tx+LARGE_CENTER_OFFSET_X))<LARGE_RADIUS and abs(y-(ty+LARGE_CENTER_OFFSET_Y))<LARGE_RADIUS)
#define TOWN_COUNT             (12)

variable townArray;

variable tile;
variable car_area:=-1;
variable car_hex:=0;
variable car_elev:=0;

variable dudeX := 0;
variable dudeY := 0;
variable townX := 0;
variable townY := 0;
variable distance := 0;
variable i := 0;

procedure start begin
   if (game_loaded) then begin
      set_global_var(GVAR_CAR_PREV_STATUS, car_out_of_fuel );//car_current_town);
   	register_hook_proc(HOOK_MOUSECLICK, car_travel_check_hook);

   	//TODO should be fixed by sfall later and could be removed.
   	register_hook_proc(HOOK_CARTRAVEL, car_travel);
   end
end

procedure map_enter_p_proc begin
	if dude_has_car and get_car_used then begin
		//debug("car location: " + car_current_town);
		//debug("dude location: " + cur_town + " and map: " + cur_map_index);

		call check_vehicle_trunk;
		call check_vehicle_location;
	end
end

// Hook for handling town/world button issue with car.
// (Entering town via town/world button makes you use car when leaving on foot).
//TODO should be fixed by sfall later and could be removed.
procedure car_travel begin
   //A foolproofing check in case there is car_travel_check_hook gets called first.
   if(not car_out_of_fuel) then begin
       set_global_var(GVAR_CAR_CUR_MAP, -1);
   end
end

// Hook for checking vehicle running out of fuel and parking it if above town.
procedure car_travel_check_hook begin
   if (get_game_mode == WORLDMAP) then begin
      if (car_out_of_fuel and global_var(GVAR_CAR_PREV_STATUS) != car_out_of_fuel) then begin
         debug("Car ran out of fuel - Callback on mouse button press.");

         townArray := [
         823,  72,   "VAULT 13",   MAP_V13ENT,
         1273, 72,   "VAULT 15",   MAP_VAULTENT,
         1073, 72,   "SHADY",      MAP_SHADYW,
         873,  522,  "JUNKTOWN",   MAP_JUNKENT,
         1123, 172,  "RAIDERS",    MAP_RAIDERS,
         1123, 672,  "NECROPOLIS", MAP_HOTEL,
         873,  722,  "HUB",        MAP_HUBENT,
         623,  472,  "BOS",        MAP_BROHDENT,
         173,  72,   "MARIPOSA",   MAP_MBENT,
         1223, 1272, "GLOW",       MAP_GLOWENT,
         773,  922,  "BONE",       MAP_LAADYTUM,
         773,  1022, "CATHEDRAL",  MAP_CHILDRN1
         ];

         if (cathedral_destroyed) then begin
            townArray[4 * AREA_CATHEDRAL + 3] := MAP_CHILDEAD;
         end

         if (military_base_destoryed) then begin
            townArray[4 * AREA_MILITARY_BASE + 3] := MAP_MBDEAD;
         end

         //Check if current WM coordiantes are above town.

         dudeX := worldmap_xpos;
         dudeY := worldmap_ypos;
         for (i := 0; (i<TOWN_COUNT) ; i++) begin
            if(DISTANCE_FROM_TOWN_LARGE(dudeX, dudeY, townArray[i*4], townArray[i*4+1])) then begin
               debug("Car parked in: "+townArray[i*4+2]);
               set_global_var(GVAR_CAR_CUR_MAP, townArray[i*4+3]);

               //Uncomment To Hide on WorldMap click
               //invisible_on_map(AREA_CAR_OUTTA_GAS);
               break;
            end
         end
         // not found
         if (i == TOWN_COUNT) then begin
            debug("Car left in OUTTA GAS LOCATION");
            set_global_var(GVAR_CAR_CUR_MAP, MAP_CAR_DESERT);
            // This is for rare engine glitch when you run out of gas on way to destination
            // and then get teleported to the destination location when trying to enter current coordiantes.
            // And the AREA_CAR_OUTTA_GAS does not spawn.
            mark_area_known(MARK_TYPE_TOWN, AREA_CAR_OUTTA_GAS, MARK_STATE_KNOWN);
            wm_area_set_pos(AREA_CAR_OUTTA_GAS, dudeX+18, dudeY + 12);
         end
      end
      set_global_var(GVAR_CAR_PREV_STATUS, car_out_of_fuel);
   end
end

procedure check_vehicle_trunk begin
variable trunk_size;

	if dude_has_bike then begin // normal motorcycle
		art_change_fid_num(Trunk_Ptr, FID_MOTOTRUNK1);
		set_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE,trunk_size_small);
	end
	else if dude_has_upgraded_bike then begin // upgraded motorcycle
		art_change_fid_num(Trunk_Ptr, FID_MOTOTRUNK2);
		set_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE,trunk_size_big);
	end

	trunk_size := get_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE);
	debug("trunk size: " + trunk_size);
end

procedure check_vehicle_location begin
	car_elev := 0;
	car_area:=0;
	car_hex:=0;

   //Car is not in OUTTA GAS LOCATION so hide that location
   if(global_var(GVAR_CAR_CUR_MAP) != MAP_CAR_DESERT) then begin
      invisible_on_map(AREA_CAR_OUTTA_GAS)
   end

	 // Entering through dialog teleport or caravan does not update cur_town,
	 // map check needed for following
	 // Shady Sands, Junktown, Hub, Adytum, Necropolis, Brotherhood

	// V13
	if (CUR_AREA_VAULT_13) then begin
	   car_hex := CAR_V13_HEX;
	   if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_V13ENT);
	end

	// V15
	else if (CUR_AREA_VAULT_15) then begin
   	car_hex := CAR_V15_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_VAULTENT);
   end

	// Shady Sands // Added map check for caravan arrival
	else if (CUR_AREA_SHADY_SANDS or CUR_MAP_SHADYW) then begin
   	car_hex := CAR_SHADY_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_SHADYW);
   end

	// Junktown // Added map check for caravan arrival
	else if (CUR_AREA_JUNKTOWN or CUR_MAP_JUNKENT) then begin
		if CUR_MAP_JUNKCSNO then begin
			set_spawn_hex(CAR_JUNKTOWN_NORTH_HEX);
		end
		else if CUR_MAP_JUNKENT then begin
			set_spawn_hex(CAR_JUNKTOWN_SOUTH_HEX);
	   end
	   else
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_JUNKENT);
	end

	// Raiders
	else if (CUR_AREA_RAIDERS) then begin
   	car_hex := CAR_RAIDERS_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_RAIDERS);
   end

	// Necropolis // Added map check for caravan arrival
	else if (CUR_AREA_NECROPOLIS or CUR_MAP_HOTEL) then begin
	   car_elev := CAR_NECROPOLIS_ELEV;
		if CUR_MAP_HOTEL then begin
			set_spawn_hex(CAR_NECROPOLIS_HOTEL_HEX);
		end
		else if CUR_MAP_HALLDED then begin
			set_spawn_hex(CAR_NECROPOLIS_HALLDEAD_HEX);
	   end
		else if CUR_MAP_WATRSHD then begin
			set_spawn_hex(CAR_NECROPOLIS_WATERSHED_HEX);
	   end
	   else
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_HOTEL);
	end

	// Hub // Added map check for caravan arrival
	else if (CUR_AREA_HUB or CUR_MAP_HUBENT) then begin
   	car_hex := CAR_HUB_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_HUBENT);
   end

	// Brotherhood // Added map check for caravan arrival
	else if (CUR_AREA_BROTHERHOOD or CUR_MAP_BROHDENT) then begin
   	car_hex := CAR_BOS_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_BROHDENT);
   end

	// Military Base
	else if (CUR_AREA_MILITARY_BASE) then begin
		if not(military_base_destoryed) then begin
	   	car_hex := CAR_MBASE_HEX;
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_MBENT);
   	end
   	else begin
	   	car_hex := CAR_MBASE_DEAD_HEX;
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_MBDEAD);
   	end
   end

	// Glow
	else if (CUR_AREA_GLOW) then begin
   	car_hex := CAR_GLOW_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_GLOWENT);
   end

	// Boneyard // Added map check for caravan arrival
	else if (CUR_AREA_BONEYARD or CUR_MAP_LAADYTUM) then begin
		if CUR_MAP_LAADYTUM then begin
			set_spawn_hex(CAR_BONEYARD_ADY_HEX);
		end
		else if CUR_MAP_LABLADES then begin
			set_spawn_hex(CAR_BONEYARD_BLADES_HEX);
	   end
		else if CUR_MAP_LAFOLLWR then begin
			set_spawn_hex(CAR_BONEYARD_LIBRARY_HEX);
	   end
	   else
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_LABLADES);
	end

	// Cathedral
	else if (CUR_AREA_CATHEDRAL) then begin
		if not(cathedral_destroyed) then begin
			if CUR_MAP_CHILDRN1 then
				car_hex := CAR_CATHEDRAL_HEX;
			if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_CHILDRN1);
		end
		else begin
			car_area := AREA_CATHEDRAL;
	   	car_hex := CAR_CATHEDRAL_DEAD_HEX;
	   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_CHILDEAD);
		end
   end

   // Bike outa gas
	else if (CUR_AREA_CAR_OUTTA_GAS) then begin
   	//Always Spawn on OUTTA GAS MAP
   	car_hex := CAR_CAR_OUTTA_GAS_HEX;
   end

   // Special Encounter: Guardians
	else if (CUR_AREA_SPECIAL_RND_TEMPLE or CUR_MAP_GUARDIAN ) then begin
   	car_hex := CAR_RND_FOREVER_HEX;
   	if get_car_from_worldmap then set_global_var(GVAR_CAR_CUR_MAP,MAP_GUARDIAN);
   end


   // No valid location
   else begin
   	debug("not a valid location!");
		car_area:=0;
		car_hex:=0;
		car_elev:=0;
   end

   call spawn_car;
end

procedure spawn_car begin
	/*******************************************************************
		Create & Delete car
	*******************************************************************/
   if location_valid then begin
		Upgrade_Car(car_hex,car_elev)

		// Car is in town and in this map or this is OUTTA GAS MAP:
		if get_car_in_cur_map or CUR_AREA_CAR_OUTTA_GAS then begin
			// If the car is still on the upgraded hex, remove it:
			if CUR_MAP_LAADYTUM and (global_var(GVAR_PLAYER_GOT_CAR) == 2) and (tile_contains_obj_pid(CAR_UPGRADE_HEX,0,PID_DRIVABLE_MOTO2)) then begin
				Dest_Car(CAR_UPGRADE_HEX, 0)
			end

			debug("car should be here on hex " + car_hex + " and elevation " + car_elev);
			if not(is_car_created) then begin
				Create_Car(car_hex, car_elev)
			end
			Place_Trunk(car_hex, car_elev)
			set_trunk_visible;
		end
		else begin
			debug("car should not be here!");
			set_trunk_invisible;
		end

	end

	/*******************************************************************
		For random encounter maps:
	*******************************************************************/
	else begin
		//debug("cur_map_index: " + cur_map_index);
		//debug("cur_town: " + cur_town);

		if car_in_any_encounter then begin
		   debug("create car in encounter at hex " + car_hex);
      	car_hex := dude_tile + 7; // TODO: improve this.
      	car_elev := dude_elevation;

			Create_Car(car_hex, car_elev)
			Place_Trunk(car_hex, car_elev)
			set_trunk_visible;
      end
      else begin
   		set_trunk_invisible;
      end

	end
end


