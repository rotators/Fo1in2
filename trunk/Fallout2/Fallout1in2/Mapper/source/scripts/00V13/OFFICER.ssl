#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;//    script_action == map_enter_proc
procedure pickup_p_proc;
procedure talk_p_proc;
procedure Officer00;
procedure Officer01;
procedure Officer02;
procedure Officer03;
procedure Officer04;
procedure Officer05;
procedure Officer06;
procedure Officer07;
procedure Officer08;
procedure Officer09;
procedure Officer10;
procedure Officer11;
procedure Officer12;
procedure Officer13;
procedure Officer14;
procedure Officer15;
procedure Officer15a;
procedure Officer16;
procedure Officer17;
procedure Officer18;
procedure Officer19;
procedure Officer20;
procedure Officer21;
procedure Officer21a;
procedure Officer22;
procedure Officer23;
procedure Officer24;
procedure Officer25;
procedure Officer26;
procedure Officer27;
procedure Officer28;
procedure Officer29;
procedure Officer30;
procedure Officer31;
procedure OfficerCombat;
procedure OfficerEnd;

variable tmp_hostile;
import variable SecDoor_ptr;
import variable armory_access;
import variable Officer_ptr;

procedure PickDeadBodyType;
variable DeathType := 57;

procedure start begin
	if (v13_invaded) then begin
		if CUR_AREA_VAULT_13 then begin
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);
				if not(is_loading_game) then begin
					set_self_visible;
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing OFFICER.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (global_var( GVAR_VAULT_13_HOSTILE )) then begin
			if (self_can_see_dude) then begin
				dialogue_system_enter;
			end
		end
		else begin
			if ((armory_access == 1) and not(obj_is_open(SecDoor_ptr))) then begin
				use_obj(SecDoor_ptr);
			end
			else if (armory_access == 2) then begin
				self_rotate( 5 );
				float_msg( self_obj, message_str(SCRIPT_OFFICER, 159), FLOAT_MSG_NORMAL );
				armory_access := 0;
				set_map_var(1, armory_access);
			end
			else if (not(armory_access) and (dude_elevation == self_elevation)) then begin
				if (tile_distance(dude_tile, 21292) < 2) then begin
					tmp_hostile := 1;
				end
			end
		end
	end
end

procedure damage_p_proc begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_VAULT_13_HOSTILE, 1 );
	end
end

procedure destroy_p_proc begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_VAULT_13_HOSTILE, 1 );
	end
	inc_good_critter
	Officer_ptr := 0;
end

procedure map_enter_p_proc begin
	set_self_team(TEAM_VAULT13 );
	Officer_ptr := self_obj;
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure talk_p_proc begin
	dude_look_at_self;

	get_reaction

	start_gdialog(178, self_obj, 4, -1, -1);
	gsay_start;
	if (global_var( GVAR_VAULT_13_HOSTILE )) then begin
		call Officer00;
	end
	else begin
		if dude_is_armed and (local_var(14) == 0) then begin
			call Officer27;
		end
		else begin
			if ((global_var( GVAR_QUEST_VAULT13_4_WATERCHIP ) != 0) and (global_var( GVAR_QUEST_VAULT13_4_WATERCHIP ) != 1)) then begin
				call Officer01;
			end
			else begin
				if (local_var(1) > 1) then begin
					if (armory_access) then begin
						call Officer25;
					end
					else begin
						call Officer02;
					end
				end
				else if (armory_access) then begin
					call Officer26;
				end
				else begin
					call Officer18;
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Officer00 begin
	gsay_message( SCRIPT_OFFICER, 100, 51 );
	tmp_hostile := 1;
end

procedure Officer01 begin
	gsay_message( SCRIPT_OFFICER, 101, 50 );
end

procedure Officer02 begin
	gsay_reply( SCRIPT_OFFICER, 102 );
	giq_option( 4, SCRIPT_OFFICER, 103, Officer04, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 104, Officer08, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_OFFICER, 105, Officer11, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 106, Officer03, NEUTRAL_REACTION );
end

procedure Officer03 begin
	gsay_reply( SCRIPT_OFFICER, 107 );
	giq_option( 4, SCRIPT_OFFICER, 159, OfficerEnd, NEUTRAL_REACTION );
end

procedure Officer04 begin
	gsay_reply( SCRIPT_OFFICER, 108 );
	giq_option( 4, SCRIPT_OFFICER, 109, OfficerEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 110, Officer05, NEUTRAL_REACTION );
end

procedure Officer05 begin
	gsay_reply( SCRIPT_OFFICER, 111 );
	giq_option( 5, SCRIPT_OFFICER, 112, Officer06, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_OFFICER, 113, Officer07, NEUTRAL_REACTION );
end

procedure Officer06 begin
	gsay_reply( SCRIPT_OFFICER, 114 );
	giq_option( 5, SCRIPT_OFFICER, 115, OfficerEnd, NEUTRAL_REACTION );
end

procedure Officer07 begin
	UpReact
	gsay_message( SCRIPT_OFFICER, 116, 49 );
end

procedure Officer08 begin
	gsay_reply( SCRIPT_OFFICER, 117 );
	giq_option( 4, SCRIPT_OFFICER, 118, Officer09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_OFFICER, 119, Officer10, NEUTRAL_REACTION );
end

procedure Officer09 begin
	DownReact
	gsay_message( SCRIPT_OFFICER, 120, 51 );
end

procedure Officer10 begin
	gsay_message( SCRIPT_OFFICER, 121, 50 );
end

procedure Officer11 begin
	gsay_reply( SCRIPT_OFFICER, 122 );
	giq_option( 5, SCRIPT_OFFICER, 123, Officer13, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 124, Officer12, NEUTRAL_REACTION );
end

procedure Officer12 begin
	gsay_message( SCRIPT_OFFICER, 125, 50 );
end

procedure Officer13 begin
	gsay_reply( SCRIPT_OFFICER, 126 );
	giq_option( 5, SCRIPT_OFFICER, 127, Officer15, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 128, Officer14, NEUTRAL_REACTION );
end

procedure Officer14 begin
	gsay_message( SCRIPT_OFFICER, 129, 50 );
end

procedure Officer15 begin
	gsay_reply( SCRIPT_OFFICER, 130 );
	giq_option( 5, SCRIPT_OFFICER, 131, Officer15a, NEUTRAL_REACTION );
end

procedure Officer15a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Officer17;
	end
	else begin
		call Officer16;
	end
end

procedure Officer16 begin
	gsay_message( SCRIPT_OFFICER, 132, 50 );
end

procedure Officer17 begin
	armory_access := 1;
	set_map_var(1, armory_access);
	gsay_message( SCRIPT_OFFICER, 133, 50 );
end

procedure Officer18 begin
	gsay_reply( SCRIPT_OFFICER, message_str(SCRIPT_OFFICER, 134) + dude_name + message_str(SCRIPT_OFFICER, 135) );
	giq_option( 4, SCRIPT_OFFICER, 136, Officer20, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 137, Officer21, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 138, Officer19, NEUTRAL_REACTION );
end

procedure Officer19 begin
	gsay_message( SCRIPT_OFFICER, 139, 50 );
end

procedure Officer20 begin
	gsay_message( SCRIPT_OFFICER, 140, 50 );
end

procedure Officer21 begin
	gsay_reply( SCRIPT_OFFICER, 141 );
	giq_option( 5, SCRIPT_OFFICER, 142, Officer22, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 143, Officer21a, NEUTRAL_REACTION );
end

procedure Officer21a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Officer23;
	end
	else begin
		call Officer24;
	end
end

procedure Officer22 begin
	gsay_reply( SCRIPT_OFFICER, 144 );
	giq_option( 5, SCRIPT_OFFICER, 145, OfficerEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 146, OfficerCombat, BAD_REACTION );
end

procedure Officer23 begin
	gsay_message( SCRIPT_OFFICER, 147, 50 );
end

procedure Officer24 begin
	gsay_message( SCRIPT_OFFICER, 148, 50 );
end

procedure Officer25 begin
	gsay_message( SCRIPT_OFFICER, 149, 50 );
end

procedure Officer26 begin
	gsay_message( SCRIPT_OFFICER, 150, 50 );
end

procedure Officer27 begin
	gsay_message( SCRIPT_OFFICER, 151, 50 );
end

procedure Officer28 begin
	gsay_reply( SCRIPT_OFFICER, 152 );
	giq_option( 4, SCRIPT_OFFICER, 153, Officer30, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 154, Officer31, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 155, Officer29, NEUTRAL_REACTION );
end

procedure Officer29 begin
	gsay_message( SCRIPT_OFFICER, 156, 50 );
end

procedure Officer30 begin
	gsay_message( SCRIPT_OFFICER, 157, 50 );
end

procedure Officer31 begin
	gsay_message( SCRIPT_OFFICER, 158, 50 );
end

procedure OfficerCombat begin
	BigDownReact
	tmp_hostile := 1;
end

procedure OfficerEnd begin
end

procedure PickDeadBodyType begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end
