#include "..\headers\define.h"

procedure start;
procedure description_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;

variable test;


procedure start begin
end

procedure description_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_VCONDOOR, 100));
end

procedure map_enter_p_proc begin
	obj_lock(self_obj);
end

procedure use_p_proc begin
	if (obj_is_locked(self_obj)) then begin
		script_overrides;
		display_msg(message_str(SCRIPT_VCONDOOR, 101));
	end
end

procedure use_obj_on_p_proc begin
	if (obj_being_used_with == 77) then begin
		script_overrides;
		if (not(obj_is_locked(self_obj))) then begin
			display_msg(message_str(SCRIPT_VCONDOOR, 104));
		end
		else begin
			test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0);
			if (is_success(test)) then begin
				display_msg(message_str(SCRIPT_VCONDOOR, 102));
				obj_unlock(self_obj);
			end
			else begin
				if (is_critical(test)) then begin
					display_msg(message_str(SCRIPT_VCONDOOR, 103));
					jam_lock(self_obj);
				end
				else begin
					display_msg(message_str(SCRIPT_VCONDOOR, 106));
				end
			end
		end
	end
end

procedure use_skill_on_p_proc begin
	if (action_being_used == SKILL_LOCKPICK) then begin
		script_overrides;
		if (not(obj_is_locked(self_obj))) then begin
			display_msg(message_str(SCRIPT_VCONDOOR, 104));
		end
		else begin
			test := roll_vs_skill(source_obj, action_being_used, -20);
			if (is_success(test)) then begin
				display_msg(message_str(SCRIPT_VCONDOOR, 102));
				obj_unlock(self_obj);
			end
			else begin
				if (is_critical(test)) then begin
					display_msg(message_str(SCRIPT_VCONDOOR, 103));
					jam_lock(self_obj);
				end
				else begin
					display_msg(message_str(SCRIPT_VCONDOOR, 105));
				end
			end
		end
	end
end

