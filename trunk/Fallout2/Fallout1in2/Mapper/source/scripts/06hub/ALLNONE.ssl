/*

	Hub - Allnone

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_ALLNONE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */

procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure look_at_p_proc;

procedure Merchant00;
procedure Merchant01;
procedure Merchant02;
procedure Merchant03;
procedure Merchant04;
procedure Merchant05;
procedure Get_Stuff;
procedure Put_Stuff;

variable tmp_hostile;
variable Only_Once := 1;

variable tmp_box;
variable killed := 0;

import variable Mitch_Box_Ptr;

#define LVAR_Restock_Timer (4)
#define LVAR_Give_Caps     (5)

procedure start begin
	if Only_Once then begin
		Only_Once := 0;
		set_self_team( TEAM_HUB_SKAG );
		set_self_ai( AI_MERCHANT );
	end
end

procedure combat begin
	tmp_hostile := 1;
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
end

procedure pickup_p_proc begin
	if (source_obj == dude_obj) then begin
		tmp_hostile := 1;
	end
end

procedure talk_p_proc begin
	variable LVar0 := 0;
	dude_look_at_self;
	call Get_Stuff;
	get_reaction
	if ((((GAME_TIME_IN_DAYS) - local_var(LVAR_Restock_Timer)) >= 1) or (local_var(LVAR_Restock_Timer) == 0)) then begin
		set_local_var(LVAR_Restock_Timer, GAME_TIME_IN_DAYS);
		set_local_var(LVAR_Give_Caps, 1000 + random(0, 500));
		self_caps_adjust( local_var(LVAR_Give_Caps) );
	end
	else begin
		self_caps_adjust( local_var(LVAR_Give_Caps) );
	end

	start_dialog_at_node(Merchant00);

	set_local_var(LVAR_Give_Caps, self_caps);
	self_caps_adjust( -1 * local_var(LVAR_Give_Caps) );
	call Put_Stuff;
end

procedure destroy_p_proc begin
   killed := 1;
	move_obj_inven_to_obj(Mitch_Box_Ptr, self_obj);
	inc_good_critter
end

procedure damage_p_proc begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_HUB, 1 );
	end
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(mstr(100));
end

procedure Merchant00 begin
	gsay_reply( SCRIPT_ALLNONE, 101 );
	giq_option( 4, SCRIPT_ALLNONE, 102, Merchant01, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_ALLNONE, 103, Merchant02, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_ALLNONE, 104, Merchant03, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_ALLNONE, 105, Merchant04, NEUTRAL_REACTION );
end

procedure Merchant01 begin
	gsay_message( SCRIPT_ALLNONE, 106, 50 );
	gdialog_mod_barter(0);
	call Merchant05;
end

procedure Merchant02 begin
	gsay_message( SCRIPT_ALLNONE, 107, 50 );
	gdialog_mod_barter(0);
	call Merchant05;
end

procedure Merchant03 begin
end

procedure Merchant04 begin
	gsay_message( SCRIPT_ALLNONE, 108, 50 );
end

procedure Merchant05 begin
	gsay_message( SCRIPT_ALLNONE, 109, 50 );
end

procedure Get_Stuff begin
variable wield_pid;

   /*if (killed == 0) then begin
      // Create a temp box to save Mitch "real" inventory
      tmp_box := create_object( PID_CONTAINER_WOOD_CRATE, 0, 0 );
      move_obj_inven_to_obj(self_obj, tmp_box);
   end*/

   // Move the barter inventory to Jacob
	move_obj_inven_to_obj(Mitch_Box_Ptr, self_obj);
end

procedure Put_Stuff begin
variable wield_pid;

   // Move the barter inventory back into the trade box
	move_obj_inven_to_obj(self_obj, Mitch_Box_Ptr);

   // Now give his inventory back, get rid of the temp box and wield the real weapon
   /*move_obj_inven_to_obj(tmp_box, self_obj);
   destroy_object(tmp_box);*/
end
