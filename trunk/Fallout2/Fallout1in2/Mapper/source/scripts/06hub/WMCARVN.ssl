/*

	Hub - Water Merchants caravan guy

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_WMCARVN
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "..\headers\command.h"
#include "..\headers\modreact.h"
#include "..\headers\caravan.h"

/* Standard Script Procedures */
procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure RecalcDate;
procedure RecalcDateString;
procedure damage_p_proc;

procedure WMDriver00;
procedure WMDriver01;
procedure WMDriver02;
procedure WMDriver03;
procedure WMDriver04;
procedure WMDriver04a;
procedure WMDriver05;
procedure WMDriver06;
procedure WMDriver07;
procedure WMDriver08;
procedure WMDriver10;
procedure WMDriver10a;
procedure WMDriver11;
procedure WMDriver12;
procedure WMDriver13;
procedure WMDriver14;
procedure WMDriver15;
procedure WMDriver17;
procedure WMDriver18;
procedure WMDriver19;
procedure WMDriver20;
procedure WMDriver21a;
procedure WMDriver21b;
procedure WMDriver27;
procedure WMDriver28;
procedure WMDriver29;
procedure WMDriver30;
procedure WMDriver31;
procedure WMDriver32;
procedure WMDriver33;
procedure WMDriver34;
procedure WMDriver35;
procedure WMDriver37;
procedure WMDriver38;
procedure WMDriver39;
procedure WMDriver40;
procedure WMDriver41;
procedure WMDriver42;
procedure WMDriverEnd;

procedure start_caravan;

variable tmp_hostile;
variable Only_Once := 1;
variable DayString := "None";
variable Roll_Encounter;

#define CURRENT_CARAVAN         		(GVAR_WATER_CARAVAN)
#define CARAVAN_START_SETTINGS 	   set_global_var(CURRENT_CARAVAN,HUB_CARAVAN_ON_CARAVAN); 							\
												set_global_var(GVAR_CARAVAN_START,CARAVAN_HUB); 									\
												set_caravan_style_water;																	\
											   set_caravan_status(CARAVAN_STATUS_ON_JOB); 											\
											   set_caravan_encounters(1); /* Water Merchants only have 1 encounter max!*/ \
												set_caravan_masters(1); 																	\
												set_caravan_drivers(0); /* Fo1 has no wagon drivers!*/ 							\
											   set_caravan_guards(2); 																		\
											   set_caravan_carts(2); 																		\
											   set_caravan_brahmin(caravan_total_carts);

procedure start begin
	if Only_Once then begin
		Only_Once := 0;
		set_self_team( TEAM_HUB_WATER_MERCHANTS );
		set_self_ai( AI_MERCHANT );
	end
end

procedure combat begin
	tmp_hostile := 1;
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
end

procedure pickup_p_proc begin
	call WMDriver10;
end

procedure talk_p_proc begin
	variable LVar0 := 0;
	dude_look_at_self;
	get_reaction
	if (local_var(10) == 1) then begin
		if (local_var(7) < (GAME_TIME_IN_YEARS)) then begin
			set_local_var(10, 0);
		end
		else if ((local_var(6) < get_month) or (local_var(6) == 12) and (get_month == 1) and ((local_var(6) != 1) or (get_month != 12))) then begin
			set_local_var(10, 0);
		end
		else if ((local_var(5) < get_day) and ((local_var(6) != 1) or (get_month != 12))) then begin
			set_local_var(10, 0);
		end
	end
	call RecalcDate;

	LVar0 := local_var(5);
	if (local_var(8) > 0) then begin
		call WMDriver14;
	end
	else if (map_var(2) == 0) then begin
		call WMDriver15;
	end
	else if (global_var( GVAR_WATER_JOB ) == 3) then begin
		BottomReact
		start_dialog_at_node(WMDriver37);
	end
	else if (global_var( GVAR_WATER_JOB ) == 5) then begin
		start_dialog_at_node(WMDriver19);
	end
	else if (global_var( GVAR_WATER_JOB ) == 4) then begin
		TopReact
		start_dialog_at_node(WMDriver27);
	end
	else if (map_var(1) == 0) then begin
		call WMDriver00;
	end
	else if ((map_var(1) == 1) and (local_var(10) == 0)) then begin
		if (local_var(9) == 0) then begin
			start_dialog_at_node(WMDriver01);
		end
		else begin
			start_dialog_at_node(WMDriver03);
		end
	end
	else if ((local_var(10) == 1) and (LVar0 == get_day)) then begin
		start_dialog_at_node(WMDriver28);
	end
	else if ((local_var(10) == 1) and (LVar0 != get_day)) then begin
		start_dialog_at_node(WMDriver29);
	end
	set_local_var(4, 1);
end

procedure destroy_p_proc begin
	inc_good_critter
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_WMCARVN, 100));
end

procedure RecalcDate begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := get_day;
	if ((LVar0 > 1) and (LVar0 <= 5)) then begin
		LVar0 := 5;
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	else if ((LVar0 > 5) and (LVar0 <= 10)) then begin
		LVar0 := 10;
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	else if ((LVar0 > 10) and (LVar0 <= 15)) then begin
		LVar0 := 15;
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	else if ((LVar0 > 15) and (LVar0 <= 20)) then begin
		LVar0 := 20;
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	else if ((LVar0 > 20) and (LVar0 <= 25)) then begin
		LVar0 := 25;
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	else if (LVar0 > 25) then begin
		LVar0 := 1;
		LVar1 := get_month;
		if (LVar1 == 12) then begin
			LVar1 := 1;
			LVar2 := (GAME_TIME_IN_YEARS) + 1;
		end
		else begin
			LVar1 := LVar1 + 1;
			LVar2 := GAME_TIME_IN_YEARS;
		end
	end
	else if (LVar0 == 1) then begin
		LVar1 := get_month;
		LVar2 := GAME_TIME_IN_YEARS;
	end
	set_local_var(5, LVar0);
	set_local_var(6, LVar1);
	set_local_var(7, LVar2);
end

procedure RecalcDateString begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	call RecalcDate;
	LVar0 := local_var(6);
	LVar1 := local_var(5);
	if (LVar0 == 1) then begin
		DayString := message_str(SCRIPT_WMCARVN, 204);
	end
	else if (LVar0 == 2) then begin
		DayString := message_str(SCRIPT_WMCARVN, 205);
	end
	else if (LVar0 == 3) then begin
		DayString := message_str(SCRIPT_WMCARVN, 206);
	end
	else if (LVar0 == 4) then begin
		DayString := message_str(SCRIPT_WMCARVN, 207);
	end
	else if (LVar0 == 5) then begin
		DayString := message_str(SCRIPT_WMCARVN, 208);
	end
	else if (LVar0 == 6) then begin
		DayString := message_str(SCRIPT_WMCARVN, 209);
	end
	else if (LVar0 == 7) then begin
		DayString := message_str(SCRIPT_WMCARVN, 210);
	end
	else if (LVar0 == 8) then begin
		DayString := message_str(SCRIPT_WMCARVN, 211);
	end
	else if (LVar0 == 9) then begin
		DayString := message_str(SCRIPT_WMCARVN, 212);
	end
	else if (LVar0 == 10) then begin
		DayString := message_str(SCRIPT_WMCARVN, 213);
	end
	else if (LVar0 == 11) then begin
		DayString := message_str(SCRIPT_WMCARVN, 214);
	end
	else if (LVar0 == 12) then begin
		DayString := message_str(SCRIPT_WMCARVN, 215);
	end

	if (LVar1 == 1) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 197);
	end
	else if (LVar1 == 5) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 198);
	end
	else if (LVar1 == 10) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 199);
	end
	else if (LVar1 == 15) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 200);
	end
	else if (LVar1 == 20) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 201);
	end
	else if (LVar1 == 25) then begin
		DayString := DayString + message_str(SCRIPT_WMCARVN, 202);
	end
end

procedure damage_p_proc begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_HUB, 1 );
	end
end

procedure WMDriver00 begin
	if (local_var(4) == 0) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 101), FLOAT_MSG_RED );
		set_local_var(4, 1);
	end
	else begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 102), FLOAT_MSG_RED );
	end
end

procedure WMDriver01 begin
	if (global_var( GVAR_WORLDMAPLIST_JUNKTOWN ) == 0) then
		set_global_var( GVAR_WORLDMAPLIST_JUNKTOWN, 1 );
	mark_on_map(AREA_JUNKTOWN)

	if (global_var( GVAR_WORLDMAPLIST_BONEYARD ) == 0) then
		set_global_var( GVAR_WORLDMAPLIST_BONEYARD, 1 );
	mark_on_map(AREA_BONEYARD)

	if not(boneyard_invaded) then begin
		gsay_reply( SCRIPT_WMCARVN, 103 );
	end
	else begin
		gsay_reply( SCRIPT_WMCARVN, 300 );
	end
	giq_option( 4, SCRIPT_WMCARVN, 104, WMDriver02, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 105, WMDriver02, NEUTRAL_REACTION );
end

procedure WMDriver02 begin
	variable LVar0 := 0;
	call RecalcDateString;
	LVar0 := local_var(5);
	if (LVar0 == get_day) then begin
		gsay_reply( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 106) + message_str(SCRIPT_WMCARVN, 107) );
	end
	else begin
		gsay_reply( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 106) + message_str(SCRIPT_WMCARVN, 108) + DayString + message_str(SCRIPT_WMCARVN, 111) );
	end
	call WMDriver04;
end

procedure WMDriver03 begin
	variable LVar0 := 0;
	if (local_var(1) != 1) then begin
		call RecalcDateString;
		LVar0 := local_var(5);
		if (LVar0 == get_day) then begin
			gsay_reply( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 107) );
		end
		else begin
			gsay_reply( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 108) + DayString + message_str(SCRIPT_WMCARVN, 111) );
		end
		call WMDriver04;
	end
	else begin
		gsay_reply( SCRIPT_WMCARVN, 112 );
		call WMDriver04;
	end
end

procedure WMDriver04 begin
	giq_option( 4, SCRIPT_WMCARVN, 113, WMDriver04a, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 114, WMDriver05, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 115, WMDriver06, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 116, WMDriver07, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 117, WMDriver07, NEUTRAL_REACTION );
end

procedure WMDriver04a begin
	variable LVar0 := 0;
	set_local_var(10, 1);
	call RecalcDate;
	LVar0 := local_var(5);
	if (LVar0 == get_day) then begin
		call WMDriver17;
	end
	else begin
		call WMDriver18;
	end
end

procedure WMDriver05 begin
	set_local_var(10, 0);
	gsay_message( SCRIPT_WMCARVN, 118, 50 );
end

procedure WMDriver06 begin
	set_local_var(10, 0);
	gsay_message( SCRIPT_WMCARVN, 120, 50 );
end

procedure WMDriver07 begin
	gsay_message( SCRIPT_WMCARVN, 121, 50 );
end

procedure WMDriver08 begin
	gsay_message( SCRIPT_WMCARVN, 123, 50 );
end

procedure WMDriver10 begin
	if (local_var(8) == 0) then begin
		set_local_var(8, 1);
		set_map_var(2, 0);
		gsay_reply( SCRIPT_WMCARVN, 125 );
		giq_option( 4, SCRIPT_WMCARVN, 126, WMDriver08, NEUTRAL_REACTION );
		giq_option( 4, SCRIPT_WMCARVN, 127, WMDriver10a, NEUTRAL_REACTION );
		giq_option( 4, SCRIPT_WMCARVN, 128, WMDriver31, BAD_REACTION );
		giq_option( -3, SCRIPT_WMCARVN, 130, WMDriver31, BAD_REACTION );
	end
	else begin
		gsay_message( SCRIPT_WMCARVN, 131, 51 );
		call combat;
	end
end

procedure WMDriver10a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20)) == 1) then begin
		call WMDriver11;
	end
	else begin
		call WMDriver12;
	end
end

procedure WMDriver11 begin
	set_map_var(1, 0);
	set_map_var(2, 0);
	gsay_message( SCRIPT_WMCARVN, 132, 50 );
end

procedure WMDriver12 begin
	gsay_message( SCRIPT_WMCARVN, 133, 51 );
	call combat;
end

procedure WMDriver13 begin
	float_msg( self_obj, message_str(SCRIPT_WMCARVN, 137), FLOAT_MSG_RED );
end

procedure WMDriver14 begin
	if (local_var(8) > 0) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 138), FLOAT_MSG_RED );
	end
	else begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 139), FLOAT_MSG_RED );
		call WMDriver31;
	end
end

procedure WMDriver15 begin
	variable LVar0 := 0;
	LVar0 := random(1, 4);
	if (LVar0 == 1) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 140), FLOAT_MSG_RED );
	end
	else if (LVar0 == 2) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 141), FLOAT_MSG_RED );
	end
	else if (LVar0 == 3) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 142), FLOAT_MSG_RED );
	end
	else if (LVar0 == 4) then begin
		float_msg( self_obj, message_str(SCRIPT_WMCARVN, 143), FLOAT_MSG_RED );
	end
end

procedure WMDriver17 begin
	gsay_reply( SCRIPT_WMCARVN, 145 );
	call WMDriver33;
	call WMDriver20;
end

procedure WMDriver18 begin
	call RecalcDateString;
	gsay_reply( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 146) + DayString + message_str(SCRIPT_WMCARVN, 153) );
	giq_option( 4, SCRIPT_WMCARVN, 154, WMDriver30, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 155, WMDriver34, NEUTRAL_REACTION );
end

procedure WMDriver19 begin
	set_map_var(2, 0);
	set_global_var( GVAR_WATER_JOB, 6 );
	gsay_message( SCRIPT_WMCARVN, 156, 51 );
end

procedure WMDriver20 begin
	giq_option( 4, SCRIPT_WMCARVN, 157, WMDriver21a, NEUTRAL_REACTION );
	if not(boneyard_invaded) then begin
		giq_option( 4, SCRIPT_WMCARVN, 158, WMDriver21b, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_WMCARVN, 159, WMDriver34, NEUTRAL_REACTION );
end

// Junktown
procedure WMDriver21a begin
	variable LVar0 := 0;
	set_global_var( GVAR_WATER_MERCHANTS_STATUS, 1 );
	LVar0 := random(1, 7);
	if (LVar0 == 1) then begin
		gsay_message( SCRIPT_WMCARVN, 160, 50 );
	end
	else if (LVar0 == 2) then begin
		gsay_message( SCRIPT_WMCARVN, 161, 50 );
	end
	else if (LVar0 == 3) then begin
		gsay_message( SCRIPT_WMCARVN, 162, 50 );
	end
	else if (LVar0 == 4) then begin
		gsay_message( SCRIPT_WMCARVN, 163, 50 );
	end
	else if (LVar0 == 5) then begin
		gsay_message( SCRIPT_WMCARVN, 167, 50 );
	end
	else if (LVar0 == 6) then begin
		gsay_message( SCRIPT_WMCARVN, 168, 50 );
	end
	else if (LVar0 == 7) then begin
		gsay_message( SCRIPT_WMCARVN, 169, 50 );
	end

   CARAVAN_START_SETTINGS
   set_caravan_end(CARAVAN_JUNKTOWN);

	LVar0 := do_check(dude_obj, STAT_lu, -2);
	if (is_success(LVar0)) then begin
		game_time_advance(TRAVEL_TIME_HUB_JNK + (random(60,600)*ONE_GAME_MINUTE));
		debug("no encounter!! yay!");

		set_global_var( GVAR_WATER_MERCHANTS_STATUS, 2 );
		set_global_var( GVAR_CVAN_DRIVER, 1 );
		set_global_var( GVAR_CVAN_GUARD, 2 );
		load_map(MAP_JUNKENT, 1);
	end
	else begin
		debug("run encounter!");
		Roll_Encounter := random(0,100);
		if (Roll_Encounter < 10) then begin
			debug("oh no, double trouble! Roll: " + Roll_Encounter);
			set_caravan_encounters(2);
		end
		call start_caravan;
	end
end

// Boneyard
procedure WMDriver21b begin
	variable LVar0 := 0;
	set_global_var( GVAR_WATER_MERCHANTS_STATUS, 1 );
	LVar0 := random(1, 7);
	if (LVar0 == 1) then begin
		gsay_message( SCRIPT_WMCARVN, 160, 50 );
	end
	else if (LVar0 == 2) then begin
		gsay_message( SCRIPT_WMCARVN, 161, 50 );
	end
	else if (LVar0 == 3) then begin
		gsay_message( SCRIPT_WMCARVN, 162, 50 );
	end
	else if (LVar0 == 4) then begin
		gsay_message( SCRIPT_WMCARVN, 163, 50 );
	end
	else if (LVar0 == 5) then begin
		gsay_message( SCRIPT_WMCARVN, 164, 50 );
	end
	else if (LVar0 == 6) then begin
		gsay_message( SCRIPT_WMCARVN, 165, 50 );
	end
	else if (LVar0 == 7) then begin
		gsay_message( SCRIPT_WMCARVN, 166, 50 );
	end

   CARAVAN_START_SETTINGS
   set_caravan_end(CARAVAN_BONEYARD);

	LVar0 := do_check(dude_obj, STAT_lu, -2);
	if (is_success(LVar0)) then begin
		game_time_advance(TRAVEL_TIME_HUB_ADY + (random(60,600)*ONE_GAME_MINUTE));

		set_global_var( GVAR_WATER_MERCHANTS_STATUS, 2 );
		set_global_var( GVAR_CVAN_DRIVER, 1 );
		set_global_var( GVAR_CVAN_GUARD, 2 );
		load_map(MAP_LAADYTUM, 1);
	end
	else begin
		Roll_Encounter := random(0,100);
		if (Roll_Encounter < 5) then
			set_caravan_encounters(2);
		call start_caravan;
	end
end

procedure start_caravan begin
   variable Caravan_Carts;
   variable Caravan_Guards;

   if (caravan_end == CARAVAN_JUNKTOWN) then begin
      load_map(MAP_MNTCRVN1,1);
   end
   else if (caravan_end == CARAVAN_BONEYARD) then begin
   	load_map(MAP_DESCRVN1,1);
   end
end

procedure WMDriver27 begin
	gsay_reply( SCRIPT_WMCARVN, 185 );
	giq_option( 4, SCRIPT_WMCARVN, 186, WMDriver04a, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 187, WMDriver05, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 188, WMDriver06, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 189, WMDriver07, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 190, WMDriver07, NEUTRAL_REACTION );
end

procedure WMDriver28 begin
	gsay_reply( SCRIPT_WMCARVN, 191 );
	giq_option( 4, SCRIPT_WMCARVN, 192, WMDriver17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 193, WMDriver35, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 194, WMDriver07, NEUTRAL_REACTION );
end

procedure WMDriver29 begin
	variable LVar0 := 0;
	call RecalcDateString;
	LVar0 := local_var(5);
	gsay_message( SCRIPT_WMCARVN, message_str(SCRIPT_WMCARVN, 196) + DayString + message_str(SCRIPT_WMCARVN, 203) + message_str(SCRIPT_WMCARVN, 195), 50 );
end

procedure WMDriver30 begin
	set_local_var(10, 1);
end

procedure WMDriver31 begin
	call combat;
end

procedure WMDriver32 begin
end

procedure WMDriver33 begin
	variable LVar0 := 0;
	set_local_var(10, 0);
	set_global_var( GVAR_WATER_JOB, 1 );
	LVar0 := local_var(9);
	set_local_var(9, LVar0 + 1);
end

procedure WMDriver34 begin
	set_local_var(10, 0);
end

procedure WMDriver35 begin
end

procedure WMDriver37 begin
	set_map_var(2, 0);
	set_global_var( GVAR_WATER_JOB, 6 );
	gsay_reply( SCRIPT_WMCARVN, 170 );
	giq_option( 4, SCRIPT_WMCARVN, 171, WMDriver38, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 172, WMDriverEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 173, WMDriver39, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 174, WMDriver40, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_WMCARVN, 175, WMDriverEnd, NEUTRAL_REACTION );
end

procedure WMDriver38 begin
	gsay_reply( SCRIPT_FGTCARVN, 177 );
	giq_option( 4, SCRIPT_WMCARVN, 178, WMDriverEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 179, combat, BAD_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 180, WMDriver41, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_WMCARVN, 181, WMDriver42, NEUTRAL_REACTION );
end

procedure WMDriver39 begin
	gsay_message( SCRIPT_WMCARVN, 176, 50 );
end

procedure WMDriver40 begin
	gsay_message( SCRIPT_WMCARVN, 182, 50 );
end

procedure WMDriver41 begin
	gsay_message( SCRIPT_WMCARVN, 183, 50 );
end

procedure WMDriver42 begin
	set_map_var(2, 1);
	set_global_var( GVAR_WATER_JOB, 1 );
	gsay_message( SCRIPT_WMCARVN, 184, 50 );
end

procedure WMDriverEnd begin
end
