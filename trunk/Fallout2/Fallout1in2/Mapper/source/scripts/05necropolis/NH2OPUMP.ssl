#include "..\headers\define.h"
#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_NH2OPUMP

#include "..\headers\command.h"

procedure start;
procedure look_at_p_proc;
procedure use_skill_on_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;

procedure search;
procedure skills;

variable test;
variable test1;
variable test2;
variable test3;

procedure start begin
end

procedure map_enter_p_proc begin
   if necropolis_wpump_fixed then begin
   	reg_anim_begin();
   	reg_anim_animate_forever(self_obj, 0);
   	reg_anim_end();
   end
end

procedure map_update_p_proc begin
   if necropolis_wpump_fixed and (combat_is_initialized == 0) then begin
   	reg_anim_begin();
   	reg_anim_animate_forever(self_obj, 0);
   	reg_anim_end();
   end
   else begin
   	self_set_frame(0);
   	reg_anim_clear(self_obj);
   end
end

procedure look_at_p_proc begin
	script_overrides;
	call search;
end

procedure use_skill_on_p_proc begin
	script_overrides;
	call skills;
end

procedure use_p_proc begin
	if not(necropolis_wpump_fixed) then begin
		script_overrides;
		display_msg(mstr(112));
	end
end

procedure use_obj_on_p_proc begin
	if (obj_pid(obj_being_used_with) == PID_PUMP_PARTS) then begin
		script_overrides;
		test2 := roll_vs_skill(dude_obj, SKILL_REPAIR, -5);
		if (is_success(test2)) then begin
			display_msg(mstr(114));

			rm_obj_from_inven(dude_obj, obj_being_used_with);
			add_obj_to_inven(self_obj, obj_being_used_with);

			set_waterpump_fixed;
			set_global_var( GVAR_HUB_FILLER_30, 0 );
			set_global_var( GVAR_PLAYER_REPUTATION, check_general_rep + REP_BONUS_WATER_PUMP_FIXED );
			give_exp_points(EXP_WATER_PUMP_FIXED);

			display_msg(mstr(118));
		end
		else begin
			if (is_critical(test2)) then begin
				display_msg(mstr(115));

				game_time_advance(game_ticks(240));
				rm_obj_from_inven(dude_obj, obj_being_used_with);
				critter_dmg(dude_obj, 1, 0 bwor 256);
			end
			else begin
				display_msg(mstr(116));

				game_time_advance(game_ticks(180));
			end
		end
	end
	else begin
		display_msg(message_str(SCRIPT_NH2OPUMP, 117));
	end
end

procedure search begin
	test := do_check(dude_obj, STAT_iq, 0);

	if (necropolis_wpump_fixed) then begin
		display_msg(message_str(SCRIPT_NH2OPUMP, 100));
	end
	else begin

		if (is_success(test)) then begin
			if (is_critical(test)) then begin
				display_msg(message_str(SCRIPT_NH2OPUMP, 101));
			end
			else begin
				display_msg(message_str(SCRIPT_NH2OPUMP, 102));
			end
		end
		else begin
			display_msg(message_str(SCRIPT_NH2OPUMP, 103));
		end

	end
end

procedure skills begin
	test1 := roll_vs_skill(dude_obj, SKILL_SCIENCE, -10);
	test2 := roll_vs_skill(dude_obj, SKILL_REPAIR, 0);
	test3 := roll_vs_skill(dude_obj, SKILL_SCIENCE, -20);

	if (necropolis_wpump_fixed) then begin
		display_msg(message_str(SCRIPT_NH2OPUMP, 100));
	end
	else begin

		if (action_being_used == SKILL_REPAIR) then begin
			if (is_success(test2)) then begin
				display_msg(message_str(SCRIPT_NH2OPUMP, 108));
			end
			else begin
				if (is_critical(test2)) then begin
					display_msg(message_str(SCRIPT_NH2OPUMP, 107));
				end
				else begin
					display_msg(message_str(SCRIPT_NH2OPUMP, 109));
				end
			end
		end
		else begin
			if (action_being_used == SKILL_SCIENCE) then begin
				if (is_success(test3)) then begin
					display_msg(message_str(SCRIPT_NH2OPUMP, 111));
				end
				else begin
					if (is_critical(test3)) then begin
						display_msg(message_str(SCRIPT_NH2OPUMP, 110));
					end
					else begin
						display_msg(message_str(SCRIPT_NH2OPUMP, 112));
					end
				end
			end
			else begin
				display_msg(message_str(SCRIPT_NH2OPUMP, 113));
			end
		end

	end
end



