/*

	Cathedral - BEHOLD, THE MASTER!

			JOIN!
				DIE!
		JOIN!
						DIE!

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_MASTER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure look_at_p_proc;
procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure damage_p_proc;
procedure combat_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure critter_p_proc;
procedure use_skill_on_p_proc;

procedure gameover;
procedure giveme;

procedure master00;
procedure master01;
procedure master02;
procedure master03;
procedure master04;
procedure master05;
procedure master06;
procedure master06_1;
procedure master07;
procedure master08;
procedure master08_1;
procedure master09;
procedure master10;
procedure master11;
procedure master11_1;
procedure master12;
procedure master13;
procedure master14;
procedure master16;
procedure master17;
procedure master17_1;
procedure master18;
procedure master19;
procedure master20;
procedure master21;
procedure master21_1;
procedure master22;
procedure master23;
procedure master24;
procedure master25;
procedure master26;
procedure master27;
procedure master28;
procedure master29;
procedure master30;
procedure master31;
procedure master32;
procedure master33;
procedure master34;
procedure master35;
procedure master36;
procedure master37;
procedure master38;
procedure master38_1;
procedure master38_2;
procedure master39;
procedure master40;
procedure master41;
procedure master42;
procedure master43;
procedure master44;
procedure master45;
procedure master46;
procedure master47;
procedure master200;
procedure master201;
procedure master202;
procedure master203;
procedure mastercbt;
procedure masterend;

variable MALE;
variable tmp_hostile;
variable DISARM;
variable Only_Once := 1;
variable LIEUTENANTS;
variable everyother := 1;
variable wimpyother := 1;
variable so_long;

import variable Master_Has_Armed;
import variable Master_Ptr;

variable leave;

procedure start begin
	self_stand;
	if Only_Once then begin
		Only_Once := 0;
		Master_Ptr := self_obj;
		set_self_team(TEAM_MASTER_LAIR);
		set_self_ai(AI_MASTER);
	end
end

procedure timed_event_p_proc begin
	if (global_var( GVAR_MORPHEUS_DELIVERS_PLAYER ) == 2) then begin
		set_global_var( GVAR_MORPHEUS_DELIVERS_PLAYER, 3 );
		dialogue_system_enter;
	end
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(mstr(100));
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		set_local_var(5, 1);
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (local_var(5)) then begin
			if (self_can_see_dude) then begin
				tmp_hostile := 1;
			end
		end
	end
	if (global_var( GVAR_MORPHEUS_DELIVERS_PLAYER ) == 2) then begin
		if (tile_distance_objs(self_obj, dude_obj) > 10) then begin
			set_global_var( GVAR_MORPHEUS_DELIVERS_PLAYER, 3 );
			dialogue_system_enter;
		end
	end
	else if (global_var( GVAR_MORPHEUS_DELIVERS_PLAYER ) == 1) then begin
	end
	else begin
		if (leave != 1) then begin
			if (tile_distance_objs(self_obj, dude_obj) < 10) and (Master_Has_Armed != 1) then begin
				dialogue_system_enter;
			end
		end
	end
end

procedure gameover begin
	so_long := 1;
end

procedure giveme begin
	if (global_var( GVAR_VREEDISK_HOLODISK_USED ) == 1) or (global_var( GVAR_VREE_DISK_TRACKER ) == 2) or (global_var( GVAR_VREE_GIVEN_DUDE_AUTOPSY ) > 0) then begin// USED_DISK, DISK_REBUILT, DISK_GIVEN
		set_global_var( GVAR_VREE_GIVEN_DUDE_AUTOPSY, 2 );
		call master14;
	end
	else begin
		call master13;
	end
end

procedure damage_p_proc begin
	if (source_obj == dude_obj) then begin
		set_local_var(5, 1);
		set_local_var(6, 1);
		tmp_hostile := 1;
		if not(combat_is_initialized) then begin
			attack(source_obj);
		end
	end
end

procedure combat_p_proc begin
	if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
		variable Item := 0;
		if (everyother == 1) then begin
			everyother := 0;
			if (combat_difficulty == 0) then begin
				if (wimpyother == 1) then begin
					wimpyother := 0;
					set_map_var(4, 1);
				end
				else begin
					wimpyother := 1;
				end
			end
			else begin
				set_map_var(4, 1);
			end
		end
		else begin
			everyother := 1;
		end
		if (self_item_count( PID_MICRO_FUSION_CELL ) <= 2) then begin// MFC ammo
			Item := create_object( PID_MICRO_FUSION_CELL, 0, 0 );
			add_mult_objs_to_inven(self_obj, Item, 2);
		end
	end
end

procedure map_enter_p_proc begin
	self_stand;
end

procedure map_update_p_proc begin
	self_stand;
end

procedure destroy_p_proc begin
	set_global_var( GVAR_PREVENT_REVULSION_DAMAGE, 2 );
	set_global_var( GVAR_MASTER_BLOWN, 1 );
	set_global_var( GVAR_QUEST_VAULT13_2_MASTER, 2 );

	inc_inv_evil_crit

	if (global_var( GVAR_VATS_BLOWN ) == 0) then begin
		set_global_var( GVAR_VATS_STATUS, 1 );
	end

	if (global_var( GVAR_COUNTDOWN_TO_DESTRUCTION ) == 0) then begin
		set_global_var( GVAR_COUNTDOWN_TO_DESTRUCTION, (game_time / 10) );
		add_timer_event(dude_obj, 0, 11);// tracks to give countdown timer updates every 5 seconds instead of calls to map_update (which is unreliable)
	end
	rm_timer_event(self_obj);
end

procedure use_skill_on_p_proc begin
	if (action_being_used == SKILL_STEAL) then begin
		script_overrides;
		display_msg(message_str(SCRIPT_GENCHAT, 225));
	end
end

procedure talk_p_proc begin
	if (global_var( GVAR_MASTER_BLOWN ) == 0) then begin
		dude_look_at_self;

		if not(global_var( GVAR_MASTER_ATTACKS )) then begin
			if (global_var( GVAR_MORPHEUS_DELIVERS_PLAYER ) == 2) then begin
				set_global_var( GVAR_MORPHEUS_DELIVERS_PLAYER, 3 );
			end
			get_reaction
			start_gdialog(51, self_obj, 4, 6, BACKGROUND_MASTER);
			gsay_start;
			MALE := dude_is_male;
			if (local_var(5)) then begin
				call master203;
			end
			else begin
				if (local_var(4)) then begin
					if (global_var( GVAR_BOMB_DISARMED )) then begin
						call master46;
					end
					else begin
						if (is_success(do_check(dude_obj, STAT_ch, -1))) then begin
							call master43;
						end
						else begin
							call master44;
						end
					end
				end
				else begin
					set_local_var(4, 1);
					call master00;
				end
			end
			gsay_end;
			end_dialogue;
			if (so_long) then begin
				play_gmovie(DIPEDV_MOVIE);//------ Player is dipped in FEV Vats and becomes a Super Mutant. Oops. --  was 10 before
				play_gmovie(OVERRUN_MOVIE);//------ Vault 13 is invaded by mutants and killed. You lose. -- was 7 before
				signal_end_game;
			end
		end

	end
end

procedure master00 begin
	gsay_reply( SCRIPT_MASTER, 101 );
	NOption( 102, master01, 4 );
	NOption( 103, master04, 6 );
	BOption( 104, master203, 4 );//<-- Combat trigger [mastercbt]
	NOption( 105, master38, 5 );
	NOption( 106, master42, -3 );
end

procedure master01 begin
	gsay_reply( SCRIPT_MASTER, 107 );
	NOption( 108, master02, 4 );
	NOption( 109, gameover, 4 );
end

procedure master02 begin
	gsay_reply( SCRIPT_MASTER, 110 );
	BOption( 111, master03, 4 );
	NOption( 112, gameover, 4 );
end

//	Combat trigger [mastercbt]
procedure master03 begin
	gsay_message( SCRIPT_MASTER, 113, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master04 begin
	gsay_reply( SCRIPT_MASTER, 114 );
	NOption( 115, master36, 6 );
	NOption( 116, master05, 5 );
end

procedure master05 begin
	gsay_reply( SCRIPT_MASTER, 117 );
	NOption( 118, master06, 4 );
end

procedure master06 begin
	gsay_reply( SCRIPT_MASTER, 119 );
	NOption( 120, master06_1, 6 );
	BOption( 121, master27, 4 );
end

procedure master06_1 begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call master07;
	end
	else begin
		call master35;
	end
end

procedure master07 begin
	gsay_reply( SCRIPT_MASTER, 122 );
	NOption( 123, master08, 7 );
	BOption( 124, master33, 6 );
	NOption( 125, master31, 5 );
end

procedure master08
begin
	gsay_reply( SCRIPT_MASTER, 126 );
	NOption( 127, master08_1, 5 );
	GOption( 128, master01, 4 );
	BOption( 129, master203, 4 );//<-- Combat trigger [mastercbt]
end

procedure master08_1
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call master09;
	end
	else begin
		call master30;
	end
end

procedure master09
begin
	gsay_reply( SCRIPT_MASTER, 130 );
	BOption( 131, master203, 5 );//	<-- Combat trigger [mastercbt]
	NOption( 132, master10, 6 );
	if (global_var( GVAR_VREEDISK_HOLODISK_USED ) == 1) or (global_var( GVAR_VREE_DISK_TRACKER ) == 2) or (global_var( GVAR_VREE_GIVEN_DUDE_AUTOPSY ) > 0) then begin// USED_DISK, DISK_REBUILT, DISK_GIVEN
		NOption( 133, master11, 7 );
	end
end

procedure master10//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 134, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master11
begin
	gsay_reply( SCRIPT_MASTER, 135 );
	NOption( 136, master11_1, 6 );
	NOption( 137, master20, 6 );
	NOption( 138, master28, 4 );
end

procedure master11_1
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call master12;
	end
	else begin
		call master29;
	end
end

procedure master12
begin
	gsay_reply( SCRIPT_MASTER, 139 );
	NOption( 140, giveme, 6 );
	NOption( 141, master26, 5 );
	NOption( 142, master20, 6 );
end

procedure master13//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 143, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master14
begin
	game_time_advance(game_ticks(180));
	gsay_reply( SCRIPT_MASTER, 145 );
	NOption( 146, master16, 5 );
	NOption( 147, master17, 5 );
end

procedure master16//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 148, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master17
begin
	gsay_reply( SCRIPT_MASTER, 149 );
	NOption( 150, master17_1, 6 );
	NOption( 151, master18, 6 );
end

procedure master17_1
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call master19;
	end
	else begin
		call master16;
	end
end

procedure master18//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 152, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master19 begin
	gsay_message( SCRIPT_MASTER, 153, 50 );
	set_global_var( GVAR_PREVENT_REVULSION_DAMAGE, 2 );
	Master_Has_Armed := 1;
	if (global_var( GVAR_COUNTDOWN_TO_DESTRUCTION ) == 0) then begin
		set_global_var( GVAR_COUNTDOWN_TO_DESTRUCTION, (game_time / 10) );
		add_timer_event(dude_obj, 0, 11);// tracks to give countdown timer updates every 5 seconds instead of calls to map_update (which is unreliable)
		set_global_var( GVAR_MASTER_BLOWN, 1 );
		if (global_var( GVAR_VATS_BLOWN ) == 1) then begin
			set_global_var( GVAR_VATS_STATUS, 1 );
		end
		set_global_var( GVAR_QUEST_VAULT13_2_MASTER, 2 );
	end
	set_global_var( GVAR_PREVENT_REVULSION_DAMAGE, 2 );
end

procedure master20
begin
	gsay_message( SCRIPT_MASTER, 154, 50 );
	call master21;
end

procedure master21
begin
	gsay_reply( SCRIPT_MASTER, 155 );
	NOption( 156, master25, 6 );
	NOption( 157, master21_1, 6 );
	NOption( 158, master24, 6 );
end

procedure master21_1
begin
	if (global_var( GVAR_LIEUTENANTS_DEAD ) == 1) then begin
		call master22;
	end
	else begin
		call master23;
	end
end

procedure master22//todo add extra routing----------------------
begin
	gsay_message( SCRIPT_MASTER, 159, 51 );
	call mastercbt;
end

procedure master23//todo add extra routing----------------------
begin
	gsay_message( SCRIPT_MASTER, 160, 51 );
	call mastercbt;
end

procedure master24//todo add extra routing----------------------
begin
	gsay_message( SCRIPT_MASTER, 161, 51 );
	call mastercbt;
end

procedure master25
begin
	gsay_reply( SCRIPT_MASTER, 162 );
	NOption( 163, master17, 6 );
	NOption( 164, master16, 6 );
end

procedure master26
begin
	gsay_reply( SCRIPT_MASTER, 165 );
	BOption( 166, master203, 4 );//<-- Combat trigger [mastercbt]
	GOption( 167, master01, 4 );
end

procedure master27
begin
	gsay_reply( SCRIPT_MASTER, 168 );
	BOption( 169, master203, 4 );//<-- Combat trigger [mastercbt]
	NOption( 170, master01, 4 );
end

procedure master28//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 171, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master29//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 172, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master30
begin
	gsay_reply( SCRIPT_MASTER, 173 );
	BOption( 174, master203, 4 );//<-- Combat trigger [mastercbt]
	NOption( 175, master01, 4 );
end

procedure master31
begin
	gsay_reply( SCRIPT_MASTER, 176 );
	NOption( 177, master32, 5 );
	BOption( 178, master203, 5 );//<-- Combat trigger [mastercbt]
end

procedure master32
begin
	gsay_reply( SCRIPT_MASTER, 179 );
	BOption( 180, master203, 5 );//<-- Combat trigger [mastercbt]
	GOption( 181, master01, 5 );
end

procedure master33
begin
	gsay_reply( SCRIPT_MASTER, 182 );
	NOption( 183, master34, 4 );
end

procedure master34
begin
	gsay_reply( SCRIPT_MASTER, 184 );
	NOption( 185, master01, 4 );
	BOption( 186, master203, 4 );//<-- Combat trigger [mastercbt]
end

procedure master35
begin
	gsay_reply( SCRIPT_MASTER, 187 );
	NOption( 188, master01, 4 );
	BOption( 189, master203, 4 );//<-- Combat trigger [mastercbt]
	NOption( 190, master33, 5 );
end

procedure master36
begin
	gsay_reply( SCRIPT_MASTER, 191 );
	NOption( 192, master06, 5 );
	BOption( 193, master37, 5 );
end

procedure master37//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 194, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master38
begin
	gsay_reply( SCRIPT_MASTER, 195 );
	BOption( 197, master203, 5 );//	<-- Combat trigger [mastercbt]
	if ((global_var( GVAR_QUEST_BROHOOD_1_JOIN_THEM ) == 1) or (global_var( GVAR_QUEST_BROHOOD_1_JOIN_THEM ) == 2)) then begin
		NOption( 198, master38_2, 5 );
	end
end

procedure master38_1
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call master41;
	end
	else begin
		call master40;
	end
end

procedure master38_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call master39;
	end
	else begin
		call master40;
	end
end

procedure master39
begin
	leave := 1;
	gsay_message( SCRIPT_MASTER, 199, 50 );
	call masterend;
end

procedure master40//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 200, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master41
begin
	gsay_message( SCRIPT_MASTER, 201, 50 );
	call masterend;
end

procedure master42//	<-- Combat trigger [mastercbt]
begin
//
// STUPID CHARACTER, only response's reply.
//
	gsay_message( SCRIPT_MASTER, 202, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master43//todo add extra routing----------------------
begin
	gsay_message( SCRIPT_MASTER, 203, 51 );
	call mastercbt;
end

procedure master44
begin
	gsay_reply( SCRIPT_MASTER, 204 );
	NOption( 300, masterend, 4 );
	NOption( 205, master01, 4 );
	BOption( 206, master05, 4 );
end

procedure master45//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 207, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master46
begin
	gsay_reply( SCRIPT_MASTER, 208 );
	NOption( 209, master47, 4 );
	BOption( 210, master203, 4 );//<-- Combat trigger [mastercbt]
end

procedure master47//	<-- Combat trigger [mastercbt]
begin
	gsay_message( SCRIPT_MASTER, 211, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure master200
begin
	gsay_message( SCRIPT_MASTER, 212, 50 );
end

procedure master201
begin
	gsay_message( SCRIPT_MASTER, 213, 50 );
end

procedure master202 begin
	gsay_message( SCRIPT_MASTER, 214, 50 );
end

procedure master203 begin
	gsay_message( SCRIPT_MASTER, 215, 51 );
	set_global_var( GVAR_MASTER_ATTACKS, 1 );
	call mastercbt;
end

procedure mastercbt begin
	tmp_hostile := 1;
end

procedure masterend begin
end
