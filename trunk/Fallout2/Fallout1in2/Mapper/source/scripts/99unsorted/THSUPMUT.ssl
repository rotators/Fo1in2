#include "..\headers\define.h"
#include "..\headers\command.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure THSupMut0;
procedure THSupMut1;
procedure THSupMut2;
procedure THSupMut3;
procedure THSupMut4;
procedure THSupMut5;
procedure THSupMut6;
procedure THSupMut7;
procedure THSupMutend;

procedure combat;
procedure to_orfeo;

import variable Orfeo_ptr;

variable rndx;
variable HOSTILE;
variable Only_Once := 1;
variable in_timed_event;
variable weaponPtr;



procedure start
begin


	if Only_Once then begin
		Only_Once := 0;
		set_self_team(TEAM_NECROPOLIS_MUTANT );
		set_self_ai( AI_SUPER_MUTANT_SGT );
		if (local_var(1) == 0) then begin
			set_local_var(1, random(100, 109));
			weaponPtr := create_object( PID_LASER_RIFLE, 0, 0 );
			add_obj_to_inven(self_obj, weaponPtr);
			wield_obj_critter(self_obj, weaponPtr);
			add_obj_to_inven(self_obj, create_object( PID_MICRO_FUSION_CELL, 0, 0 ));
		end
		self_rotate( random(0, 5) );
	end
	if (script_action == critter_proc) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == look_at_proc) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
			call look_at_p_proc;
		end
		else begin
			if (script_action == pickup_proc) then begin//<---caught stealing! (pickup_p_proc)
				call pickup_p_proc;
			end
			else begin
				if (script_action == talk_proc) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
					call talk_p_proc;
				end
				else begin
					if (script_action == timed_event_proc) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
						call timed_event_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var( GVAR_ENEMY_FOLL_INVADERS )) then begin
		HOSTILE := 1;
	end
	if (HOSTILE and self_can_see_dude) then begin
		HOSTILE := 0;
		attack(dude_obj);
	end
	else begin
		if (not(in_timed_event)) then begin
			in_timed_event := 1;
			add_timer_event(self_obj, game_ticks(random(6, 10)), random(1, 3));
		end
		if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
			if (local_var(0) == 0) then begin
				dialogue_system_enter;
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_FOLL_INVADERS, 1 );
	end
	inc_evil_critter
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_THSUPMUT, local_var(1)));
end

procedure pickup_p_proc
begin
	HOSTILE := 1;
end

procedure talk_p_proc
begin
	script_overrides;
	dude_look_at_self;
	start_gdialog(265, self_obj, 4, -1, -1);
	gsay_start;
	if (local_var(0)) then begin
		call THSupMut7;
	end
	else begin
		call THSupMut0;
	end
	gsay_end;
	end_dialogue;
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		self_rotate( random(0, 5) );
	end
	else begin
		self_walk_to_tile( tile_num_in_direction(self_tile, random(0, 5), random(1, 3)) );
	end
	in_timed_event := 0;
end

procedure THSupMut0
begin
	set_local_var(0, 1);
	gsay_reply( SCRIPT_THSUPMUT, 110 );
	giq_option( -3, SCRIPT_THSUPMUT, 111, THSupMut1, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_THSUPMUT, 112, to_orfeo, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_THSUPMUT, 113, THSupMut2, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_THSUPMUT, 114, THSupMut3, NEUTRAL_REACTION );
end

procedure THSupMut1
begin
	gsay_message( SCRIPT_THSUPMUT, 115, 50 );
	call to_orfeo;
end

procedure THSupMut2
begin
	gsay_message( SCRIPT_THSUPMUT, 116, 50 );
	call to_orfeo;
end

procedure THSupMut3
begin
	gsay_reply( SCRIPT_THSUPMUT, 117 );
	giq_option( 6, SCRIPT_THSUPMUT, 118, THSupMut4, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_THSUPMUT, 119, THSupMut6, NEUTRAL_REACTION );
end

procedure THSupMut4
begin
	gsay_reply( SCRIPT_THSUPMUT, 120 );
	giq_option( 6, SCRIPT_THSUPMUT, 121, to_orfeo, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_THSUPMUT, 122, combat, NEUTRAL_REACTION );
	giq_option( 8, SCRIPT_THSUPMUT, 123, THSupMut5, NEUTRAL_REACTION );
end

procedure THSupMut5
begin
	gsay_reply( SCRIPT_THSUPMUT, 124 );
	giq_option( 8, SCRIPT_THSUPMUT, 125, to_orfeo, NEUTRAL_REACTION );
	giq_option( 8, SCRIPT_THSUPMUT, 126, combat, NEUTRAL_REACTION );
end

procedure THSupMut6
begin
	gsay_message( SCRIPT_THSUPMUT, 127, 50 );
	call combat;
end

procedure THSupMut7
begin
	gsay_message( SCRIPT_THSUPMUT, 128, 50 );
	call to_orfeo;
end

procedure combat
begin
	HOSTILE := 1;
end

procedure THSupMutend
begin
end

procedure to_orfeo
begin
	load_map("lafollwr.map", 11);
end
