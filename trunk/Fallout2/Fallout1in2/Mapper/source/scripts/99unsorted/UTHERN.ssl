#include "..\headers\define.h"
#include "..\headers\command.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure uthern0;
procedure uthern1;
procedure uthern2;
procedure uthern3;
procedure uthern4;
procedure uthern5;
procedure uthern6;
procedure uthern7;
procedure uthern8;
procedure uthern9;
procedure uthern10;
procedure uthern11;
procedure uthern12;
procedure uthern13;
procedure uthern14;
procedure uthernend;
procedure combat;
procedure to_orfeo;

import variable Uthern_ptr;
import variable Orfeo_ptr;

variable HOSTILE;
variable initial :=  0;
variable weaponPtr;



procedure start
begin


	if (not(initial)) then begin
		Uthern_ptr := self_obj;
		set_self_team(TEAM_NECROPOLIS_MUTANT );
		set_self_ai( AI_SUPER_MUTANT_SGT );
		self_rotate( 2 );
		if (local_var(1) == 0) then begin
			set_local_var(1, 1);
			weaponPtr := create_object( PID_GATLING_LASER, 0, 0 );
			add_obj_to_inven(self_obj, weaponPtr);
			wield_obj_critter(self_obj, weaponPtr);
			add_obj_to_inven(self_obj, create_object( PID_MICRO_FUSION_CELL, 0, 0 ));
		end
		initial :=  1;
	end
	else begin
		if (script_action == critter_proc) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == destroy_proc) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == look_at_proc) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == pickup_proc) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == talk_proc) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var( GVAR_ENEMY_FOLL_INVADERS )) then begin
		HOSTILE := 1;
	end
	if (HOSTILE and self_can_see_dude) then begin
		HOSTILE := 0;
		attack(dude_obj);
	end
	else begin
		if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
			if (local_var(0) == 0) then begin
				dialogue_system_enter;
			end
		end
	end
end

procedure destroy_p_proc
begin

	Uthern_ptr := 0;
	if (source_obj == dude_obj) then begin
		inc_evil_critter
		set_global_var( GVAR_ENEMY_FOLL_INVADERS, 1 );
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_UTHERN, 100));
end

procedure pickup_p_proc
begin
	HOSTILE := 1;
end

procedure talk_p_proc
begin
	script_overrides;
	dude_look_at_self;
	if (local_var(0)) then begin
		call uthern14;
	end
	else begin
		set_local_var(0, 1);
		start_gdialog(273, self_obj, 4, -1, -1);
		gsay_start;
		call uthern0;
		gsay_end;
		end_dialogue;
	end
end

procedure uthern0
begin
	gsay_reply( SCRIPT_UTHERN, 101 );
	giq_option( -3, SCRIPT_UTHERN, 102, uthern1, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_UTHERN, 103, uthern2, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_UTHERN, 104, combat, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 105, uthern7, NEUTRAL_REACTION );
	giq_option( 8, SCRIPT_UTHERN, 106, uthern13, NEUTRAL_REACTION );
end

procedure uthern1
begin
	gsay_message( SCRIPT_UTHERN, 107, 50 );
	call combat;
end

procedure uthern2
begin
	gsay_reply( SCRIPT_UTHERN, 108 );
	giq_option( 4, SCRIPT_UTHERN, 109, uthern3, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_UTHERN, 110, combat, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_UTHERN, 111, uthern4, NEUTRAL_REACTION );
end

procedure uthern3
begin
	gsay_message( SCRIPT_UTHERN, 112, 50 );
	call to_orfeo;
end

procedure uthern4
begin
	gsay_reply( SCRIPT_UTHERN, 113 );
	giq_option( 6, SCRIPT_UTHERN, 114, uthern5, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_UTHERN, 115, uthern6, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_UTHERN, 116, combat, NEUTRAL_REACTION );
end

procedure uthern5
begin
	gsay_message( SCRIPT_UTHERN, 117, 50 );
	call combat;
end

procedure uthern6
begin
	gsay_message( SCRIPT_UTHERN, 118, 50 );
	call combat;
end

procedure uthern7
begin
	gsay_reply( SCRIPT_UTHERN, 119 );
	giq_option( 5, SCRIPT_UTHERN, 120, uthern8, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 121, uthern12, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 122, combat, NEUTRAL_REACTION );
end

procedure uthern8
begin
	gsay_reply( SCRIPT_UTHERN, 123 );
	giq_option( 5, SCRIPT_UTHERN, 124, uthern9, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 125, uthern10, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 126, uthern11, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 127, combat, NEUTRAL_REACTION );
end

procedure uthern9
begin
	gsay_message( SCRIPT_UTHERN, 128, 50 );
	call to_orfeo;
end

procedure uthern10
begin
	gsay_message( SCRIPT_UTHERN, 129, 50 );
	call combat;
end

procedure uthern11
begin
	gsay_message( SCRIPT_UTHERN, 130, 50 );
	call to_orfeo;
end

procedure uthern12
begin
	gsay_reply( SCRIPT_UTHERN, 131 );
	giq_option( 5, SCRIPT_UTHERN, 132, combat, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 133, combat, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_UTHERN, 134, combat, NEUTRAL_REACTION );
end

procedure uthern13
begin
	gsay_message( SCRIPT_UTHERN, 135, 50 );
	call to_orfeo;
end

procedure uthern14
begin
	float_msg( self_obj, message_str(SCRIPT_UTHERN, 136), FLOAT_MSG_NORMAL );
	call to_orfeo;
end

procedure uthernend
begin
end

procedure combat
begin
	HOSTILE := 1;
end

procedure to_orfeo
begin
	load_map("lafollwr.map", 11);
end
