#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure talk_p_proc;//    script_action == 11
procedure ration01;
procedure ration02;
procedure ration03;
procedure ration03a;
procedure ration03b;
procedure ration03c;
procedure ration04;
procedure ration05;
procedure ration06;
procedure ration07;
procedure rationend;
procedure get_ReactVal;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable crying;
variable hostile;
variable myname;
variable PICK;
variable ReactVal;
variable ReactTier;
variable got_ReactVal;
variable badguy;
variable exit_line;



procedure start
begin
	
		
	if ((script_action == 11) and (crying == 0)) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			hostile := 1;
		end
		else begin
			if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
					hostile := 0;
					attack(dude_obj);
				end
			end
			else begin
				if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
					script_overrides;
					if (crying == 1) then begin
						PICK := myname;
						if (PICK == 1) then begin
							display_msg(100);
						end
						else begin
							if (PICK > 2) then begin
								display_msg(101);
							end
							else begin
								if (PICK > 3) then begin
									display_msg(102);
								end
								else begin
									if (PICK > 4) then begin
										display_msg(103);
									end
									else begin
										if (PICK > 5) then begin
											display_msg(104);
										end
										else begin
											if (PICK > 6) then begin
												display_msg(105);
											end
										end
									end
								end
							end
						end
					end
					else begin
						PICK := myname;
						if (PICK == 1) then begin
							display_msg(106);
						end
						else begin
							if (PICK > 2) then begin
								display_msg(107);
							end
							else begin
								if (PICK > 3) then begin
									display_msg(108);
								end
								else begin
									if (PICK > 4) then begin
										display_msg(109);
									end
									else begin
										if (PICK > 5) then begin
											display_msg(110);
										end
										else begin
											if (PICK > 6) then begin
												display_msg(111);
											end
										end
									end
								end
							end
						end
					end
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.

						if (source_obj == dude_obj) then begin
							set_global_var( GVAR_GOOD_MONSTER, global_var( GVAR_GOOD_MONSTER ) + 1 );// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_self;
	start_gdialog(168, self_obj, 4, -1, -1);
	gsay_start;
	call ration01;
	gsay_end;
	end_dialogue;
end

procedure ration01
begin
	sayReply(0, 112 + dude_name + 113);
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 114), ration03);
	end
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 115), ration04);
	end
	if (-dude_iq >= -3) then begin
		sayOption(message_str(SCRIPT_CINDY, 116), ration02);
	end
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration02
begin
	crying := 1;
	sayReply(0, message_str(SCRIPT_CINDY, 117));
	if (-dude_iq >= -3) then begin
		sayOption(message_str(SCRIPT_CINDY, 118), rationend);
	end
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration03
begin
	PICK := random(1, 3);
	if (PICK == 1) then begin
		call ration03a;
	end
	else begin
		if (PICK > 2) then begin
			call ration03b;
		end
		else begin
			if (PICK > 3) then begin
				call ration03c;
			end
		end
	end
end

procedure ration03a
begin
	sayReply(0, message_str(SCRIPT_CINDY, 119));
	sayOption(message_str(SCRIPT_CINDY, 120), rationend);
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration03b
begin
	sayReply(0, message_str(SCRIPT_CINDY, 121));
	sayOption(message_str(SCRIPT_CINDY, 120), rationend);
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration03c
begin
	sayReply(0, message_str(SCRIPT_CINDY, 123));
	sayOption(message_str(SCRIPT_CINDY, 120), rationend);
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration04
begin
	sayReply(0, message_str(SCRIPT_CINDY, 125));
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 126), ration05);
	end
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 127), ration06);
	end
end

procedure ration05
begin
	sayReply(0, message_str(SCRIPT_CINDY, 128));
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 129), rationend);
	end
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration06
begin
	sayReply(0, message_str(SCRIPT_CINDY, 130));
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 131), ration07);
	end
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure ration07
begin
	sayReply(0, message_str(SCRIPT_CINDY, 132));
	if (dude_iq >= 4) then begin
		sayOption(message_str(SCRIPT_CINDY, 133), rationend);
	end
	if (dude_iq >= 0) then begin
		sayOption(message_str(SCRIPT_CINDY, 134), rationend);
	end
end

procedure rationend
begin
end

procedure get_ReactVal
begin
	if (not(got_ReactVal)) then begin
		got_ReactVal := 1;
		ReactVal := ReactVal + ((dude_charisma - 5) * 5);
		ReactVal := ReactVal + (10 * dude_presence);
		if (dude_perk( PERK_cult_of_personality )) then begin
			if (check_general_rep > 0) then begin
				ReactVal := ReactVal + check_general_rep;
			end
			else begin
				ReactVal := ReactVal - check_general_rep;
			end
		end
		else begin
			if (badguy) then begin
				ReactVal := ReactVal - check_general_rep;
			end
			else begin
				ReactVal := ReactVal + check_general_rep;
			end
		end
		if has_rep_childkiller then begin
			ReactVal := ReactVal - 30;
		end
		if ((global_var( GVAR_BAD_MONSTER ) > (3 * global_var( GVAR_GOOD_MONSTER ))) or (global_var( GVAR_CHAMPION_REPUTATION ) == 1)) then begin
			ReactVal := ReactVal + 20;
		end
		if ((global_var( GVAR_GOOD_MONSTER ) > (2 * global_var( GVAR_BAD_MONSTER ))) or (global_var( GVAR_BERSERKER_REPUTATION ) == 1)) then begin
			ReactVal := ReactVal - 20;
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (ReactVal < 24) then begin
		ReactTier := 1;
	end
	else begin
		if (ReactVal < 74) then begin
			ReactTier := 2;
		end
		else begin
			ReactTier := 3;
		end
	end
end

procedure LevelToReact
begin
	if (ReactTier == 1) then begin
		ReactVal := random(1, 24);
	end
	else begin
		if (ReactTier == 2) then begin
			ReactVal := random(25, 74);
		end
		else begin
			ReactVal := random(75, 100);
		end
	end
end

procedure UpReact
begin
	ReactVal := ReactVal + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	ReactVal := ReactVal - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	ReactTier := 1;
	ReactVal := 1;
end

procedure TopReact
begin
	ReactVal := 100;
	ReactTier := 3;
end

procedure BigUpReact
begin
	ReactVal := ReactVal + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	ReactVal := ReactVal - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	ReactTier := ReactTier + 1;
	if (ReactTier > 3) then begin
		ReactTier := 3;
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	ReactTier := ReactTier - 1;
	if (ReactTier < 1) then begin
		ReactTier := 1;
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end



