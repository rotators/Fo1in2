#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

procedure VGateMut00;
procedure VGateMut03;
procedure VGateMut03a;
procedure VGateMut03b;
procedure VGateMut04;
procedure VGateMut05;
procedure VGateMut06;
procedure VGateMut07;
procedure VGateMut08;
procedure VGateMutAlert;
procedure VGateMutxx;

import variable removal_ptr;

variable initial :=  0;
variable tmp_hostile;
variable round_count;
variable gate_tile := 22106;
variable guard_tile := 20902;
variable home_tile := 7000;
variable waypoint;

procedure start
begin
	fixt_critter_healing

	if not(initial) then begin
		initial :=  1;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 34);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 49);
		if (map_var(0)) then begin
			move_to(self_obj, home_tile, 0);
		end
		else begin
			add_timer_event(self_obj, game_ticks(30), 1);
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		round_count := round_count + 1;
	end
	if (round_count > 2) then begin
		call VGateMutAlert;
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
			tmp_hostile := 0;
			attack(dude_obj);
		end
		else begin
			if (global_var(VATS_ALERT)) then begin
				tmp_hostile := 1;
			end
			else begin
				if (not(map_var(4))) then begin
					if (tile_distance_objs(self_obj, dude_obj) < 12) then begin
						dialogue_system_enter;
					end
				end
			end
		end
	end
	if (map_var(0)) then begin
		if (not(waypoint)) then begin
			if (tile_num(self_obj) != 22312) then begin
				animate_move_obj_to_tile(self_obj, 22312, 0);
			end
			else begin
				waypoint := 1;
			end
		end
		else begin
			if (waypoint == 1) then begin
				if (tile_num(self_obj) != 26317) then begin
					animate_move_obj_to_tile(self_obj, 26317, 0);
				end
				else begin
					waypoint := 2;
				end
			end
			else begin
				if (waypoint == 2) then begin
					if (tile_num(self_obj) != 31517) then begin
						animate_move_obj_to_tile(self_obj, 32319, 0);
					end
					else begin
						waypoint := 3;
					end
				end
				else begin
					if (waypoint == 3) then begin
						removal_ptr := self_obj;
					end
				end
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (global_var(LIEUTENANTS_DEAD)) then begin
		call VGateMut08;
	end
	else begin
		if (dude_is_armed) and not(tmp_hostile) then begin
			if (random(0, 5) == 5) then begin
				call VGateMut00;
			end
			else begin
				tmp_hostile := 1;
			end
		end
		else begin
			start_gdialog(433, self_obj, 4, -1, -1);
			gsay_start;
			call VGateMut03;
			gsay_end;
			end_dialogue;
		end
	end
end

procedure timed_event_p_proc
begin
	if (not(map_var(0))) then begin
		if (tile_num(self_obj) == guard_tile) then begin
			animate_move_obj_to_tile(self_obj, gate_tile, 0);
		end
		else begin
			animate_move_obj_to_tile(self_obj, guard_tile, 0);
		end
		add_timer_event(self_obj, game_ticks(30), 1);
	end
end

procedure VGateMut00
begin
	float_msg(self_obj, message_str(SCRIPT_GENSUPR, random(101, 103)), 2);
	tmp_hostile := 1;
end

procedure VGateMut03
begin
	gsay_reply(433, random(104, 106));
	giq_option(-3, 433, 107, VGateMut04, 51);
	giq_option(4, 433, 108, VGateMut04, 51);
	giq_option(5, 433, 109, VGateMut05, 50);
	giq_option(6, 433, 110, VGateMut03a, 50);
	if critter_inven_obj(dude_obj, 0) then begin  variable RobesCheck;  RobesCheck := critter_inven_obj(dude_obj, 0);  end      if (obj_pid(RobesCheck) == PID_PURPLE_ROBE) then begin
		giq_option(6, 433, 111, VGateMut03b, 50);
	end
end

procedure VGateMut03a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call VGateMut07;
	end
	else begin
		call VGateMut06;
	end
end

procedure VGateMut03b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 25))) then begin
		call VGateMut07;
	end
	else begin
		call VGateMut06;
	end
end

procedure VGateMut04
begin
	tmp_hostile := 1;
	gsay_message(433, random(112, 114), 51);
end

procedure VGateMut05
begin
	gsay_reply(433, 115);
	giq_option(5, 433, 116, VGateMutxx, 50);
	giq_option(5, 433, 117, VGateMutAlert, 51);
end

procedure VGateMut06
begin
	tmp_hostile := 1;
	gsay_message(433, random(118, 120), 51);
end

procedure VGateMut07
begin
	set_map_var(4, 1);
	gsay_message(433, random(121, 123), 50);
end

procedure VGateMut08
begin
	float_msg(self_obj, message_str(SCRIPT_GENSUPR, random(124, 127)), 2);
	tmp_hostile := 1;
end

procedure VGateMutAlert
begin
	set_global_var(VATS_ALERT, 1);
	tmp_hostile := 1;
end

procedure VGateMutxx
begin
	set_global_var(ENTERING_VATS_HOW, 2);
	load_map(MAP_MBVATS12, 5);
end


