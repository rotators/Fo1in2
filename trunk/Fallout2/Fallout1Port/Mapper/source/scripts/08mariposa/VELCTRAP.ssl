/*

	Military Base - trap spatial script

*/

/* Include Files */
#include "..\headers\define.h"

/* Standard Script Procedures */
procedure start;
procedure spatial_p_proc;

/* Defines */
#define sp_mstr(x)                     message_str(SCRIPT_TRAPFLOR,x)

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/
variable Passed_Times;

/*******************************************************************
*                           PROCEDURES                             *
*******************************************************************/
procedure start begin
end

procedure spatial_p_proc begin
   if (global_var(VATS_ALERT) == 1) then begin
      if (is_success(roll_vs_skill( source_obj, SKILL_TRAPS, 0 )) and (local_var(0) == 0)) then begin
         give_exp_points(EXP_TRAPS_NORMAL);
         reg_anim_func(2, source_obj);

         if (source_obj != dude_obj) then begin
            display_msg(proto_data(obj_pid(source_obj), 1) + sp_mstr(100));
         end
         else begin
            Passed_Times := Passed_Times + 1;
            if (Passed_Times > 2) then begin
               set_local_var(0, 1);
            end
            display_msg(sp_mstr(101));
         end

      end
      else begin
         if (local_var(0) == 0) then begin
            set_local_var(0, 1);
            critter_dmg( source_obj, random(15, 40), DMG_electrical );
         end
      end
   end
end


//
// ---TRAP SCRIPT---  Sduibek
//
/*
#include "..\headers\define.h"

procedure start; // VATS, Electric Trap
procedure boom;
variable CritFailDmg := 0;
variable Traps_roll := 0;
variable XP := 0;
// local_var(0) == Detected?
// local_var(1) == Disarmed (1) or Triggered (2)
// local_var(2) == #ofTimes

// SCRIPT 509 (TRAPFLOR) <-- msgs are from this

procedure start begin
	if (script_action == 2) then begin// spatial_p_proc - Player is on or near hex of the location or object this script is using
		if global_var(VATS_ALERT) then begin// VATS ON ALERT
			if (source_obj == dude_obj) or party_member_obj(obj_pid(source_obj)) then begin// new check (party member)
				set_local_var(2, local_var(2) + 1);
				XP := 0;
				CritFailDmg := 0;
				Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
				if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
					CritFailDmg := 10;
				end
				else begin
					if not(local_var(0)) then begin
						if is_success(Traps_roll) then begin
							set_local_var(0, 1);
							if is_critical(Traps_roll) then begin
								XP := XP + 50;
							end
							else begin
								XP := XP + 25;
							end
							reg_anim_func(2, dude_obj);
							if source_obj != dude_obj then begin
								reg_anim_func(2, source_obj);
							end
							display_msg(message_str(SCRIPT_TRAPFLOR, 101));
							anim(dude_obj, 11, 0);
							Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
							if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
								CritFailDmg := 10;
								call boom;
							end
							else begin
								if is_success(Traps_roll) then begin
									set_local_var(1, 1);
									if is_critical(Traps_roll) then begin
										XP := XP + 100;
									end
									else begin
										XP := XP + 50;
									end
									display_msg(message_str(SCRIPT_TRAPFLOR, 107));
								end
								else begin
									display_msg(message_str(SCRIPT_TRAPFLOR, 111));
								end
							end
							if XP then begin
								display_msg(message_str(SCRIPT_TRAPFLOR, 104) + XP + message_str(SCRIPT_TRAPFLOR, 105));
								give_exp_points(XP);
							end
						end
						else begin
							call boom;
						end
					end
					else begin
						if not(local_var(1)) then begin
							if local_var(2) <= 3 then begin
								Traps_roll := roll_vs_skill(dude_obj, SKILL_TRAPS, 0);
								reg_anim_func(2, dude_obj);
								if source_obj != dude_obj then begin
									reg_anim_func(2, source_obj);
								end
								anim(dude_obj, 11, 0);
								if not(is_success(Traps_roll)) and is_critical(Traps_roll) then begin
									CritFailDmg := 10;
									call boom;
								end
								else begin
									if is_success(Traps_roll) then begin
										set_local_var(1, 1);
										if is_critical(Traps_roll) then begin
											XP := XP + 100;
										end
										else begin
											XP := XP + 50;
										end
										display_msg(message_str(SCRIPT_TRAPFLOR, 107));
										if XP then begin
											display_msg(message_str(SCRIPT_TRAPFLOR, 104) + XP + message_str(SCRIPT_TRAPFLOR, 105));
											give_exp_points(XP);
										end
									end
									else begin
										if local_var(2) < 3 then begin
											display_msg(message_str(SCRIPT_TRAPFLOR, 111));
										end
										else begin
											call boom;
										end
									end
								end
							end
							else begin
								call boom;
							end
						end
					end
				end
				if local_var(1) then begin
					destroy_object(self_obj);
				end
			end
		end
	end
end

procedure boom begin
	if local_var(2) <= 1 then begin
		if source_obj == dude_obj then begin
			display_msg(message_str(SCRIPT_TRAPFLOR, 109));
		end
		else begin
			display_msg(proto_data(obj_pid(source_obj), 1) + message_str(SCRIPT_TRAPFLOR, 108));
		end
	end
	else begin
		if source_obj == dude_obj then begin
			display_msg(message_str(SCRIPT_TRAPFLOR, 114));
		end
		else begin
			display_msg(proto_data(obj_pid(source_obj), 1) + message_str(SCRIPT_TRAPFLOR, 113));
		end
	end
	set_local_var(1, 2);
	if source_obj == dude_obj then begin
		critter_dmg( dude_obj, random(5 + (difficulty_level * 5), 30 + (difficulty_level * 10)) + CritFailDmg, DMG_electrical );
	end
	else begin
		critter_dmg( source_obj, random(5 + (difficulty_level * 5), 30 + (difficulty_level * 10)) + CritFailDmg, DMG_electrical );
		critter_dmg( dude_obj, random(5 + (difficulty_level * 5), 30 + (difficulty_level * 10)) + CritFailDmg, DMG_electrical );
	end
end

//	#define DMG_normal_dam   0
//	#define DMG_laser        1
//	#define DMG_plasma       3
//	#define DMG_electrical   4
//	#define DMG_emp          5

                          */
