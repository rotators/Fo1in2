#include "..\headers\define.h"

procedure start;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

procedure Flip00;
procedure Flip01;
procedure Flip02;
procedure Flip03;
procedure Flip03a;
procedure Flip04;
procedure Flip05;
procedure FlipCombat;
procedure transit;
procedure FlipLeave;

variable known;
variable hostile;
variable initial :=  0;
variable round_counter;
variable cell_tile := 23937;
variable home_tile := 14338;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;



procedure start
begin
	fixt_critter_healing
	
	if not(initial) then begin
		initial :=  1;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 43);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 4);
	end
	if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
		call combat_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
						else begin
							if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
								call timed_event_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		round_counter := round_counter + 1;
	end
	if (round_counter > 2) then begin
		if (global_var(VATS_ALERT) == 0) then begin
			set_global_var(VATS_ALERT, 1);
			set_map_var(7, 1);
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (obj_can_see_obj(self_obj, dude_obj) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
			if (global_var(LIEUTENANTS_DEAD)) then begin
				call Flip00;
			end
			else begin
				if ((obj_pid(critter_inven_obj(dude_obj, 0)) != PID_PURPLE_ROBE) and (local_var(4) == 0)) then begin
					dialogue_system_enter;
				end
			end
		end
		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			animate_move_obj_to_tile(self_obj, cell_tile, 0);
		end
		else begin
			animate_move_obj_to_tile(self_obj, home_tile, 0);
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	set_map_var(8, 3);
	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4)) then begin
		display_msg(message_str(SCRIPT_FLIP, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_FLIP, 101));
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	get_reaction
	start_gdialog(367, self_obj, 4, -1, -1);
	gsay_start;
	if critter_inven_obj(dude_obj, 0) then begin  variable RobesCheck;  RobesCheck := critter_inven_obj(dude_obj, 0);  end      if (obj_pid(RobesCheck) == PID_PURPLE_ROBE) then begin
		call Flip01;
	end
	else begin
		if (local_var(4) == 1) then begin
			call Flip05;
		end
		else begin
			call Flip02;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			hostile := 1;
		end
	end
	else begin
		if (fixed_param == 2) then begin
			call Flip00;
		end
	end
end

procedure Flip00
begin
	float_msg(self_obj, message_str(SCRIPT_FLIP, 102), 0);
	call FlipCombat;
end

procedure Flip01
begin
	add_timer_event(self_obj, game_ticks(30), 1);
	gsay_message(367, 103, 50);
end

procedure Flip02
begin
	set_local_var(4, 1);
	gsay_reply(367, 104);
	giq_option(4, 367, 105, FlipCombat, 50);
	giq_option(4, 367, 106, transit, 50);
	giq_option(-3, 367, 107, FlipCombat, 50);
end

procedure Flip03
begin
	gsay_reply(367, 108);
	giq_option(4, 367, 109, transit, 50);
	giq_option(4, 367, 110, Flip03a, 50);
end

procedure Flip03a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call FlipLeave;
	end
	else begin
		call Flip04;
	end
end

procedure Flip04
begin
	gsay_message(367, 111, 50);
	call FlipCombat;
end

procedure Flip05
begin
	gsay_message(367, 112, 50);
	call FlipCombat;
end

procedure FlipCombat
begin
	hostile := 1;
end

procedure transit
begin
	set_global_var(ENTERING_VATS_HOW, 2);
	load_map(MAP_MBVATS12, 5);
end

procedure FlipLeave
begin
	if (tile_num(self_obj) == home_tile) then begin
		animate_move_obj_to_tile(self_obj, tile_num_in_direction(home_tile, 0, 5), 0);
	end
	else begin
		animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), 5, 5), 0);
	end
	add_timer_event(self_obj, game_ticks(5), 2);
end


