#include "..\headers\define.h"

procedure start;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

import variable Lt_ptr;

variable hostile;
variable sequence;
variable iseeu;
variable waiting;
variable clock := 4;
variable initial :=  0;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;



procedure start
begin
	
	
	if not(initial) then begin
		initial :=  1;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 34);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 69);
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (tile_distance_objs(dude_obj, self_obj) < 12) then begin
		if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
			hostile := 0;
			attack(dude_obj);
		end
		if (global_var(ENTERING_VATS_HOW) < 1) then begin
			iseeu := 1;
		end
		if ((iseeu == 1) and (waiting == 0) and (Lt_ptr != 0) and (local_var(4) == 0)) then begin
			waiting := 1;
			add_timer_event(self_obj, game_ticks(clock), 1);
		end
	end
end

procedure destroy_p_proc
begin
	sequence := 10;
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_VANHAG, 100));
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	float_msg(self_obj, message_str(SCRIPT_VANHAG, 101), 0);
end

procedure timed_event_p_proc
begin
	waiting := 0;
	if (sequence == 0) then begin
		float_msg(Lt_ptr, message_str(SCRIPT_VANHAG, 102), 0);
	end
	else begin
		if (sequence == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_VANHAG, 103), 0);
		end
		else begin
			if (sequence == 2) then begin
				float_msg(Lt_ptr, message_str(SCRIPT_VANHAG, 104), 0);
			end
			else begin
				if (sequence == 3) then begin
					float_msg(self_obj, message_str(SCRIPT_VANHAG, 105), 0);
				end
				else begin
					if (sequence == 4) then begin
						float_msg(Lt_ptr, message_str(SCRIPT_VANHAG, 106), 0);
					end
					else begin
						if (sequence == 5) then begin
							float_msg(self_obj, message_str(SCRIPT_VANHAG, 107), 0);
							clock := 6;
						end
						else begin
							if (sequence == 6) then begin
								float_msg(Lt_ptr, message_str(SCRIPT_VANHAG, 108), 0);
								clock := 4;
							end
							else begin
								if (sequence == 7) then begin
									float_msg(self_obj, message_str(SCRIPT_VANHAG, 109), 0);
								end
								else begin
									if (sequence == 8) then begin
										float_msg(Lt_ptr, message_str(SCRIPT_VANHAG, 110), 0);
									end
									else begin
										if (sequence == 9) then begin
											float_msg(self_obj, message_str(SCRIPT_VANHAG, 111), 0);
											if (not(local_var(4))) then begin
												give_exp_points(1000);
												display_msg(message_str(SCRIPT_VANHAG, 112));
												set_local_var(4, 1);
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	sequence := sequence + 1;
end


