/*

	Generic rats

*/

/* Include Files */
#include "..\headers\define.h"

#define NAME                    SCRIPT_WANRATS

#include "..\headers\command.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure timed_event_p_proc;
procedure use_skill_on_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable initial :=  0;
variable tmp_hostile := 0;
variable tmp_attacked;

/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

//  All rats in Vault 15, all levels
//  All rats in Vault 13 cave entrance
//  All rats in Necroplois SEWERS
//  All rats in Desert encounters
/////////////////////////////////////////////////
//-PIG-
//		78 == pig rat		16777294
//		177 == Mean pig rat	16777393
//		397 == Rabid pig rat	16777613 - doesn't exist in Fo1
//-MOLE-
//		162 == lesser mole rat	16777378
//		10 == Greater mole rat	16777226
//		398 == Rabid mole rat	16777614 - doesn't exist in Fo1
//-RAT-
//		48 == cave rat		16777264
//		159 == Tough rat	16777375
//		160 == Irradiated rat	16777376
//		161 == Tough Irradiated rat	16777377
//		399 == Rabid rat	16777615
//		400 == Rabid Irradiated rat	16777616 - doesn't exist in Fo1

procedure start begin

end

procedure map_enter_p_proc begin
	if (map_first_run) then begin

		if (self_pid == PID_LESSER_MOLE_RAT) or (self_pid == PID_GREATER_MOLE_RAT)/* or (obj_pid (self_obj) == 16777614)*/ then begin// MOLE
			set_self_ai(AI_MOLE_RATS);
		end
		else if (self_pid == PID_RAT_CAVE) or (self_pid == PID_TOUGH_RAT) or (self_pid == PID_RADIATED_RAT) or (self_pid == PID_TOUGH_RADIATED_RAT) /*or (obj_pid (self_obj) == 16777615) or (obj_pid (self_obj) == 16777616)*/ then begin// RAT
			set_self_ai(AI_RATS);
		end
		else if (self_pid == PID_PIGRAT) or (self_pid == PID_MEAN_PIG_RAT) /*or (obj_pid (self_obj) == 16777613)*/ then begin// PIG
			set_self_ai(AI_PIG_RATS);
		end

		set_self_team(TEAM_RATS);
		add_timer_event(self_obj, random(30, 50), 0);//game_ticks(random(1, 5)), 0);

		if debug_mode then begin
			debug_msg("WANRATS m" + cur_map_index + " e" + self_elevation + " " + self_tile);
		end

	end
end

procedure critter_p_proc begin
	if CUR_AREA_VAULT_13 then begin
		if v13_invaded or map_var(2) then begin
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if not(is_loading_game) then begin
					set_self_visible;
				end
				debug_msg("Vault 13 invasion, killing WANRATS.SSL with DeathType " + 59 + ".  ");
				kill_critter(self_obj, ANIM_exploded_to_nothing_sf);
			end
		end
	end

	if (tmp_hostile and (tmp_attacked == 0)) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (dude_perk( PERK_animal_friend ) == 0) then begin
			if (self_can_see_dude or self_can_hear_dude) then begin
				tmp_hostile := 1;
				attack(dude_obj);
			end
		end
	end
end

procedure timed_event_p_proc begin
	self_walk_to_tile( tile_num_in_direction(self_tile, random(0, 5), random(1, 3)) );
	//add_timer_event(self_obj, random(30, 50), 0);
	add_timer_event(self_obj, game_ticks(random(1, 5)), 0); // Fo1 vanilla
end

procedure use_skill_on_p_proc begin
	if (action_being_used == SKILL_STEAL) then begin
		script_overrides;
		display_msg(message_str(SCRIPT_GENCHAT, 211));
		script_overrides;
	end
end

procedure damage_p_proc begin
	if obj_in_party(source_obj) then begin
		party_remove(self_obj);
		set_self_team(TEAM_RATS);
		tmp_hostile := 1;
	end
end

procedure destroy_p_proc begin
	rm_timer_event(self_obj);
end

procedure talk_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_GENCHAT, 800));
end

procedure combat_p_proc begin
   if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      tmp_attacked := 1;
   end
end
