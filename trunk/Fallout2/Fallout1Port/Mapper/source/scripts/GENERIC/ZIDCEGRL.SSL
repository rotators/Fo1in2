/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Casino Girl with basic dice game
        Location: Generic
        Description: This is some sort of generic dice game that doesn't mention what it really is!
                     The player has the opportunity to switch the dice and make the table a little
                     more fair.

        Log:

           Created: May 6, 1998

           Updated: August 19, 2019 for Fo1@2 \o/
*/

/* Include Files */
#include "..\headers\define.h"
#define NAME                    SCRIPT_ZIDCEGRL
#include "..\headers\command.h"
//#include "..\headers\NewReno.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                       // This Node is Always Combat
procedure Node999;                                       // This Node is Always Ending

procedure Node002;
//procedure Node003;
//procedure Node005;
//procedure Node007;
//procedure Node009;
procedure Node011;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (0)
#define LVAR_Home_Tile                    (1)
#define LVAR_Examined                     (2)
#define LVAR_Dice_Tamper                  (3)
#define LVAR_Personal_Enemy               (4)

// settings start
#define level_1_bet                       (5)            // setting one of the level_#_bet will adjust the 5 levels
#define level_2_bet                       (15)           //     of betting possible. placing 0 will make block that
#define level_3_bet                       (25)           //     level
#define level_4_bet                       (50)           //
#define level_5_bet                       (100)          //
#define level_1_penalty                   (0)            //
#define level_2_penalty                   (-5)           //
#define level_3_penalty                   (-10)          //
#define level_4_penalty                   (-20)          //
#define level_5_penalty                   (-30)          //

#define self_family                       (family_none)  // this is in case the casino is owned by the mob it can be set
                                                         // to reflect this, leave it at none generally unless it's in
                                                         // new reno, if you want an example of how to use this, see
                                                         // the ncMorMen in New Reno or just ask tom

#define dice_tamper_bit                   bit_10
#define get_dice_tamper                   lvar_bit(LVAR_Flags, dice_tamper_bit)

#define set_dice_tamper                   if (get_dice_tamper == false) then begin         \
                                             set_lvar_bit_on(LVAR_Flags, dice_tamper_bit); \
                                             remove_pid_qty(self_obj, PID_DICE, self_item_count( PID_DICE )) \
                                             remove_pid_qty(self_obj, PID_LOADED_DICE, self_item_count( PID_LOADED_DICE )) \
                                          end

// macros
#define get_dice_penalty(x)               ((level_1_penalty * (bet_amt == level_1_bet)) + \
                                           ((bet_amt == level_2_bet)*level_2_penalty) +   \
                                           ((bet_amt == level_3_bet)*level_3_penalty) +   \
                                           ((bet_amt == level_4_bet)*level_4_penalty) +   \
                                           ((bet_amt == level_5_bet)*level_5_penalty) +   \
                                           (x*-20))

#define dice_roll(x)                      (roll_vs_skill(dude_obj, SKILL_GAMBLING, get_dice_penalty(x)))
#define dice_mstr(x)                      message_str(SCRIPT_ZIDCEGRL, x)
#define dice_floater(x)                   float_msg(self_obj, dice_mstr(x), FLOAT_MSG_YELLOW)
#define dice_floater_rand(x,y)            dice_floater(random(x,y))
#define dice_reply(x)                     gSay_Reply(SCRIPT_ZIDCEGRL,x)
#define dice_display_mstr(x)              display_msg(dice_mstr(x))
#define dice_option(x, y, z)              giQ_Option(z,SCRIPT_ZIDCEGRL,x,y,NEUTRAL_REACTION)
#define regular_dice_cnt                  self_item_count( PID_DICE )
#define loaded_dice_cnt                   self_item_count( PID_LOADED_DICE )
#define dice_count                        (regular_dice_cnt + loaded_dice_cnt)
//#define dude_family_conflict              ((dude_family != self_family) and (self_family != family_none))
//#define dude_family_same                  ((dude_family == self_family) and (self_family != family_none))
#define dude_has_important_rep            ((is_story_finished) /*or (dude_has_porn_star_rep) or (dude_is_prizefighter) or (dude_is_made_man)*/)
#define play_dice_options  dice_option(324, Node014, -003);                                                              \
                           dice_option(325, Node014, -003);                                                              \
                           dice_option(326, Node999, -003);                                                              \
                           if (dude_caps >= level_1_bet) then begin                                                      \
                              dice_option(dice_mstr(328) + level_1_bet + dice_mstr(2328), Node991, 004);                 \
                              if (dude_caps >= level_2_bet) then begin                                                   \
                                 dice_option(dice_mstr(328) + level_2_bet + dice_mstr(2328), Node992, 004);              \
                                 if (dude_caps >= level_3_bet) then begin                                                \
                                    dice_option(dice_mstr(328) + level_3_bet + dice_mstr(2328) , Node993, 004);          \
                                    if (dude_caps >= level_4_bet) then begin                                             \
                                       dice_option(dice_mstr(328) + level_4_bet  + dice_mstr(2328), Node994, 004);       \
                                       if (dude_caps >= level_5_bet) then begin                                          \
                                          dice_option(dice_mstr(328) + level_5_bet  + dice_mstr(2328), Node995, 004);    \
                                       end                                                                               \
                                    end                                                                                  \
                                 end                                                                                     \
                              end                                                                                        \
                           end else begin                                                                                \
                              dice_option(329, Node015, 004);                                                            \
                           end                                                                                           \
                           if (bet_amt == 0) then                                                                        \
                             dice_option(330, Node999, 004);

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable bet_amt := 0;
variable trash_it;

procedure start begin
end

procedure timed_event_p_proc begin
   if (combat_is_initialized == false) then begin
      if (self_distance_from_dude <= 4) then begin
         if (random(0,2) == 0) then begin
            play_sfx("dice1");
         end else if (self_can_see_dude) then begin
            if (is_story_finished) then call Node002;
            //else if (dude_family_same) then call Node003;
            //else if (dude_family_conflict) then call Node005;
            //else if (dude_has_porn_star_rep) then call Node007;
            //else if (dude_is_prizefighter) then call Node009;
            else call Node011;
         end
      end
   end
   add_timer_event(self_obj,game_ticks(random(5,20)),1);
end

procedure map_enter_p_proc begin
   Only_Once:=0;
   if (map_first_run) then begin
      set_local_var(LVAR_Home_Tile, self_tile);
      check_restock_item_min_limit(PID_DICE, 1, 1, 100)
      check_restock_item_min_limit(PID_BOTTLE_CAPS, 5, 30, 100)
   end else if (self_tile != local_var(LVAR_Home_Tile)) then begin
      critter_attempt_placement(self_obj, local_var(LVAR_Home_Tile), self_elevation);
   end

	if (CUR_MAP_JUNKCSNO) then begin
	   set_self_team(TEAM_JUNKTOWNER );
		if ((global_var( GVAR_CAPTURE_GIZMO ) == 2) or not(is_gizmo_alive)) then begin
			destroy_object(self_obj);
		end
	end
	set_self_ai( AI_MERCHANT );
   add_timer_event(self_obj,game_ticks(random(1,30)),1);
end

procedure critter_p_proc begin
	if (CUR_MAP_JUNKCSNO) and (global_var( GVAR_DUDE_ENEMY_JUNK_CITIZEN ) == 1) then begin
		if (self_can_see_dude) then begin
			call flee_dude;
		end
	end
	else begin

   	if (hostile and self_can_see_dude) then begin
         self_attack_dude;
      //added by killap
      end else if (self_tile != local_var(LVAR_Home_Tile)) then begin
         if (not(combat_is_initialized)) then begin
            animate_move_to_tile(local_var(LVAR_Home_Tile));
         end
      end
      //end added

   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      critter_set_flee_state(self_obj, 1);
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   debug_msg("talk_p_proc:");
   if ((dice_count == 1) and (get_dice_tamper == false)) then begin
      debug_msg("   a");
      start_dialog_at_node(Node013);
   end else begin
      debug_msg("   b");
      call Node017;
   end
end

procedure destroy_p_proc begin
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   dice_display_mstr(100 + (obj_type(self_obj)!=1) + (10*(dude_has_gambling_skills==false)));
end

procedure description_p_proc begin
   script_overrides;
   if (obj_type(self_obj)==1) then begin
      dice_display_mstr(random(150,150 + (examined * (3+(3*dude_is_male)))) + (10*(dude_has_gambling_skills==false)));
   end else begin
      dice_display_mstr(140 + (dude_has_gambling_skills==false));
   end
   set_examined;
end

procedure use_skill_on_p_proc begin
variable the_roll;
   if ((action_being_used == SKILL_GAMBLING) and (dude_has_gambling_skills) and (obj_type(self_obj)==1)) then begin
      script_overrides;
      the_roll := roll_vs_skill(dude_obj, action_being_used ,0);
      if (is_success(the_roll)) then begin
         if (dice_count < 1) then begin
            dice_display_mstr(175);
         end else if (dice_count > 1) then begin
            dice_display_mstr(176);
         end else if (loaded_dice_cnt > 0) then begin
            dice_display_mstr(177);
         end else begin
            dice_display_mstr(187);
         end
      end else begin
         if (dice_count != 1) then begin
            dice_display_mstr(185);
         end else if (loaded_dice_cnt > 0) then begin
            if (is_critical(the_roll)) then begin
               dice_display_mstr(178);
            end else begin
               dice_display_mstr(179);
            end
         end else begin
            if (is_critical(the_roll)) then begin
               dice_display_mstr(185);
            end else begin
               dice_display_mstr(186);
            end
         end
      end
   end
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node991 begin
   bet_amt := level_1_bet;
   call Node016;
end
procedure Node992 begin
   bet_amt := level_2_bet;
   call Node016;
end
procedure Node993 begin
   bet_amt := level_3_bet;
   call Node016;
end
procedure Node994 begin
   bet_amt := level_4_bet;
   call Node016;
end
procedure Node995 begin
   bet_amt := level_5_bet;
   call Node016;
end

#define is_insert_message(x)  ((x == 203) or (x == 215) or (x == 219) or      \
                               (x == 255) or (x == 258) or                    \
                               ((260 <= x) and (x <= 263)) or                 \
                               (x == 261) or (x == 262))

procedure floater_rand_with_check_cust(variable x, variable y, variable the_patch) begin
variable the_msg;
   the_msg := random(x, y);
   if (is_insert_message(the_msg)) then begin
      float_msg(self_obj, "" + dice_mstr(the_msg) + the_patch + dice_mstr(the_msg+2000), FLOAT_COLOR_NORMAL);
   end else
      dice_floater(the_msg);
end

procedure Node002 begin
   call floater_rand_with_check_cust(200, 204, dude_name);
end

/*procedure Node003 begin
   call floater_rand_with_check_cust(219-(4*dude_is_male), 220+(3*dude_is_female), made_man_name);
end

procedure Node005 begin
   dice_floater_rand(238 - (3*dude_is_male), 238 + (3*dude_is_female));
end

procedure Node007 begin
   call floater_rand_with_check_cust(255 - (5*dude_is_male), 260 + (3*dude_is_female), prizefighter_name);
end

procedure Node009 begin
   call floater_rand_with_check_cust(271 - (dude_is_male), 277 + (2*dude_is_female), porn_star_name);
end*/

procedure Node011 begin
   dice_floater_rand(293 - (3*dude_is_male), 298 + (3*dude_is_female));
end

procedure Node013 begin
   if /*(dude_family_conflict) and*/ not(is_story_finished) then begin
      dice_reply(dice_mstr(320) + level_1_bet + dice_mstr(2321) );
   end else if (dude_has_important_rep) then begin
      dice_reply(dice_mstr(321 + dude_is_female) + level_1_bet + dice_mstr(2321));
   end else begin
      dice_reply(dice_mstr(323) + level_1_bet + dice_mstr(2321));
   end
   play_dice_options
end

procedure Node014 begin
   dice_reply(340 + (dude_is_made_man*(dude_is_male + (2*dude_is_female))));
   dice_option(343, Node999, 001);
   dice_option(dice_mstr(344) + dude_name + dice_mstr(2344), Node999, 001);
   dice_option(345, Node999, 001);
end

procedure Node015 begin
   if (dude_has_important_rep) then begin
      dice_reply(350 + dude_is_female);
      dice_option(354, Node999, 001);
   end else begin
      dice_reply(dice_mstr(352) + level_1_bet + dice_mstr(2352 + dude_is_female));
      dice_option(355, Node999, 001);
   end
end

procedure Node016 begin
variable the_roll_1;
variable the_roll_2;
variable the_result := 0;
   // play game
   dude_caps_adjust( -bet_amt );
   if (random(0,1)) then begin
      play_sfx("dice");
   end else begin
      play_sfx("dice1");
   end
   the_roll_1 := dice_roll(1);
   if (is_success(the_roll_1)) then begin
      the_result := 1;
      the_roll_2 := dice_roll(2);
      if (is_critical(the_roll_1) or is_success(the_roll_2)) then begin
         the_roll_1 := dice_roll(3);
         the_result := 2;
         if (is_critical(the_roll_2) or is_success(the_roll_1)) then begin
            the_result := 3;
         end
      end
   end
   // display results
   dude_caps_adjust( the_result*bet_amt );
   dice_reply(400 + (dude_has_important_rep*(dude_is_male + (2*dude_is_female))) + (10*the_result));
   play_dice_options
   dice_option(440 + night, Node999, 001);
end

procedure Node017 begin
   debug_msg("Node017");
   set_dice_tamper
   debug_msg("   a");
   dice_floater(450 + (dude_has_important_rep*(dude_is_male + (2*dude_is_female))));
   debug_msg("   b");
end
