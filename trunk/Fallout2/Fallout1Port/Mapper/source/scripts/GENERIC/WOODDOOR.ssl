#include "..\headers\define.h"


/* Door close distance */
/* How far do you want the last object that used the door to get away before it closes */
#define DOOR_CLOSE_DIST                 (10) //(3)

/* Timer id's */
#define TIMER_CLOSE                     (1)

procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_update_p_proc;
procedure map_enter_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

//local_var(4) == HALLDED | self is Hallded locked door
//local_var(5) == HALLDED | Hallded lock was picked?
//local_var(6) == HALLDED | has init Hallded door?
//local_var(7) == GotExpForPicking (NOT USED)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable GhDorGrd_Ptr;


/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
	if (tile_num(self_obj) == 17128) and (cur_map_index == MAP_HALLDED) then begin
		set_local_var(4, 1);//  HALLDED | self is Hallded locked door
		if (local_var(6) != 1) and (map_first_run) then begin
			set_local_var(5, 0);
			set_map_var(11, 1);
			set_local_var(6, 1);
		end
	end
end

procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
             (checkPartyMembersNearDoor == false) and
             ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
              (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
            obj_close(self_obj);
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end

procedure map_enter_p_proc begin
	if local_var(4) then begin//  HALLDED | self is Hallded locked door
		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			if ((map_var(11) == 0) or (local_var(5) == 1) or (map_var(12) == 1)) then begin
				obj_unlock(self_obj);
			end
		end
		else if (local_var(5) == 1) then begin
			obj_unlock(self_obj);
		end
		else if (local_var(5) == 0) and (map_var(12) != 1) then begin
			obj_close(self_obj);
			obj_lock(self_obj);
		end
	end
end

procedure map_update_p_proc begin
	if local_var(4) then begin//  HALLDED | self is Hallded locked door
		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			if ((map_var(11) == 0) or (local_var(5) == 1) or (map_var(12) == 1)) then begin
				obj_unlock(self_obj);
			end
		end
		else if (local_var(5) == 1) then begin
			obj_unlock(self_obj);
		end
		else if (local_var(5) == 0) and (map_var(12) != 1) then begin
			obj_close(self_obj);
			obj_lock(self_obj);
		end
	end
end

procedure use_p_proc begin
	if local_var(4) then begin//  HALLDED | self is Hallded locked door
//		if (map_var(11) == 1) then begin
//			obj_lock(self_obj);
//		end
//		else begin
//			if (map_var(11) == 0) then begin
//				obj_unlock(self_obj);
//			end
//		end
		if ((map_var(11) == 1) and (source_obj == dude_obj)) then begin
			if (local_var(5) == 0) then begin
				if (GhDorGrd_Ptr != 0) and not(combat_is_initialized) then begin
					float_msg(GhDorGrd_Ptr, message_str(SCRIPT_GHDORGRD, 101), 0);
					obj_lock(self_obj);
					script_overrides;
					display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
				end
				else begin
					obj_lock(self_obj);
					script_overrides;
					display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
				end
			end
			else begin
				if (local_var(5) == 1) then begin
					if (GhDorGrd_Ptr != 0) then begin
						if not(using_skill(dude_obj, 8)) and (source_obj == dude_obj) then begin
							script_overrides;
							set_global_var(SET_DOOR_GUARD_WARNING, 1);
						end
						else begin
							if using_skill(dude_obj, 8) and is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0)) and (source_obj == dude_obj) then begin
								obj_unlock(self_obj);
							end
						end
					end
					else begin
						obj_unlock(self_obj);
					end
				end
			end
		end
	end

   if fo1in2_auto_doors_closing then begin
   //	debug("door will close");
      last_source_obj := source_obj;
      add_timer_event(self_obj, 10, TIMER_CLOSE);
	end
end

procedure use_skill_on_p_proc
begin
	if local_var(4) then begin//  HALLDED | self is Hallded locked door
		variable LVar0 := 0;
		if (map_var(11) == 1) and (local_var(5) == 0) then begin
			if (action_being_used == SKILL_LOCKPICK) then begin//-- LOCKPICK
				script_overrides;
				LVar0 := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0);
				if (is_success(LVar0)) then begin
					obj_unlock(self_obj);
					set_local_var(5, 1);
					display_msg(message_str(SCRIPT_DOOR, 100));//{100}{}{You unlock the door.}
					give_exp_points(25);
					display_msg(message_str(SCRIPT_GENCHAT, 103) + "25" + message_str(SCRIPT_GENCHAT, 104));
				end
				else begin
					if (is_critical(LVar0)) then begin
						jam_lock(self_obj);
						display_msg(message_str(SCRIPT_DOOR, 110));//{110}{}{The lock is beyond your ability to pick.}
					end
					else begin
						display_msg(message_str(SCRIPT_DOOR, 103));//{103}{}{You were not able to pick the lock.}
					end
				end
			end
		end
		else begin
			display_msg(message_str(SCRIPT_DOOR, 109));//{109}{}{The door is already unlocked.}
		end
	end
end

procedure use_obj_on_p_proc
begin
	if local_var(4) then begin//  HALLDED | self is Hallded locked door
		variable LVar0 := 0;
		variable LVar1 := 0;
		LVar0 := obj_being_used_with;
		LVar1 := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 20);
		if ((obj_pid(LVar0) == PID_LOCKPICKS) and (map_var(11) == 1)) then begin
			if (local_var(5) == 0) then begin
				script_overrides;
				if (is_success(LVar1)) then begin
					obj_unlock(self_obj);
					set_local_var(5, 1);
					display_msg(message_str(SCRIPT_DOOR, 100));//{100}{}{You unlock the door.}
					display_msg(message_str(SCRIPT_GENCHAT, 103) + "25" + message_str(SCRIPT_GENCHAT, 104));
					give_exp_points(25);
				end
				else begin
					if (is_critical(LVar1)) then begin
						rm_obj_from_inven(dude_obj, LVar0);
						destroy_object(LVar0);
						display_msg(message_str(SCRIPT_DOOR, 101));//{101}{}{You broke your lockpicks!}
					end
					else begin
						display_msg(message_str(SCRIPT_DOOR, 103));//{103}{}{You were not able to pick the lock.}
					end
				end
			end
			else begin
				display_msg(message_str(SCRIPT_DOOR, 109));//{109}{}{The door is already unlocked.}
			end
		end
	end
end

procedure damage_p_proc
begin
	destroy_object(self_obj);
end

procedure description_p_proc
begin
	if (obj_is_locked(self_obj)) then begin
		display_msg(message_str(SCRIPT_DOOR, 104));//{104}{}{The door is locked.}
	end
end
