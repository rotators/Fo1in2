/*

	Junktown - Doc Morbid

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_MORBID
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;

procedure Morbid00;
procedure Morbid00a;
procedure Morbid01;
procedure Morbid02;
procedure Morbid03;
procedure Morbid04;
procedure Morbid04a;
procedure Morbid05;
procedure Morbid05a;
procedure Morbid06;
procedure Morbid07;
procedure Morbid08;
procedure Morbid09;
procedure Morbid09a;
procedure Morbid10;
procedure Morbid11;
procedure Morbid12;
procedure Morbid13;
procedure Morbid14;
procedure Morbid15;
procedure Morbid16;
procedure Morbid17;
procedure Morbid18;
procedure Morbid19;
procedure Morbid20;
procedure Morbid21;
procedure Morbid22;
procedure Morbid23;
procedure Morbid24;
procedure Morbid25;
procedure Morbid26;
procedure Morbid27;
procedure Morbid28;
procedure Morbid00L;
procedure Morbid00La;
procedure Morbid01L;
procedure Morbid02L;
procedure Morbid02La;
procedure Morbid03L;
procedure Morbid04L;
procedure Morbid05L;
procedure Morbid06L;
procedure Morbid07L;
procedure Morbid08L;
procedure Morbid09L;
procedure Morbid10L;
procedure Morbid00N;
procedure Morbid00Na;
procedure Morbid00Nb;
procedure Morbid01N;
procedure Morbid02N;
procedure Morbid03N;
procedure Morbid04N;

procedure get_eye;
procedure MorbidCombat;
procedure MorbidEnd;

procedure MorbidDownReact;

import variable fetch_dude;
import variable Morbid_ptr;
import variable ladder_down;
import variable ladder_up;
import variable Gretch_call;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable tmp_hostile;
variable heal;
variable COST;
variable BONUS;
variable DIAGNOSIS;
variable rndx;
variable getting_eye;
variable got_eye;
variable I_Hate_Player;

// by Sduibek for Fallout Fixt
procedure FetchEnd;
procedure FetchEnd2;
procedure FetchEnd3;
procedure FetchEnd4;
procedure FetchEnd5;
variable EyeHPloss;
variable CurrentHP;

#define LVAR_Sleeping 							(6)

procedure start
begin


	if (tile_num(self_obj) == 12498) and (elevation(self_obj) == 1) then begin
		move_to(self_obj, 13498, 1);
	end
end

procedure critter_p_proc
begin
	if (global_var(IS_MORBID_TEAM_HOSTILE) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack(dude_obj);
		end
	end
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (getting_eye) then begin
			call get_eye;
		end
		else begin
			if ((game_time_hour > 2000) and (game_time_hour < 2330)) then begin
				if (elevation(self_obj) != 1) then begin
					use_obj(ladder_down);
				end
				else begin
					if ((local_var(9) == 0) or (local_var(9) == 3)) then begin
						if (tile_num(self_obj) != 12702) then begin// TABLE ON LEFT SIDE OF UNDERGROUND
							animate_move_obj_to_tile(self_obj, 12702, 0);// TABLE ON LEFT SIDE OF UNDERGROUND
						end
					end
				end
			end
			else begin
				if ((local_var(9) == 0) or (local_var(9) == 3)) then begin
					sleeping
				end
			end
			if (local_var(9) == 1) then begin
				set_local_var(9, 2);
				add_timer_event(self_obj, 10 * 60 * 10, 3);
			end
		end
	end
	if (global_var(IS_MORBID_TEAM_HOSTILE) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			if (I_Hate_Player == 0) then begin
				tmp_hostile := 1;
				I_Hate_Player := 1;
			end
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_MORBID, 100));
end

procedure map_enter_p_proc
begin
	if (tile_num(self_obj) == 12498) and (elevation(self_obj) == 1) then begin
		move_to(self_obj, 13498, 1);
	end
	set_self_team(TEAM_JUNKTOWN_MORBID );
	Morbid_ptr := self_obj;
	sleep_time := 2340;
	wake_time := 810;
	home_tile := 13501;
	sleep_tile := 14098;
	if (combat_is_initialized == 0) then begin
		sleeping
		if ((game_time_hour > 1700) and (game_time_hour < 2330)) then begin
			move_to(self_obj, 12702, 1);
		end
		else begin
			if ((game_time_hour >= 2330) or (game_time_hour < 800)) then begin
				move_to(self_obj, sleep_tile, 1);
			end
			else begin
				if ((local_var(9) == 0) or (local_var(9) == 3)) then begin
					move_to(self_obj, home_tile, 0);
				end
			end
		end
	end
	rm_timer_event(self_obj);
	add_timer_event(self_obj, game_ticks(random(10, 30)), 2);
end

procedure map_update_p_proc
begin
	if (combat_is_initialized == 0) then begin
		if ((game_time_hour > 1700) and (game_time_hour < 2330)) then begin
			move_to(self_obj, 12702, 1);
		end
		else begin
			if ((game_time_hour >= 2330) or (game_time_hour < 800)) then begin
				move_to(self_obj, sleep_tile, 1);
			end
			else begin
				if ((local_var(9) == 0) or (local_var(9) == 3)) then begin
					rm_timer_event(self_obj);
					move_to(self_obj, home_tile, 0);
				end
			end
		end
	end
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	if ((game_time_hour >= 800) and (game_time_hour < 1700)) then begin
		set_local_var(6, 0);
	end
	if (local_var(6) == 1) then begin
		display_msg(message_str(SCRIPT_MORBID, 232));
	end
	else begin
		if (local_var(9) != 0) then begin
			float_msg(self_obj, message_str(SCRIPT_ENEMY, 101), 2);
		end
		else begin
			get_reaction
			start_gdialog(104, self_obj, 4, -1, -1);
			gsay_start;
			if (got_eye) then begin
				call Morbid09L;
			end
			else begin
				if (elevation(self_obj) == 1) then begin
					if (not(local_var(5))) then begin
						call Morbid00L;
					end
					else begin
						call Morbid01L;
					end
				end
				else begin
					if ((GAME_TIME_IN_DAYS) >= 80) then begin
						if (not(local_var(7))) then begin
							call Morbid17;
						end
						else begin
							call Morbid21;
						end
					end
					else begin
						if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
							if (local_var(4)) then begin
								call Morbid04N;
							end
							else begin
								call Morbid00N;
							end
						end
						else begin
							if (local_var(4)) then begin
								if (local_var(1) > 1) then begin
									call Morbid13;
								end
								else begin
									call Morbid16;
								end
							end
							else begin
								if (local_var(1) > 1) then begin
									call Morbid00;
								end
								else begin
									call Morbid15;
								end
							end
						end
					end
				end
			end
			gsay_end;
			end_dialogue;
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		add_timer_event(self_obj, game_ticks(1), 2);
		critter_injure(dude_obj, 64);//    DAM_BLIND         64
		got_eye := 1;
		dialogue_system_enter;
		game_ui_enable;
	end
	else begin
		if (fixed_param == 2) then begin
			if ((elevation(self_obj) == 1) and (game_time_hour > 1700) and (game_time_hour < 2330)) then begin
				reg_anim_func(2, self_obj);
				reg_anim_func(1, 1);
				reg_anim_animate(self_obj, 11, -1);
				reg_anim_obj_move_to_tile(self_obj, 12901, -1);
				reg_anim_animate(self_obj, 10, -1);
				reg_anim_obj_move_to_tile(self_obj, 12702, -1);
				reg_anim_func(3, 0);
			end
			add_timer_event(self_obj, game_ticks(random(10, 30)), 2);
		end
		else begin
			if (fixed_param == 3) then begin
				set_local_var(9, 3);
			end
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		set_local_var(9, 1);
		if (elevation(self_obj) == 0) then begin
			script_overrides;
			animate_move_obj_to_tile(self_obj, 13099, 1);
			use_obj(ladder_down);
		end
	end
end

procedure damage_p_proc
begin
	if (source_obj == dude_obj) then begin
		set_global_var(IS_MORBID_TEAM_HOSTILE, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var(IS_MORBID_TEAM_HOSTILE, 1);
	end
	if source_obj == dude_obj then begin
		inc_inv_evil_crit
	end
	rm_timer_event(self_obj);
end

procedure Morbid00
begin
	set_local_var(4, 1);
	gsay_reply(104, 101);
	giq_option( 4, SCRIPT_MORBID, 102, Morbid03, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 103, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 104, Morbid02, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 105, Morbid00a, BAD_REACTION );
	giq_option( -3, SCRIPT_MORBID, 106, Morbid03, NEUTRAL_REACTION );
	if ((global_var(GRETCH_PRIMECUTS) == 1) and (local_var(8) == 0)) then begin
		giq_option( 4, SCRIPT_MORBID, 233, Morbid27, BAD_REACTION );
	end
end

procedure Morbid00a
begin
	DownReact
	call Morbid01;
end

procedure Morbid01
begin
	gsay_message(104, 107, 50);
end

procedure Morbid02
begin
	gsay_reply(104, 108);
	giq_option( 4, SCRIPT_MORBID, 109, MorbidEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 110, MorbidDownReact, BAD_REACTION );
end

procedure MorbidDownReact begin
	DownReact
end

procedure Morbid03
begin
	gsay_message(104, 111, 50);
	if ((get_critter_stat(dude_obj, STAT_current_hp) == get_critter_stat(dude_obj, STAT_max_hp)) and not(get_critter_stat(dude_obj, STAT_current_poison)) and (get_critter_stat(dude_obj, STAT_current_rad) < 31)) then begin
		call Morbid04;
	end
	else begin
		call Morbid09;
	end
end

procedure Morbid04
begin
	gsay_reply(104, 112);
	giq_option( 4, SCRIPT_MORBID, 113, Morbid04a, BAD_REACTION );
	giq_option( 4, SCRIPT_MORBID, 114, Morbid07, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 129, Morbid04a, BAD_REACTION );
	giq_option( -3, SCRIPT_MORBID, 128, Morbid07, NEUTRAL_REACTION );
end

procedure Morbid04a
begin
	DownReact
	DownReact
	call Morbid05;
end

procedure Morbid05
begin
	gsay_reply(104, 115);
	giq_option( 4, SCRIPT_MORBID, 116, Morbid07, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 117, Morbid05a, BAD_REACTION );
	giq_option( -3, SCRIPT_MORBID, 128, Morbid07, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 129, Morbid05a, BAD_REACTION );
end

procedure Morbid05a
begin
	DownReact
	DownReact
	call Morbid06;
end

procedure Morbid06
begin
	fetch_dude := 1;
	Gretch_call := 1;
	gsay_message(104, 118, 51);
end

procedure Morbid07
begin
	if (item_caps_total(dude_obj) < 10) then begin
		call Morbid08;
	end
	else begin
		item_caps_adjust(dude_obj, -10);
		gsay_message(104, 119, 50);
	end
end

procedure Morbid08
begin
	DownReact
	gsay_reply(104, 120);
	giq_option( 4, SCRIPT_MORBID, 223, FetchEnd, BAD_REACTION );
	giq_option( 4, SCRIPT_MORBID, 221, FetchEnd5, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 237, FetchEnd5, NEUTRAL_REACTION );
end

procedure Morbid09
begin
	variable LVar0 := 0;
	gsay_message(104, 121, 50);
	DIAGNOSIS := message_str(SCRIPT_MORBID, 122);
	if (get_critter_stat(dude_obj, STAT_current_hp) == get_critter_stat(dude_obj, STAT_max_hp)) then begin
		DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 178);
	end
	else begin
		if (get_critter_stat(dude_obj, STAT_current_hp) > (get_critter_stat(dude_obj, STAT_max_hp) * 0.70000)) then begin
			DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 179);
		end
		else begin
			if (get_critter_stat(dude_obj, STAT_current_hp) > (get_critter_stat(dude_obj, STAT_max_hp) * 0.50000)) then begin
				DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 180);
			end
			else begin
				if (get_critter_stat(dude_obj, STAT_current_hp) > (get_critter_stat(dude_obj, STAT_max_hp) * 0.30000)) then begin
					DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 181);
				end
				else begin
					DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 182);
				end
			end
		end
	end
	DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, random(183, 186));
	if (get_critter_stat(dude_obj, STAT_current_poison)) then begin
		DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, random(187, 190));
	end
	LVar0 := get_critter_stat(dude_obj, STAT_current_rad);
	if (LVar0 > 30) then begin
		if (LVar0 < 101) then begin
			DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 191);
		end
		else begin
			if (LVar0 < 201) then begin
				DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 192);
			end
			else begin
				if (LVar0 < 401) then begin
					DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 193);
				end
				else begin
					DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 194);
				end
			end
		end
	end
	if ((LVar0 > 30) and (LVar0 < 251)) then begin
		DIAGNOSIS := DIAGNOSIS + message_str(SCRIPT_MORBID, 195);
	end
	heal := get_critter_stat(dude_obj, STAT_max_hp) - get_critter_stat(dude_obj, STAT_current_hp);
	if (local_var(1) >= 2) then begin
		COST := 3 * heal;
		if (get_critter_stat(dude_obj, STAT_current_poison)) then begin
			COST := COST + 25;
		end
	end
	else begin
		COST := 4 * heal;
		if (get_critter_stat(dude_obj, STAT_current_poison)) then begin
			COST := COST + 50;
		end
	end
	if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
		COST := COST * (3 / 2);
	end
	gsay_message(104, DIAGNOSIS, 50);
	call Morbid09a;
end

procedure Morbid09a
begin
	gsay_reply(104, message_str(SCRIPT_MORBID, 123) + COST + message_str(SCRIPT_MORBID, 124));
	giq_option( 4, SCRIPT_MORBID, 125, Morbid12, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 126, Morbid10, BAD_REACTION );
	giq_option( 4, SCRIPT_MORBID, 127, Morbid11, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 128, Morbid12, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 129, Morbid11, NEUTRAL_REACTION );
end

procedure Morbid10
begin
	DownReact
	gsay_message(104, 130, 51);
end

procedure Morbid11
begin
	gsay_message(104, 131, 50);
end

procedure Morbid12
begin
	UpReact
	gsay_message(104, 132, 50);
	gfade_out(1);
	rndx := 300 * heal;
	if (get_critter_stat(dude_obj, STAT_current_poison)) then begin
		rndx := rndx + 1200;
	end
	critter_heal(dude_obj, get_critter_stat(dude_obj, STAT_max_hp));
	poison(dude_obj, -get_critter_stat(dude_obj, STAT_current_poison));
	game_time_advance(game_ticks(rndx));
	gfade_in(1);
	if (item_caps_total(dude_obj) < COST) then begin
		call Morbid08;
	end
	else begin
		item_caps_adjust(dude_obj, -COST);
		gsay_message(104, 133, 50);
	end
end

procedure Morbid13
begin
	gsay_reply(104, 134);
	giq_option( 4, SCRIPT_MORBID, 135, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 136, Morbid14, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 137, Morbid03, NEUTRAL_REACTION );
	if ((global_var(GRETCH_PRIMECUTS) == 1) and (local_var(8) == 0)) then begin
		giq_option( 4, SCRIPT_MORBID, 233, Morbid27, BAD_REACTION );
	end
end

procedure Morbid14
begin
	gsay_message(104, 138, 50);
end

procedure Morbid15
begin
	gsay_reply(104, 139);
	giq_option( 4, SCRIPT_MORBID, 140, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 141, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 142, Morbid02, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 143, Morbid03, NEUTRAL_REACTION );
end

procedure Morbid16
begin
	gsay_reply(104, 144);
	giq_option( 4, SCRIPT_MORBID, 145, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 146, Morbid14, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 147, Morbid03, NEUTRAL_REACTION );
end

procedure Morbid17
begin
	set_local_var(7, 1);
	if (local_var(1) < 2) then begin
		UpReactLevel
	end
	gsay_reply(104, 148);
	giq_option( 4, SCRIPT_MORBID, 149, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 150, Morbid19, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 151, Morbid18, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 152, Morbid03, NEUTRAL_REACTION );
	if ((global_var(GRETCH_PRIMECUTS) == 1) and (local_var(8) == 0)) then begin
		giq_option( 4, SCRIPT_MORBID, 233, Morbid27, BAD_REACTION );
	end
end

procedure Morbid18
begin
	gsay_reply(104, 153);
	giq_option( 5, SCRIPT_MORBID, 154, Morbid03, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 155, Morbid20, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 156, Morbid19, NEUTRAL_REACTION );
end

procedure Morbid19
begin
	gsay_message(104, 157, 50);
end

procedure Morbid20
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_MORBID, 158);
	if (not(global_var(KILLIAN_DEAD))) then begin
		LVar0 := LVar0 + message_str(SCRIPT_MORBID, 159);
	end
	LVar0 := LVar0 + message_str(SCRIPT_MORBID, 160);
	gsay_reply(104, LVar0);
	giq_option( 4, SCRIPT_MORBID, 161, Morbid03, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 162, Morbid19, NEUTRAL_REACTION );
end

procedure Morbid21
begin
	gsay_reply(104, 163);
	giq_option( 4, SCRIPT_MORBID, 164, Morbid03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MORBID, 165, Morbid19, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 166, Morbid03, NEUTRAL_REACTION );
	if ((global_var(GRETCH_PRIMECUTS) == 1) and (local_var(8) == 0)) then begin
		giq_option( 4, SCRIPT_MORBID, 233, Morbid27, BAD_REACTION );
	end
end

procedure Morbid22
begin
	gsay_reply(104, 167);
	giq_option( 4, SCRIPT_MORBID, 168, Morbid03, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 169, Morbid03, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 170, Morbid03, NEUTRAL_REACTION );
end

procedure Morbid23
begin
	gsay_message(104, 171, 50);
end

procedure Morbid24
begin
	gsay_message(104, 172, 50);
end

procedure Morbid25
begin
	gsay_message(104, 173, 50);
end

procedure Morbid26
begin
	gsay_reply(104, 174);
	giq_option( 4, SCRIPT_MORBID, 175, Morbid03, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 176, Morbid03, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 177, Morbid03, NEUTRAL_REACTION );
end

procedure Morbid27
begin
	set_local_var(8, 1);
	gsay_reply(104, 234);
	giq_option( 4, SCRIPT_MORBID, 235, Morbid28, BAD_REACTION );
end

procedure Morbid28
begin
	BottomReact
	gsay_message(104, 236, 51);
end

procedure Morbid00L
begin
	gsay_reply(104, 204);
	set_local_var(5, 1);
	giq_option( 4, SCRIPT_MORBID, 207, MorbidCombat, BAD_REACTION );
	giq_option( 6, SCRIPT_MORBID, 208, Morbid00La, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 209, MorbidCombat, NEUTRAL_REACTION );
end

procedure Morbid00La
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Morbid02L;
	end
	else begin
		call Morbid01L;
	end
end

procedure Morbid01L
begin
	gsay_message(104, 210, 51);
	Gretch_call := 1;
	fetch_dude := 1;
end

procedure Morbid02L
begin
	gsay_reply(104, 211);
	giq_option( 5, SCRIPT_MORBID, 212, Morbid02La, NEUTRAL_REACTION );
	if (global_var(GRETCH_PRIMECUTS) == 1) then begin
		giq_option( 5, SCRIPT_MORBID, 213, Morbid03L, BAD_REACTION );
	end
end

procedure Morbid02La
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Morbid04L;
	end
	else begin
		call Morbid01L;
	end
end

procedure Morbid03L
begin
	rndx := get_critter_stat(dude_obj, STAT_gender);

	if (rndx == 0) then begin
		gsay_message(104, message_str(SCRIPT_MORBID, 214) + message_str(SCRIPT_MORBID, 205), 51);
	end
	else begin
		gsay_message(104, message_str(SCRIPT_MORBID, 214) + message_str(SCRIPT_MORBID, 206), 51);
	end
	Gretch_call := 1;
	fetch_dude := 1;
end

procedure Morbid04L
begin
	gsay_reply(104, 215);
	giq_option( 5, SCRIPT_MORBID, 216, Morbid06L, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 217, Morbid05L, NEUTRAL_REACTION );
end

procedure Morbid05L
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_MORBID, 218);
	LVar0 := LVar0 + message_str(SCRIPT_MORBID, 220);
	gsay_reply(104, LVar0);
	giq_option( 5, SCRIPT_MORBID, 221, Morbid07L, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 222, Morbid06L, NEUTRAL_REACTION );
end

procedure Morbid06L
begin
	gsay_message(104, 223, 51);
	Gretch_call := 1;
	fetch_dude := 1;
end

procedure Morbid07L
begin
	gsay_reply(104, 224);
	giq_option( 5, SCRIPT_MORBID, 225, Morbid08L, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 226, Morbid06L, NEUTRAL_REACTION );
end

procedure Morbid08L
begin
	gsay_message(104, 227, 50);
	getting_eye := 1;
end

procedure Morbid09L
begin
	got_eye := 0;
	gsay_reply(104, 229);
	giq_option( 5, SCRIPT_MORBID, 230, Morbid10L, NEUTRAL_REACTION );
end

procedure Morbid10L
begin
	gsay_message(104, 231, 50);
end

procedure Morbid00N
begin
	gsay_reply(104, 196);
	giq_option( 4, SCRIPT_MORBID, 197, Morbid00Na, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 198, Morbid00Nb, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 199, Morbid03N, NEUTRAL_REACTION );
end

procedure Morbid00Na
begin
	if (get_critter_stat(dude_obj, STAT_current_hp) < (get_critter_stat(dude_obj, STAT_max_hp) - 7)) then begin
		call Morbid03;
	end
	else begin
		call Morbid01;
	end
end

procedure Morbid00Nb
begin
	if (get_critter_stat(dude_obj, STAT_current_hp) < (get_critter_stat(dude_obj, STAT_max_hp) - 3)) then begin
		call Morbid03;
	end
	else begin
		call Morbid02N;
	end
end

procedure Morbid01N
begin
	DownReact
	gsay_message(104, 200, 51);
end

procedure Morbid02N
begin
	gsay_message(104, 201, 50);
end

procedure Morbid03N
begin
	gsay_message(104, 202, 50);
end

procedure Morbid04N
begin
	gsay_reply(104, 203);
	giq_option( 4, SCRIPT_MORBID, 197, Morbid00Na, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_MORBID, 198, Morbid00Nb, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_MORBID, 199, Morbid03N, NEUTRAL_REACTION );
end

procedure get_eye
begin
	CurrentHP := get_critter_stat(dude_obj, STAT_current_hp);
	EyeHPloss := (random(10, 15) - dude_luck);
	if (EyeHPloss < 1) then begin
		EyeHPloss := 1;
	end
	if (EyeHPloss > CurrentHP) then begin
		EyeHPloss := (EyeHPloss - 2);
	end
	animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(dude_obj), 1, 1), 1);
	anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(dude_obj)));
	rm_timer_event(self_obj);
	add_timer_event(self_obj, game_ticks(5), 1);
	game_ui_disable;
	if (EyeHPloss == 2) then begin
	end
	else begin
		critter_heal(dude_obj, -EyeHPloss);
	end
	game_ui_disable;
	display_msg(message_str(SCRIPT_MORBID, 228));
	getting_eye := 0;
end

procedure MorbidCombat
begin
	tmp_hostile := 1;
end

procedure MorbidEnd
begin
end

procedure FetchEnd
begin
	fetch_dude := 1;
	Gretch_call := 1;
end

procedure FetchEnd2
begin
	gsay_reply(104, 115);
	giq_option( 4, SCRIPT_MORBID, 237, FetchEnd5, NEUTRAL_REACTION );
end

procedure FetchEnd3
begin
	gsay_reply(104, 224);
	giq_option( 4, SCRIPT_MORBID, 208, FetchEnd4, NEUTRAL_REACTION );
end

procedure FetchEnd4
begin
	rm_timer_event(self_obj);
	reg_anim_func(2, dude_obj);
	reg_anim_func(1, 1);
	reg_anim_animate(dude_obj, 48, -1);
	reg_anim_animate(dude_obj, 37, -1);
	reg_anim_func(3, 0);
	getting_eye := 1;
end

procedure FetchEnd5
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -15)) or is_success(do_check(dude_obj, STAT_ch, -2))) then begin
		call FetchEnd3;
	end
	else begin
		call Morbid01L;
	end
end



