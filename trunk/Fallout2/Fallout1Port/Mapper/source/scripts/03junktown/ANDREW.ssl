#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15

procedure Andrew01;
procedure Andrew02;
procedure Andrew03;
procedure Andrew04;
procedure Andrew05;
procedure Andrew06;

import variable jail_door_ptr;

variable hostile;
variable round_counter;
variable moving_flag := 1;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
		call combat_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		round_counter := round_counter + 1;
	end
	if (round_counter > 3) then begin
		if (global_var(ENEMY_JUNKTOWN) == 0) then begin
			set_global_var(ENEMY_JUNKTOWN, 1);
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(ENEMY_JUNKTOWN) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if ((map_var(1) == 1) and ((game_time / (10 * 60 * 60 * 24)) > map_var(5))) then begin
			if (jail_door_ptr != 0) then begin
				obj_unlock(jail_door_ptr);
				use_obj(jail_door_ptr);
				moving_flag := 0;
				rm_timer_event(self_obj);
				add_timer_event(self_obj, game_ticks(5), 1);
			end
			set_map_var(1, 0);
			float_msg(self_obj, message_str(SCRIPT_ANDREW, 101), 3);
		end
		else begin
			if (map_var(3) == 1) then begin
				set_map_var(3, map_var(3) + 1);
				float_msg(self_obj, message_str(SCRIPT_ANDREW, 116), 2);
			end
			else begin
				if (map_var(3) == 3) then begin
					if (jail_door_ptr != 0) then begin
						obj_unlock(jail_door_ptr);
					end
					hostile := 1;
				end
				else begin
					if (moving_flag == 1) then begin
						if (tile_num(self_obj) != local_var(1)) then begin
							animate_move_obj_to_tile(self_obj, local_var(1), 0);
						end
					end
					if ((global_var(ENEMY_JUNKTOWN) == 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
						dialogue_system_enter;
					end
				end
			end
		end
	end
end

procedure look_at_p_proc
begin
	if (local_var(0) == 1) then begin
		script_overrides;
		display_msg(message_str(SCRIPT_ANDREW, 100));
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (global_var(ENEMY_JUNKTOWN) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_ANDREW, 102), 2);
		hostile := 1;
	end
	else begin
		start_gdialog(172, self_obj, 4, -1, -1);
		gsay_start;
		call Andrew01;
		gsay_end;
		end_dialogue;
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		obj_close(jail_door_ptr);
		rm_timer_event(self_obj);
		add_timer_event(self_obj, game_ticks(10), 2);
	end
	else begin
		if (fixed_param == 2) then begin
			moving_flag := 1;
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure Andrew01
begin
	gsay_reply(172, 103);
	giq_option(4, 172, 104, Andrew02, 50);
	giq_option(4, 172, 105, Andrew03, 50);
	giq_option(4, 172, 106, Andrew04, 50);
	giq_option(-3, 172, 113, Andrew06, 50);
end

procedure Andrew02
begin
	set_local_var(0, 1);
	gsay_reply(172, 107);
	giq_option(4, 172, 105, Andrew03, 50);
	giq_option(4, 172, 106, Andrew04, 50);
end

procedure Andrew03
begin
	gsay_reply(172, 108);
	giq_option(6, 172, 109, Andrew05, 50);
	giq_option(4, 172, 110, Andrew04, 50);
end

procedure Andrew04
begin
	gsay_message(172, 111, 50);
end

procedure Andrew05
begin
	gsay_reply(172, 112);
	giq_option(4, 172, 110, Andrew04, 50);
end

procedure Andrew06
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_message(172, 114, 50);
	end
	else begin
		gsay_message(172, 115, 50);
	end
end

procedure map_enter_p_proc
begin
	if (global_var(JUNKTOWN_WAS_INVADED) == 1) then begin
		kill_critter(self_obj, 49);
	end
	critter_add_trait(self_obj, 1, 6, 12);
	critter_add_trait(self_obj, 1, 5, 17);
	if (local_var(1) == 0) then begin
		set_local_var(1, tile_num(self_obj));
	end
end

