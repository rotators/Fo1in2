/*

	Junktown - generic CoC member

*/

#include "..\headers\define.h"

#define NAME                    SCRIPT_JCHIDMEM
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure ChildEnd;
procedure child_heal;
procedure child_pois;
procedure Child00;
procedure Child01;
procedure Child02;
procedure Child03;
procedure Child04;
procedure Child04a;
procedure Child05;
procedure Child05a;
procedure Child05b;
procedure Child06;
procedure Child07;
procedure Child08;
procedure Child09;
procedure Child09a;
procedure Child10;
procedure Child11;
procedure Child12;
procedure Child13;
procedure Child14;
procedure Child15;
procedure Child16;
procedure Child17;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable initial :=  0;
variable scared;
variable cost;
variable hp_injured;
variable healing_cost;
variable poison_cost;

#define LVAR_Sleeping 							(4)

procedure start begin

end

procedure critter_p_proc begin
	if (scared and (tile_distance_objs(self_obj, dude_obj) < 8) and (local_var(4) == 0)) then begin
		call flee_dude;
	end
	else begin
		sleeping
	end
end

procedure destroy_p_proc begin
	inc_inv_evil_crit
end

procedure map_enter_p_proc
begin
	if junktown_invaded then begin
		destroy_object(self_obj);
	end
	wake_time := 700;
	sleep_time := 1900;
	set_self_team(TEAM_CATHEDRAL );
	if (local_var(6) == 0) then begin
		set_local_var(6, tile_num(self_obj));
	end
	home_tile := local_var(6);
	sleep_tile := 15275;
	if ((GAME_TIME_IN_DAYS) < 80) then begin
		if not(is_loading_game) then begin    set_self_invisible;    end//  MAKE INVISIBLE
	end
	else begin
		if not(is_loading_game) then begin    set_self_visible;    end//  MAKE VISIBLE
	end
end

procedure map_update_p_proc
begin
	if ((GAME_TIME_IN_DAYS) < 80) then begin
		if not(is_loading_game) then begin    set_self_invisible;    end//  MAKE INVISIBLE
	end
	else begin
		if not(is_loading_game) then begin    set_self_visible;    end//  MAKE VISIBLE
	end
end

procedure pickup_p_proc
begin
	scared := 1;
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	if (scared) then begin
		float_msg(self_obj, message_str(SCRIPT_JCHIDMEM, 145), 2);
	end
	else begin
		if (local_var(5) == 0) then begin
			start_gdialog(108, self_obj, 4, -1, -1);
			gsay_start;
			call Child00;
			gsay_end;
			end_dialogue;
		end
	end
end

procedure ChildEnd
begin
end

procedure child_heal begin
	game_time_advance(game_ticks(600 * hp_injured));
	critter_heal(dude_obj, hp_injured);
	set_v13_days_left(-1);
end

procedure child_pois begin
	if (get_critter_stat(dude_obj, STAT_current_poison) != 0) then begin
		game_time_advance(game_ticks(1800));
	end
	poison(dude_obj, -get_critter_stat(dude_obj, STAT_current_poison));
end

procedure Child00
begin
	gsay_reply(108, 100);
	NOption( 101, Child04, 4 );
	NOption( 102, Child11, 5 );
	if ((map_var(2) == 1) and (local_var(7) == 0)) then begin
		NOption( 103, Child15, 5 );
	end
	NOption( 104, Child01, -3 );
end

procedure Child01
begin
	gsay_message(108, 105, 50);
	if (get_critter_stat(dude_obj, STAT_current_hp) < get_critter_stat(dude_obj, STAT_max_hp)) then begin
		call child_heal;
		call Child03;
	end
	else begin
		call Child02;
	end
end

procedure Child02
begin
	gsay_message(108, 106, 50);
end

procedure Child03
begin
	critter_heal(dude_obj, get_critter_stat(dude_obj, STAT_max_hp));
	poison(dude_obj, -get_critter_stat(dude_obj, STAT_current_poison));
	gsay_message(108, 107, 50);
end

procedure Child04
begin
	if (local_var(1) == 3) then begin
		healing_cost := 5;
		poison_cost := 12;
	end
	else begin
		if (local_var(1) == 1) then begin
			healing_cost := 20;
			poison_cost := 50;
		end
		else begin
			healing_cost := 10;
			poison_cost := 25;
		end
	end
	hp_injured := get_critter_stat(dude_obj, STAT_max_hp) - get_critter_stat(dude_obj, STAT_current_hp);
	cost := hp_injured * healing_cost;
	if (get_critter_stat(dude_obj, STAT_current_poison) != 0) then begin
		cost := cost + poison_cost;
	end
	if (hp_injured > 0) then begin
		gsay_message(108, 108, 50);
	end
	if (get_critter_stat(dude_obj, STAT_current_poison) != 0) then begin
		gsay_message(108, 109, 50);
	end
	if (get_critter_stat(dude_obj, STAT_current_rad) > 50) then begin
		gsay_message(108, 110, 50);
	end
	if (cost > 0) then begin
		gsay_reply(108, message_str(SCRIPT_JCHIDMEM, 111) + cost + message_str(SCRIPT_JCHIDMEM, 112));
		NOption( 113, Child04a, 4 );
		NOption( 114, ChildEnd, 4 );
		NOption( 115, Child09, 4 );
		NOption( message_str(SCRIPT_JCHIDMEM, 116) + (cost * 0.75000) + message_str(SCRIPT_JCHIDMEM, 117), Child05, 4 );
	end
	else begin
		gsay_message(108, 146, 50);
	end
end

procedure Child04a
begin
	if (cost > dude_caps) then begin
		call Child08;
	end
	else begin
		call Child06;
	end
end

procedure Child05
begin
	gsay_reply(108, 118);
	NOption( 119, Child05a, 4 );
	BOption( 120, Child05b, 4 );
end

procedure Child05a
begin
	if (cost > dude_caps) then begin
		call Child08;
	end
	else begin
		call Child06;
	end
end

procedure Child05b
begin
	set_local_var(5, 1);
	call ChildEnd;
end

procedure Child06
begin
	if (dude_is_male) then begin
		gsay_reply(108, 121);
	end
	else begin
		gsay_reply(108, 122);
	end
	NOption( 106, Child07, 0 );
end

procedure Child07 begin
	gfade_out(1);
	item_caps_adjust(dude_obj, -cost);
	call child_heal;
	call child_pois;
	gfade_in(1);
	gsay_message(108, 123, 50);
end

procedure Child08
begin
	if (dude_caps > 0) then begin
		cost := dude_caps;
	end
	gsay_reply(108, 124);
	if (dude_caps > 0) then begin
		NOption( 125, Child06, 4 );
	end
	NOption( 129, ChildEnd, 4 );
end

procedure Child09
begin
	if (dude_caps > 0) then begin
		cost := dude_caps;
	end
	gsay_reply(108, 127);
	if (dude_caps > 0) then begin
		NOption( 128, Child09a, 4 );
	end
	NOption( 129, ChildEnd, 4 );
end

procedure Child09a
begin
	if (cost > dude_caps) then begin
		call Child06;
	end
	else begin
		call Child10;
	end
end

procedure Child10
begin
	gsay_reply(108, 130);
	NOption( 106, Child06, 0 );
end

procedure Child11
begin
	gsay_reply(108, 131);
	NOption( 132, ChildEnd, 4 );
	NOption( 133, Child12, 4 );
end

procedure Child12
begin
	gsay_reply(108, 134);
	NOption( 135, Child14, 4 );
	NOption( 136, Child13, 4 );
end

procedure Child13
begin
	gsay_message(108, 137, 51);
end

procedure Child14
begin
	gsay_reply(108, 138);
	NOption( 139, ChildEnd, 4 );
end

procedure Child15
begin
	set_local_var(7, 1);
	gsay_reply(108, 140);
	NOption( 141, Child16, 5 );
	NOption( 142, ChildEnd, 5 );
end

procedure Child16
begin
	gsay_reply(108, 143);
	NOption( 144, ChildEnd, 5 );
end

procedure Child17
begin
	scared := 1;
	gsay_message(108, 145, 51);
end







