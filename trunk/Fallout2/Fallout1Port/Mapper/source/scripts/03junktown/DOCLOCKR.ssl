//
// ---TRAP SCRIPT---  Sduibek
//
#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure use_obj_on_p_proc;//    script_action == 7
procedure use_skill_on_p_proc;//    script_action == 8
procedure look_at_p_proc;//    script_action == 21
procedure use_p_proc;//    script_action == 6
procedure set_off_trap;

import variable Katja_ptr;
import variable messing_with_Morbid_stuff;
import variable removal_ptr;

variable SkillCheck;

//DocLockr.int   ; Doc Morbid's locker                                                         # local_vars=15

procedure start
begin
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
			call use_p_proc;
		end
		else begin
			if (script_action == 7) then begin//<-- use_obj_on_p_proc
				call use_obj_on_p_proc;
			end
			else begin
				if (script_action == 8) then begin//<-- use_skill_on_p_proc
					call use_skill_on_p_proc;
				end
			end
		end
	end
end

procedure look_at_p_proc
begin
	set_map_var(4, self_obj);
end

procedure use_p_proc
begin
	messing_with_Morbid_stuff := 1;
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (obj_is_locked(self_obj)) then begin
			script_overrides;
			display_msg(message_str(SCRIPT_DOCLOCKR, 100));
		end
		else begin
			if (local_var(2) == 0) then begin
				script_overrides;
				if (local_var(1) == 0) then begin
					SkillCheck := roll_vs_skill(source_obj, 11, 0);
					if (is_success(SkillCheck)) then begin
						reg_anim_func(2, source_obj);
						SkillCheck := roll_vs_skill(source_obj, 11, 0);
						if (is_success(SkillCheck)) then begin
							set_local_var(1, 1);
							set_local_var(2, 1);
							display_msg(message_str(SCRIPT_DOCLOCKR, 101));
						end
						else begin
							if (is_critical(SkillCheck) and (local_var(2) == 0)) then begin
								set_local_var(1, 1);
								set_local_var(2, 1);
								display_msg(message_str(SCRIPT_DOCLOCKR, 103));
								call set_off_trap;
							end
							else begin
								set_local_var(1, 1);
								display_msg(message_str(SCRIPT_DOCLOCKR, 102));
							end
						end
					end
					else begin
						call set_off_trap;
					end
				end
				else begin
					call set_off_trap;
				end
			end
		end
	end
	else begin
		if (source_obj == Katja_ptr) then begin
			set_local_var(1, 1);
			set_local_var(2, 1);
			obj_unlock(self_obj);
		end
	end
end

procedure use_obj_on_p_proc
begin
	messing_with_Morbid_stuff := 1;
	if (obj_pid(obj_being_used_with) == 84) then begin
		if (obj_is_locked(self_obj)) then begin
			script_overrides;
			SkillCheck := roll_vs_skill(source_obj, 9, -40);
			if (is_success(SkillCheck)) then begin
				obj_unlock(self_obj);
				display_msg(message_str(SCRIPT_DOCLOCKR, 107));
			end
			else begin
				if (is_critical(SkillCheck)) then begin
					jam_lock(self_obj);
					set_local_var(0, local_var(0) + 1);
					if ((local_var(0) >= 3) and (local_var(2) == 0)) then begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 106));
						call set_off_trap;
					end
					else begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 110));
					end
				end
				else begin
					set_local_var(0, local_var(0) + 1);
					if ((local_var(0) >= 3) and (local_var(2) == 0)) then begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 106));
						call set_off_trap;
					end
					else begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 108));
					end
				end
			end
		end
		else begin
			display_msg(message_str(SCRIPT_DOCLOCKR, 109));
		end
	end
end

procedure use_skill_on_p_proc
begin
	messing_with_Morbid_stuff := 1;
	if (action_being_used == 9) then begin//-- LOCKPICK
		if (obj_is_locked(self_obj)) then begin
			script_overrides;
			SkillCheck := roll_vs_skill(dude_obj, 9, -60);
			if (is_success(SkillCheck)) then begin
				obj_unlock(self_obj);
				display_msg(message_str(SCRIPT_DOCLOCKR, 107));
			end
			else begin
				if (is_critical(SkillCheck)) then begin
					jam_lock(self_obj);
					display_msg(message_str(SCRIPT_DOCLOCKR, 110));
				end
				else begin
					display_msg(message_str(SCRIPT_DOCLOCKR, 108));
					set_local_var(0, local_var(0) + 1);
					if ((local_var(0) >= 3) and (local_var(2) == 0)) then begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 106));
						call set_off_trap;
					end
				end
			end
		end
		else begin
			display_msg(message_str(SCRIPT_DOCLOCKR, 109));
		end
	end
	else begin
		if (action_being_used == 11) then begin//-- TRAPS//-- TRAPS
			if (local_var(1) == 0) then begin
				SkillCheck := roll_vs_skill(source_obj, 11, 0);
				if (is_success(SkillCheck)) then begin
					if (is_critical(SkillCheck)) then begin
						script_overrides;
						display_msg(message_str(SCRIPT_DOCLOCKR, 101));
						set_local_var(1, 1);
						set_local_var(2, 1);
					end
					else begin
						script_overrides;
						display_msg(message_str(SCRIPT_DOCLOCKR, 111));
						set_local_var(1, 1);
					end
				end
				else begin
					if (is_critical(SkillCheck)) then begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 106));
						call set_off_trap;
					end
				end
			end
			else begin
				if (local_var(2) == 0) then begin
					script_overrides;
					SkillCheck := roll_vs_skill(source_obj, 11, 0);
					if (is_success(SkillCheck)) then begin
						display_msg(message_str(SCRIPT_DOCLOCKR, 104));
						set_local_var(2, 1);
					end
					else begin
						if (is_critical(SkillCheck)) then begin
							display_msg(message_str(SCRIPT_DOCLOCKR, 106));
							call set_off_trap;
						end
						else begin
							display_msg(message_str(SCRIPT_DOCLOCKR, 105));
						end
					end
				end
			end
		end
	end
end

procedure set_off_trap
begin
	if (local_var(2) == 0) then begin
		variable Damage := 0;
		Damage := random(2, 7) + random(2, 7) + random(2, 7) + random(2, 7) + random(2, 7) + (difficulty_level * random(5, 10));
		play_sfx("WHN1XXX1");
		critter_dmg(dude_obj, Damage, 6);
//		explosion(tile_num(self_obj), elevation(self_obj), random(6, 36));
		destroy_object(self_obj);
	end
end
