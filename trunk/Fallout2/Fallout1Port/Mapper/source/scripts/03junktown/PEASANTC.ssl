#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure map_update_p_proc;//    script_action == 23
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure PeasantC00;
procedure PeasantC00a;
procedure PeasantC01;
procedure PeasantC02;
procedure PeasantC03;
procedure PeasantC03a;
procedure PeasantC04;
procedure PeasantC05;
procedure PeasantC06;
procedure PeasantC07;
procedure PeasantCEnd;
procedure sleeping;
procedure flee_dude;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

import variable removal_ptr;




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
		call destroy_p_proc;
	end
	else begin
		if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
			call map_enter_p_proc;
		end
		else begin
			if (script_action == 23) then begin//map_update_p_proc -- called every dozen seconds or so, & additionally on certain events (exit dialog, end combat, load map, etc)
				call map_update_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
							call critter_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			call flee_dude;
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_JUNK_CITIZEN, 1);// GVAR_ENEMY_JUNK_CITIZEN
		set_global_var(ENEMY_JUNKTOWN, 1);
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure map_enter_p_proc
begin
	if (map_var(2) == 1) then begin
		if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
		removal_ptr := self_obj;
	end
	else begin
		sleep_time := random(2215, 2230);
		wake_time := random(715, 730);
		if ((game_time / (10 * 60 * 60 * 24)) < 80) then begin
			sleep_tile := 15275;
			home_tile := 14267;
		end
		else begin
			sleep_tile := 23524;
			home_tile := 23923;
		end
	end
	critter_add_trait(self_obj, 1, 6, 16);
	critter_add_trait(self_obj, 1, 5, 6);
	if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
		move_to(self_obj, home_tile, elevation(self_obj));
	end
	if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
		move_to(self_obj, sleep_tile, elevation(self_obj));
	end
end

procedure map_update_p_proc
begin
	call sleeping;
end

procedure pickup_p_proc
begin
	set_local_var(1, 1);
	float_msg(self_obj, message_str(SCRIPT_PEASANTC, 124), 2);
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(2) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
	end
	else begin
		if (local_var(1) == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_PEASANTC, 124), 2);
		end
		else begin
			if ((game_time / (10 * 60 * 60 * 24)) < 80) then begin
				set_local_var(0, 1);
				if (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
					float_msg(self_obj, message_str(SCRIPT_PEASANTC, 100), 2);
				end
				else begin
					if (global_var(PLAYER_REPUTATION_GENERAL) < -10) then begin
						float_msg(self_obj, message_str(SCRIPT_PEASANTC, 101), 7);
					end
					else begin
						if (get_critter_stat(dude_obj, 34) == 0) then begin
							float_msg(self_obj, message_str(SCRIPT_PEASANTC, random(102, 103)), 3);
						end
						else begin
							float_msg(self_obj, message_str(SCRIPT_PEASANTC, random(102, 104)), 3);
						end
					end
				end
			end
			else begin
				set_map_var(2, 1);
				start_gdialog(438, self_obj, 4, -1, -1);
				gsay_start;
				call PeasantC00;
				gsay_end;
				end_dialogue;
			end
		end
	end
end

procedure PeasantC00
begin
	gsay_reply(438, 105);
	giq_option(4, 438, 106, PeasantCEnd, 50);
	giq_option(5, 438, 107, PeasantC00a, 50);
	giq_option(-3, 438, 108, PeasantC01, 50);
end

procedure PeasantC00a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call PeasantC03;
	end
	else begin
		call PeasantC02;
	end
end

procedure PeasantC01
begin
	gsay_message(438, 109, 50);
end

procedure PeasantC02
begin
	gsay_message(438, 110, 50);
end

procedure PeasantC03
begin
	gsay_reply(438, 111);
	giq_option(5, 438, 112, PeasantC04, 51);
	giq_option(6, 438, 113, PeasantC03a, 50);
	giq_option(4, 438, 106, PeasantCEnd, 50);
end

procedure PeasantC03a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, -10))) then begin
		call PeasantC06;
	end
	else begin
		call PeasantC05;
	end
end

procedure PeasantC04
begin
	set_local_var(1, 1);
	gsay_message(438, 114, 51);
end

procedure PeasantC05
begin
	gsay_message(438, 115, 50);
end

procedure PeasantC06
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_PEASANTC, 116);
	if (global_var(KILLIAN_DEAD) == 1) then begin
		if (global_var(GIZMO_DEAD) == 1) then begin
			LVar0 := LVar0 + message_str(SCRIPT_PEASANTC, 120);
		end
		else begin
			LVar0 := LVar0 + message_str(SCRIPT_PEASANTC, 119);
		end
	end
	else begin
		if (global_var(GIZMO_DEAD) == 1) then begin
			LVar0 := LVar0 + message_str(SCRIPT_PEASANTC, 118);
		end
		else begin
			LVar0 := LVar0 + message_str(SCRIPT_PEASANTC, 117);
		end
	end
	gsay_reply(438, LVar0);
	giq_option(5, 438, 121, PeasantC07, 50);
	giq_option(5, 438, 122, PeasantCEnd, 50);
end

procedure PeasantC07
begin
	gsay_message(438, 123, 50);
end

procedure PeasantCEnd
begin
end

procedure sleeping
begin
	if (local_var(2) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(2, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(2, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, sleep_tile, 0);
				end
				else begin
					set_local_var(2, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(2, 1);
				end
			end
		end
	end
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end



