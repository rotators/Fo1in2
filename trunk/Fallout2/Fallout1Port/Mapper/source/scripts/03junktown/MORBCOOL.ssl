#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure pickup_p_proc;//    script_action == 4
procedure use_p_proc;//    script_action == 6
procedure use_skill_on_p_proc;//    script_action == 8

variable test;

import variable messing_with_Morbid_stuff;


procedure start
begin
	if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
		call pickup_p_proc;
	end
	else begin
		if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
			call use_p_proc;
		end
		else begin
			if (script_action == 8) then begin//<-- use_skill_on_p_proc
				call use_skill_on_p_proc;
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		script_overrides;
		display_msg(message_str(877, 100));
		messing_with_Morbid_stuff := 1;
	end
end

procedure use_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		script_overrides;
		display_msg(message_str(877, 101));
		messing_with_Morbid_stuff := 1;
	end
end

procedure use_skill_on_p_proc
begin
	if (action_being_used == 10) then begin//-- STEAL
		script_overrides;
		display_msg(message_str(877, 101));
	end
	else begin
		if (action_being_used == 7) then begin//-- DOCTOR
			test := roll_vs_skill(source_obj, action_being_used, 0);
			if (is_success(test)) then begin
				script_overrides;
				if (is_critical(test)) then begin
					display_msg(message_str(877, 102));
				end
				else begin
					display_msg(message_str(877, 104));
				end
			end
			else begin
				script_overrides;
				display_msg(message_str(877, 103));
			end
		end
	end
end

