#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure map_exit_p_proc;//    script_action == 16
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

procedure set_sleep_tile;
procedure sleeping;

import variable Neal_ptr;
import variable Skul_target;
import variable Trish_ptr;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable dest_tile := 7000;
variable hostile;
variable sleeping_disabled;
variable waypoint;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 16) then begin//map_exit_p_proc (also appears as "remove_party"!) - called on red exit grids
						call map_exit_p_proc;
					end
					else begin
						if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
							call pickup_p_proc;
						end
						else begin
							if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
								call talk_p_proc;
							end
							else begin
								if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
									call timed_event_p_proc;
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(DUDE_ENEMY_SKULZ) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			if ((map_var(2) == 2) and (waypoint == 0)) then begin
				waypoint := 1;
				dest_tile := 26297;
				sleeping_disabled := 1;
			end
			else begin
				if ((global_var(DESTROY_VATS_10) == 1) and (waypoint == 0)) then begin
					waypoint := 1;
					sleeping_disabled := 1;
					add_timer_event(self_obj, game_ticks(8), 3);
				end
			end
			if (waypoint != 0) then begin
				if (tile_distance(tile_num(self_obj), dest_tile) > 3) then begin
					animate_move_obj_to_tile(self_obj, dest_tile, 0);
				end
				else begin
					if (waypoint == 1) then begin
						if (map_var(2) == 0) then begin
							dest_tile := 33519;
						end
						else begin
							dest_tile := 20076;
							waypoint := 2;
						end
					end
				end
			end
			if (sleeping_disabled == 0) then begin
				call sleeping;
			end
		end
		else begin
			if (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
				if ((global_var(BUST_SKULZ) != 2) and (sleeping_disabled == 0)) then begin
					call sleeping;
				end
			end
		end
	end
end

procedure destroy_p_proc
begin
	if (home_tile == 20082) then begin
		Skul_target := 0;
	end
	if (cur_map_index == 11) and (map_var(2) == 1) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		set_map_var(0, (map_var(0) - 1));
	end
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_SKULZ, 1);// Enemy of Skulz
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_GENSKULZ, 100));
end

procedure map_enter_p_proc
begin
	if (not(local_var(5))) then begin
		set_local_var(5, tile_num(self_obj));
	end
	home_tile := local_var(5);
	if (cur_map_index == 10) then begin //  JUNKTOWN - ENTRANCE, MORBID, LARS
		if (global_var(BUST_SKULZ) != 2) then begin
			if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
		end
		else begin
			if (global_var(JUNKTOWN_WAS_INVADED) != 1) then begin
				if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 0);    end//  MAKE VISIBLE
			end
			else begin
				kill_critter(self_obj, 0);
			end
		end
	end
	if (cur_map_index != 11) then begin
		if (cur_map_index == 10) then begin //  JUNKTOWN - ENTRANCE, MORBID, LARS
			if (global_var(BUST_SKULZ) == 2) then begin
				add_timer_event(self_obj, game_ticks(random(30, 60)), 1);
			end
		end
		else begin
			if (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
				add_timer_event(self_obj, game_ticks(random(30, 60)), 1);
			end
		end
	end
	else begin
		if ((global_var(DESTROY_VATS_10) == 1) and (map_var(2) == 0)) then begin
			destroy_object(self_obj);
		end
	end
	critter_add_trait(self_obj, 1, 6, 14);
	critter_add_trait(self_obj, 1, 5, 59);
	if (global_var(BUST_SKULZ) == 2) then begin
		if (cur_map_index == 10) then begin //  JUNKTOWN - ENTRANCE, MORBID, LARS
			if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 0);    end//  MAKE VISIBLE
		end
		else begin
			destroy_object(self_obj);
		end
	end
	call set_sleep_tile;
	if (home_tile == 20082) and (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		Skul_target := self_obj;
	end
end

procedure map_exit_p_proc
begin
	if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		if ((global_var(DESTROY_VATS_10) == 1) and (map_var(2) == 0)) then begin
			destroy_object(self_obj);
		end
	end
end

procedure pickup_p_proc
begin
	float_msg(self_obj, message_str(SCRIPT_GENSKULZ, 101), 2);
	hostile := 1;
end

procedure talk_p_proc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (cur_map_index == 10) then begin //  JUNKTOWN - ENTRANCE, MORBID, LARS
		set_local_var(6, 104);
	end
	else begin
		if (cur_map_index == 11) and (map_var(2) == 2) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			set_local_var(6, 112);
		end
		else begin
			LVar1 := random(101, 105);
			LVar1 := random(101, 105);
			LVar1 := random(101, 105);
			set_local_var(6, LVar1);
		end
	end
	LVar0 := message_str(SCRIPT_GENSKULZ, local_var(6));
	if (local_var(4) == 1) then begin
		LVar0 := message_str(SCRIPT_GENSKULZ, 106);
	end
	float_msg(self_obj, LVar0, 0);
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		if ((local_var(4) == 0) and (combat_is_initialized == 0)) then begin
			if (random(0, 1)) then begin
				float_msg(self_obj, message_str(SCRIPT_GENSKULZ, random(107, 112)), 0);
			end
			else begin
				animate_move_obj_to_tile(self_obj, tile_num_in_direction(local_var(5), random(0, 3), random(0, 5)), 0);
			end
		end
		add_timer_event(self_obj, game_ticks(random(30, 60)), 1);
	end
	else begin
		if ((fixed_param == 2) and (Trish_ptr != 0) and (Neal_ptr != 0)) then begin
			float_msg(self_obj, message_str(SCRIPT_SHARK, 102), 2);
			rm_timer_event(Trish_ptr);
			rm_timer_event(Neal_ptr);
			reg_anim_func(2, self_obj);
			reg_anim_func(1, 1);
			reg_anim_obj_move_to_obj(self_obj, Trish_ptr, -1);
			reg_anim_animate(self_obj, 16, -1);
			reg_anim_animate(Trish_ptr, 20, 4);
			reg_anim_animate(Trish_ptr, 48, -1);
			reg_anim_animate(Trish_ptr, 37, -1);
			reg_anim_obj_run_to_tile(Trish_ptr, 19889, -1);
			reg_anim_func(3, 0);
			add_timer_event(Neal_ptr, game_ticks(3), 1);
		end
		else begin
			if (fixed_param == 3) then begin
				dest_tile := 26297;
				sleeping_disabled := 1;
			end
		end
	end
end

procedure set_sleep_tile
begin
	if (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
		if (home_tile == 13502) then begin
			sleep_tile := 13093;
		end
		else begin
			if (home_tile == 13516) then begin
				sleep_tile := 13719;
			end
			else begin
				if (home_tile == 13717) then begin
					sleep_tile := 13721;
				end
			end
		end
		sleep_time := random(2200, 2215);
		wake_time := random(800, 815);
	end
	else begin
		if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			sleep_tile := 7000;
			sleep_time := 300;
			wake_time := 1600;
			night_person := 1;
		end
		else begin
			if (cur_map_index == 10) then begin //  JUNKTOWN - ENTRANCE, MORBID, LARS
				sleep_tile := home_tile;
				sleep_time := 2200;
				wake_time := 1000;
			end
		end
	end
end

procedure sleeping
begin
	if (local_var(4) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(4, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(4, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(4, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(4, 1);
				end
			end
		end
	end
end



