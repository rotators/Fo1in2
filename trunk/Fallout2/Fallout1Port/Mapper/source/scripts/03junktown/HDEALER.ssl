/*

	Junktown - ?

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_HDEALER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21

procedure Dealer00;
procedure Dealer01;
procedure Dealer02;
procedure Dealer03;
procedure Dealer04;
procedure Dealer05;
procedure Dealer06;
procedure Dealer07;
procedure CheckMoney00;
procedure CheckMoney01;
procedure CheckMoney02;
procedure CheckMoney03;
procedure DealerEnd;
procedure GetOdds;
procedure flee_dude;

variable tmp_hostile;
variable Bet;
variable Only_Once := 1;

procedure start begin
	if Only_Once then begin
		if (cur_map_index == MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 16);
		end
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 50);
		Only_Once := 0;
	end
end

procedure combat
begin
	tmp_hostile := 1;
end

procedure critter_p_proc
begin
	if (cur_map_index == MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		if ((global_var(CAPTURE_GIZMO) == 2) or (global_var(GIZMO_DEAD) == 1)) then begin
			destroy_object(self_obj);
		end
	end
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		call flee_dude;
	end
	if (cur_map_index == MAP_JUNKCSNO) and (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin //  GVAR_ENEMY_JUNK_CITIZEN,  MAP == JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			call flee_dude;
		end
	end
end

procedure map_enter_p_proc
begin
	if (cur_map_index == MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		if ((global_var(CAPTURE_GIZMO) == 2) or (global_var(GIZMO_DEAD) == 1)) then begin
			destroy_object(self_obj);
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		tmp_hostile := 1;
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	if (not((cur_map_index == MAP_JUNKCSNO) and (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1))) then begin //  GVAR_ENEMY_JUNK_CITIZEN,  MAP == JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		get_reaction
		start_gdialog(697, self_obj, 4, -1, -1);
		gsay_start;
		call Dealer00;
		gsay_end;
		end_dialogue;
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (cur_map_index == MAP_JUNKENT) or (cur_map_index == MAP_JUNKCSNO) or (cur_map_index == MAP_JUNKKILL) then begin //  JUNKTOWN - ANY MAPS
			set_global_var(DUDE_ENEMY_JUNK_CITIZEN, 1);// GVAR_ENEMY_JUNK_CITIZEN
			set_global_var(ENEMY_JUNKTOWN, 1);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_FALCON1, 168));
end

procedure Dealer00
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_FALCON1, 173) + message_str(SCRIPT_FALCON1, 202) + item_caps_total(dude_obj) + message_str(SCRIPT_FALCON1, 203);
	gsay_reply(697, LVar0);
	giq_option(4, 697, 174, CheckMoney00, 50);
	giq_option(4, 697, 175, CheckMoney01, 50);
	giq_option(4, 697, 176, CheckMoney02, 50);
	giq_option(4, 697, 177, CheckMoney03, 50);
	giq_option(4, 697, 178, DealerEnd, 50);
	giq_option(-3, 697, 179, Dealer01, 50);
end

procedure Dealer01
begin
	gsay_reply(697, message_str(SCRIPT_FALCON1, 180) + message_str(SCRIPT_FALCON1, 181));
end

procedure Dealer02
begin
	gsay_reply(697, message_str(SCRIPT_FALCON1, 182) + message_str(SCRIPT_FALCON1, 204));
	item_caps_adjust(dude_obj, Bet * -1);
	call Dealer07;
end

procedure Dealer03
begin
	gsay_reply(697, message_str(SCRIPT_FALCON1, 183) + message_str(SCRIPT_FALCON1, 204));
	call Dealer07;
end

procedure Dealer04
begin
	gsay_reply(697, message_str(SCRIPT_FALCON1, 184) + message_str(SCRIPT_FALCON1, 204));
	item_caps_adjust(dude_obj, Bet);
	call Dealer07;
end

procedure Dealer05
begin
	gsay_reply(697, message_str(SCRIPT_FALCON1, 185) + message_str(SCRIPT_FALCON1, 204));
	item_caps_adjust(dude_obj, Bet * 2);
	call Dealer07;
end

procedure Dealer06
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_message(697, 186, 50);
	end
	else begin
		gsay_message(697, 187, 50);
	end
	call Dealer00;
end

procedure Dealer07
begin
	giq_option(4, 697, 114, Dealer00, 50);
	giq_option(4, 697, 178, DealerEnd, 50);
end

procedure CheckMoney00
begin
	Bet := 5;
	if (item_caps_total(dude_obj) < Bet) then begin
		call Dealer06;
	end
	else begin
		call GetOdds;
	end
end

procedure CheckMoney01
begin
	Bet := 15;
	if (item_caps_total(dude_obj) < Bet) then begin
		call Dealer06;
	end
	else begin
		call GetOdds;
	end
end

procedure CheckMoney02
begin
	Bet := 25;
	if (item_caps_total(dude_obj) < Bet) then begin
		call Dealer06;
	end
	else begin
		call GetOdds;
	end
end

procedure CheckMoney03
begin
	Bet := 50;
	if (item_caps_total(dude_obj) < Bet) then begin
		call Dealer06;
	end
	else begin
		call GetOdds;
	end
end

procedure DealerEnd
begin
end

procedure GetOdds
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 36) - 10;
	LVar1 := roll_vs_skill(dude_obj, SKILL_GAMBLING, -15);
	if (is_critical(LVar1)) then begin
		if (is_success(LVar1)) then begin
			LVar0 := LVar0 + 10;
		end
		else begin
			LVar0 := LVar0 - 5;
		end
	end
	else begin
		if (is_success(LVar1)) then begin
			LVar0 := LVar0 + 5;
		end
	end
	if (do_check(dude_obj, STAT_lu, 0)) then begin
		LVar0 := LVar0 + 5;
	end
	if (LVar0 < 10) then begin
		call Dealer02;
	end
	else begin
		if (LVar0 < 20) then begin
			call Dealer03;
		end
		else begin
			if (LVar0 < 30) then begin
				call Dealer04;
			end
			else begin
				call Dealer05;
			end
		end
	end
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end


