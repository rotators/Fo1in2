#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Gustofer00;
procedure Gustofer00a;
procedure Gustofer01;
procedure Gustofer02;
procedure Gustofer03;
procedure Gustofer04;
procedure Gustofer05;
procedure Gustofer06;
procedure Gustofer07;
procedure Gustofer08;
procedure Gustofer09;
procedure Gustofer10;
procedure Gustofer10a;
procedure Gustofer11;
procedure Gustofer12;
procedure Gustofer13;
procedure Gustofer14;
procedure Gustofer15;
procedure Gustofer16;
procedure Gustofer17;
procedure Gustofer18;
procedure Gustofer19;
procedure GustoferEnd;
procedure GustoferWait;
procedure GustoferBet1;
procedure GustoferBet2;
procedure flee_dude;
procedure destroy_challenger;
procedure items_held;

variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable round_counter;
variable robbed;
variable dude_bet;
variable line148flag;

import variable challenger_ptr;
import variable fight;
import variable Saul_loses;
import variable Saul_wins;
import variable shot_challenger;

procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
		call combat_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure combat_p_proc
begin
	if ((fixed_param == 4) and obj_can_see_obj(self_obj, dude_obj)) then begin
		round_counter := round_counter + 1;
	end
	if (round_counter > 3) then begin
		if (global_var(ENEMY_JUNKTOWN) == 0) then begin
			set_global_var(ENEMY_JUNKTOWN, 1);
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(DUDE_ENEMY_JUNK_BOXER) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	if (tile_distance_objs(self_obj, dude_obj) < 8) and (local_var(1) == 0) then begin
		call items_held;
		if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
			call flee_dude;
		end
	end
	else begin
		if (game_time_hour == 1400) then begin
			if ((line148flag == 0) and ((game_time / (10 * 60 * 60 * 24) % 3) == 0)) then begin
				line148flag := 1;
				fight := 1;
				float_msg(self_obj, message_str(SCRIPT_GUSTOFER, 148), 0);
			end
		end
		else begin
			line148flag := 0;
		end
		if (Saul_wins or Saul_loses and shot_challenger) then begin
			call destroy_challenger;
			if (obj_can_see_obj(self_obj, dude_obj) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
				dialogue_system_enter;
			end
		end
		else begin
			call sleeping;
		end
	end
end

procedure destroy_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_JUNK_BOXER, 1);
	end

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
end

procedure map_enter_p_proc
begin
	if (global_var(JUNKTOWN_WAS_INVADED) == 1) then begin
		destroy_object(self_obj);
	end
	if (local_var(0) == 0) then begin
		set_local_var(0, tile_num(self_obj));
	end
	if (not(metarule(22, 0)) and not(obj_is_carrying_obj_pid(self_obj, PID_BOTTLE_CAPS))) then begin
		item_caps_adjust(self_obj, random(0, 10));
	end
	critter_add_trait(self_obj, 1, 6, 15);
	sleep_time := 1920;
	wake_time := 530;
	home_tile := 17096;
	sleep_tile := 7000;
end

procedure pickup_p_proc
begin
	robbed := 1;
	dialogue_system_enter;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (not(robbed) and (local_var(2) == 1) and ((game_time / (10 * 60 * 60 * 24) % 3) != 0)) then begin
		call Gustofer05;
	end
	else begin
		start_gdialog(529, self_obj, 4, -1, -1);
		gsay_start;
		if (Saul_wins) then begin
			if (dude_bet == 1) then begin
				call Gustofer16;
			end
			else begin
				call Gustofer07;
			end
		end
		else begin
			if (Saul_loses) then begin
				if (dude_bet == 2) then begin
					call Gustofer16;
				end
				else begin
					call Gustofer07;
				end
			end
			else begin
				if (robbed) then begin
					call Gustofer13;
				end
				else begin
					if ((game_time / (10 * 60 * 60 * 24) % 3) == 0) then begin
						if (game_time_hour < 1400) then begin
							if (dude_bet == 0) then begin
								call Gustofer06;
							end
							else begin
								gsay_message(529, 152, 50);
							end
						end
						else begin
							if (challenger_ptr != 0) then begin
								call Gustofer19;
							end
							else begin
								call Gustofer18;
								dude_bet := 0;
							end
						end
					end
					else begin
						call Gustofer00;
					end
				end
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure Gustofer00
begin
	set_local_var(2, 1);
	gsay_reply(529, 100);
	giq_option(-3, 529, 101, Gustofer01, 50);
	giq_option(4, 529, 102, GustoferEnd, 50);
	giq_option(6, 529, 103, Gustofer00a, 50);
end

procedure Gustofer00a
begin
	if ((game_time / (10 * 60 * 60 * 24) % 3) == 1) then begin
		call Gustofer03;
	end
	else begin
		call Gustofer02;
	end
end

procedure Gustofer01
begin
	gsay_message(529, 104, 50);
end

procedure Gustofer02
begin
	gsay_reply(529, 105);
	giq_option(4, 529, 107, GustoferEnd, 50);
	if (global_var(SAUL_STATUS) == 0) then begin
		giq_option(4, 529, 108, Gustofer04, 50);
	end
end

procedure Gustofer03
begin
	gsay_reply(529, 106);
	giq_option(4, 529, 107, GustoferEnd, 50);
	if (global_var(SAUL_STATUS) == 0) then begin
		giq_option(4, 529, 108, Gustofer04, 50);
	end
end

procedure Gustofer04
begin
	gsay_message(529, 109, 50);
end

procedure Gustofer05
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_GUSTOFER, 110);
	if ((game_time / (10 * 60 * 60 * 24) % 3) == 1) then begin
		LVar0 := LVar0 + message_str(SCRIPT_GUSTOFER, 112);
	end
	else begin
		if ((game_time / (10 * 60 * 60 * 24) % 3) == 2) then begin
			LVar0 := LVar0 + message_str(SCRIPT_GUSTOFER, 111);
		end
	end
	float_msg(self_obj, LVar0, 0);
end

procedure Gustofer06
begin
	gsay_reply(529, 113);
	giq_option(-3, 529, 101, Gustofer01, 50);
	giq_option(4, 529, 114, GustoferEnd, 50);
	giq_option(4, 529, 115, Gustofer08, 50);
	giq_option(4, 529, 116, Gustofer09, 50);
end

procedure Gustofer07
begin
	Saul_wins := 0;
	Saul_loses := 0;
	dude_bet := 0;
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_message(529, 150, 50);
	end
	else begin
		gsay_message(529, 151, 50);
	end
end

procedure Gustofer08
begin
	gsay_reply(529, 120);
	giq_option(4, 529, 121, GustoferBet1, 50);
	giq_option(4, 529, 122, GustoferBet2, 50);
end

procedure Gustofer09
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		gsay_reply(529, 123);
		if (global_var(SAUL_STATUS) == 0) then begin
			giq_option(4, 529, 124, Gustofer10, 50);
		end
		giq_option(4, 529, 125, Gustofer11, 50);
		giq_option(4, 529, 126, GustoferEnd, 50);
	end
	else begin
		gsay_message(529, 127, 50);
	end
end

procedure Gustofer10
begin
	gsay_reply(529, 128);
	giq_option(0, 634, 106, Gustofer10a, 50);
end

procedure Gustofer10a
begin
	gsay_reply(529, 129);
	giq_option(4, 529, 130, Gustofer11, 50);
	giq_option(4, 529, 131, GustoferEnd, 50);
end

procedure Gustofer11
begin
	gsay_reply(529, 132);
	giq_option(4, 529, 133, Gustofer12, 50);
	giq_option(4, 529, 134, GustoferEnd, 50);
end

procedure Gustofer12
begin
	gsay_reply(529, 135);
	giq_option(4, 529, 136, GustoferEnd, 50);
end

procedure Gustofer13
begin
	robbed := 0;
	gsay_reply(529, 137);
	giq_option(4, 529, 138, Gustofer14, 51);
	giq_option(4, 529, 139, Gustofer15, 51);
	giq_option(-3, 529, 101, Gustofer15, 51);
end

procedure Gustofer14
begin
	gsay_message(529, 140, 51);
end

procedure Gustofer15
begin
	gsay_message(529, 141, 51);
end

procedure Gustofer16
begin
	dude_bet := 0;
	if (Saul_wins) then begin
		item_caps_adjust(dude_obj, 50);
	end
	else begin
		item_caps_adjust(dude_obj, 100);
	end
	Saul_wins := 0;
	Saul_loses := 0;
	gsay_message(529, 142, 50);
	call destroy_challenger;
end

procedure Gustofer17
begin
	gsay_message(529, 147, 50);
end

procedure Gustofer18
begin
	gsay_reply(529, 118);
	giq_option(4, 529, 119, GustoferEnd, 50);
	giq_option(-3, 529, 101, GustoferEnd, 50);
end

procedure Gustofer19
begin
	gsay_message(529, 149, 50);
end

procedure GustoferEnd
begin
end

procedure GustoferWait
begin
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(game_ticks((3600 * (13 - (game_time_hour / 100))) + (60 * (60 - (game_time_hour % 100)))));
	gfade_in(1);
end

procedure GustoferBet1
begin
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		dude_bet := 1;
		gsay_reply(529, 144);
		giq_option(4, 529, 145, GustoferWait, 50);
		giq_option(4, 529, 146, Gustofer17, 50);
	end
	else begin
		gsay_message(529, 143, 50);
	end
end

procedure GustoferBet2
begin
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		dude_bet := 2;
		gsay_reply(529, 144);
		giq_option(4, 529, 145, GustoferWait, 50);
		giq_option(4, 529, 146, Gustofer17, 50);
	end
	else begin
		gsay_message(529, 143, 50);
	end
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure destroy_challenger
begin
	destroy_object(challenger_ptr);
	shot_challenger := 0;
	challenger_ptr := 0;
end

procedure sleeping
begin
	if (local_var(1) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(1, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(1, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(1, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(1, 1);
				end
			end
		end
	end
end

