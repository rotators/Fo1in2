/*

	Junktown - Saul

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_SAUL
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure damage_p_proc;

procedure Saul06;
procedure Saul07;
procedure Saul08;
procedure Saul09;
procedure Saul10;
procedure Saul11;
procedure Saul12;
procedure Saul13;
procedure Saul14;
procedure Saul15;
procedure Saul16;
procedure Saul17;
procedure Saul18;
procedure Saul18a;
procedure Saul19;
procedure Saul20;
procedure Saul21;
procedure Saul22;
procedure Saul23;
procedure Saul24;
procedure SaulEnd;

procedure SaulBoxing;
procedure SaulCombat;
procedure create_challenger;

procedure Saul_UpReact;

import variable challenger_ptr;
import variable fight;
import variable Saul_loses;
import variable Saul_wins;
import variable removal_ptr

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable tmp_hostile;
variable round_counter;
variable sleeping_disabled;
variable challenger_hits;
variable Saul_hits;
variable whose_turn;

#define LVAR_Sleeping 							(4)

procedure start begin

end

procedure combat_p_proc
begin
	if ((fixed_param == 4) and obj_can_see_obj(self_obj, dude_obj)) then begin
		round_counter := round_counter + 1;
	end
	if (round_counter > 3) then begin
		if (global_var( GVAR_ENEMY_JUNKTOWN ) == 0) then begin
			set_global_var( GVAR_ENEMY_JUNKTOWN, 1 );
			set_global_var( GVAR_PLAYER_REPUTATION, check_general_rep - 5 );
		end
	end
end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			if (fight) then begin
				fight := 0;
				Saul_hits := 0;
				challenger_hits := 0;
				anim(self_obj, 1000, 1);
				if (obj_can_see_obj(dude_obj, self_obj)) then begin
					gfade_out(1);
					call create_challenger;
					gfade_in(1);
				end
				else begin
					call create_challenger;
				end
				add_timer_event(self_obj, game_ticks(1), 1);
			end
		end
		if (sleeping_disabled == 0) then begin
			sleeping
		end
	end
	if (global_var( GVAR_DUDE_ENEMY_JUNK_BOXER ) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack(dude_obj);
		end
	end
end

procedure description_p_proc
begin
	if (is_success(do_check(dude_obj, STAT_pe, dude_awareness))) then begin
		script_overrides;
		display_msg(message_str(SCRIPT_SAUL, 102));
	end
end

procedure destroy_p_proc
begin
	set_global_var( GVAR_SAUL_STATUS, 3 );
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_JUNKTOWN, 1 );
		set_global_var( GVAR_DUDE_ENEMY_JUNK_BOXER, 1 );
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	if (not(global_var( GVAR_SAUL_STATUS ))) then begin
		display_msg(message_str(SCRIPT_SAUL, 101));
	end
	else begin
		display_msg(message_str(SCRIPT_SAUL, 100));
	end
end

procedure map_enter_p_proc
begin
	variable LVar0 := 0;
	if junktown_invaded then begin
		LVar0 := create_object( PID_SPIKED_KNUCKLES, 0, 0 );
		add_obj_to_inven(self_obj, LVar0);
		kill_critter(self_obj, ANIM_fall_back_sf);
	end
	sleeping_disabled := 0;
	sleep_time := 2000;
	wake_time := 700;
	if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		sleep_tile := 7000;
		if ((GAME_TIME_IN_DAYS % 3) == 0) then begin
			home_tile := 15094;
		end
		else begin
			home_tile := 16892;
		end
	end
	if (global_var( GVAR_SAUL_STATUS ) == 3) then begin
		destroy_object(self_obj);
	end
	move_to(self_obj, home_tile, 0);
	set_self_team( TEAM_15 );
end

procedure map_update_p_proc
begin
	if (not(combat_is_initialized)) then begin
		if ((GAME_TIME_IN_DAYS % 3) == 0) then begin
			home_tile := 15094;
		end
		else begin
			home_tile := 16892;
		end
		move_to(self_obj, home_tile, 0);
		if (local_var(8) == 1) then begin
			set_local_var(8, 0);
			reg_anim_animate(self_obj, 0, 0);
		end
		sleeping
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	get_reaction
	if (local_var(4)) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
	end
	else begin
		if (critter_state(self_obj) bwand 1) then begin
			display_msg(message_str(SCRIPT_SAUL, 115));
		end
		else begin
			if (global_var( GVAR_ENEMY_JUNKTOWN )) then begin
				float_msg(self_obj, message_str(SCRIPT_ENEMY, 104), 2);
			end
			else begin
				if (dude_is_armed) then begin
					call Saul06;
				end
				else begin
					start_gdialog(528, self_obj, 4, -1, -1);
					gsay_start;
					if (global_var( GVAR_SAUL_STATUS )) then begin
						call Saul23;
					end
					else begin
						call Saul07;
					end
					gsay_end;
					end_dialogue;
				end
			end
		end
	end
	if (not(global_var( GVAR_TRISH_STATUS ) bwand 32) and (global_var( GVAR_TRISH_STATUS ) bwand 8) and (global_var( GVAR_TRISH_STATUS ) bwand 16)) then begin
		set_global_var( GVAR_TRISH_STATUS, global_var( GVAR_TRISH_STATUS ) + 32 );
		display_msg(message_str(SCRIPT_TRISH, 173));
		set_global_var( GVAR_PLAYER_REPUTATION, check_general_rep + 2 );
		give_exp_points(250);
	end
end

procedure timed_event_p_proc
begin
	if (challenger_ptr != 0) then begin
		if (fixed_param == 1) then begin
			if (obj_pid(challenger_ptr) == PID_RADSCORPION) then begin
				if (random(0, 4) == 0) then begin
					whose_turn := 1;
				end
				else begin
					whose_turn := 0;
				end
			end
			else begin
				if (random(0, 2)) then begin
					whose_turn := 1;
				end
				else begin
					whose_turn := 0;
				end
			end
			call SaulBoxing;
		end
		else begin
			if (fixed_param == 2) then begin
				Saul_wins := 1;
			end
			else begin
				if (fixed_param == 3) then begin
					Saul_loses := 1;
					set_local_var(8, 1);
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_JUNKTOWN, 1 );
	end
end

procedure create_challenger
begin
	challenger_ptr := random(0, 4);
	if (challenger_ptr == 4) then begin
		challenger_ptr := create_object_sid(PID_GREATER_MOLE_RAT, 0, 0, SCRIPT_JBOXER);
	end
	else begin
		if (challenger_ptr == 3) then begin
			challenger_ptr := create_object_sid(PID_RADSCORPION, 0, 0, SCRIPT_JBOXER);
		end
		else begin
			if (challenger_ptr == 2) then begin
				challenger_ptr := create_object_sid(PID_TOWNSWOMAN_METAL, 0, 0, SCRIPT_JBOXER);
			end
			else begin
				if (challenger_ptr == 1) then begin
					challenger_ptr := create_object_sid(PID_TOWNSMAN_LEATHER, 0, 0, SCRIPT_JBOXER);
				end
				else begin
					if (challenger_ptr == 0) then begin
						challenger_ptr := create_object_sid(PID_MALE_GUARD_METAL_BLACK, 0, 0, SCRIPT_JBOXER);
					end
				end
			end
		end
	end
	critter_attempt_placement(challenger_ptr, tile_num_in_direction(tile_num(self_obj), 1, 1), 0);
	anim(challenger_ptr, 1000, 4);
end

procedure Saul06
begin
	float_msg(self_obj, message_str(SCRIPT_SAUL, 104), 2);
end

procedure Saul07
begin
	set_global_var( GVAR_SAUL_STATUS, 1 );
	if (local_var(1) == 1) then begin
		gsay_reply(528, 105);
	end
	else begin
		gsay_reply(528, 106);
	end
	giq_option( 4, SCRIPT_SAUL, 107, Saul08, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 108, Saul09, BAD_REACTION );
	giq_option( 4, SCRIPT_SAUL, message_str(SCRIPT_SAUL, 109) + dude_name + message_str(SCRIPT_SAUL, 110), Saul09, NEUTRAL_REACTION );
end

procedure Saul08
begin
	gsay_reply(528, 111);
	giq_option( 4, SCRIPT_SAUL, 112, Saul09, BAD_REACTION );
	giq_option( 4, SCRIPT_SAUL, 113, Saul11, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 103, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul09
begin
	if (local_var(1) == 1) then begin
		gsay_reply(528, 128);
	end
	else begin
		gsay_reply(528, 129);
	end
	if (local_var(1) == 1) then begin
		giq_option( 4, SCRIPT_SAUL, 130, Saul10, NEUTRAL_REACTION );
		giq_option( 4, SCRIPT_SAUL, 188, SaulCombat, BAD_REACTION );
	end
	giq_option( 4, SCRIPT_SAUL, 131, Saul10, NEUTRAL_REACTION );
	if (local_var(1) == 3) then begin
		giq_option( 4, SCRIPT_SAUL, 135, Saul11, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_SAUL, 132, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul10
begin
	if (local_var(1) == 1) then begin
		gsay_reply(528, 133);
	end
	else begin
		gsay_reply(528, 134);
	end
	giq_option( 4, SCRIPT_SAUL, 135, Saul11, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 136, Saul12, GOOD_REACTION );
	giq_option( 4, SCRIPT_SAUL, 132, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul11
begin
	gsay_reply(528, 137);
	giq_option( 4, SCRIPT_SAUL, 136, Saul12, GOOD_REACTION );
	if (not(local_var(5))) then begin
		giq_option( 4, SCRIPT_SAUL, 138, Saul13, NEUTRAL_REACTION );
	end
	if (not(local_var(6))) then begin
		giq_option( 4, SCRIPT_SAUL, 139, Saul14, NEUTRAL_REACTION );
	end
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul12
begin
	UpReact
	if (local_var(1) == 1) then begin
		gsay_reply(528, 140);
	end
	else begin
		gsay_reply(528, 141);
		giq_option( 5, SCRIPT_SAUL, 142, Saul15, GOOD_REACTION );
	end
	giq_option( 4, SCRIPT_SAUL, 143, Saul13, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 144, Saul14, NEUTRAL_REACTION );
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul13
begin
	set_local_var(5, 1);
	gsay_reply(528, 145);
	giq_option( 4, SCRIPT_SAUL, 146, Saul19, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 147, Saul14, NEUTRAL_REACTION );
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul14
begin
	set_local_var(6, 1);
	gsay_reply(528, 148);
	if (not(local_var(5))) then begin
		giq_option( 4, SCRIPT_SAUL, 149, Saul13, NEUTRAL_REACTION );
	end
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul15
begin
	set_local_var(7, 1);
	gsay_reply(528, 150);
	giq_option( 4, SCRIPT_SAUL, 151, Saul17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 152, Saul18, NEUTRAL_REACTION );
	if (dude_iq >= 6) then begin
		giq_option( 6, SCRIPT_SAUL, 153, Saul16, GOOD_REACTION );
	end
	else begin
		Goodbyes;
		giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
	end
	giq_option( 6, SCRIPT_SAUL, 154, Saul24, NEUTRAL_REACTION );
end

procedure Saul16
begin
	UpReact
	gsay_reply(528, 155);
	giq_option( 4, SCRIPT_SAUL, 156, Saul18, NEUTRAL_REACTION );
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul17
begin
	set_global_var( GVAR_SAUL_STATUS, 2 );
	gsay_reply(528, 157);
	giq_option( 4, SCRIPT_SAUL, 158, Saul18, NEUTRAL_REACTION );
	if ((global_var( GVAR_TRISH_STATUS ) bwand 1) or (global_var( GVAR_TRISH_STATUS ) bwand 4) and not(global_var( GVAR_TRISH_STATUS ) bwand 64)) then begin
		giq_option( 5, SCRIPT_SAUL, 159, Saul20, NEUTRAL_REACTION );
	end
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul18
begin
	if (local_var(1) < 2) then begin
		gsay_reply(528, 160);
	end
	else begin
		gsay_reply(528, 161);
	end
	if (not(local_var(5))) then begin
		giq_option( 4, SCRIPT_SAUL, 162, Saul13, NEUTRAL_REACTION );
	end
	if (not(local_var(6))) then begin
		giq_option( 4, SCRIPT_SAUL, 163, Saul14, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_SAUL, 164, Saul18a, BAD_REACTION );
	giq_option( 4, SCRIPT_SAUL, 165, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul18a
begin
	set_local_var(1, 1);
	LevelToReact
	call Saul09;
end

procedure Saul19
begin
	gsay_reply(528, 166);
	giq_option( 4, SCRIPT_SAUL, 168, Saul18, NEUTRAL_REACTION );
	if (dude_iq >= 6) then begin
		giq_option( 6, SCRIPT_SAUL, 167, Saul_UpReact, GOOD_REACTION );
	end
	else begin
		Goodbyes;
		giq_option( 4, SCRIPT_SAUL, 169, SaulEnd, NEUTRAL_REACTION );
	end
end

procedure Saul20
begin
	set_global_var( GVAR_SAUL_STATUS, 2 );
	if (local_var(1) == 1) then begin
		gsay_reply(528, 169);
	end
	else begin
		if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
			gsay_reply(528, message_str(SCRIPT_SAUL, 170) + message_str(SCRIPT_SAUL, 171));
			if ((global_var( GVAR_TRISH_STATUS ) bwand 2) or (global_var( GVAR_TRISH_STATUS ) bwand 8)) then begin
				if (dude_iq >= 6) then begin
					giq_option( 6, SCRIPT_SAUL, 172, Saul21, GOOD_REACTION );
				end
				else begin
					giq_option( 4, SCRIPT_SAUL, 173, Saul22, NEUTRAL_REACTION );
				end
			end
		end
		else begin
			gsay_reply(528, message_str(SCRIPT_SAUL, 170));
		end
	end
	giq_option( 4, SCRIPT_SAUL, 174, Saul18, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 175, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul21
begin
	UpReact
	if (not(global_var( GVAR_TRISH_STATUS ) bwand 16)) then begin
		set_global_var( GVAR_TRISH_STATUS, global_var( GVAR_TRISH_STATUS ) + 16 );
	end
	gsay_message(528, 176, 49);
end

procedure Saul22
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Saul21;
	end
	else begin
		gsay_reply(528, 177);
		giq_option( 4, SCRIPT_SAUL, 178, Saul18, NEUTRAL_REACTION );
		giq_option( 4, SCRIPT_SAUL, 179, SaulEnd, NEUTRAL_REACTION );
	end
end

procedure Saul23
begin
	if (local_var(1) < 2) then begin
		gsay_reply(528, 180);
	end
	else begin
		gsay_reply(528, 181);
	end
	giq_option( 4, SCRIPT_SAUL, 182, Saul09, BAD_REACTION );
	if ((global_var( GVAR_TRISH_STATUS ) bwand 1) or (global_var( GVAR_TRISH_STATUS ) bwand 4) and ((global_var( GVAR_TRISH_STATUS ) bwand 2) or (global_var( GVAR_TRISH_STATUS ) bwand 8)) and not(global_var( GVAR_TRISH_STATUS ) bwand 16) and not(global_var( GVAR_TRISH_STATUS ) bwand 64)) then begin
		giq_option( 4, SCRIPT_SAUL, 183, Saul20, NEUTRAL_REACTION );
	end
	if (not(local_var(5))) then begin
		giq_option( 4, SCRIPT_SAUL, 184, Saul13, NEUTRAL_REACTION );
	end
	Goodbyes;
	giq_option( 4, SCRIPT_SAUL, exit_line, SaulEnd, NEUTRAL_REACTION );
end

procedure Saul24
begin
	gsay_reply(528, 185);
	giq_option( 4, SCRIPT_SAUL, 186, SaulEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SAUL, 187, Saul18, NEUTRAL_REACTION );
end

procedure SaulBoxing
begin
	reg_anim_func(2, self_obj);
	reg_anim_func(2, challenger_ptr);
	if (whose_turn == 1) then begin
		reg_anim_func(1, 1);
		reg_anim_animate(self_obj, 16, -1);
		if (is_success(roll_vs_skill(self_obj, SKILL_UNARMED_COMBAT, 0))) then begin
			if (challenger_hits >= (get_critter_stat(challenger_ptr, STAT_en) * 2)) then begin
				reg_anim_animate(challenger_ptr, 20, 4);
				reg_anim_animate(challenger_ptr, 48, -1);
				add_timer_event(self_obj, game_ticks(2), 2);
			end
			else begin
				reg_anim_animate(challenger_ptr, 14, 4);
				challenger_hits := challenger_hits + 1;
				add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
			end
		end
		else begin
			reg_anim_animate(challenger_ptr, 13, 4);
			add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
		end
		reg_anim_func(3, 0);
	end
	else begin
		reg_anim_func(1, 1);
		reg_anim_animate(challenger_ptr, 16, -1);
		if (is_success(roll_vs_skill(challenger_ptr, SKILL_UNARMED_COMBAT, 0))) then begin
			if (Saul_hits >= (self_endurance * 2)) then begin
				reg_anim_animate(self_obj, 20, 4);
				reg_anim_animate(self_obj, 48, -1);
				add_timer_event(self_obj, game_ticks(2), 3);
			end
			else begin
				reg_anim_animate(self_obj, 14, 4);
				Saul_hits := Saul_hits + 1;
				add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
			end
		end
		else begin
			reg_anim_animate(self_obj, 13, 4);
			add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
		end
		reg_anim_func(3, 0);
	end
end

procedure SaulCombat
begin
	tmp_hostile := 1;
end

procedure SaulEnd
begin
end

procedure Saul_UpReact
begin
	set_local_var(0, local_var(0) + 10);
	ReactToLevel
end
