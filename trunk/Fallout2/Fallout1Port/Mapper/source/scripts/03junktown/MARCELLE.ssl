#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure map_update_p_proc;//    script_action == 23

procedure Marcelles00;
procedure Marcelles01;
procedure Marcelles02;
procedure Marcelles02a;
procedure Marcelles03;
procedure Marcelles04;
procedure Marcelles05;
procedure Marcelles06;
procedure Marcelles07;
procedure Marcelles08;
procedure Marcelles08a;
procedure Marcelles08b;
procedure Marcelles09;
procedure Marcelles10;
procedure Marcelles11;
procedure Marcelles12;
procedure Marcelles13;
procedure Marcelles14;
procedure Marcelles14a;
procedure Marcelles15;
procedure Marcelles16;
procedure Marcelles17;
procedure Marcelles17a;
procedure Marcelles18;
procedure Marcelles18a;
procedure Marcelles19;
procedure Marcelles19a;
procedure Marcelles19b;
procedure Marcelles20;
procedure Marcelles21;
procedure Marcelles22;
procedure Marcelles23;
procedure Marcelles24;
procedure Marcelles24a;
procedure Marcelles25;
procedure Marcelles26;
procedure Marcelles26a;
procedure Marcelles27;
procedure Marcelles28;
procedure Marcelles29;
procedure Marcelles29a;
procedure Marcelles30;
procedure Marcelles31;
procedure Marcelles32;
procedure Marcelles33;
procedure MarcellesEnd;

procedure Marcelles_charge_raider;
procedure go_to_room;

import variable JTRaider_ptr;
import variable Sinthia_ptr;
import variable messing_with_fridge;

variable night_person;
variable wake_time;
variable home_tile;
variable Bessy;
variable hostile;
variable message;
variable moving_disabled;
variable showing_room;
variable desk_tile := 19901;
variable dest_tile := 19901;
variable room_tile := 19289;
variable waiting_tile := 19095;
variable line00flag;
variable line04flag;
variable line06flag;
variable line29flag;
variable Shooting;
variable sfx_name;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
			call look_at_p_proc;
		end
		else begin
			if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
				call map_enter_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (Shooting == 0) then begin
			if ((global_var(SAVE_SINTHIA) != 2) and (map_var(3) != 0)) then begin
				dest_tile := waiting_tile;
				if (tile_num(self_obj) != waiting_tile) then begin
					if (local_var(5)) then begin
						set_local_var(5, 0);
					end
					else begin
						showing_room := 0;
						rm_timer_event(self_obj);
						dest_tile := waiting_tile;
					end
				end
				if (global_var(SAVE_SINTHIA) == 0) then begin
					if (obj_can_see_obj(self_obj, dude_obj)) then begin
						if (tile_distance_objs(self_obj, dude_obj) < 12) then begin
							if (not(line00flag)) then begin
								if (tile_num(self_obj) == waiting_tile) then begin
									dialogue_system_enter;
								end
							end
						end
					end
				end
			end
			else begin
				if ((global_var(SAVE_SINTHIA) == 2) or (map_var(0) == 2)) then begin
					if (tile_num(self_obj) == waiting_tile) then begin
						moving_disabled := 0;
						dest_tile := desk_tile;
					end
				end
			end
			if ((moving_disabled == 0) and (local_var(5) == 0)) then begin
				if (tile_num(self_obj) != dest_tile) then begin
					animate_move_obj_to_tile(self_obj, dest_tile, 0);
				end
			end
			if (showing_room) then begin
				dest_tile := room_tile;
				if (tile_num(self_obj) != dest_tile) then begin
					animate_move_obj_to_tile(self_obj, dest_tile, 0);
				end
				else begin
					add_timer_event(self_obj, game_ticks(5), 1);
					showing_room := 0;
				end
			end
			else begin
				if (obj_can_see_obj(self_obj, dude_obj) and messing_with_fridge) then begin
					call Marcelles33;
				end
			end
			if (tile_distance(tile_num(dude_obj), desk_tile) < 8) then begin
				if (local_var(5) == 1) then begin
					dest_tile := desk_tile;
					moving_disabled := 0;
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_JUNK_CITIZEN, 1);// GVAR_ENEMY_JUNK_CITIZEN
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4)) then begin
		display_msg(message_str(SCRIPT_MARCELLE, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_MARCELLE, 101));
	end
end

procedure map_update_p_proc
begin
	if ((global_var(SAVE_SINTHIA) == 0) and (line00flag == 0) and (map_var(3) != 0)) then begin
		move_to(self_obj, waiting_tile, 0);
		dest_tile := waiting_tile;
		showing_room := 0;
		if (local_var(5)) then begin
			set_local_var(5, 0);
		end
	end
end

procedure map_enter_p_proc
begin
	if (obj_carrying_pid_obj(self_obj, PID_SHOTGUN)) then begin
		Bessy := obj_carrying_pid_obj(self_obj, PID_SHOTGUN);
	end
	else begin
		Bessy := create_object_sid(PID_SHOTGUN, 0, 0, -1);
		add_obj_to_inven(self_obj, Bessy);
	end
	critter_add_trait(self_obj, 1, 6, 16);
	home_tile := 19901;
	wake_time := 600;
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(5) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
	end
	else begin
		if ((tile_num(self_obj) != home_tile) and (tile_num(self_obj) != waiting_tile)) then begin
			script_overrides;
		end
		else begin
			call get_reaction;
			start_gdialog(339, self_obj, 4, -1, -1);
			gsay_start;
			if ((global_var(SAVE_SINTHIA) == 0) and not(line00flag) and (map_var(3) != 0)) then begin
				call Marcelles00;
			end
			else begin
				if (global_var(SAVE_SINTHIA) == 1) then begin
					call Marcelles03;
				end
				else begin
					if ((global_var(SAVE_SINTHIA) == 2) and not(line04flag) and (map_var(0) != 2) and (local_var(7) == 0)) then begin
						call Marcelles04;
					end
					else begin
						if ((map_var(0) == 2) and not(line06flag)) then begin
							call Marcelles06;
						end
						else begin
							if ((global_var(KILL_KILLIAN) == 2) and not(line29flag)) then begin
								call Marcelles29;
							end
							else begin
								if (not(local_var(4))) then begin
									call Marcelles07;
								end
								else begin
									if (local_var(1) < 2) then begin
										call Marcelles22;
									end
									else begin
										call Marcelles17;
									end
								end
							end
						end
					end
				end
			end
			gsay_end;
			end_dialogue;
		end
	end
	if (showing_room) then begin
		call go_to_room;
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		add_timer_event(self_obj, game_ticks(2), 2);
	end
	else begin
		if (fixed_param == 2) then begin
			dest_tile := home_tile;
			moving_disabled := 0;
		end
		else begin
			if (fixed_param == 3) then begin
				if (tile_distance(tile_num(self_obj), 18089) > 2) then begin
					animate_move_obj_to_tile(self_obj, 18089, 1);
					add_timer_event(self_obj, 5, 3);
				end
				else begin
					add_timer_event(self_obj, 5, 4);
				end
			end
			else begin
				if (fixed_param == 4) then begin
					reg_anim_func(2, JTRaider_ptr);
					reg_anim_func(1, 1);
					reg_anim_animate(JTRaider_ptr, 43, -1);
					reg_anim_animate(JTRaider_ptr, 45, -1);
					reg_anim_animate(JTRaider_ptr, 44, -1);
					reg_anim_func(3, 0);
					critter_dmg(Sinthia_ptr, random(75, 100), 0);
					add_timer_event(self_obj, 5, 5);
					/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, PID_SHOTGUN) == 0) then begin
						Bessy := create_object_sid(PID_SHOTGUN, 0, 0, -1);
						add_obj_to_inven(self_obj, Bessy);
					end
					wield_obj_critter(self_obj, obj_carrying_pid_obj(self_obj, PID_SHOTGUN));
				end
				else begin
					if (fixed_param == 5) then begin
						reg_anim_func(2, self_obj);
						reg_anim_func(1, 1);
						reg_anim_animate(self_obj, 43, -1);
						reg_anim_animate(self_obj, 45, -1);
						sfx_name := sfx_build_weapon_name(1, obj_carrying_pid_obj(self_obj, PID_SHOTGUN), 0, JTRaider_ptr);
						reg_anim_play_sfx(self_obj, sfx_name, 0);
						reg_anim_animate(self_obj, 44, -1);
						reg_anim_func(3, 0);
						critter_dmg(JTRaider_ptr, random(75, 100), 0);
						Shooting := 0;
						game_ui_enable;
					end
					else begin
						if (fixed_param == 6) then begin
							if (global_var(SAVE_SINTHIA) != 2) then begin
								call Marcelles_charge_raider;
							end
						end
					end
				end
			end
		end
	end
end

procedure Marcelles00
begin
	line00flag := 1;
	set_global_var(SAVE_SINTHIA, 1);
	gsay_reply(339, 102);
	giq_option(4, 339, 103, Marcelles02, 50);
	giq_option(4, 339, 104, UpReact, 50);
	giq_option(-3, 339, 105, Marcelles01, 50);
end

procedure Marcelles01
begin
	gsay_message(339, 106, 50);
end

procedure Marcelles02
begin
	call DownReact;
	gsay_reply(339, 107);
	giq_option(4, 339, 108, Marcelles02a, 51);
	giq_option(4, 339, 109, MarcellesEnd, 50);
end

procedure Marcelles02a
begin
	call BigDownReact;
	call Marcelles_charge_raider;
end

procedure Marcelles03
begin
	gsay_message(339, 110, 50);
end

procedure Marcelles04
begin
	line04flag := 1;
	set_local_var(7, 1);
	gsay_reply(339, 111);
	giq_option(-3, 339, 112, Marcelles05, 50);
	giq_option(4, 339, 113, Marcelles05, 50);
end

procedure Marcelles05
begin
	gsay_message(339, 114, 50);
	if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
		set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 1);
	end
	else begin
		set_global_var(RENT_TIME, global_var(RENT_TIME) + 1);
	end
	showing_room := 1;
	message := message_str(SCRIPT_MARCELLE, 115);
end

procedure Marcelles06
begin
	line06flag := 1;
	call BigDownReact;
	gsay_reply(339, 116);
	giq_option(4, 339, 117, MarcellesEnd, 50);
	giq_option(-3, 339, 118, MarcellesEnd, 50);
end

procedure Marcelles07
begin
	set_local_var(4, 1);
	gsay_reply(339, 119);
	giq_option(4, 339, 120, Marcelles12, 50);
	giq_option(4, 339, 121, Marcelles13, 50);
	giq_option(7, 339, 122, Marcelles14, 50);
	giq_option(-3, 339, 123, Marcelles08, 50);
end

procedure Marcelles08
begin
	gsay_reply(339, 124);
	giq_option(-3, 339, 125, Marcelles09, 50);
	giq_option(-3, 339, 126, Marcelles08a, 50);
	giq_option(-3, 339, 127, Marcelles08b, 50);
end

procedure Marcelles08a
begin
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
			set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 1);
		end
		else begin
			set_global_var(RENT_TIME, global_var(RENT_TIME) + 1);
		end
		call Marcelles10;
	end
	else begin
		call Marcelles11;
	end
end

procedure Marcelles08b
begin
	if (item_caps_total(dude_obj) >= 150) then begin
		item_caps_adjust(dude_obj, -150);
		if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
			set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 7);
		end
		else begin
			set_global_var(RENT_TIME, global_var(RENT_TIME) + 7);
		end
		call Marcelles10;
	end
	else begin
		call Marcelles11;
	end
end

procedure Marcelles09
begin
	gsay_message(339, 128, 50);
end

procedure Marcelles10
begin
	gsay_message(339, 129, 50);
	showing_room := 1;
	message := message_str(SCRIPT_MARCELLE, 130);
end

procedure Marcelles11
begin
	gsay_message(339, 131, 50);
end

procedure Marcelles12
begin
	gsay_message(339, 132, 50);
end

procedure Marcelles13
begin
	gsay_reply(339, 133);
	giq_option(4, 339, 134, Marcelles08b, 50);
	giq_option(4, 339, 135, Marcelles08a, 50);
	giq_option(4, 339, 136, MarcellesEnd, 50);
end

procedure Marcelles14
begin
	gsay_reply(339, 137);
	giq_option(5, 339, 138, Marcelles14a, 50);
	giq_option(4, 339, 182, MarcellesEnd, 50);
end

procedure Marcelles14a
begin
	if (item_caps_total(dude_obj) >= 50) then begin
		call Marcelles15;
	end
	else begin
		call Marcelles16;
	end
end

procedure Marcelles15
begin
	item_caps_adjust(dude_obj, -50);
	gsay_message(339, 139, 50);
end

procedure Marcelles16
begin
	call DownReact;
	gsay_message(339, 140, 50);
end

procedure Marcelles17
begin
	gsay_reply(339, 141);
	giq_option(4, 339, 142, Marcelles17a, 50);
	giq_option(4, 339, 184, MarcellesEnd, 50);
	giq_option(-3, 339, 143, Marcelles17a, 50);
end

procedure Marcelles17a
begin
	if (global_var(RENT_TIME) > (game_time / (10 * 60 * 60 * 24))) then begin
		call Marcelles18;
	end
	else begin
		call Marcelles20;
	end
end

procedure Marcelles18
begin
	gsay_reply(339, 144);
	giq_option(4, 339, 145, Marcelles18a, 50);
	giq_option(4, 339, 146, MarcellesEnd, 50);
	giq_option(-3, 339, 147, Marcelles18a, 50);
	giq_option(-3, 339, 148, MarcellesEnd, 50);
end

procedure Marcelles18a
begin
	call DownReact;
	showing_room := 1;
	message := message_str(SCRIPT_MARCELLE, 149);
end

procedure Marcelles19
begin
	gsay_reply(339, 150);
	giq_option(-3, 339, 151, Marcelles09, 50);
	giq_option(-3, 339, 152, Marcelles19a, 50);
	giq_option(-3, 339, 153, Marcelles19b, 50);
end

procedure Marcelles19a
begin
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
			set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 1);
		end
		else begin
			set_global_var(RENT_TIME, global_var(RENT_TIME) + 1);
		end
		call Marcelles21;
	end
	else begin
		call Marcelles11;
	end
end

procedure Marcelles19b
begin
	if (item_caps_total(dude_obj) >= 150) then begin
		item_caps_adjust(dude_obj, -150);
		if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
			set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 7);
		end
		else begin
			set_global_var(RENT_TIME, global_var(RENT_TIME) + 7);
		end
		call Marcelles21;
	end
	else begin
		call Marcelles11;
	end
end

procedure Marcelles20
begin
	gsay_reply(339, 154);
	giq_option(4, 339, 155, Marcelles19b, 50);
	giq_option(4, 339, 156, Marcelles19a, 50);
	giq_option(4, 339, 157, MarcellesEnd, 50);
end

procedure Marcelles21
begin
	call UpReact;
	gsay_message(339, 158, 50);
end

procedure Marcelles22
begin
	gsay_reply(339, 159);
	giq_option(4, 339, 160, Marcelles24, 50);
	giq_option(4, 339, 184, MarcellesEnd, 50);
	giq_option(-3, 339, 161, Marcelles23, 50);
end

procedure Marcelles23
begin
	gsay_message(339, 162, 50);
end

procedure Marcelles24
begin
	gsay_reply(339, 163);
	giq_option(4, 339, 164, Marcelles24a, 50);
end

procedure Marcelles24a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Marcelles26;
	end
	else begin
		call Marcelles25;
	end
end

procedure Marcelles25
begin
	gsay_message(339, 165, 50);
end

procedure Marcelles26
begin
	gsay_reply(339, 166);
	giq_option(4, 339, 167, Marcelles27, 50);
	giq_option(4, 339, 168, Marcelles26a, 50);
end

procedure Marcelles26a
begin
	if (item_caps_total(dude_obj) >= 100) then begin
		item_caps_adjust(dude_obj, -100);
		if (global_var(RENT_TIME) < (game_time / (10 * 60 * 60 * 24))) then begin
			set_global_var(RENT_TIME, (game_time / (10 * 60 * 60 * 24)) + 1);
		end
		else begin
			set_global_var(RENT_TIME, global_var(RENT_TIME) + 1);
		end
		call Marcelles28;
	end
	else begin
		call Marcelles11;
	end
end

procedure Marcelles27
begin
	gsay_reply(339, 169);
	giq_option(4, 339, 170, MarcellesEnd, 50);
	giq_option(4, 339, 171, Marcelles26a, 50);
end

procedure Marcelles28
begin
	gsay_message(339, 172, 50);
end

procedure Marcelles29
begin
	line29flag := 1;
	gsay_reply(339, 173);
	giq_option(4, 339, 174, Marcelles31, 50);
	giq_option(4, 339, 175, Marcelles29a, 50);
	giq_option(-3, 339, 176, Marcelles30, 50);
end

procedure Marcelles29a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Marcelles32;
	end
	else begin
		call Marcelles31;
	end
end

procedure Marcelles30
begin
	call BottomReact;
	gsay_message(339, 177, 51);
end

procedure Marcelles31
begin
	call BottomReact;
	gsay_message(339, 178, 51);
end

procedure Marcelles32
begin
	call BigDownReact;
	gsay_message(339, 179, 51);
end

procedure Marcelles33
begin
	messing_with_fridge := 0;
	if (global_var(RENT_TIME) <= (game_time / (10 * 60 * 60 * 24))) then begin
		float_msg(self_obj, message_str(SCRIPT_MARCELLE, 181), 2);
		if (local_var(6) == 1) then begin
			hostile := 1;
		end
		else begin
			set_local_var(6, 1);
		end
	end
end

procedure go_to_room
begin
	showing_room := 1;
	moving_disabled := 1;
end

procedure MarcellesEnd
begin
end

procedure Marcelles_charge_raider
begin
	display_msg(message_str(SCRIPT_MARCELLE, 183));
	add_timer_event(self_obj, 5, 3);
	game_ui_disable;
	Shooting := 1;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

