#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure damage_p_proc;//    script_action == 14
procedure Sinthia00;
procedure Sinthia00a;
procedure Sinthia00b;
procedure Sinthia01;
procedure Sinthia02;
procedure Sinthia03;
procedure Sinthia04;
procedure Sinthia05;
procedure Sinthia06;
procedure Sinthia07;
procedure Sinthia08;
procedure Sinthia09;
procedure Sinthia10;
procedure Sinthia11;
procedure Sinthia12;
procedure Sinthia12a;
procedure Sinthia13;
procedure Sinthia13a;
procedure Sinthia14;
procedure Sinthia15;
procedure Sinthia16;
procedure Sinthia16a;
procedure Sinthia17;
procedure Sinthia18;
procedure Sinthia19;
procedure Sinthia20;
procedure Sinthia20a;
procedure Sinthia21;
procedure Sinthia22;
procedure Sinthia23;
procedure Sinthia24;
procedure Sinthia25;
procedure Sinthia26;
procedure Sinthia27;
procedure Sinthia28;
procedure Sinthia29;
procedure Sinthia30;
procedure SinOn;
procedure SinthiaQuestions;
procedure SinthiaEnd;

variable do_it;
variable dest_tile;
variable remove_Raider;
variable sleeping_disabled;
variable waypoint;
variable initial :=  0;

import variable Sinthia_ptr;
import variable JTRaider_ptr;

variable line23flag;
variable line24flag;
variable line25flag;
variable line26flag;

procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (initial == 0) then begin
		initial :=  1;
		Sinthia_ptr := self_obj;
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	if (map_var(1) == 2) then begin
		if ((local_var(6) == 0) and obj_can_see_obj(self_obj, dude_obj) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
			dialogue_system_enter;
		end
	end
	if (global_var(SAVE_SINTHIA) == 2) then begin
		if (local_var(6) == 1) then begin
			set_map_var(0, 1);
			sleeping_disabled := 1;
			if (waypoint == 0) then begin
				dest_tile := 21097;
				waypoint := 1;
			end
			if (tile_distance(tile_num(self_obj), dest_tile) > 2) then begin
				animate_move_obj_to_tile(self_obj, dest_tile, 0);
			end
			else begin
				destroy_object(self_obj);
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	Sinthia_ptr := 0;
	set_global_var(SAVE_SINTHIA, 2);
	set_map_var(0, 2);
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_JUNK_CITIZEN, 1);// GVAR_ENEMY_JUNK_CITIZEN
		set_global_var(ENEMY_JUNKTOWN, 1);
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(5) == 1) then begin
		display_msg(message_str(SCRIPT_SINTHIA, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_SINTHIA, 101));
	end
end

procedure map_enter_p_proc
begin
	critter_add_trait(self_obj, 1, 6, 16);
	Sinthia_ptr := self_obj;
	home_tile := 17485;
	sleep_tile := 16681;
	sleep_time := 2300;
	wake_time := 1000;
	if (not(metarule(22, 0)) and (local_var(6) == 1)) then begin
		Sinthia_ptr := 0;
		destroy_object(self_obj);
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(6) == 1) then begin
		display_msg(message_str(SCRIPT_SINTHIA, 171));
	end
	else begin
		if ((map_var(3) > 0) and (map_var(3) < 3) and (map_var(1) == 0)) then begin
			call Sinthia07;
		end
		else begin
			call get_reaction;
			start_gdialog(338, self_obj, 4, -1, -1);
			gsay_start;
			set_local_var(5, 1);
			if (map_var(1) == 2) then begin
				call Sinthia16;
			end
			else begin
				if ((map_var(1) == 1) and (local_var(7) == 0)) then begin
					call Sinthia17;
				end
				else begin
					if ((global_var(SAVE_SINTHIA) == 2) and (local_var(8) == 0)) then begin
						call Sinthia08;
					end
					else begin
						if (map_var(3) < 3) then begin
							call Sinthia00;
						end
						else begin
							if (local_var(1) < 2) then begin
								call Sinthia29;
							end
							else begin
								call Sinthia20;
							end
						end
					end
				end
			end
			gsay_end;
			end_dialogue;
		end
	end
	if (do_it) then begin
		call Sinthia30;
	end
	if (remove_Raider) then begin
		if (JTRaider_ptr != 0) then begin
			set_map_var(3, 3);
			set_global_var(SAVE_SINTHIA, 2);
			display_msg(message_str(SCRIPT_SINTHIA, 177));
			destroy_object(JTRaider_ptr);
			JTRaider_ptr := 0;
			remove_Raider := 0;
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 2) then begin
		if ((global_var(SAVE_SINTHIA) != 2) and (local_var(7) == 0)) then begin
			dialogue_system_enter;
		end
	end
	else begin
		anim(self_obj, 1000, 3);
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure Sinthia00
begin
	gsay_reply(338, 102);
	giq_option(4, 338, 103, SinthiaEnd, 50);
	giq_option(6, 338, 104, Sinthia00a, 50);
	giq_option(-3, 338, 105, Sinthia00b, 50);
end

procedure Sinthia00a
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		call Sinthia04;
	end
	else begin
		call Sinthia03;
	end
end

procedure Sinthia00b
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		call Sinthia01;
	end
	else begin
		call Sinthia02;
	end
end

procedure Sinthia01
begin
	gsay_message(338, 106, 50);
end

procedure Sinthia02
begin
	gsay_message(338, 107, 50);
end

procedure Sinthia03
begin
	gsay_message(338, 108, 50);
end

procedure Sinthia04
begin
	gsay_reply(338, 109);
	giq_option(6, 338, 110, Sinthia05, 50);
	if (global_var(DOGMEAT_HIRELING_STATUS)) then begin
		giq_option(6, 338, 111, Sinthia06, 50);
	end
end

procedure Sinthia05
begin
	gsay_message(338, 112, 50);
end

procedure Sinthia06
begin
	call DownReact;
	gsay_message(338, 113, 50);
end

procedure Sinthia07
begin
	float_msg(self_obj, message_str(SCRIPT_SINTHIA, random(114, 117)), 7);
end

procedure Sinthia08
begin
	set_local_var(8, 1);
	call BigUpReact;
	gsay_reply(338, 118);
	giq_option(4, 338, 119, Sinthia10, 50);
	giq_option(5, 338, 120, Sinthia11, 50);
	giq_option(-3, 338, 121, Sinthia09, 50);
end

procedure Sinthia09
begin
	gsay_message(338, 122, 50);
end

procedure Sinthia10
begin
	call DownReact;
	gsay_message(338, 123, 50);
end

procedure Sinthia11
begin
	gsay_reply(338, 124);
	giq_option(5, 338, 125, Sinthia12, 50);
	giq_option(5, 338, 126, Sinthia15, 50);
end

procedure Sinthia12
begin
	gsay_reply(338, 127);
	giq_option(0, 634, 106, Sinthia12a, 49);
end

procedure Sinthia12a
begin
	gsay_reply(338, 128);
	giq_option(5, 338, 129, Sinthia14, 50);
	giq_option(5, 338, 130, Sinthia13, 50);
end

procedure Sinthia13
begin
	gsay_reply(338, 131);
	giq_option(0, 634, 106, Sinthia13a, 50);
end

procedure Sinthia13a
begin
	if ((get_critter_stat(dude_obj, 34) == 0) or is_success(do_check(dude_obj, 3, 0))) then begin
		gsay_reply(338, 132);
		giq_option(0, 634, 106, SinOn, 49);
	end
	else begin
		gsay_message(338, 133, 49);
	end
end

procedure Sinthia14
begin
	gsay_message(338, 134, 50);
	if (not(global_var(KILLIAN_DEAD)) and not(global_var(GIZMO_DEAD))) then begin
		gsay_message(338, 136, 50);
	end
end

procedure Sinthia15
begin
	gsay_reply(338, 137);
	giq_option(5, 338, 138, Sinthia14, 50);
end

procedure Sinthia16
begin
	variable LVar0 := 0;
	set_local_var(6, 1);
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(338, 141);
	end
	else begin
		gsay_reply(338, 142);
	end
	giq_option(0, 634, 106, Sinthia16a, 50);
end

procedure Sinthia16a
begin
	call BottomReact;
	dest_tile := 7521;
	gsay_message(338, 143, 50);
end

procedure Sinthia17
begin
	set_local_var(7, 1);
	gsay_reply(338, 144);
	giq_option(4, 338, 145, Sinthia19, 50);
	giq_option(-3, 338, 146, Sinthia18, 50);
end

procedure Sinthia18
begin
	call BottomReact;
	set_local_var(6, 1);
	gsay_message(338, 147, 50);
end

procedure Sinthia19
begin
	remove_Raider := 1;
	gsay_reply(338, 148);
	giq_option(4, 338, 149, Sinthia08, 50);
end

procedure Sinthia20
begin
	gsay_reply(338, 150);
	giq_option(4, 338, 151, Sinthia22, 50);
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		giq_option(4, 338, 152, Sinthia20a, 50);
	end
	if (not(line23flag) and (global_var(GIZMO_DEAD) == 0)) then begin
		giq_option(6, 338, 153, Sinthia23, 50);
	end
end

procedure Sinthia20a
begin
	if (item_caps_total(dude_obj) >= 40) then begin
		item_caps_adjust(dude_obj, -40);
		call Sinthia27;
	end
	else begin
		call Sinthia28;
	end
end

procedure Sinthia21
begin
	gsay_message(338, 154, 50);
end

procedure Sinthia22
begin
	gsay_message(338, 155, 50);
end

procedure Sinthia23
begin
	line23flag := 1;
	gsay_reply(338, 156);
	call SinthiaQuestions;
end

procedure Sinthia24
begin
	line24flag := 1;
	gsay_reply(338, 161);
	call SinthiaQuestions;
end

procedure Sinthia25
begin
	line25flag := 1;
	gsay_reply(338, 162);
	call SinthiaQuestions;
end

procedure Sinthia26
begin
	line26flag := 1;
	gsay_reply(338, 163);
	call SinthiaQuestions;
end

procedure Sinthia27
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 3);
	LVar1 := message_str(SCRIPT_SINTHIA, 163 + LVar0);
	float_msg(self_obj, LVar1, 7);
	call SinOn;
end

procedure Sinthia28
begin
	call DownReact;
	gsay_message(338, 167, 50);
end

procedure Sinthia29
begin
	gsay_message(338, 168, 50);
end

procedure Sinthia30
begin
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(game_ticks(600));
	move_to(dude_obj, 18291, 0);
	if (not(is_success(do_check(dude_obj, 4, 0)))) then begin
		set_map_var(7, 1);
	end
	gfade_in(1);
	do_it := 0;
end

procedure SinOn
begin
	do_it := 1;
end

procedure SinthiaQuestions
begin
	if (not(line24flag)) then begin
		giq_option(6, 338, 157, Sinthia24, 50);
	end
	if (not(line25flag)) then begin
		giq_option(6, 338, 158, Sinthia25, 50);
	end
	if (not(line26flag)) then begin
		giq_option(6, 338, 159, Sinthia26, 50);
	end
	giq_option(6, 338, 160, SinthiaEnd, 50);
end

procedure SinthiaEnd
begin
end

procedure sleeping
begin
	if (local_var(4) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(4, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(4, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, sleep_tile, 0);
				end
				else begin
					set_local_var(4, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(4, 1);
				end
			end
		end
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

