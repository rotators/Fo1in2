#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure description_p_proc;//    script_action == 3
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure damage_p_proc;//    script_action == 14

procedure JTGenGrd00;
procedure JTGenGrd00a;
procedure JTGenGrd00b;
procedure JTGenGrd01;
procedure JTGenGrd01a;
procedure JTGenGrd02;
procedure JTGenGrd02a;
procedure JTGenGrd03;
procedure JTGenGrd04;
procedure JTGenGrd05;
procedure JTGenGrd06;
procedure JTGenGrd06a;
procedure JTGenGrd07;
procedure JTGenGrd08;
procedure JTGenGrd08a;
procedure JTGenGrd09;
procedure JTGenGrd16;
procedure JTGenGrd18;
procedure JTGenGrd19;
procedure JTGenGrd20;
procedure JTGenGrdEnd;

import variable weapon_checked;
import variable sneak_checked;
import variable times_caught_sneaking;
import variable removal_ptr;

variable dest_tile := 7000;
variable hostile;
variable initial :=  0;
variable sneaking;
variable warned_about_picking;
variable waypoint;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;

procedure items_held;
variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
			call description_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
						else begin
							if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
								call timed_event_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if ((cur_map_index == 12) or (cur_map_index == 10)) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE  [OR]   ENTRANCE, MORBID, LARS
			if (tile_num(self_obj) != local_var(5)) then begin
				animate_move_obj_to_tile(self_obj, local_var(5), 0);
			end
			if (obj_can_see_obj(self_obj, dude_obj) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
				if (global_var(ENEMY_JUNKTOWN) == 1) then begin
					float_msg(self_obj, message_str(SCRIPT_JTGENGRD, 138), 2);
					hostile := 1;
				end
				else begin
					call items_held;
					if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) and (local_var(4) == 0) and (map_var(2) == 0) and (global_var(HIRED_BY_KILLIAN) == 0) and (global_var(CAPTURE_GIZMO) == 0) and (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
						if (not(weapon_checked)) then begin
							weapon_checked := 1;
							add_timer_event(self_obj, game_ticks(10), 1);
							dialogue_system_enter;
						end
					end
					else begin
						if (using_skill(dude_obj, 8) and not(sneak_checked)) then begin
							sneaking := 1;
							sneak_checked := 1;
							add_timer_event(self_obj, game_ticks(5), 2);
							dialogue_system_enter;
						end
						else begin
							if (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
								if ((map_var(8) == 1) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
									set_map_var(8, 0);
									float_msg(self_obj, message_str(SCRIPT_JTGENGRD, 136), 2);
									if (warned_about_picking) then begin
										hostile := 1;
									end
									else begin
										warned_about_picking := 1;
									end
								end
							end
						end
					end
				end
			end
		end
		else begin
			if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
				if (map_var(2) == 2) then begin
					if (waypoint != 0) then begin
						if (tile_distance(tile_num(self_obj), dest_tile) > 3) then begin
							animate_move_obj_to_tile(self_obj, dest_tile, 0);
						end
						else begin
							if (waypoint == 1) then begin
								dest_tile := 23465;
								waypoint := 2;
							end
							else begin
								if (waypoint == 2) then begin
									dest_tile := 26855;
									waypoint := 3;
								end
								else begin
									if (waypoint == 3) then begin
										destroy_object(self_obj);
									end
								end
							end
						end
					end
					else begin
						destroy_object(self_obj);
					end
				end
			end
		end
	end
	if (global_var(ENEMY_JUNKTOWN) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure description_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_JTGENGRD, 100));
	script_overrides;
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		if (map_var(2) == 1) then begin
			set_map_var(1, (map_var(1) - 1));
		end
	end
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure map_enter_p_proc
begin
	if (cur_map_index == 12) then begin //  JUNKTOWN - KILLIAN, CRASH HOUSE
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 12);
	end
	else begin
		if (cur_map_index == 11) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 0);
			dest_tile := 23666;
			waypoint := 1;
			if (map_var(2) != 1) then begin
				destroy_object(self_obj);
			end
		end
	end
	if (local_var(5) == 0) then begin
		set_local_var(5, tile_num(self_obj));
	end
end

procedure pickup_p_proc
begin
	float_msg(self_obj, message_str(SCRIPT_JTGENGRD, random(136, 138)), 2);
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (sneaking and (times_caught_sneaking >= 3)) then begin
		call JTGenGrd18;
	end
	else begin
		call items_held;
		if (not(local_var(4)) and ((SubtypeWEP == 1) and (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205)) or (sneaking and (times_caught_sneaking < 3))) then begin
			start_gdialog(37, self_obj, 4, -1, -1);
			gsay_start;
			if ((SubtypeWEP == 1) and (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205)) then begin
				call JTGenGrd00;
			end
			else begin
				if (sneaking) then begin
					call JTGenGrd06;
				end
			end
			gsay_end;
			end_dialogue;
		end
		else begin
			if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
				call JTGenGrd19;
			end
			else begin
				if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1)) or (local_var(1) == 1)) then begin
					call JTGenGrd09;
				end
				else begin
					if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1)) or (local_var(1) == 3)) then begin
						call JTGenGrd16;
					end
					else begin
						call JTGenGrd20;
					end
				end
			end
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		if (weapon_checked) then begin
			call items_held;
			if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
				float_msg(self_obj, message_str(SCRIPT_JTGENGRD, 134), 0);
				add_timer_event(self_obj, game_ticks(5), 3);
			end
			else begin
				weapon_checked := 0;
			end
		end
	end
	else begin
		if (fixed_param == 2) then begin
			sneak_checked := 0;
		end
		else begin
			if (fixed_param == 3) then begin
				hostile := 1;
			end
			else begin
				if (fixed_param == 4) then begin
					float_msg(self_obj, message_str(SCRIPT_JTGENGRD, 139), 0);
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure JTGenGrd00
begin
	call DownReact;
	gsay_reply(37, 110);
	giq_option(4, 37, 111, JTGenGrd01, 50);
	giq_option(4, 37, 112, JTGenGrd00a, 51);
	giq_option(4, 634, 105, JTGenGrdEnd, 50);
	giq_option(6, 37, 113, JTGenGrd00b, 49);
	giq_option(-3, 37, 114, JTGenGrd05, 50);
end

procedure JTGenGrd00a
begin
	call DownReact;
	call JTGenGrd02;
end

procedure JTGenGrd00b
begin
	call UpReact;
	call JTGenGrd04;
end

procedure JTGenGrd01
begin
	gsay_reply(37, 115);
	giq_option(4, 37, 116, JTGenGrd02, 50);
	giq_option(4, 37, 117, JTGenGrd01a, 50);
end

procedure JTGenGrd01a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, -20))) then begin
		call JTGenGrd03;
	end
	else begin
		call JTGenGrd02;
	end
end

procedure JTGenGrd02
begin
	gsay_reply(37, 118);
	giq_option(4, 37, 119, JTGenGrdEnd, 50);
	giq_option(4, 37, 120, JTGenGrd02a, 51);
end

procedure JTGenGrd02a
begin
	hostile := 1;
end

procedure JTGenGrd03
begin
	set_local_var(4, 1);
	gsay_message(37, 121, 50);
end

procedure JTGenGrd04
begin
	gsay_message(37, 122, 50);
end

procedure JTGenGrd05
begin
	gsay_message(37, 123, 50);
end

procedure JTGenGrd06
begin
	times_caught_sneaking := times_caught_sneaking + 1;
	add_timer_event(self_obj, game_ticks(5), 2);
	gsay_reply(37, 124);
	giq_option(4, 37, 125, JTGenGrd07, 50);
	giq_option(5, 37, 126, JTGenGrd06a, 50);
	giq_option(-3, 37, 127, JTGenGrd07, 50);
end

procedure JTGenGrd06a
begin
	variable LVar0 := 0;
	LVar0 := -5 * times_caught_sneaking;
	if (is_success(roll_vs_skill(dude_obj, 14, LVar0))) then begin
		call JTGenGrd08;
	end
	else begin
		call JTGenGrd07;
	end
end

procedure JTGenGrd07
begin
	gsay_message(37, 128, 50);
end

procedure JTGenGrd08
begin
	gsay_reply(37, 130);
	giq_option(5, 37, 131, JTGenGrdEnd, 50);
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		giq_option(5, 37, 132, JTGenGrd08a, 50);
	end
	else begin
		giq_option(5, 37, 133, JTGenGrd08a, 50);
	end
end

procedure JTGenGrd08a
begin
	if (random(0, 1)) then begin
		call DownReact;
	end
	else begin
		call UpReact;
	end
end

procedure JTGenGrd09
begin
	float_msg(self_obj, message_str(SCRIPT_JTGENGRD, random(101, 103)), 51);
end

procedure JTGenGrd16
begin
	float_msg(self_obj, message_str(SCRIPT_JTGENGRD, random(104, 106)), 49);
end

procedure JTGenGrd18
begin
	float_msg(self_obj, message_str(SCRIPT_JTGENGRD, 135), 2);
	add_timer_event(self_obj, game_ticks(5), 3);
end

procedure JTGenGrd19
begin
	display_msg(message_str(SCRIPT_JTGENGRD, 129));
	hostile := 1;
end

procedure JTGenGrd20
begin
	float_msg(self_obj, message_str(SCRIPT_JTGENGRD, random(107, 109)), 0);
end

procedure JTGenGrdEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

