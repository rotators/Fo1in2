/*

	Junktown - Phil

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_VINNIE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure run_away;
procedure go_forward;
procedure Phil00;
procedure Phil01;
procedure Phil02;
procedure Phil03;
procedure Phil04;
procedure Phil05;
procedure Phil06;
procedure Phil07;
procedure Phil08;
procedure Phil09;
procedure PhilEnd;

variable tmp_hostile;
variable home_tile := 28684;

procedure start begin

end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if (map_var(9) == 1) then begin
		call run_away;
	end
	if (map_var(6) == 1) then begin
		add_timer_event(self_obj, game_ticks(2), 2);
		set_map_var(6, 0);
	end
	if (map_var(5) == 0) then begin
		self_walk_to_tile( home_tile );
	end
	if (global_var( GVAR_DUDE_ENEMY_JUNK_CITIZEN ) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
		if (self_can_see_dude) then begin
			attack(dude_obj);
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_DUDE_ENEMY_JUNK_CITIZEN, 1 );// GVAR_ENEMY_JUNK_CITIZEN
		set_global_var( GVAR_ENEMY_JUNKTOWN, 1 );
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure damage_p_proc
begin
	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_JUNKTOWN, 1 );
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4) == 1) then begin
		display_msg(message_str(SCRIPT_PHIL, 101));
	end
	else begin
		display_msg(message_str(SCRIPT_PHIL, 100));
	end
	script_overrides;
end

procedure map_enter_p_proc
begin
	set_self_team(TEAM_JUNKTOWNER );
	if (map_var(5) == 1) then begin
		add_timer_event(self_obj, game_ticks(10), 1);
	end
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	if (global_var( GVAR_DOGMEAT_HIRELING_STATUS )) then begin
		call Phil01;
	end
	else begin
		if (not(map_var(5))) then begin
			call Phil09;
		end
		else begin
			if (dude_is_armed) then begin
				call Phil00;
			end
			else begin
				if (local_var(4) == 0) then begin
					start_gdialog(352, self_obj, 4, -1, -1);
					gsay_start;
					call Phil02;
					gsay_end;
					end_dialogue;
				end
				else begin
					call Phil08;
				end
			end
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 2) then begin
		float_msg(self_obj, message_str(SCRIPT_PHIL, 102), 0);
	end
	else begin
		if (map_var(5)) then begin
			call go_forward;
		end
	end
end

procedure run_away
begin
	self_run_to_tile( 31096 );
	set_map_var(9, 0);
	add_timer_event(self_obj, game_ticks(random(10, 30)), 1);
end

procedure go_forward
begin
	set_map_var(8, 1);
	self_walk_to_tile( 30889 );
end

procedure Phil00
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 103), 0);
end

procedure Phil01
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 104), 0);
end

procedure Phil02
begin
	variable LVar0 := 0;
	set_local_var(4, 1);
	if (dude_is_male) then begin
		LVar0 := message_str(SCRIPT_PHIL, 105);
	end
	else begin
		LVar0 := message_str(SCRIPT_PHIL, 106);
	end
	gsay_reply(352, LVar0 + message_str(SCRIPT_PHIL, 107));
	giq_option( 4, SCRIPT_PHIL, 108, Phil04, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_PHIL, 109, PhilEnd, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_PHIL, 110, Phil05, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_PHIL, 111, Phil03, NEUTRAL_REACTION );
end

procedure Phil03
begin
	gsay_message(352, 112, 50);
end

procedure Phil04
begin
	gsay_reply(352, 113);
	giq_option( 4, SCRIPT_PHIL, 114, PhilEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_PHIL, 115, Phil05, NEUTRAL_REACTION );
end

procedure Phil05
begin
	gsay_reply(352, 116);
	giq_option( 4, SCRIPT_PHIL, 117, PhilEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_PHIL, 118, Phil06, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_PHIL, 119, Phil07, NEUTRAL_REACTION );
end

procedure Phil06
begin
	gsay_message(352, 120, 50);
	gsay_reply(352, 121);
	Goodbyes;
	giq_option( 7, SCRIPT_PHIL, 122, Phil07, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MODREACT, exit_line, PhilEnd, NEUTRAL_REACTION );
end

procedure Phil07
begin
	gsay_message(352, 123, 50);
	gsay_reply(352, 124);
	giq_option( 4, SCRIPT_PHIL, 125, PhilEnd, NEUTRAL_REACTION );
end

procedure Phil08
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 126), 0);
end

procedure Phil09
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 127), 0);
end

procedure PhilEnd
begin
end
