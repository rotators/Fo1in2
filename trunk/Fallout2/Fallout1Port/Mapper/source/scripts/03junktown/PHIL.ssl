#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure damage_p_proc;//    script_action == 14
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

procedure run_away;
procedure go_forward;
procedure Phil00;
procedure Phil01;
procedure Phil02;
procedure Phil03;
procedure Phil04;
procedure Phil05;
procedure Phil06;
procedure Phil07;
procedure Phil08;
procedure Phil09;
procedure PhilEnd;

variable tmp_hostile;
variable home_tile := 28684;

procedure start begin
	
end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if (map_var(9) == 1) then begin
		call run_away;
	end
	if (map_var(6) == 1) then begin
		add_timer_event(self_obj, game_ticks(2), 2);
		set_map_var(6, 0);
	end
	if (map_var(5) == 0) then begin
		animate_move_obj_to_tile(self_obj, home_tile, 0);
	end
	if (global_var(DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin//  GVAR_ENEMY_JUNK_CITIZEN == 1
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack(dude_obj);
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_JUNK_CITIZEN, 1);// GVAR_ENEMY_JUNK_CITIZEN
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_JUNKTOWN, 1);
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4) == 1) then begin
		display_msg(message_str(SCRIPT_PHIL, 101));
	end
	else begin
		display_msg(message_str(SCRIPT_PHIL, 100));
	end
	script_overrides;
end

procedure map_enter_p_proc
begin
	critter_add_trait(self_obj, 1, 6, 16);
	if (map_var(5) == 1) then begin
		add_timer_event(self_obj, game_ticks(10), 1);
	end
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	if (global_var(DOGMEAT_HIRELING_STATUS)) then begin
		call Phil01;
	end
	else begin
		if (not(map_var(5))) then begin
			call Phil09;
		end
		else begin
			if (dude_is_armed) then begin
				call Phil00;
			end
			else begin
				if (local_var(4) == 0) then begin
					start_gdialog(352, self_obj, 4, -1, -1);
					gsay_start;
					call Phil02;
					gsay_end;
					end_dialogue;
				end
				else begin
					call Phil08;
				end
			end
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 2) then begin
		float_msg(self_obj, message_str(SCRIPT_PHIL, 102), 0);
	end
	else begin
		if (map_var(5)) then begin
			call go_forward;
		end
	end
end

procedure run_away
begin
	animate_move_obj_to_tile(self_obj, 31096, 1);
	set_map_var(9, 0);
	add_timer_event(self_obj, game_ticks(random(10, 30)), 1);
end

procedure go_forward
begin
	set_map_var(8, 1);
	animate_move_obj_to_tile(self_obj, 30889, 0);
end

procedure Phil00
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 103), 0);
end

procedure Phil01
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 104), 0);
end

procedure Phil02
begin
	variable LVar0 := 0;
	set_local_var(4, 1);
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		LVar0 := message_str(SCRIPT_PHIL, 105);
	end
	else begin
		LVar0 := message_str(SCRIPT_PHIL, 106);
	end
	gsay_reply(352, LVar0 + message_str(SCRIPT_PHIL, 107));
	giq_option(4, 352, 108, Phil04, 50);
	giq_option(4, 352, 109, PhilEnd, 50);
	giq_option(6, 352, 110, Phil05, 50);
	giq_option(-3, 352, 111, Phil03, 50);
end

procedure Phil03
begin
	gsay_message(352, 112, 50);
end

procedure Phil04
begin
	gsay_reply(352, 113);
	giq_option(4, 352, 114, PhilEnd, 50);
	giq_option(4, 352, 115, Phil05, 50);
end

procedure Phil05
begin
	gsay_reply(352, 116);
	giq_option(4, 352, 117, PhilEnd, 50);
	giq_option(5, 352, 118, Phil06, 50);
	giq_option(6, 352, 119, Phil07, 50);
end

procedure Phil06
begin
	gsay_message(352, 120, 50);
	gsay_reply(352, 121);
	Goodbyes;
	giq_option(7, 352, 122, Phil07, 50);
	giq_option(4, 634, exit_line, PhilEnd, 50);
end

procedure Phil07
begin
	gsay_message(352, 123, 50);
	gsay_reply(352, 124);
	giq_option(4, 352, 125, PhilEnd, 50);
end

procedure Phil08
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 126), 0);
end

procedure Phil09
begin
	float_msg(self_obj, message_str(SCRIPT_PHIL, 127), 0);
end

procedure PhilEnd
begin
end
