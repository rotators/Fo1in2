/*

	Generic guard

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_GENGRDB
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

import variable random_seed_1;
import variable random_seed_2;
import variable random_seed_3;

variable tmp_hostile;
variable initial :=  0;
variable scared;

procedure start begin
	if (not(initial)) then begin
		set_self_team(TEAM_HUB_WATER_MERCHANTS );
		set_self_ai(random(15, 19));
		tmp_hostile := global_var( GVAR_AGGRO_FLAG_RND_ENC_unsure );
		initial :=  1;
	end
end

procedure critter_p_proc begin
	if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
		if (scared) then begin
			call flee_dude;
		end
		else begin
			if (tmp_hostile) then begin
				tmp_hostile := 0;
				scared := 1;
				set_global_var( GVAR_AGGRO_FLAG_RND_ENC_unsure, 1 );
				attack(dude_obj);
			end
		end
	end
end

procedure destroy_p_proc begin
	inc_good_critter
	if (source_obj == dude_obj) then begin
		random_seed_2 := 1;
	end
end

procedure pickup_p_proc
begin
	if (not(scared)) then begin
		tmp_hostile := 1;
		set_global_var( GVAR_AGGRO_FLAG_RND_ENC_unsure, 1 );
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	if (scared) then begin
		if (random_seed_2) then begin
			float_msg(self_obj, message_str(SCRIPT_GENGRDB, 103), 2);
		end
		else begin
			float_msg(self_obj, message_str(SCRIPT_GENGRDB, 104), 3);
		end
	end
	else begin
		if (random_seed_2) then begin
			float_msg(self_obj, message_str(SCRIPT_GENGRDB, 102), 2);
		end
		else begin
			if (random_seed_1 == 0) then begin
				float_msg(self_obj, message_str(SCRIPT_GENGRDB, 100), 4);
			end
			else begin
				float_msg(self_obj, message_str(SCRIPT_GENGRDB, 101), 3);
			end
		end
	end
end


