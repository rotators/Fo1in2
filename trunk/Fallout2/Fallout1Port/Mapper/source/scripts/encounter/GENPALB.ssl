#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure GenPalB00;
procedure GenPalB01;
procedure GenPalB02;
procedure GenPalB03;
procedure GenPalB04;
procedure GenPalB05;
procedure GenPalB06;
procedure GenPalB07;
procedure GenPalB08;
procedure GenPalB09;
procedure GenPalB10;
procedure GenPalB10a;
procedure GenPalB11;
procedure GenPalB12;
procedure GenPalB13;
procedure GenPalB14;
procedure GenPalB15;
procedure GenPalB16;
procedure GenPalB17;
procedure GenPalB18;
procedure GenPalB19;
procedure GenPalB20;
procedure GenPalB20a;
procedure GenPalB21;
procedure GenPalB22;
procedure GenPalB23;
procedure GenPalB24;
procedure GenPalB25;
procedure flee_dude;

variable annoyed;
variable hostile;
variable initial :=  0;
variable known;
variable round_counter;
variable scared;

import variable random_seed_1;




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 44);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 65);
		hostile := global_var(AGGRO_FLAG_RND_ENC_unsure);
		initial :=  1;
	end
	else begin
		if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
			call combat_p_proc;
		end
		else begin
			if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				call critter_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		round_counter := round_counter + 1;
		if (get_critter_stat(self_obj, 35) < 10) then begin
			scared := 1;
		end
	end
end

procedure critter_p_proc
begin
	if (scared) then begin
		if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
			call flee_dude;
		end
	end
	else begin
		if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
			hostile := 0;
			random_seed_1 := 1;
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
		set_global_var(ENEMY_BROTHERHOOD, 1);
		random_seed_1 := 1;
	end
end

procedure pickup_p_proc
begin
	if (not(scared)) then begin
		hostile := 1;
		set_global_var(AGGRO_FLAG_RND_ENC_unsure, 1);
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (known) then begin
		if (annoyed) then begin
			call GenPalB23;
		end
		else begin
			start_gdialog(759, self_obj, 4, -1, -1);
			gsay_start;
			call GenPalB24;
			gsay_end;
			end_dialogue;
		end
	end
	else begin
		if (scared) then begin
			call GenPalB01;
		end
		else begin
			if ((random_seed_1 == 1) or (global_var(ENEMY_BROTHERHOOD) == 1)) then begin
				call GenPalB00;
			end
			else begin
				start_gdialog(759, self_obj, 4, -1, -1);
				gsay_start;
				if (global_var(BROTHERHOOD_SEED) == 2) then begin
					call GenPalB02;
				end
				else begin
					if (global_var(WORLDMAPLIST_BROTHERHOOD) >= 1) then begin
						if (global_var(PLAYER_REPUTATION_GENERAL) >= 20) then begin
							call GenPalB03;
						end
						else begin
							call GenPalB04;
						end
					end
					else begin
						if ((global_var(PLAYER_REPUTATION_GENERAL) < 20) or (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) or (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS))) then begin
							call GenPalB06;
						end
						else begin
							call GenPalB05;
						end
					end
				end
				gsay_end;
				end_dialogue;
			end
		end
	end
end

procedure GenPalB00
begin
	float_msg(self_obj, message_str(SCRIPT_GENPALB, 100), 2);
	hostile := 1;
	set_global_var(AGGRO_FLAG_RND_ENC_unsure, 1);
end

procedure GenPalB01
begin
	float_msg(self_obj, message_str(SCRIPT_GENPALB, 101), 2);
end

procedure GenPalB02
begin
	known := 1;
	gsay_reply(759, 102);
	giq_option(7, 759, 103, GenPalB07, 50);
	giq_option(4, 759, 104, GenPalB08, 50);
	giq_option(4, 759, 105, GenPalB09, 50);
	giq_option(4, 759, 106, GenPalB10, 50);
	giq_option(-3, 759, 107, GenPalB11, 50);
end

procedure GenPalB03
begin
	known := 1;
	gsay_reply(759, 108);
	giq_option(7, 759, 109, GenPalB12, 50);
	giq_option(4, 759, 110, GenPalB13, 50);
	giq_option(4, 759, 111, GenPalB14, 50);
	giq_option(4, 759, 112, GenPalB15, 50);
	giq_option(4, 759, 113, GenPalB16, 50);
	giq_option(-3, 759, 114, GenPalB11, 50);
end

procedure GenPalB04
begin
	known := 1;
	annoyed := 1;
	gsay_message(759, 115, 51);
end

procedure GenPalB05
begin
	known := 1;
	gsay_reply(759, 116);
	if ((global_var(QUEST_VAULT13_4_WATERCHIP) == 0) and (obj_is_carrying_obj_pid(dude_obj, PID_WATER_CHIP) == 0)) then begin
		giq_option(4, 759, message_str(SCRIPT_GENPALB, 117) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_GENPALB, 118), GenPalB17, 50);
	end
	giq_option(4, 759, message_str(SCRIPT_GENPALB, 117) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_GENPALB, 119), GenPalB18, 50);
	giq_option(4, 759, message_str(SCRIPT_GENPALB, 117) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_GENPALB, 120), GenPalB19, 50);
	giq_option(4, 759, message_str(SCRIPT_GENPALB, 117) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_GENPALB, 121), GenPalB21, 50);
	giq_option(4, 759, 122, GenPalB21, 51);
	giq_option(-3, 759, 123, GenPalB22, 50);
end

procedure GenPalB06
begin
	known := 1;
	annoyed := 1;
	gsay_message(759, 124, 51);
end

procedure GenPalB07
begin
	gsay_message(759, 125, 50);
end

procedure GenPalB08
begin
	gsay_message(759, 126, 50);
end

procedure GenPalB09
begin
	gsay_message(759, 127, 50);
end

procedure GenPalB10
begin
	gsay_reply(759, 128);
	giq_option(0, 634, 106, GenPalB10a, 50);
end

procedure GenPalB10a
begin
	gsay_message(759, 129, 50);
end

procedure GenPalB11
begin
	gsay_message(759, 130, 50);
end

procedure GenPalB12
begin
	gsay_reply(759, 131);
	if ((global_var(QUEST_VAULT13_4_WATERCHIP) == 0) and (obj_is_carrying_obj_pid(dude_obj, PID_WATER_CHIP) == 0)) then begin
		giq_option(4, 759, 132, GenPalB17, 50);
	end
	giq_option(4, 759, 133, GenPalB18, 50);
	giq_option(4, 759, 134, GenPalB19, 50);
	giq_option(4, 759, 135, GenPalB20, 50);
	giq_option(4, 759, 122, GenPalB21, 50);
end

procedure GenPalB13
begin
	known := 1;
	annoyed := 1;
	gsay_message(759, 136, 51);
end

procedure GenPalB14
begin
	gsay_message(759, 137, 50);
end

procedure GenPalB15
begin
	gsay_message(759, 138, 50);
end

procedure GenPalB16
begin
	gsay_message(759, 139, 50);
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(game_ticks(random(86400, 172800)));
	load_map(13, 0);
	gfade_in(1);
end

procedure GenPalB17
begin
	gsay_message(759, 140, 50);
end

procedure GenPalB18
begin
	gsay_message(759, 141, 50);
end

procedure GenPalB19
begin
	annoyed := 1;
	gsay_message(759, 142, 51);
end

procedure GenPalB20
begin
	gsay_reply(759, 143);
	giq_option(0, 634, 106, GenPalB20a, 50);
end

procedure GenPalB20a
begin
	gsay_message(759, 144, 50);
end

procedure GenPalB21
begin
	hostile := 1;
	set_global_var(AGGRO_FLAG_RND_ENC_unsure, 1);
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_message(759, 145, 51);
	end
	else begin
		gsay_message(759, 146, 51);
	end
end

procedure GenPalB22
begin
	gsay_message(759, 147, 50);
end

procedure GenPalB23
begin
	float_msg(self_obj, message_str(SCRIPT_GENPALB, 148), 2);
end

procedure GenPalB24
begin
	gsay_reply(759, 149);
	if ((global_var(QUEST_VAULT13_4_WATERCHIP) == 0) and (obj_is_carrying_obj_pid(dude_obj, PID_WATER_CHIP) == 0)) then begin
		giq_option(4, 759, 132, GenPalB17, 50);
	end
	giq_option(4, 759, 133, GenPalB18, 50);
	giq_option(4, 759, 150, GenPalB25, 50);
	giq_option(4, 759, 135, GenPalB20, 50);
	giq_option(4, 759, 122, GenPalB21, 51);
end

procedure GenPalB25
begin
	annoyed := 1;
	gsay_message(759, 151, 51);
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end



