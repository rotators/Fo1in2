#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11

variable initial :=  0;
variable hostile;
variable scared;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 6);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 20);
		initial :=  1;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		scared := 1;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure destroy_p_proc
begin
	set_global_var(WATER_THIEF_2, global_var(WATER_THIEF_2) - 1);
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(RND_ENC_RAIDERS_KILLED, global_var(RND_ENC_RAIDERS_KILLED) + 1);
	end

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
//
// "ARMOR DESTROY ON DEATH" MOD:
//
	if global_var(ARMOR_DESTROY_MOD) then begin// if enabled
		if (critter_inven_obj(self_obj, 0) > 0) then begin
			variable slot0 := 0;
			slot0 := critter_inven_obj(self_obj, 0);
			rm_obj_from_inven(self_obj, slot0);
			destroy_object(slot0);
		end
		else begin
			variable HasArmor := 0;
			HasArmor := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET);
			if (HasArmor > 0) then begin
				rm_obj_from_inven(self_obj, HasArmor);
				destroy_object(HasArmor);
			end
			else begin
				HasArmor := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR);
				if (HasArmor > 0) then begin
					rm_obj_from_inven(self_obj, HasArmor);
					destroy_object(HasArmor);
				end
				else begin
					HasArmor := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE);
					if (HasArmor > 0) then begin
						rm_obj_from_inven(self_obj, HasArmor);
						destroy_object(HasArmor);
					end
					else begin
						HasArmor := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR);
						if (HasArmor > 0) then begin
							rm_obj_from_inven(self_obj, HasArmor);
							destroy_object(HasArmor);
						end
						else begin
							HasArmor := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR);
							if (HasArmor > 0) then begin
								rm_obj_from_inven(self_obj, HasArmor);
								destroy_object(HasArmor);
							end
							else begin
								HasArmor := obj_carrying_pid_obj(self_obj, PID_BROTHERHOOD_COMBAT_ARMOR);
								if (HasArmor > 0) then begin
									rm_obj_from_inven(self_obj, HasArmor);
									destroy_object(HasArmor);
								end
								else begin
									HasArmor := obj_carrying_pid_obj(self_obj, PID_POWERED_ARMOR);
									if (HasArmor > 0) then begin
										rm_obj_from_inven(self_obj, HasArmor);
										destroy_object(HasArmor);
									end
									else begin
										HasArmor := obj_carrying_pid_obj(self_obj, PID_HARDENED_POWER_ARMOR);
										if (HasArmor > 0) then begin
											rm_obj_from_inven(self_obj, HasArmor);
											destroy_object(HasArmor);
										end
										else begin
											HasArmor := obj_carrying_pid_obj(self_obj, PID_TESLA_ARMOR);
											if (HasArmor > 0) then begin
												rm_obj_from_inven(self_obj, HasArmor);
												destroy_object(HasArmor);
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (scared) then begin
		float_msg(self_obj, message_str(SCRIPT_GENRAIDB, random(102, 103)), 0);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_GENRAIDB, random(100, 101)), 0);
	end
end

