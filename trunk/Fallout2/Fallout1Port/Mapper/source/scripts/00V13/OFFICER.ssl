#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Officer00;
procedure Officer01;
procedure Officer02;
procedure Officer03;
procedure Officer04;
procedure Officer05;
procedure Officer06;
procedure Officer07;
procedure Officer08;
procedure Officer09;
procedure Officer10;
procedure Officer11;
procedure Officer12;
procedure Officer13;
procedure Officer14;
procedure Officer15;
procedure Officer15a;
procedure Officer16;
procedure Officer17;
procedure Officer18;
procedure Officer19;
procedure Officer20;
procedure Officer21;
procedure Officer21a;
procedure Officer22;
procedure Officer23;
procedure Officer24;
procedure Officer25;
procedure Officer26;
procedure Officer27;
procedure Officer28;
procedure Officer29;
procedure Officer30;
procedure Officer31;
procedure OfficerCombat;
procedure OfficerEnd;
procedure items_held;
variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable hostile;
import variable SecDoor_ptr;
import variable armory_access;
import variable Officer_ptr;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == 6) or (cur_map_index == 35) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing OFFICER.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (global_var(VAULT_13_HOSTILE)) then begin
			if (obj_can_see_obj(self_obj, dude_obj)) then begin
				dialogue_system_enter;
			end
		end
		else begin
			if ((armory_access == 1) and not(obj_is_open(SecDoor_ptr))) then begin
				use_obj(SecDoor_ptr);
			end
			else begin
				if (armory_access == 2) then begin
					anim(self_obj, 1000, 5);
					float_msg(self_obj, message_str(SCRIPT_OFFICER, 159), 0);
					armory_access := 0;
					set_map_var(1, armory_access);
				end
				else begin
					if (not(armory_access) and (elevation(dude_obj) == elevation(self_obj))) then begin
						if (tile_distance(tile_num(dude_obj), 21292) < 2) then begin
							hostile := 1;
						end
					end
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
end

procedure destroy_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	Officer_ptr := 0;
end

procedure map_enter_p_proc
begin
	critter_add_trait(self_obj, 1, 6, 1);
	Officer_ptr := self_obj;
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(178, self_obj, 4, -1, -1);
	gsay_start;
	if (global_var(VAULT_13_HOSTILE)) then begin
		call Officer00;
	end
	else begin
		call items_held;
		if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) and (local_var(14) == 0) then begin
			call Officer27;
		end
		else begin
			if ((global_var(QUEST_VAULT13_4_WATERCHIP) != 0) and (global_var(QUEST_VAULT13_4_WATERCHIP) != 1)) then begin
				call Officer01;
			end
			else begin
				if (local_var(1) > 1) then begin
					if (armory_access) then begin
						call Officer25;
					end
					else begin
						call Officer02;
					end
				end
				else begin
					if (armory_access) then begin
						call Officer26;
					end
					else begin
						call Officer18;
					end
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Officer00
begin
	gsay_message(178, 100, 51);
	hostile := 1;
end

procedure Officer01
begin
	gsay_message(178, 101, 50);
end

procedure Officer02
begin
	gsay_reply(178, 102);
	giq_option(4, 178, 103, Officer04, 50);
	giq_option(5, 178, 104, Officer08, 50);
	giq_option(6, 178, 105, Officer11, 50);
	giq_option(-3, 178, 106, Officer03, 50);
end

procedure Officer03
begin
	gsay_reply(178, 107);
	giq_option(4, 178, 159, OfficerEnd, 50);
end

procedure Officer04
begin
	gsay_reply(178, 108);
	giq_option(4, 178, 109, OfficerEnd, 50);
	giq_option(5, 178, 110, Officer05, 50);
end

procedure Officer05
begin
	gsay_reply(178, 111);
	giq_option(5, 178, 112, Officer06, 50);
	giq_option(6, 178, 113, Officer07, 50);
end

procedure Officer06
begin
	gsay_reply(178, 114);
	giq_option(5, 178, 115, OfficerEnd, 50);
end

procedure Officer07
begin
	call UpReact;
	gsay_message(178, 116, 49);
end

procedure Officer08
begin
	gsay_reply(178, 117);
	giq_option(4, 178, 118, Officer09, 50);
	giq_option(4, 178, 119, Officer10, 50);
end

procedure Officer09
begin
	call DownReact;
	gsay_message(178, 120, 51);
end

procedure Officer10
begin
	gsay_message(178, 121, 50);
end

procedure Officer11
begin
	gsay_reply(178, 122);
	giq_option(5, 178, 123, Officer13, 50);
	giq_option(5, 178, 124, Officer12, 50);
end

procedure Officer12
begin
	gsay_message(178, 125, 50);
end

procedure Officer13
begin
	gsay_reply(178, 126);
	giq_option(5, 178, 127, Officer15, 50);
	giq_option(5, 178, 128, Officer14, 50);
end

procedure Officer14
begin
	gsay_message(178, 129, 50);
end

procedure Officer15
begin
	gsay_reply(178, 130);
	giq_option(5, 178, 131, Officer15a, 50);
end

procedure Officer15a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Officer17;
	end
	else begin
		call Officer16;
	end
end

procedure Officer16
begin
	gsay_message(178, 132, 50);
end

procedure Officer17
begin
	armory_access := 1;
	set_map_var(1, armory_access);
	gsay_message(178, 133, 50);
end

procedure Officer18
begin
	gsay_reply(178, message_str(SCRIPT_OFFICER, 134) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_OFFICER, 135));
	giq_option(4, 178, 136, Officer20, 50);
	giq_option(5, 178, 137, Officer21, 50);
	giq_option(-3, 178, 138, Officer19, 50);
end

procedure Officer19
begin
	gsay_message(178, 139, 50);
end

procedure Officer20
begin
	gsay_message(178, 140, 50);
end

procedure Officer21
begin
	gsay_reply(178, 141);
	giq_option(5, 178, 142, Officer22, 50);
	giq_option(5, 178, 143, Officer21a, 50);
end

procedure Officer21a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Officer23;
	end
	else begin
		call Officer24;
	end
end

procedure Officer22
begin
	gsay_reply(178, 144);
	giq_option(5, 178, 145, OfficerEnd, 50);
	giq_option(5, 178, 146, OfficerCombat, 51);
end

procedure Officer23
begin
	gsay_message(178, 147, 50);
end

procedure Officer24
begin
	gsay_message(178, 148, 50);
end

procedure Officer25
begin
	gsay_message(178, 149, 50);
end

procedure Officer26
begin
	gsay_message(178, 150, 50);
end

procedure Officer27
begin
	gsay_message(178, 151, 50);
end

procedure Officer28
begin
	gsay_reply(178, 152);
	giq_option(4, 178, 153, Officer30, 50);
	giq_option(5, 178, 154, Officer31, 50);
	giq_option(-3, 178, 155, Officer29, 50);
end

procedure Officer29
begin
	gsay_message(178, 156, 50);
end

procedure Officer30
begin
	gsay_message(178, 157, 50);
end

procedure Officer31
begin
	gsay_message(178, 158, 50);
end

procedure OfficerCombat
begin
	call BigDownReact;
	hostile := 1;
end

procedure OfficerEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end

