#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Officer00;
procedure Officer01;
procedure Officer02;
procedure Officer03;
procedure Officer04;
procedure Officer05;
procedure Officer06;
procedure Officer07;
procedure Officer08;
procedure Officer09;
procedure Officer10;
procedure Officer11;
procedure Officer12;
procedure Officer13;
procedure Officer14;
procedure Officer15;
procedure Officer15a;
procedure Officer16;
procedure Officer17;
procedure Officer18;
procedure Officer19;
procedure Officer20;
procedure Officer21;
procedure Officer21a;
procedure Officer22;
procedure Officer23;
procedure Officer24;
procedure Officer25;
procedure Officer26;
procedure Officer27;
procedure Officer28;
procedure Officer29;
procedure Officer30;
procedure Officer31;
procedure OfficerCombat;
procedure OfficerEnd;

variable tmp_hostile;
import variable SecDoor_ptr;
import variable armory_access;
import variable Officer_ptr;

procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(GVAR_VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if not(is_loading_game) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing OFFICER.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		

		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (global_var(VAULT_13_HOSTILE)) then begin
			if (obj_can_see_obj(self_obj, dude_obj)) then begin
				dialogue_system_enter;
			end
		end
		else begin
			if ((armory_access == 1) and not(obj_is_open(SecDoor_ptr))) then begin
				use_obj(SecDoor_ptr);
			end
			else begin
				if (armory_access == 2) then begin
					anim(self_obj, 1000, 5);
					float_msg(self_obj, message_str(SCRIPT_OFFICER, 159), 0);
					armory_access := 0;
					set_map_var(1, armory_access);
				end
				else begin
					if (not(armory_access) and (elevation(dude_obj) == elevation(self_obj))) then begin
						if (tile_distance(tile_num(dude_obj), 21292) < 2) then begin
							tmp_hostile := 1;
						end
					end
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if (source_obj == dude_obj) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
end

procedure destroy_p_proc
begin
	if (source_obj == dude_obj) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end

	inc_good_critter
	Officer_ptr := 0;
end

procedure map_enter_p_proc
begin
	set_self_team(TEAM_VAULT13 );
	Officer_ptr := self_obj;
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	dude_look_at_critter;

	get_reaction

	start_gdialog(178, self_obj, 4, -1, -1);
	gsay_start;
	if (global_var(VAULT_13_HOSTILE)) then begin
		call Officer00;
	end
	else begin
		if dude_is_armed and (local_var(14) == 0) then begin
			call Officer27;
		end
		else begin
			if ((global_var(QUEST_VAULT13_4_WATERCHIP) != 0) and (global_var(QUEST_VAULT13_4_WATERCHIP) != 1)) then begin
				call Officer01;
			end
			else begin
				if (local_var(1) > 1) then begin
					if (armory_access) then begin
						call Officer25;
					end
					else begin
						call Officer02;
					end
				end
				else begin
					if (armory_access) then begin
						call Officer26;
					end
					else begin
						call Officer18;
					end
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Officer00
begin
	gsay_message(178, 100, 51);
	tmp_hostile := 1;
end

procedure Officer01
begin
	gsay_message(178, 101, 50);
end

procedure Officer02
begin
	gsay_reply(178, 102);
	giq_option( 4, SCRIPT_OFFICER, 103, Officer04, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 104, Officer08, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_OFFICER, 105, Officer11, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 106, Officer03, NEUTRAL_REACTION );
end

procedure Officer03
begin
	gsay_reply(178, 107);
	giq_option( 4, SCRIPT_OFFICER, 159, OfficerEnd, NEUTRAL_REACTION );
end

procedure Officer04
begin
	gsay_reply(178, 108);
	giq_option( 4, SCRIPT_OFFICER, 109, OfficerEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 110, Officer05, NEUTRAL_REACTION );
end

procedure Officer05
begin
	gsay_reply(178, 111);
	giq_option( 5, SCRIPT_OFFICER, 112, Officer06, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_OFFICER, 113, Officer07, NEUTRAL_REACTION );
end

procedure Officer06
begin
	gsay_reply(178, 114);
	giq_option( 5, SCRIPT_OFFICER, 115, OfficerEnd, NEUTRAL_REACTION );
end

procedure Officer07
begin
	UpReact
	gsay_message(178, 116, 49);
end

procedure Officer08
begin
	gsay_reply(178, 117);
	giq_option( 4, SCRIPT_OFFICER, 118, Officer09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_OFFICER, 119, Officer10, NEUTRAL_REACTION );
end

procedure Officer09
begin
	DownReact
	gsay_message(178, 120, 51);
end

procedure Officer10
begin
	gsay_message(178, 121, 50);
end

procedure Officer11
begin
	gsay_reply(178, 122);
	giq_option( 5, SCRIPT_OFFICER, 123, Officer13, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 124, Officer12, NEUTRAL_REACTION );
end

procedure Officer12
begin
	gsay_message(178, 125, 50);
end

procedure Officer13
begin
	gsay_reply(178, 126);
	giq_option( 5, SCRIPT_OFFICER, 127, Officer15, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 128, Officer14, NEUTRAL_REACTION );
end

procedure Officer14
begin
	gsay_message(178, 129, 50);
end

procedure Officer15
begin
	gsay_reply(178, 130);
	giq_option( 5, SCRIPT_OFFICER, 131, Officer15a, NEUTRAL_REACTION );
end

procedure Officer15a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Officer17;
	end
	else begin
		call Officer16;
	end
end

procedure Officer16
begin
	gsay_message(178, 132, 50);
end

procedure Officer17
begin
	armory_access := 1;
	set_map_var(1, armory_access);
	gsay_message(178, 133, 50);
end

procedure Officer18
begin
	gsay_reply(178, message_str(SCRIPT_OFFICER, 134) + dude_name + message_str(SCRIPT_OFFICER, 135));
	giq_option( 4, SCRIPT_OFFICER, 136, Officer20, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 137, Officer21, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 138, Officer19, NEUTRAL_REACTION );
end

procedure Officer19
begin
	gsay_message(178, 139, 50);
end

procedure Officer20
begin
	gsay_message(178, 140, 50);
end

procedure Officer21
begin
	gsay_reply(178, 141);
	giq_option( 5, SCRIPT_OFFICER, 142, Officer22, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 143, Officer21a, NEUTRAL_REACTION );
end

procedure Officer21a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Officer23;
	end
	else begin
		call Officer24;
	end
end

procedure Officer22
begin
	gsay_reply(178, 144);
	giq_option( 5, SCRIPT_OFFICER, 145, OfficerEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 146, OfficerCombat, BAD_REACTION );
end

procedure Officer23
begin
	gsay_message(178, 147, 50);
end

procedure Officer24
begin
	gsay_message(178, 148, 50);
end

procedure Officer25
begin
	gsay_message(178, 149, 50);
end

procedure Officer26
begin
	gsay_message(178, 150, 50);
end

procedure Officer27
begin
	gsay_message(178, 151, 50);
end

procedure Officer28
begin
	gsay_reply(178, 152);
	giq_option( 4, SCRIPT_OFFICER, 153, Officer30, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_OFFICER, 154, Officer31, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_OFFICER, 155, Officer29, NEUTRAL_REACTION );
end

procedure Officer29
begin
	gsay_message(178, 156, 50);
end

procedure Officer30
begin
	gsay_message(178, 157, 50);
end

procedure Officer31
begin
	gsay_message(178, 158, 50);
end

procedure OfficerCombat
begin
	BigDownReact
	tmp_hostile := 1;
end

procedure OfficerEnd begin
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end


