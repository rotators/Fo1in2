#include "..\headers\define.h"

#define NAME                    SCRIPT_VALTCTZN

#include "..\headers\command.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure push_p_proc;

procedure get_rations;
procedure set_ration_tile;
procedure set_sleep_tile;
procedure sleeping;
import variable recipient;
import variable WtrGrd_ptr;
import variable getting_ration;
variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable rndx;
variable tmp_hostile;
variable sleeping_disabled;
variable ration_tile;
procedure PickDeadBodyType;
variable DeathType := 57;

procedure push_p_proc begin
end

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing VALTCTZN.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
						call map_enter_p_proc;
					end
					else begin
						if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
							call pickup_p_proc;
						end
						else begin
							if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
								call talk_p_proc;
							end
							else begin
								if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
									call timed_event_p_proc;
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (global_var(QUEST_VAULT13_4_WATERCHIP) == 0) then begin
			if (local_var(5) == 0) then begin
				if ((elevation(self_obj) == elevation(WtrGrd_ptr)) and (elevation(self_obj) == elevation(dude_obj))) then begin
					if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
						call get_rations;
					end
				end
			end
		end
		if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
			set_local_var(5, 0);
			sleeping_disabled := 0;
		end
		if (sleeping_disabled == 0) then begin
			call sleeping;
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(7, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	rm_timer_event(self_obj);
end

procedure map_enter_p_proc
begin
	if (not(local_var(4))) then begin
		set_local_var(4, tile_num(self_obj));
	end
	home_tile := local_var(4);
	critter_add_trait(self_obj, 1, 6, 1);
	call set_ration_tile;
	call set_sleep_tile;
	sleep_time := random(1900, 1930);
	wake_time := sleep_time - 1300;
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(6) == 1) then begin
		if (random(0, 1)) then begin
			float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
		end
		else begin
			display_msg(message_str(SCRIPT_GENVAULT, 167));
		end
	end
	else begin
		if (local_var(7) or global_var(VAULT_13_HOSTILE)) then begin
			float_msg(self_obj, message_str(SCRIPT_ENEMY, 105), 0);
		end
		else begin
			if (rndx == 0) then begin
				rndx := random(101, 106);
			end
			float_msg(self_obj, message_str(SCRIPT_VALTCTZN, rndx), 0);
		end
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(WtrGrd_ptr), 2, 1), 0);
		add_timer_event(self_obj, game_ticks(3), 2);
	end
	else begin
		if (fixed_param == 2) then begin
			getting_ration := 1;
			if (random(0, 1)) then begin
				float_msg(self_obj, message_str(SCRIPT_GENVAULT, 165), 0);
			end
			add_timer_event(self_obj, game_ticks(3), 3);
		end
		else begin
			if (fixed_param == 3) then begin
				recipient := 0;
				animate_move_obj_to_tile(self_obj, home_tile, 0);
			end
		end
	end
end

procedure get_rations
begin
	sleeping_disabled := 1;
	if (tile_num(self_obj) != ration_tile) then begin
		if not(random(0, 9)) then begin
			if (random(0, 1)) then begin
				animate_move_obj_to_tile(self_obj, ration_tile, 0);
			end
			else begin
				animate_move_obj_to_tile(self_obj, ration_tile, 1);
			end
		end
		else begin
			rm_timer_event(self_obj);
			rm_timer_event(self_obj);
		end
	end
	else begin
		if (not(recipient)) then begin
			recipient := self_obj;
			add_timer_event(self_obj, game_ticks(3), 1);
			set_local_var(5, 1);
			sleeping_disabled := 0;
		end
	end
end

procedure set_ration_tile
begin
	if (elevation(self_obj) == 0) then begin
		ration_tile := tile_num_in_direction(14704, random(0, 5), random(1, 2));
	end
	else begin
		if (elevation(self_obj) == 1) then begin
			ration_tile := tile_num_in_direction(21895, random(0, 5), random(1, 2));
		end
		else begin
			if (elevation(self_obj) == 2) then begin
				variable newtile := 0;
				newtile := random(1, 4);
				if newtile == 1 then begin
					newtile := 22717;
				end
				else begin
					if newtile == 2 then begin
						newtile := 22513;
					end
					else begin
						if newtile == 3 then begin
							newtile := 23114;
						end
						else begin
							newtile := 22910;
						end
					end
				end
				ration_tile := tile_num_in_direction(newtile, random(0, 5), random(1, 2));// was 22513
			end
		end
	end
end

procedure set_sleep_tile
begin
	if (elevation(self_obj) == 0) then begin
		sleep_tile := 7000;
	end
	else begin
		if (elevation(self_obj) == 1) then begin
			sleep_tile := home_tile;
		end
		else begin
			if (elevation(self_obj) == 2) then begin
				sleep_tile := 7000;
			end
		end
	end
end

procedure sleeping
begin
	if (local_var(6) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(6, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(6, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(6, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(6, 1);
				end
			end
		end
	end
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end

