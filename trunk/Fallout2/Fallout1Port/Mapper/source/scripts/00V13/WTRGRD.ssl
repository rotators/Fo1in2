#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure WtrGrd01;
procedure WtrGrd02;
procedure WtrGrd03;
procedure WtrGrd04;
procedure WtrGrd05;
procedure WtrGrd06;
procedure WtrGRd07;
procedure WtrGRd08;
procedure WtrGrd09;
procedure WtrGrdEnd;
procedure WtrGrdQuest;
import variable WtrGrd_ptr;
import variable recipient;
import variable getting_ration;
variable asleep;
variable hostile;
variable on_rounds;
variable going_up;
variable going_down;
variable dest_tile;
variable initial :=  0;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing WTRGRD.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		fixt_critter_healing
		
		if not(initial) then begin
			initial :=  1;
			WtrGrd_ptr := self_obj;
			if (local_var(5) == 0) then begin
				set_local_var(5, tile_num(self_obj));
			end
			dest_tile := local_var(5);
			recipient := 0;
			if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
				move_to(self_obj, 7000, 2);
				asleep := 1;
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
						else begin
							if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
								call timed_event_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			/* has how many? */    if (obj_is_carrying_obj_pid(dude_obj, PID_WATER_FLASK) > 3) then begin
				if (local_var(4) == 0) then begin
					set_local_var(4, 1);
					float_msg(self_obj, message_str(SCRIPT_WTRGRD, 116), 0);
				end
			end
		end
		if ((game_time_hour >= 700) and (game_time_hour < 1800)) then begin
			if (tile_num(self_obj) != dest_tile) then begin
				animate_move_obj_to_tile(self_obj, dest_tile, 0);
			end
		end
		if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
			on_rounds := 0;
		end
		if ((game_time_hour > 700) and (game_time_hour < 900) and not(on_rounds)) then begin
			dest_tile := 21511;
			on_rounds := 1;
			add_timer_event(self_obj, game_ticks(300), 1);
		end
		if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
			if (not(asleep)) then begin
				if ((game_time_hour > 1905) and (game_time_hour < 1915)) then begin
					animate_move_obj_to_tile(self_obj, 16912, 0);
					if (tile_num(self_obj) == 16912) then begin
						move_to(self_obj, 7000, 2);
						asleep := 1;
					end
				end
				else begin
					move_to(self_obj, 7000, 2);
					asleep := 1;
				end
			end
		end
		else begin
			if ((game_time_hour > 630) and asleep) then begin
				move_to(self_obj, local_var(5), 2);
				asleep := 0;
			end
			else begin
				if ((game_time_hour > 620) and asleep) then begin
					if (elevation(self_obj) != 2) then begin
						move_to(self_obj, 16912, 2);
					end
					else begin
						animate_move_obj_to_tile(self_obj, self_obj, 0);
					end
					asleep := 0;
				end
			end
		end
		if (getting_ration) then begin
			use_obj(recipient);
			float_msg(self_obj, message_str(SCRIPT_WTRGRD, random(113, 114)), 3);
			getting_ration := 0;
		end
		if ((tile_num(self_obj) == 16912) and going_down) then begin
			move_to(self_obj, 22104, 1);
			going_down := 0;
		end
		else begin
			if (tile_num(self_obj) == 22104) then begin
				if (going_down) then begin
					move_to(self_obj, 13704, 0);
					going_down := 0;
				end
				else begin
					if (going_up) then begin
						move_to(self_obj, 16912, 2);
						going_up := 0;
					end
				end
			end
			else begin
				if ((tile_num(self_obj) == 13704) and going_up) then begin
					move_to(self_obj, 22104, 1);
					going_up := 0;
				end
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	rm_timer_event(self_obj);
	WtrGrd_ptr := 0;
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_WTRGRD, 100));
end

procedure pickup_p_proc
begin
	float_msg(self_obj, message_str(SCRIPT_WTRGRD, 115), 0);
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (global_var(VAULT_13_HOSTILE) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 102), 2);
	end
	else begin
		if (global_var(QUEST_VAULT13_4_WATERCHIP) == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_GENVAULT, 109), 0);
		end
		else begin
			if (global_var(QUEST_VAULT13_5_WTR_THIEF) == 2) then begin
				float_msg(self_obj, message_str(SCRIPT_LYLE, 113), 0);
			end
			else begin
				start_gdialog(163, self_obj, 4, -1, -1);
				gsay_start;
				if ((game_time / (10 * 60 * 60 * 24)) < 30) then begin
					call WtrGrd05;
				end
				else begin
					call WtrGrd01;
				end
				gsay_end;
				end_dialogue;
			end
		end
	end
end

procedure timed_event_p_proc
begin
	if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
		if (fixed_param == 1) then begin
			dest_tile := 16912;
			going_down := 1;
			add_timer_event(self_obj, game_ticks(60), 2);
		end
		else begin
			if (fixed_param == 2) then begin
				dest_tile := 20910;
				add_timer_event(self_obj, game_ticks(120), 3);
			end
			else begin
				if (fixed_param == 3) then begin
					dest_tile := 22104;
					going_down := 1;
					add_timer_event(self_obj, game_ticks(60), 4);
				end
				else begin
					if (fixed_param == 4) then begin
						dest_tile := 14102;
						add_timer_event(self_obj, game_ticks(120), 5);
					end
					else begin
						if (fixed_param == 5) then begin
							dest_tile := 13704;
							going_up := 1;
							add_timer_event(self_obj, game_ticks(5), 6);
						end
						else begin
							if (fixed_param == 6) then begin
								going_up := 1;
								add_timer_event(self_obj, game_ticks(60), 7);
							end
							else begin
								if (fixed_param == 7) then begin
									dest_tile := local_var(5);
								end
							end
						end
					end
				end
			end
		end
	end
	else begin
		dest_tile := 21511;
		move_to(self_obj, 16912, 2);
	end
end

procedure WtrGrd01
begin
	gsay_reply(163, message_str(SCRIPT_WTRGRD, 101) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_WTRGRD, 102));
	giq_option(4, 163, 103, WtrGrd03, 50);
	giq_option(4, 163, 127, WtrGrd09, 50);
	giq_option(-3, 163, 104, WtrGrd02, 50);
end

procedure WtrGrd02
begin
	gsay_reply(163, 105);
	giq_option(-3, 163, 106, WtrGrd03, 50);
end

procedure WtrGrd03
begin
	gsay_reply(163, 107);
	giq_option(4, 163, 108, WtrGrd04, 50);
	giq_option(4, 163, 127, WtrGrd09, 50);
	giq_option(-3, 163, 109, WtrGrdEnd, 50);
end

procedure WtrGrd04
begin
	gsay_reply(163, 110);
	giq_option(4, 163, 111, WtrGrdQuest, 50);
	giq_option(4, 163, 112, WtrGrdEnd, 50);
end

procedure WtrGrd05
begin
	gsay_reply(163, message_str(SCRIPT_WTRGRD, 118) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_WTRGRD, 119));
	giq_option(4, 163, 120, WtrGrd06, 50);
	giq_option(6, 163, 121, WtrGRd07, 50);
	giq_option(4, 163, 127, WtrGrd09, 50);
	giq_option(-3, 163, 104, WtrGrd02, 50);
end

procedure WtrGrd06
begin
	gsay_reply(163, 122);
	giq_option(4, 163, 121, WtrGRd07, 50);
	giq_option(4, 634, 105, WtrGrdEnd, 50);
end

procedure WtrGRd07
begin
	gsay_reply(163, 123);
	giq_option(4, 163, 124, WtrGRd08, 50);
end

procedure WtrGRd08
begin
	gsay_message(163, 125, 50);
end

procedure WtrGrd09
begin
	gsay_message(163, 126, 50);
end

procedure WtrGrdEnd
begin
end

procedure WtrGrdQuest
begin
	if (not(global_var(QUEST_VAULT13_5_WTR_THIEF))) then begin
		set_global_var(QUEST_VAULT13_5_WTR_THIEF, 1);
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end
