#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure Theresa01;
procedure Theresa02;
procedure Theresa02a;
procedure Theresa03;
procedure Theresa04;
procedure Theresa05;
procedure Theresa06;
procedure Theresa07;
procedure Theresa08;
procedure Theresa09;
procedure Theresa10;
procedure Theresa11;
procedure Theresa12;
procedure Theresa13;
procedure Theresa14;
procedure Theresa15;
procedure Theresa16;
procedure Theresa17;
procedure Theresa18;
procedure Theresa19;
procedure Theresa20;
procedure Theresa21;
procedure Theresa22;
procedure Theresa23;
procedure Theresa24;
procedure Theresa25;
procedure TheresaEnd;
procedure TheresaCombat;
procedure begin_meeting;
procedure say_lines;
procedure rebel_meeting;
procedure sleeping;
variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable not_at_meeting := 1;
variable line;
variable hostile;
variable exp_flag;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing THERESA.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
						call look_at_p_proc;
					end
					else begin
						if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
							call map_enter_p_proc;
						end
						else begin
							if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
								call pickup_p_proc;
							end
							else begin
								if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
									call talk_p_proc;
								end
								else begin
									if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
										call timed_event_p_proc;
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if map_var(5) != 0 then begin
			if ((game_time / (10 * 60 * 60 * 24)) > map_var(5)) and (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
				destroy_object(self_obj);
			end
		end
		if ((game_time_hour >= 1700) and (game_time_hour < 1710)) then begin
			if (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
				if (not_at_meeting) then begin
					call rebel_meeting;
				end
			end
		end
		else begin
			call sleeping;
		end
	end
end

procedure rebel_meeting
begin
	not_at_meeting := 0;
	add_timer_event(self_obj, game_ticks(3), 4);
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		not_at_meeting := 1;
	end
	else begin
		if (fixed_param == 2) then begin
			call begin_meeting;
		end
		else begin
			if (fixed_param == 3) then begin
				call say_lines;
			end
			else begin
				if (fixed_param == 4) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
					add_timer_event(self_obj, game_ticks(10), 2);// was 60 ticks
				end
			end
		end
	end
end

procedure begin_meeting
begin
	animate_move_obj_to_tile(self_obj, home_tile, 0);
	line := 1;
	add_timer_event(self_obj, game_ticks(10), 3);
end

procedure say_lines
begin
	variable LVar0 := 0;
	LVar0 := message_str(SCRIPT_THERESA, 159 + line);
	float_msg(self_obj, LVar0, 0);
	line := line + 1;
	if (line < 11) then begin
		add_timer_event(self_obj, game_ticks(10), 3);
	end
	else begin
		add_timer_event(self_obj, game_ticks(600), 1);
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(8, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
	if global_var(QUEST_VAULT13_1_REBELS) == 1 then begin
		set_global_var(QUEST_VAULT13_1_REBELS, 2);
		display_msg(message_str(SCRIPT_THERESA, 177));
		give_exp_points(250);
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 4);
	end

	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_THERESA, 100));
end

procedure map_enter_p_proc
begin
	if (not(local_var(4))) then begin
		set_local_var(4, tile_num(self_obj));
	end
	home_tile := local_var(4);
	critter_add_trait(self_obj, 1, 6, 87);
	sleep_tile := home_tile;
	sleep_time := 1915;
	wake_time := 715;
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (map_var(5) == 250) then begin
		set_map_var(5, (game_time / (10 * 60 * 60 * 24)) + 3);
	end
	call get_reaction;
	if (local_var(5) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
	end
	else begin
		if (global_var(VAULT_13_HOSTILE) or local_var(8)) then begin
			float_msg(self_obj, message_str(SCRIPT_THERESA, 174), 2);
		end
		else begin
			start_gdialog(378, self_obj, 4, -1, -1);
			gsay_start;
			if (global_var(QUEST_VAULT13_4_WATERCHIP) == 2) then begin
				call Theresa24;
			end
			else begin
				if (global_var(QUEST_VAULT13_1_REBELS) == 2) then begin
					call Theresa23;
				end
				else begin
					if ((global_var(QUEST_VAULT13_1_REBELS) != 2) and (game_time_hour >= 1700) and (game_time_hour < 1710)) then begin
						call Theresa15;
					end
					else begin
						if (local_var(1) >= 2) then begin
							call Theresa01;
						end
						else begin
							call Theresa14;
						end
					end
				end
			end
			gsay_end;
			end_dialogue;
		end
	end
	if (exp_flag) then begin
		exp_flag := 0;
		give_exp_points(750);
		display_msg(message_str(SCRIPT_THERESA, 173));
	end
	if ((game_time_hour >= 1700) and (game_time_hour <= 1710)) then begin
	end
	else begin
		if (global_var(QUEST_VAULT13_1_REBELS) != 2) and (local_var(5) == 0) and local_var(6) then begin
			float_msg(self_obj, message_str(SCRIPT_THERESA, 176), 0);
		end
	end
end

procedure Theresa01
begin
	gsay_reply(378, message_str(SCRIPT_THERESA, 101) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_THERESA, 102));
	giq_option(4, 378, 103, Theresa02, 50);
	giq_option(4, 378, 104, Theresa03, 50);
	giq_option(-3, 378, 105, Theresa04, 50);
end

procedure Theresa02
begin
	set_local_var(6, 1);
	if global_var(QUEST_VAULT13_1_REBELS) == 0 then begin
		set_global_var(QUEST_VAULT13_1_REBELS, 1);
	end
	gsay_reply(378, 106);
	giq_option(4, 378, 107, Theresa05, 51);
	giq_option(4, 378, 108, Theresa06, 50);
	giq_option(4, 378, 109, Theresa07, 50);
	giq_option(6, 378, 110, Theresa02a, 50);
end

procedure Theresa02a
begin
	variable LVar0 := 0;
	if (not(local_var(7))) then begin
		set_local_var(7, 1);
		LVar0 := roll_vs_skill(dude_obj, SKILL_SPEECH, 0);
		if (is_success(LVar0)) then begin
			call Theresa08;
		end
		else begin
			call Theresa09;
		end
	end
	else begin
		call Theresa25;
	end
end

procedure Theresa03
begin
	gsay_reply(378, 111);
	giq_option(4, 378, 112, Theresa07, 50);
	giq_option(4, 378, 113, Theresa06, 50);
end

procedure Theresa04
begin
	gsay_message(378, 114, 50);
end

procedure Theresa05
begin
	call DownReact;
	gsay_reply(378, 115);
	giq_option(4, 378, 116, Theresa09, 50);
	giq_option(6, 378, 117, Theresa02a, 50);
end

procedure Theresa06
begin
	gsay_message(378, 118, 50);
end

procedure Theresa07
begin
	set_local_var(6, 1);
	if global_var(QUEST_VAULT13_1_REBELS) == 0 then begin
		set_global_var(QUEST_VAULT13_1_REBELS, 1);
	end
	gsay_reply(378, 119);
	giq_option(4, 378, 120, Theresa11, 50);
	giq_option(4, 378, 121, Theresa12, 50);
end

procedure Theresa08
begin
	call UpReact;
	set_global_var(QUEST_VAULT13_1_REBELS, 2);
	line := 10;
	exp_flag := 1;
	gsay_reply(378, 122);
	giq_option(4, 378, 123, TheresaEnd, 50);
end

procedure Theresa09
begin
	call DownReact;
	gsay_message(378, 124, 50);
end

procedure Theresa10
begin
	gsay_message(378, 125, 50);
end

procedure Theresa11
begin
	call DownReact;
	gsay_reply(378, 126);
	giq_option(4, 378, 127, TheresaEnd, 50);
	giq_option(6, 378, 128, Theresa02a, 50);
end

procedure Theresa12
begin
	call UpReact;
	gsay_reply(378, 129);
	giq_option(4, 378, 130, Theresa13, 50);
	if (global_var(WORLDMAPLIST_SHADY_SANDS) != 0) then begin
		giq_option(4, 378, 131, Theresa13, 50);
	end
end

procedure Theresa13
begin
	gsay_message(378, 132, 50);
end

procedure Theresa14
begin
	gsay_message(378, 133, 50);
end

procedure Theresa15
begin
	set_local_var(6, 1);
	if global_var(QUEST_VAULT13_1_REBELS) == 0 then begin
		set_global_var(QUEST_VAULT13_1_REBELS, 1);
	end
	gsay_reply(378, 134);
	giq_option(4, 378, 135, Theresa16, 51);
	giq_option(4, 378, 136, Theresa17, 50);
	giq_option(6, 378, 137, Theresa18, 50);
	giq_option(-3, 378, 138, TheresaEnd, 50);
end

procedure Theresa16
begin
	call DownReact;
	gsay_reply(378, 139);
	giq_option(4, 378, 140, Theresa20, 50);
	giq_option(4, 378, 141, TheresaEnd, 50);
end

procedure Theresa17
begin
	gsay_reply(378, 142);
	giq_option(4, 378, 143, Theresa19, 50);
	giq_option(6, 378, 144, Theresa21, 50);
end

procedure Theresa18
begin
	gsay_reply(378, 145);
	giq_option(6, 378, 146, Theresa21, 50);
	giq_option(6, 378, 147, Theresa19, 50);
end

procedure Theresa19
begin
	gsay_reply(378, 148);
	giq_option(4, 378, 149, TheresaCombat, 51);
	giq_option(4, 378, 150, TheresaEnd, 50);
end

procedure Theresa20
begin
	gsay_reply(378, 151);
	giq_option(4, 378, 152, Theresa17, 50);
	giq_option(6, 378, 153, Theresa21, 50);
end

procedure Theresa21
begin
	if (local_var(7)) then begin
		call Theresa25;
	end
	else begin
		set_local_var(7, 1);
		if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
			exp_flag := 1;
			set_global_var(QUEST_VAULT13_1_REBELS, 2);
			line := 10;
			gsay_message(378, 154, 50);
		end
		else begin
			gsay_reply(378, 155);
			giq_option(4, 378, 156, TheresaCombat, 51);
			giq_option(4, 378, 157, TheresaEnd, 50);
		end
	end
end

procedure Theresa22
begin
	set_global_var(QUEST_VAULT13_1_REBELS, 2);
	line := 10;
	exp_flag := 1;
	gsay_reply(378, 158);
	giq_option(4, 378, 159, TheresaEnd, 50);
end

procedure Theresa23
begin
	gsay_reply(378, 170);
	giq_option(4, 378, 171, TheresaEnd, 50);
	giq_option(-3, 378, 138, TheresaEnd, 50);
end

procedure Theresa24
begin
	if (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
		set_global_var(QUEST_VAULT13_1_REBELS, 2);
		exp_flag := 0;
		line := 10;
	end
	gsay_message(378, 172, 50);
end

procedure Theresa25
begin
	gsay_message(378, 175, 50);
end

procedure TheresaEnd
begin
end

procedure TheresaCombat
begin
	hostile := 1;
end

procedure sleeping
begin
	if (local_var(5) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(5, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(5, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(5, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(5, 1);
				end
			end
		end
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end
