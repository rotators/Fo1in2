#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure Rebel01;
procedure Rebel02;
procedure Rebel03;
procedure Rebel04;
procedure Rebel05;
procedure Rebel06;
procedure Rebel07;
procedure Rebel08;
procedure Rebel09;
procedure RebelEnd;
procedure RebelCombat;
procedure rebel_meeting;
procedure sleeping;
variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable dest_tile;
variable hostile;
variable gword1;
variable gword2;
variable not_at_meeting := 1;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure items_held;
variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing REBEL.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
						call look_at_p_proc;
					end
					else begin
						if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
							call map_enter_p_proc;
						end
						else begin
							if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
								call pickup_p_proc;
							end
							else begin
								if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
									call talk_p_proc;
								end
								else begin
									if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
										call timed_event_p_proc;
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if map_var(5) != 0 then begin
			if ((game_time / (10 * 60 * 60 * 24)) > map_var(5)) and (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
				destroy_object(self_obj);
			end
		end
		if ((game_time_hour >= 1700) and (game_time_hour < 1710)) then begin
			if (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
				if (not_at_meeting) then begin
					call rebel_meeting;
				end
			end
			else begin
				animate_move_obj_to_tile(self_obj, home_tile, 0);
			end
		end
		else begin
			if tile_num(self_obj) != home_tile then begin
				animate_move_obj_to_tile(self_obj, home_tile, 0);
			end
			else begin
				call sleeping;
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(6, 1);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	if (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
		display_msg(message_str(SCRIPT_REBEL, 101));
	end
	else begin
		display_msg(message_str(SCRIPT_REBEL, 100));
	end
end

procedure map_enter_p_proc
begin
	if (local_var(5) == 0) then begin
		set_local_var(5, tile_num(self_obj));
	end
	home_tile := local_var(5);
	sleep_tile := home_tile;
	sleep_time := random(1900, 1930);
	wake_time := random(700, 715);
	critter_add_trait(self_obj, 1, 6, 87);
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (local_var(4) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), 0);
	end
	else begin
		if (local_var(6)) then begin
			float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 2);
		end
		else begin
			if (global_var(VAULT_13_HOSTILE)) then begin
				float_msg(self_obj, message_str(SCRIPT_REBEL, 139), 2);
			end
			else begin
				if (global_var(QUEST_VAULT13_4_WATERCHIP) != 0) then begin
					call Rebel01;
				end
				else begin
					call items_held;
					if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
						call Rebel02;
					end
					else begin
						if (local_var(1) >= 2) then begin
							start_gdialog(379, self_obj, 4, -1, -1);
							gsay_start;
							call Rebel03;
							gsay_end;
							end_dialogue;
						end
						else begin
							start_gdialog(379, self_obj, 4, -1, -1);
							gsay_start;
							call Rebel09;
							gsay_end;
							end_dialogue;
						end
					end
				end
			end
		end
	end
end

procedure timed_event_p_proc
begin
	animate_move_obj_to_tile(self_obj, home_tile, 0);
	not_at_meeting := 1;
end

procedure Rebel01
begin
	variable LVar0 := 0;
	LVar0 := random(1, 5);
	if (LVar0 == 1) then begin
		LVar0 := message_str(SCRIPT_REBEL, 105);
	end
	else begin
		if (LVar0 == 2) then begin
			LVar0 := message_str(SCRIPT_REBEL, 106);
		end
		else begin
			if (LVar0 == 3) then begin
				LVar0 := message_str(SCRIPT_REBEL, 107);
			end
			else begin
				if (LVar0 == 4) then begin
					if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
						LVar0 := message_str(SCRIPT_REBEL, 108);
					end
					else begin
						LVar0 := message_str(SCRIPT_REBEL, 109);
					end
				end
				else begin
					if (LVar0 == 5) then begin
						if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
							LVar0 := message_str(SCRIPT_REBEL, 110);
						end
						else begin
							LVar0 := message_str(SCRIPT_REBEL, 111);
						end
					end
				end
			end
		end
	end
	float_msg(self_obj, LVar0, 0);
end

procedure Rebel02
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	call DownReact;
	LVar1 := message_str(SCRIPT_REBEL, random(112, 115));
	float_msg(self_obj, LVar1, 2);
end

procedure Rebel03
begin
	gsay_reply(379, 116);
	giq_option(4, 379, 117, Rebel04, 50);
	giq_option(4, 379, 118, Rebel05, 50);
	giq_option(-3, 379, 119, Rebel08, 50);
end

procedure Rebel04
begin
	gsay_reply(379, 120);
	giq_option(4, 379, 121, RebelEnd, 50);
end

procedure Rebel05
begin
	if (global_var(QUEST_VAULT13_1_REBELS) != 2) then begin
		if global_var(QUEST_VAULT13_1_REBELS) == 0 then begin
			set_global_var(QUEST_VAULT13_1_REBELS, 1);
		end
		gsay_reply(379, 122);
		giq_option(4, 379, 123, Rebel06, 50);
		giq_option(4, 379, 124, Rebel07, 50);
	end
	else begin
		gsay_reply(379, 125);
	end
	giq_option(4, 379, 126, RebelEnd, 50);
end

procedure Rebel06
begin
	gsay_reply(379, 127);
	giq_option(4, 379, 128, RebelEnd, 50);
	giq_option(4, 379, 129, RebelEnd, 50);
end

procedure Rebel07
begin
	gsay_reply(379, 130);
	giq_option(4, 379, 131, RebelEnd, 50);
	giq_option(4, 379, 132, Rebel06, 50);
end

procedure Rebel08
begin
	gsay_reply(379, 133);
	giq_option(-3, 379, 134, RebelEnd, 50);
end

procedure Rebel09
begin
	gsay_reply(379, 135);
	giq_option(4, 379, 136, RebelCombat, 50);
	giq_option(4, 379, 137, RebelEnd, 50);
	giq_option(-3, 379, 138, RebelEnd, 50);
end

procedure RebelEnd
begin
end

procedure RebelCombat
begin
	hostile := 1;
end

procedure rebel_meeting
begin
	if (dest_tile == 0) then begin
//		dest_tile := tile_num_in_direction(18310, 2, 1);
		if home_tile == 18089 then begin
			dest_tile := tile_num_in_direction(18510, 5, 1);
		end
		else begin
			if home_tile == 18526 then begin
				dest_tile := tile_num_in_direction(18112, 2, 1);
			end
			else begin
				if home_tile == 25325 then begin
					dest_tile := tile_num_in_direction(18511, 2, 1);
				end
				else begin
					dest_tile := tile_num_in_direction(18310, 2, 1);
				end
			end
		end
	end
	if (tile_num(self_obj) != dest_tile) then begin
		animate_move_obj_to_tile(self_obj, dest_tile, 0);
	end
	add_timer_event(self_obj, game_ticks(240), 0);
	if (tile_num(self_obj) == dest_tile) then begin
		anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), (tile_num(self_obj) - 200)));
		not_at_meeting := 0;
	end
end

procedure sleeping
begin
	if (local_var(4) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(4, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(4, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(4, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(4, 1);
				end
			end
		end
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end
