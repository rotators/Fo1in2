#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure description_p_proc;//    script_action == 3
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Cindy01;
procedure Cindy02;
procedure Cindy03;
procedure Cindy04;
procedure Cindy05;
procedure Cindy06;
procedure Cindy07;
procedure CindyEnd;
procedure flee_dude;
procedure get_rations;
variable crying;
variable hostile;
variable ration_tile := 7000;
variable sleeping_disabled;
procedure sleeping;
variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
import variable recipient;
import variable WtrGrd_ptr;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure PickDeadBodyType;
variable DeathType := 57;

procedure start
begin
	if (global_var(VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == 6) or (cur_map_index == 35) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if (metarule(22, 0) == 0) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing CINDY.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
					call description_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
							call look_at_p_proc;
						end
						else begin
							if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
								call map_enter_p_proc;
							end
							else begin
								if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
									call pickup_p_proc;
								end
								else begin
									if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
										call talk_p_proc;
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (local_var(6) == 1) then begin
			if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
				call flee_dude;
			end
			else begin
				if (tile_distance(tile_num(dude_obj), home_tile) > 3) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
			end
		end
		else begin
			if (global_var(QUEST_VAULT13_4_WATERCHIP) == 0) then begin
				if (local_var(7) == 0) then begin
					if ((elevation(self_obj) == elevation(WtrGrd_ptr)) and (elevation(self_obj) == elevation(dude_obj))) then begin
						if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
							call get_rations;
						end
					end
				end
			end
			if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
				set_local_var(7, 0);
			end
			if (sleeping_disabled == 0) then begin
				call sleeping;
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(6, 1);
	end
end

procedure description_p_proc
begin
	if (local_var(4)) then begin
		display_msg(message_str(SCRIPT_CINDY, 101));
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_CINDY, 100));
end

procedure map_enter_p_proc
begin
	sleep_tile := 24883;
	home_tile := 24687;
	sleep_time := random(1900, 1930);
	wake_time := random(600, 630);
	critter_add_trait(self_obj, 1, 6, 1);
end

procedure pickup_p_proc
begin
	if ((game_time / (10 * 60 * 60 * 24)) >= 30) then begin
		float_msg(self_obj, message_str(SCRIPT_CINDY, 122), 2);
	end
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (not(local_var(4))) then begin
		if ((global_var(VAULT_13_HOSTILE) == 1) or (local_var(6) == 1)) then begin
			float_msg(self_obj, message_str(SCRIPT_CINDY, 125), 0);
			set_local_var(4, 1);
		end
		else begin
			if (global_var(QUEST_VAULT13_4_WATERCHIP) == 2) then begin
				float_msg(self_obj, message_str(SCRIPT_CINDY, 123), 0);
			end
			else begin
				if (global_var(QUEST_VAULT13_5_WTR_THIEF) == 2) then begin
					float_msg(self_obj, message_str(SCRIPT_CINDY, 124), 0);
				end
				else begin
					start_gdialog(168, self_obj, 4, -1, -1);
					gsay_start;
					call Cindy01;
					gsay_end;
					end_dialogue;
				end
			end
		end
	end
end

procedure Cindy01
begin
	gsay_reply(168, message_str(SCRIPT_CINDY, 102) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_CINDY, 103));
	giq_option(4, 168, 104, Cindy03, 50);
	giq_option(4, 168, 105, Cindy04, 50);
	giq_option(-3, 168, 106, Cindy02, 50);
end

procedure Cindy02
begin
	set_local_var(4, 1);
	gsay_reply(168, 107);
	giq_option(-3, 168, 108, CindyEnd, 50);
end

procedure Cindy03
begin
	gsay_message(168, random(109, 111), 50);
end

procedure Cindy04
begin
	if ((game_time / (10 * 60 * 60 * 24)) < 30) then begin
		gsay_reply(168, 126);
		giq_option(4, 168, 127, CindyEnd, 49);
		giq_option(4, 168, 128, CindyEnd, 51);
	end
	else begin
		gsay_reply(168, 113);
		giq_option(4, 168, 114, Cindy05, 50);
		giq_option(4, 168, 115, Cindy06, 50);
	end
end

procedure Cindy05
begin
	gsay_reply(168, 116);
	giq_option(4, 168, 117, CindyEnd, 50);
end

procedure Cindy06
begin
	gsay_reply(168, 118);
	giq_option(4, 168, 119, Cindy07, 50);
end

procedure Cindy07
begin
	set_global_var(QUEST_VAULT13_5_WTR_THIEF, 1);
	gsay_reply(168, 120);
	giq_option(4, 168, 121, CindyEnd, 50);
	giq_option(4, 168, 112, Cindy05, 50);
end

procedure CindyEnd
begin
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_rations
begin
	if (tile_num(self_obj) != ration_tile) then begin
		sleeping_disabled := 1;
		if (random(0, 1)) then begin
			animate_move_obj_to_tile(self_obj, ration_tile, 0);
		end
		else begin
			animate_move_obj_to_tile(self_obj, ration_tile, 1);
		end
	end
	else begin
		if (not(recipient)) then begin
			recipient := self_obj;
			add_timer_event(self_obj, game_ticks(3), 1);
			set_local_var(7, 1);
			sleeping_disabled := 0;
		end
	end
end

procedure sleeping
begin
	if (local_var(5) == 1) then begin
		if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
			if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
				else begin
					set_local_var(5, 0);
				end
			end
			else begin
				move_to(self_obj, home_tile, elevation(self_obj));
				if (tile_num(self_obj) == home_tile) then begin
					set_local_var(5, 0);
				end
			end
		end
	end
	else begin
		if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
			if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, self_obj, 0);
				end
				else begin
					set_local_var(5, 1);
				end
			end
			else begin
				if (tile_num(self_obj) != sleep_tile) then begin
					move_to(self_obj, sleep_tile, elevation(self_obj));
				end
				else begin
					set_local_var(5, 1);
				end
			end
		end
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end

