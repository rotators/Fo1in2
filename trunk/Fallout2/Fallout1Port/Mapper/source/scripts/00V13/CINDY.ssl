#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure description_p_proc;//    script_action == 3
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_enter_p_proc;//    script_action == 15
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Cindy01;
procedure Cindy02;
procedure Cindy03;
procedure Cindy04;
procedure Cindy05;
procedure Cindy06;
procedure Cindy07;
procedure CindyEnd;
procedure flee_dude;
procedure get_rations;
variable crying;
variable tmp_hostile;
variable ration_tile := 7000;
variable sleeping_disabled;

import variable recipient;
import variable WtrGrd_ptr;

procedure PickDeadBodyType;
variable DeathType := 57;

#define LVAR_Sleeping 							(5)

#define night_person;
#define sleep_tile 		(24883)
#define home_tile 		(24687)
#define sleep_time 		(random(1900, 1930))
#define wake_time 		(random(600, 630))

procedure start
begin
	if (global_var(GVAR_VAULT_13_WAS_INVADED) == 1) then begin//		<-- Vault13 invaded
		if (cur_map_index == MAP_VAULT13) or (cur_map_index == MAP_V13ENT) then begin //  VAULT 13 - ANY MAPS
			if (local_var(9) != 1) then begin
				set_local_var(9, 1);//		<-- only once
				if not(is_loading_game) then begin//		<-- if not during a Game_Load,
					set_obj_visibility(self_obj, 0);//		     make sure critter is visibile
				end
				call PickDeadBodyType;
				debug_msg("Vault 13 invasion, killing CINDY.SSL with DeathType " + DeathType + ".  ");
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin

	end
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (local_var(6) == 1) then begin
			if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
				call flee_dude;
			end
			else begin
				if (tile_distance(tile_num(dude_obj), home_tile) > 3) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
			end
		end
		else begin
			if (global_var(QUEST_VAULT13_4_WATERCHIP) == 0) then begin
				if (local_var(7) == 0) then begin
					if ((elevation(self_obj) == elevation(WtrGrd_ptr)) and (elevation(self_obj) == elevation(dude_obj))) then begin
						if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
							call get_rations;
						end
					end
				end
			end
			if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
				set_local_var(7, 0);
			end
			if (sleeping_disabled == 0) then begin
				sleeping
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(6, 1);
	end
end

procedure description_p_proc
begin
	if (local_var(4)) then begin
		display_msg(message_str(SCRIPT_CINDY, 101));
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
	inc_good_critter
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(VAULT_13_HOSTILE, 1);
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_CINDY, 100));
end

procedure map_enter_p_proc begin
	critter_add_trait(self_obj, 1, 6, 1);
end

procedure pickup_p_proc
begin
	if ((game_time / (10 * 60 * 60 * 24)) >= 30) then begin
		float_msg(self_obj, message_str(SCRIPT_CINDY, 122), 2);
	end
	tmp_hostile := 1;
end

procedure talk_p_proc begin
	dude_look_at_critter;
	if (not(local_var(4))) then begin
		if ((global_var(VAULT_13_HOSTILE) == 1) or (local_var(6) == 1)) then begin
			float_msg(self_obj, message_str(SCRIPT_CINDY, 125), 0);
			set_local_var(4, 1);
		end
		else begin
			if (global_var(QUEST_VAULT13_4_WATERCHIP) == 2) then begin
				float_msg(self_obj, message_str(SCRIPT_CINDY, 123), 0);
			end
			else begin
				if (global_var(QUEST_VAULT13_5_WTR_THIEF) == 2) then begin
					float_msg(self_obj, message_str(SCRIPT_CINDY, 124), 0);
				end
				else begin
					start_gdialog(168, self_obj, 4, -1, -1);
					gsay_start;
					call Cindy01;
					gsay_end;
					end_dialogue;
				end
			end
		end
	end
end

procedure Cindy01
begin
	gsay_reply(168, message_str(SCRIPT_CINDY, 102) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_CINDY, 103));
	giq_option(4, 168, 104, Cindy03, 50);
	giq_option(4, 168, 105, Cindy04, 50);
	giq_option(-3, 168, 106, Cindy02, 50);
end

procedure Cindy02
begin
	set_local_var(4, 1);
	gsay_reply(168, 107);
	giq_option(-3, 168, 108, CindyEnd, 50);
end

procedure Cindy03
begin
	gsay_message(168, random(109, 111), 50);
end

procedure Cindy04
begin
	if ((game_time / (10 * 60 * 60 * 24)) < 30) then begin
		gsay_reply(168, 126);
		giq_option(4, 168, 127, CindyEnd, 49);
		giq_option(4, 168, 128, CindyEnd, 51);
	end
	else begin
		gsay_reply(168, 113);
		giq_option(4, 168, 114, Cindy05, 50);
		giq_option(4, 168, 115, Cindy06, 50);
	end
end

procedure Cindy05
begin
	gsay_reply(168, 116);
	giq_option(4, 168, 117, CindyEnd, 50);
end

procedure Cindy06
begin
	gsay_reply(168, 118);
	giq_option(4, 168, 119, Cindy07, 50);
end

procedure Cindy07
begin
	set_global_var(QUEST_VAULT13_5_WTR_THIEF, 1);
	gsay_reply(168, 120);
	giq_option(4, 168, 121, CindyEnd, 50);
	giq_option(4, 168, 112, Cindy05, 50);
end

procedure CindyEnd
begin
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_rations
begin
	if (tile_num(self_obj) != ration_tile) then begin
		sleeping_disabled := 1;
		if (random(0, 1)) then begin
			animate_move_obj_to_tile(self_obj, ration_tile, 0);
		end
		else begin
			animate_move_obj_to_tile(self_obj, ration_tile, 1);
		end
	end
	else begin
		if (not(recipient)) then begin
			recipient := self_obj;
			add_timer_event(self_obj, game_ticks(3), 1);
			set_local_var(7, 1);
			sleeping_disabled := 0;
		end
	end
end

procedure PickDeadBodyType// FINISHED, for Vault 13
begin
	variable id := 11;
	id := random(0, 6) + random(0, 6) + random(0, 6);
	if id <= 2 then begin
		DeathType := 59;// exploded  [ROCKET LAUNCHER]
	end
	else begin
		if id <= 10 then begin
			DeathType := 57;// burnt, face down  [FLAMER]
		end
		else begin
			if id <= 15 then begin
				DeathType := 60;// melted pile  [PLASMA RIFLE]
			end
			else begin
				DeathType := 63;// face down, blood pool  (generic death, no weapon associated)
			end
		end
	end
end
