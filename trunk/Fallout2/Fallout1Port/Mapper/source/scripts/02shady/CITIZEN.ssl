/*

	Generic Citizen (e.g. Shady Sands)

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\MAPV13CAVE.h"

#define NAME                    SCRIPT_CITIZEN
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_BOS)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat_p_proc;//    script_action == 13
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure description_p_proc;//    script_action == 3
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure push_p_proc;

procedure Citizen01;
procedure Citizen02;
procedure Citizen03;
procedure Citizen04;
procedure CitizenEnd;

procedure flee_dude;

variable tmp_hostile;
variable initial :=  0;
variable round_counter;
variable DisplayMessage := 100;
variable PsstTime;


procedure PickDeadBodyType;
variable DeathType := 56;

procedure push_p_proc begin
end

procedure start
begin
	if global_var(SHADY_SANDS_WAS_INVADED) then begin
		if (cur_map_index == MAP_SHADYE) or (cur_map_index == MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			if (local_var(6) != 1) then begin
				set_local_var(6, 1);
				call PickDeadBodyType;
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		

		if not(initial) then begin
			initial :=  1;
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_SHADY_SANDS);
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_PEASANT);
			add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
		end
	end
end

procedure combat_p_proc
begin
	if (fixed_param == 4) then begin
		round_counter := round_counter + 1;
		if (round_counter > 3) then begin
			if not(global_var(ENEMY_SHADY_SANDS)) then begin//Shady Sands is NOT tmp_hostile to player;  i.e. globalvar ENEMY_SHADY_SANDS is not enabled
				set_global_var(ENEMY_SHADY_SANDS, 1);//  Set ENEMY_SHADY_SANDS to True
				set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) - 5);
			end
		end
	end
end

procedure critter_p_proc
begin
	variable LVar0 := 0;
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 1;
		attack(dude_obj);
	end
	else begin
		if (local_var(4) and (tile_distance_objs(dude_obj, self_obj) < 8)) then begin
			call flee_dude;
		end
		LVar0 := global_var(CITIZEN_LOSER_PLEASANT_0);
		if ((((game_time / 10) - LVar0) >= 10) and (tile_distance_objs(self_obj, dude_obj) <= 4) and not(global_var(ENEMY_SHADY_SANDS))) then begin
			float_msg(self_obj, message_str(SCRIPT_CITIZEN, random(110, 114)), 0);
			LVar0 := game_time / 10;
			set_global_var(CITIZEN_LOSER_PLEASANT_0, LVar0);
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(4, 1);
		if (cur_map_index == MAP_SHADYE) or (cur_map_index == MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			set_global_var(ENEMY_SHADY_SANDS, 1);//Set ENEMY_SHADY_SANDS to True
		end
	end
end

procedure description_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_CITIZEN, 100));
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (cur_map_index == MAP_SHADYE) or (cur_map_index == MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			set_global_var(ENEMY_SHADY_SANDS, 1);//  Set ENEMY_SHADY_SANDS to True
		end
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_CITIZEN, 100));
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(4) or global_var(ENEMY_SHADY_SANDS)) then begin
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 0);
	end
	else begin
		start_gdialog(115, self_obj, 4, -1, -1);
		gsay_start;
		call Citizen01;
		gsay_end;
		end_dialogue;
	end
end

procedure timed_event_p_proc
begin
	if (obj_on_screen(self_obj)) then begin
		animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(1, 5)), 0);
	end
	add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
end

procedure Citizen01
begin
	DisplayMessage := 105;
	gsay_reply(115, 101);
	giq_option(4, 115, 103, Citizen02, 50);
	giq_option(4, 115, 102, CitizenEnd, 50);
	giq_option(-3, 115, 104, CitizenEnd, 50);
end

procedure Citizen02
begin
	gsay_reply(115, DisplayMessage);
	giq_option(4, 115, 106, Citizen03, 50);
	giq_option(4, 115, 107, Citizen04, 50);
	Goodbyes;
	giq_option(1, 115, exit_line, CitizenEnd, 50);
end

procedure Citizen03
begin
	DisplayMessage := 108;
	call Citizen02;
end

procedure Citizen04
begin
	DisplayMessage := 109;
	call Citizen02;
end

procedure CitizenEnd
begin
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure PickDeadBodyType
begin
	pick_dead_body_type
end
