#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure look_at_p_proc;//    script_action == 21
procedure description_p_proc;//    script_action == 3
procedure talk_p_proc;//    script_action == 11
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4

procedure DialogWeapon;
procedure DialogFirstTime;
procedure DialogSubsequent;
procedure DialogExit;
procedure DialogWeapon1;
procedure DialogWeapon2;
procedure DialogWeapon3;
procedure DialogWeapon4;
procedure DialogMain;
procedure DialogMain1;
procedure DialogMain2;
procedure DialogMain3;
procedure DialogMain4;
procedure DialogMain5;
procedure DialogMain6;
procedure DialogMain7;
procedure DialogMain8;
procedure DialogMain9;
procedure DialogMain10;
procedure DialogSpecial1;
procedure DialogSpecial2;
procedure DialogSpecial3;
procedure DialogSpecial4;

variable Only_Once := 1;
variable Hostile;
variable DisplayMessage;
variable Hurt;
variable Equipment;
variable Barter;
variable Bartered;
variable Place;
variable World;
variable Yourself;
variable Vault;
variable Vaulted;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;

procedure items_held;
variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;



procedure PickDeadBodyType;
variable DeathType := 56;


procedure start
begin
	if (map_first_run) and (local_var(7) != 1) then begin
		variable LVar0;
		set_local_var(7, 1);
		if (obj_carrying_pid_obj(self_obj, PID_BROWN_BAG) > 0) then begin
			LVar0 := obj_carrying_pid_obj(self_obj, PID_BROWN_BAG);
			rm_obj_from_inven(self_obj, LVar0);
			destroy_object(LVar0);
			LVar0 := 0;
		end
		if (obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) > 0) then begin
			LVar0 := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET);
			rm_obj_from_inven(self_obj, LVar0);
			destroy_object(LVar0);
			LVar0 := 0;
		end
	end
	if global_var(SHADY_SANDS_WAS_INVADED) then begin
		if (cur_map_index == MAP_SHADYE) or (cur_map_index == MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			if (local_var(8) != 1) then begin
				set_local_var(8, 1);
				call PickDeadBodyType;
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
			if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
				if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
					if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
					if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
						variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
					set_local_var(12, 1);
				end
			end
		end
		if (Only_Once == 1) then begin
			Only_Once := 0;
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 2);
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 6);		
		end
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			call talk_p_proc;
		end
		else begin
			if (script_action == 21) then begin
				call look_at_p_proc;
			end
			else begin
				if (script_action == 3) then begin
					call description_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
						else begin
							if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
								call critter_p_proc;
							end
							else begin
								if (script_action == 14) then begin
									call damage_p_proc;
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_SSGUIDE, 100));
end

procedure description_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_SSGUIDE, 100));
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if global_var(ENEMY_SHADY_SANDS) then begin//   Is Shady Sands hostile to player?
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 2);
	end
	else begin
		call get_reaction;
		start_gdialog(211, self_obj, -1, -1, -1);
		gsay_start;
		call items_held;
		if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
			call DialogWeapon;
		end
		else begin
			if (local_var(4) == 0) then begin
				set_local_var(4, 1);
				call DialogFirstTime;
			end
			else begin
				call DialogSubsequent;
			end
		end
		gsay_end;
		end_dialogue;
		Hurt := 0;
		Equipment := 0;
		Barter := 0;
		Bartered := 0;
		Place := 0;
		World := 0;
		Yourself := 0;
		Vault := 0;
		Vaulted := 0;
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if global_var(ENEMY_SHADY_SANDS) then begin//   Is Shady Sands hostile to player?
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_SHADY_SANDS, 1);//Set ENEMY_SHADY_SANDS to True
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_SHADY_SANDS, 1);//Set ENEMY_SHADY_SANDS to True
	end
	if source_obj == dude_obj then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure pickup_p_proc
begin
	if (local_var(6) == 0) then begin
		float_msg(self_obj, message_str(SCRIPT_SSGUIDE, 151), 2);
		set_local_var(6, 1);
	end
	else begin
		set_global_var(ENEMY_SHADY_SANDS, 1);//Set ENEMY_SHADY_SANDS to True
	end
end

procedure DialogWeapon
begin
	gsay_reply(211, 101);
	giq_option(-3, 211, 102, DialogWeapon1, 50);
	giq_option(4, 211, 103, DialogWeapon2, 50);
	giq_option(4, 211, 104, DialogWeapon3, 50);
	giq_option(4, 211, 105, DialogWeapon4, 50);
end

procedure DialogFirstTime
begin
	gsay_reply(211, 111);
	DisplayMessage := 125;
	giq_option(-3, 211, 112, DialogSpecial1, 50);
	giq_option(4, 211, 113, DialogMain5, 50);
	giq_option(4, 211, 114, DialogMain, 50);
	giq_option(5, 211, 115, DialogMain8, 50);
	if (global_var(TANDI_HIRELING_STATUS) == 1) then begin
		giq_option(4, 211, 116, DialogMain9, 50);
	end
	if (global_var(RADSCORPION_SEED) == 1) then begin
		giq_option(4, 211, 117, DialogMain10, 50);
	end
	giq_option(4, 211, 118, DialogExit, 50);
end

procedure DialogSubsequent
begin
	variable LVar0 := 0;
	LVar0 := game_time_hour;
	gsay_reply(211, 144);
	DisplayMessage := 125;
	giq_option(-3, 211, 112, DialogSpecial1, 50);
	if ((LVar0 > 1800) or (LVar0 < 800)) then begin
		giq_option(4, 211, 145, DialogSpecial4, 50);
	end
	else begin
		giq_option(4, 211, 113, DialogMain5, 50);
	end
	giq_option(4, 211, 114, DialogMain, 50);
	giq_option(5, 211, 115, DialogMain8, 50);
	if (global_var(TANDI_HIRELING_STATUS) == 1) then begin
		giq_option(4, 211, 116, DialogMain9, 50);
	end
	if (global_var(RADSCORPION_SEED) == 1) then begin
		giq_option(4, 211, 117, DialogMain10, 50);
	end
	giq_option(4, 211, 118, DialogExit, 50);
end

procedure DialogExit
begin
end

procedure DialogWeapon1
begin
	gsay_message(211, 106, 50);
end

procedure DialogWeapon2
begin
	gsay_reply(211, 107);
	giq_option(4, 211, 108, DialogExit, 50);
end

procedure DialogWeapon3
begin
	gsay_reply(211, 109);
	giq_option(4, 211, 110, DialogExit, 50);
end

procedure DialogWeapon4
begin
	gsay_reply(211, 109);
	giq_option(4, 211, 110, DialogExit, 50);
end

procedure DialogMain
begin
	gsay_reply(211, DisplayMessage);
	if (Hurt == 0) then begin
		giq_option(4, 211, 126, DialogMain1, 50);
	end
	if (Equipment == 0) then begin
		giq_option(4, 211, 127, DialogMain2, 50);
	end
	else begin
		if (Barter == 1) then begin
			giq_option(4, 211, 134, DialogMain6, 50);
		end
	end
	if (Place == 0) then begin
		giq_option(4, 211, 128, DialogMain3, 50);
	end
	if (World == 0) then begin
		giq_option(4, 211, 129, DialogMain4, 50);
	end
	if (Yourself == 0) then begin
		giq_option(4, 211, 130, DialogMain5, 50);
	end
	else begin
		if (Vault == 1) then begin
			giq_option(4, 211, 138, DialogMain7, 50);
		end
	end
	giq_option(4, 211, 131, DialogExit, 50);
	if ((local_var(5) == 0) and ((Hurt == 1) and (Equipment == 1) and (Place == 1) and (World == 1) and (Yourself == 1) and (Bartered == 1) and (Vaulted == 1))) then begin
		set_local_var(5, 1);
		give_exp_points(250);
		display_msg(message_str(SCRIPT_SSGUIDE, 150));
	end
end

procedure DialogMain1
begin
	Hurt := 1;
	DisplayMessage := 132;
	call DialogMain;
end

procedure DialogMain2
begin
	Equipment := 1;
	DisplayMessage := 133;
	Barter := 1;
	call DialogMain;
end

procedure DialogMain3
begin
	Place := 1;
	DisplayMessage := 135;
	call DialogMain;
end

procedure DialogMain4
begin
	World := 1;
	DisplayMessage := 136;
	call DialogMain;
end

procedure DialogMain5
begin
	Yourself := 1;
	DisplayMessage := 137;
	Vault := 1;
	call DialogMain;
end

procedure DialogMain6
begin
	Barter := 0;
	DisplayMessage := 139;
	Bartered := 1;
	call DialogMain;
end

procedure DialogMain7
begin
	Vault := 0;
	DisplayMessage := 140;
	Vaulted := 1;
	call DialogMain;
end

procedure DialogMain8
begin
	DisplayMessage := 143;
	call DialogMain;
end

procedure DialogMain9
begin
	DisplayMessage := 141;
	call DialogMain;
end

procedure DialogMain10
begin
	DisplayMessage := 142;
	call DialogMain;
end

procedure DialogSpecial1
begin
	gsay_reply(211, 119);
	giq_option(-3, 211, 120, DialogSpecial2, 50);
end

procedure DialogSpecial2
begin
	gsay_reply(211, 121);
	giq_option(-3, 211, 122, DialogSpecial3, 50);
end

procedure DialogSpecial3
begin
	gsay_reply(211, 123);
	giq_option(-3, 211, 124, DialogExit, 50);
end

procedure DialogSpecial4
begin
	gsay_reply(211, 146);
	giq_option(4, 211, 147, DialogExit, 50);
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure PickDeadBodyType
begin
	variable LVar0 := 0;
	LVar0 := (random(0, 6) + random(0, 6) + random(0, 6));
//
	if (LVar0 <= 5) then begin// 31.5%
		DeathType := 57;//		burnt, face down  [FLAMER]
	end
	else begin
		if (LVar0 <= 10) then begin// 26%
			DeathType := 56;//		cut in half  [LASER RIFLE, GATLING LASER]
		end
		else begin
			if (LVar0 <= 14) then begin// 21%
				DeathType := 53;//		head & arm gone - full auto  [MINIGUN]
			end
			else begin
				if (LVar0 <= 16) then begin// 10.5%
					DeathType := 63;//		face down, blood pool  (generic death, no weapon associated)
				end
				else begin// <--------------------	16%
					variable LVar1 := 0;
					LVar1 := random(0, 2);
					if (LVar1 == 0) then begin
						DeathType := 54;// bullet holes - full auto partial hit
					end
					else begin
						if (LVar1 == 1) then begin
							DeathType := 59;// exploded  [ROCKET LAUNCHER]
						end
						else begin
							if (LVar1 == 2) then begin
								DeathType := 60;// melted pile  [PLASMA RIFLE]
							end
						end
					end
				end
			end
		end
	end
end
