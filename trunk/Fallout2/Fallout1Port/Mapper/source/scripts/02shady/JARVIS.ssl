/*

	Shady Sands - Jarvis

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\mapshady.h"

#define NAME                    SCRIPT_JARVIS
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SHADYSANDS)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure talk_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure destroy_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure timed_event_p_proc;
procedure map_exit_p_proc;

procedure Jarvis01;
procedure Jarvis02;
procedure Jarvis03;
procedure Jarvis04;
procedure Jarvis05;
procedure Jarvis06;
procedure Jarvisend;

variable use_skill;
variable tmp_hostile;

procedure PickDeadBodyType;
variable DeathType := 56;

procedure start begin
	if shady_invaded then begin
		if (CUR_MAP_SHADYE) or (CUR_MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			if (local_var(6) != 1) then begin
				set_local_var(6, 1);
				call PickDeadBodyType;
				kill_critter(self_obj, DeathType);
			end
		end
	end
end

procedure look_at_p_proc begin
	script_overrides;
	if (local_var(4) == 0) then begin
		display_msg(message_str(SCRIPT_JARVIS, 102));
	end
	else begin
		display_msg(message_str(SCRIPT_JARVIS, 103));
	end
end

procedure map_enter_p_proc begin
	if (local_var(5) == 0) then begin
		anim( self_obj, ANIM_fall_back_sf, 0 );
		add_timer_event(self_obj, game_ticks(3600), 1);
	end
	set_self_team(TEAM_SHADY_SANDS );
	set_self_ai( AI_PEASANT );
end

procedure talk_p_proc begin
	dude_look_at_critter;
	if (local_var(5) == 0) then begin
		call Jarvis01;
	end
	else if (local_var(4) == 0) then begin
		start_dialog_at_node(Jarvis02);
	end
	else begin
		start_dialog_at_node(Jarvis03);
	end
end

procedure use_skill_on_p_proc begin
	variable LVar0 := 0;
	LVar0 := roll_vs_skill(dude_obj, action_being_used, 0);
	if (local_var(5) == 0) then begin
		script_overrides;
		if (action_being_used == SKILL_FIRST_AID) then begin
			if (is_success(LVar0)) then begin
				display_msg(message_str(SCRIPT_JARVIS, 112));
			end
			else begin
				display_msg(message_str(SCRIPT_JARVIS, 113));
			end
		end
		else begin
			if (action_being_used == SKILL_DOCTOR) then begin
				if (is_success(LVar0)) then begin
					display_msg(message_str(SCRIPT_JARVIS, 114));
				end
				else begin
					display_msg(message_str(SCRIPT_JARVIS, 115));
				end
			end
			else begin
				display_msg(message_str(SCRIPT_JARVIS, 116));
			end
		end
	end
end

procedure use_obj_on_p_proc begin
	if ((obj_pid(obj_being_used_with) == PID_ANTIDOTE) and (local_var(5) == 0)) then begin
		script_overrides;
		rm_timer_event(self_obj);
		set_local_var(5, 1);
		rm_obj_from_inven(dude_obj, obj_being_used_with);
		destroy_object(obj_being_used_with);
		display_msg(message_str(SCRIPT_JARVIS, 117));

		give_exp_points(EXP_JARVIS_ANTIDOTE);
		display_msg(message_str(SCRIPT_JARVIS, 200));

		set_global_var( GVAR_PLAYER_REPUTATION, check_general_rep + 1 );
		inc_shady_rep(REP_BONUS_HELPING_JARVIS);
	end
end

procedure destroy_p_proc begin
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_SHADY_SANDS, 1 );
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure combat_p_proc begin
	if ((fixed_param == COMBAT_SUBTYPE_TURN) and (local_var(5) == 0)) then begin
		script_overrides;
	end
end

procedure Jarvis01 begin
	float_msg(self_obj, message_str(SCRIPT_JARVIS, 104), 0);
end

procedure Jarvis02 begin
	gsay_reply(440, 105);
	set_local_var(4, 1);
	call Jarvis04;
end

procedure Jarvis03 begin
	gsay_reply(440, 106);
	call Jarvis04;
end

procedure Jarvis04 begin
	giq_option( 4, SCRIPT_JARVIS, 107, Jarvis05, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_JARVIS, 108, Jarvis06, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_JARVIS, 109, Jarvisend, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_JARVIS, 118, Jarvis05, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_JARVIS, 119, Jarvis06, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_JARVIS, 120, Jarvisend, NEUTRAL_REACTION );
end

procedure Jarvis05 begin
	gsay_reply(440, 110);
	call Jarvis04;
end

procedure Jarvis06 begin
	gsay_reply(440, 111);
	call Jarvis04;
end

procedure Jarvisend begin
end

procedure description_p_proc begin
	script_overrides;
	if (local_var(4) == 0) then begin
		display_msg(message_str(SCRIPT_JARVIS, 102));
	end
	else begin
		display_msg(message_str(SCRIPT_JARVIS, 103));
	end
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if ((local_var(5) == 1) and (anim_busy(self_obj) == 0)) then begin
		if (critter_state(self_obj) == 2) then begin
			reg_anim_func(2, self_obj);
			reg_anim_func(1, 1);
			reg_anim_animate(self_obj, 37, -1);
			reg_anim_func(3, 0);
		end
		else if (critter_state(self_obj) == 0) then begin
			set_local_var(5, 2);
			self_rotate( 2 );
		end
	end
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure timed_event_p_proc begin
	if (local_var(5) == 0) then begin
		add_timer_event(self_obj, game_ticks(7200), 1);
	end
	if (tile_distance_objs(dude_obj, self_obj) < dude_perception) then begin
		display_msg(message_str(SCRIPT_JARVIS, 100));
		float_msg(self_obj, message_str(SCRIPT_JARVIS, 101), 0);
	end
end

procedure map_exit_p_proc begin
	rm_timer_event(self_obj);
end

procedure PickDeadBodyType begin
	pick_dead_body_type
end
