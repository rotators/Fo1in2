#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure look_at_p_proc;//    script_action == 21
procedure timed_event_p_proc;//    script_action == 22

procedure barter00;
procedure barter01;
procedure barter02;
procedure barter03;
procedure barter04;
procedure do_barter;
procedure BarterGuy00;
procedure BarterGuy01;
procedure BarterGuy02;
procedure BarterGuy03;
procedure BarterGuy04;
procedure BarterGuy05;
procedure BarterGuy06;
procedure BarterGuy07;
procedure BarterGuy08;
procedure BarterGuyEnd;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
procedure items_held;

variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable exit_line;
variable item;
variable in_combat;
variable new_obj;
variable new_obj_picked;
variable no_deal;
variable Herebefore;
variable hostile;
variable Only_Once := 1;
variable Caught_Stealing;
variable Here_To_Shop;



procedure PickDeadBodyType;
variable DeathType := 56;


procedure start
begin
	if global_var(SHADY_SANDS_WAS_INVADED) then begin
		if (cur_map_index == MAP_SHADYE) or (cur_map_index == MAP_SHADYW) then begin //  SHADY SANDS - EAST OR WEST
			if (local_var(6) != 1) then begin
				set_local_var(6, 1);
				call PickDeadBodyType;
				kill_critter(self_obj, DeathType);
			end
		end
	end
	else begin
		fixt_critter_healing
		
		if Only_Once then begin
			Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 2);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 50);
			exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
		end
		if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
			call look_at_p_proc;
		end
		else begin
			if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
				call timed_event_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
							call critter_p_proc;
						end
						else begin
							if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
								call destroy_p_proc;
							end
							else begin
								if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
									//script_overrides;
									display_msg(message_str(SCRIPT_BARTER, 100));
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure talk_p_proc
begin
	call items_held;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(3, self_obj, 4, -1, -1);
	gsay_start;
	if (Caught_Stealing) then begin
		call BarterGuy00;
	end
	else begin
		if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
			call BarterGuy02;
		end
		else begin
			//call get_stuff_from_safe;
			call BarterGuy01;
		end
	end
	gsay_end;
	end_dialogue;
	//call put_stuff_in_safe;
end

procedure BarterGuy08
begin
	gdialog_mod_barter(0);
	gsay_message(47, exit_line, 50);
end

procedure BarterGuy01
begin
	gsay_reply(3, 101);
	giq_option(4, 3, 102, do_barter, 50);
	giq_option(4, 3, 103, BarterGuyEnd, 50);
end

procedure BarterGuy04
begin
	no_deal := 1;
	gsay_reply(3, 107);
end

procedure BarterGuy05
begin
	gsay_reply(3, 108);
end

procedure BarterGuy03
begin
	gsay_reply(3, 104);
	giq_option(4, 3, 105, BarterGuy05, 50);
	giq_option(4, 3, 106, BarterGuy04, 50);
end

procedure BarterGuy06
begin
	gsay_reply(3, 109);
end

procedure BarterGuy07
begin
	gsay_reply(3, 110);
end

procedure BarterGuy00
begin
	gsay_message(3, 110, 50);
end

procedure BarterGuy02
begin
	gsay_message(3, 113, 50);
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 7) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if not(local_var(4)) then begin
		display_msg(message_str(SCRIPT_BARTER, 112));
		set_local_var(4, 1);
	end
	else begin
		display_msg(message_str(SCRIPT_BARTER, 100));
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		Here_To_Shop := 1;
		dialogue_system_enter;
	end
	else begin
		if (fixed_param == 2) then begin
			Caught_Stealing := 1;
			dialogue_system_enter;
		end
	end
end

procedure BarterGuyEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure do_barter
begin
	gdialog_mod_barter(0);
	gsay_reply(634, 100);
	giq_option(4, 243, 129, BarterGuyEnd, 50);
	giq_option(-3, 243, 131, BarterGuyEnd, 50);
end

procedure barter00
begin
	float_msg(self_obj, message_str(SCRIPT_BARTER, 110), 0);
end

procedure barter01
begin
	variable LVar0 := 0;
	gsay_message(3, 108, 50);
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(600);
	gfade_in(1);
	LVar0 := create_object_sid(PID_KNIFE, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	LVar0 := create_object_sid(PID_SPEAR, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	LVar0 := create_object_sid(PID_STIMPAK, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
end

procedure barter02
begin
	set_global_var(BARTER_WAS_GIVEN, 1);
	gsay_reply(3, 104);
	giq_option(4, 3, 105, barter01, 50);
	giq_option(4, 3, 106, barter04, 50);
end

procedure barter03
begin
	if (global_var(RADSCORPION_SEED) <= 1) then begin
		gsay_message(3, 109, 50);
	end
	if (global_var(RADSCORPION_SEED) == 2) then begin
		gsay_message(3, 111, 50);
	end
end

procedure barter04
begin
	no_deal := 1;
	gsay_message(3, 107, 50);
end

procedure PickDeadBodyType
begin
	pick_dead_body_type
end
