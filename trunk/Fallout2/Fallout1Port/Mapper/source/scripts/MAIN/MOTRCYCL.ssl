/*

	Drivable vehicle for Fo1!

*/

/* Include Files */

#include "..\headers\define.h"
#include "..\headers\Sfall\sfall.h"

#define NAME                        SCRIPT_MOTRCYCL

#include "..\headers\command.h"
#include "..\headers\updatmap.h"
//#include "..\headers\MAPNECRO.h"
//#include "..\headers\MAPOBTFD.h"

procedure start;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure map_exit_p_proc;

procedure refuel_car;

import variable chop_shop_boy_obj;
import variable smitty_obj;
variable stop_car_use := false;
variable car_was_used_to_exit;

#define float_normal(x,y)                   float_msg(x, message_str(NAME,y), FLOAT_MSG_NORMAL)

#define max_fill 			(80000)
#define small_fill 		(200) //(400)
#define big_fill 			(400) //(800)

procedure start begin
end

procedure map_exit_p_proc begin
   car_was_used_to_exit := false;
end

procedure use_p_proc begin
   stop_car_use := false;

   // Set worldmap interface graphic for the motorcycle
	set_car_intface_art(495);

   // Player has the key?
	if (obj_carrying_pid_obj(dude_obj, PID_MOTO_KEY)) then begin
		set_global_var(GVAR_PLAYER_GOT_CAR,1);
		remove_pid_qty(dude_obj, PID_MOTO_KEY, 1)
	end

   if not(dude_has_car) then begin
      stop_car_use := true;
      display_mstr(450);

      // Start dialog with Anya the trader
      //if (global_var(GVAR_Q_03_MOTORCYCLE) == 0) then
      //	set_global_var(GVAR_Q_03_MOTORCYCLE,1);
   end

	// Check party members. Everyone fits on the bike?
	if ( (global_var(GVAR_PLAYER_GOT_CAR) == 1) and (party_size_biped > 1) ) or
		( (global_var(GVAR_PLAYER_GOT_CAR) == 2) and (party_size_biped > 2) ) then begin
			script_overrides;
			display_mstr(500);
			float_normal(dude_obj,random(501,505));
	end
	else begin
		// Lets roll out!
	   if (stop_car_use == false) then begin
	      car_was_used_to_exit := true;
	      set_car_worldmap;
	      car_give_to_party;

	      play_sfx("engineon");
	      debug_msg("Party has the car");
	   end
	   else begin
	      script_overrides;
	      debug_msg("car use stopped by script");
	   end

   end
end

procedure use_obj_on_p_proc begin
	if obj_pid(obj_being_used_with) == PID_MOTO_KEY then begin
		script_overrides;

		set_global_var(GVAR_PLAYER_GOT_CAR,1);
		remove_pid_qty(dude_obj, PID_MOTO_KEY, 1)
		display_mstr(452);
	end

	if (global_var(GVAR_PLAYER_GOT_CAR) != 0) then begin
		call refuel_car;
	end
end

procedure use_skill_on_p_proc begin
	if (action_being_used == SKILL_REPAIR) then begin
		script_overrides;
		display_mstr(451);
   end
end

procedure refuel_car begin
variable fuel;
variable used_fuel;
variable cur_car_fill;
variable charges;#

	used_fuel := obj_pid(obj_being_used_with);
	cur_car_fill := car_gas_amount;

	// Full tank == 80000
	if (used_fuel == PID_MICRO_FUSION_CELL) or (used_fuel == PID_SMALL_ENERGY_CELL) then begin
		script_overrides;

      reg_anim_clear(dude_obj);
      reg_anim_begin();
         reg_anim_animate(dude_obj, ANIM_magic_hands_middle, -1);
      reg_anim_end();

		// Get amount of item charges
		fuel := obj_carrying_pid_obj(dude_obj, used_fuel); // needs to be or CTD
		charges := get_weapon_ammo_count(fuel);

		// Bike is not fully charged?
		if (cur_car_fill < max_fill) then begin
			while (cur_car_fill < max_fill) do begin
				cur_car_fill := car_gas_amount;
				//debug("charge!" + cur_car_fill);

				if fuel == PID_MICRO_FUSION_CELL then begin
					car_give_gas(big_fill);
					set_weapon_ammo_count(fuel, get_weapon_ammo_count(fuel) - 1);
				end
				else if fuel == PID_SMALL_ENERGY_CELL then begin
					car_give_gas(small_fill);
					set_weapon_ammo_count(fuel, get_weapon_ammo_count(fuel) - 1);
				end
			end
			display_msg(mstr(510));

		end
		// Bike is fully charged
		else begin
			display_msg(mstr(511));
		end

	end
end



