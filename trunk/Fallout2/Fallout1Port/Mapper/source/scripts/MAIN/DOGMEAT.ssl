/*

	Dogmeat - Party Member, Junktown

*/

#include "..\headers\define.h"
#include "..\headers\mapjunkcas.h"

#define NAME											SCRIPT_DOGMEAT

#include "..\headers\command.h"
#include "..\headers\modreact.h"

#define set_default_party_follow             set_follow_close

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure push_p_proc;

procedure dog_joins_dude;
procedure dog_remove_party;
procedure dog_join_party;
procedure dog_end;
procedure dog00;

procedure Node998;
procedure Node999;

variable tmp_hostile;
variable waiting_to_follow;
variable critter_tile1;
variable critter_tile2;
variable critter_tile3;
//variable dest_tile;
variable NewHex;
variable IdenOnce;

variable SrcObj := 0;
variable SrcIsParty := 0;

#define LVAR_WAITING                      (10)
#define LVAR_FOLLOW_DISTANCE              (11)
#define LVAR_TEAM                         (12)

#define float_dogmeat(x)    					float_msg(self_obj, message_str(SCRIPT_ALLDOGS, x), FLOAT_MSG_NORMAL)

#define dogmeat_joins_party               party_add_self;                                                   \
                                          add_timer_event(self_obj,game_ticks(1),2);                        \
                                          set_self_team(TEAM_PLAYER)
#define dude_has_free_slot_for_dogmeat		((dude_at_max_party_size == false) and (Dog_In_Party == false) or unlimited_party_members)
#define EVENT_FLOAT_JOIN 						(2)

procedure Node998 begin
end
procedure Node999 begin
end

procedure start begin
end

procedure push_p_proc begin
   if (Dog_In_Party) then begin
      float_dogmeat(random(122,123));
   end
   else begin
      script_overrides;
   end
end

procedure critter_p_proc begin
	if not(global_var( GVAR_DOGMEAT_HIRELING_STATUS )) then begin
		if (local_var(4) == 0) then begin
			if (self_can_see_dude) then begin
				if dude_armor then begin
					variable JacketCheck;
					JacketCheck := dude_armor;
					if (obj_pid(JacketCheck) == PID_LEATHER_JACKET) then begin
						set_local_var(4, 1);
						display_msg(message_str(SCRIPT_ALLDOGS, 115));
						call dog_joins_dude;
					end
				end

			end
		end
	end

	if (global_var( GVAR_DOGMEAT_HIRELING_STATUS ) == 1) then begin
		if (tile_distance_objs(self_obj, dude_obj) >= 3) then begin
			if (anim_busy(self_obj) == 0) then begin
				dest_tile := tile_num_in_direction(tile_num_in_direction(dude_tile, rotation_to_tile(dude_tile, self_tile), 1), random(0, 5), random(0, 2));
				animate_move_obj_to_tile(self_obj, dest_tile, ANIMATE_RUN_FORCE);
			end
		end
		else begin
			variable LVar0 := 0;
			LVar0 := random(1, 500);
			if (LVar0 == 100) then begin
				if (anim_busy(self_obj) == 0) then begin
					animate_move_obj_to_tile(self_obj, tile_num_in_direction(dude_tile, random(0, 5), 2), 0);
				end
			end
			if (LVar0 == 400) then begin
				if (anim_busy(self_obj) == 0) then begin
					animate_move_obj_to_tile(self_obj, tile_num_in_direction(dude_tile, random(0, 5), 1), 0);
				end
			end
		end
	end
	else if (local_var(4) == 0) then begin
		if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			if (map_var(MVAR_Phil_approaches)) then begin
				if (map_var(MVAR_dog_is_angry)) then begin
					add_timer_event(self_obj, game_ticks(6), 1);
				end
				set_map_var(MVAR_Phil_approaches, 0);
			end
		end
	end
end

procedure destroy_p_proc begin
	rm_timer_event(self_obj);
	set_global_var( GVAR_DOGMEAT_HIRELING_STATUS, 0 );

	if obj_in_party(source_obj) then begin
		if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			set_global_var( GVAR_DOGMEAT_SOMETHING_0, 2 );
			set_global_var( GVAR_DOGMEAT_SOMETHING_1, 2 );

			display_msg(message_str(SCRIPT_ALLDOGS, 116));
			give_exp_points(EXP_GET_RID_OF_DOGMEAT);

			set_map_var(MVAR_dog_is_angry, 0);
			set_map_var(MVAR_growling, 0);
		end
	end
end

procedure look_at_p_proc begin
	script_overrides;
	if global_var( GVAR_DOGMEAT_HIRELING_STATUS ) != 0 then begin
		if IdenOnce != 1 then begin
			display_msg(message_str(SCRIPT_ALLDOGS, 100));
			IdenOnce := 1;
		end
		else begin
			display_msg(message_str(SCRIPT_ALLDOGS, 110));
		end
	end
	else begin
		display_msg(message_str(SCRIPT_ALLDOGS, 101));
	end
end

procedure map_enter_p_proc begin
	if (global_var( GVAR_DOGMEAT_HIRELING_STATUS ) == 1) then begin
		set_self_team(TEAM_PLAYER);
	end
	else begin
		set_self_team(TEAM_RAIDERS);
	end

	//  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
	if ((CUR_MAP_JUNKCSNO) and (global_var( GVAR_DOGMEAT_HIRELING_STATUS ) == 0) and (local_var(4) == 0)) then begin
		set_map_var(MVAR_dog_is_angry, 1);
	end
end

procedure pickup_p_proc begin
	script_overrides;
end

procedure talk_p_proc begin
	dude_look_at_critter;

	if (local_var(4) == 1) then begin// + "and (dude_iq > 3))" previously. --Sduibek
		start_gdialog(968, self_obj, 4, -1, -1);
		gsay_start;
		call dog00;
		gsay_end;
		end_dialogue;
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_ALLDOGS, 102), 0);
	end
	if (Katja_ptr != 0) then begin
		float_msg(Katja_ptr, message_str(SCRIPT_KATJA, 175), 5);
	end
end

procedure timed_event_p_proc begin
	if (fixed_param == EVENT_FLOAT_JOIN) then begin
		float_dogmeat(random(122,123));
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_ALLDOGS, 103), 0);
		if (obj_on_screen(self_obj)) then begin
			//play_sfx("MADDOGGR");
		end
		if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
			set_map_var(MVAR_growling, 1);
			set_map_var(MVAR_smartass_2, 1);
		end
	end
end

procedure use_obj_on_p_proc begin
	if ((obj_pid(obj_being_used_with) == PID_MEAT_ON_A_STICK) or (obj_pid(obj_being_used_with) == PID_IGUANA_ON_A_STICK)) then begin
		if (not(global_var( GVAR_DOGMEAT_HIRELING_STATUS )) and (local_var(4) == 0)) then begin
			set_local_var(4, 1);
			display_msg(message_str(SCRIPT_ALLDOGS, 104));
			call dog_joins_dude;
		end
		else begin
			critter_heal(self_obj, 5);
		end
	end
end

procedure dog_joins_dude begin
	display_msg(message_str(SCRIPT_ALLDOGS, 114));
	give_exp_points(EXP_DOGMEAT_JOINS_PARTY);

	set_global_var( GVAR_DOGMEAT_HIRELING_STATUS, 1 );
	set_local_var(4, 1);
	set_global_var( GVAR_DOGMEAT_SOMETHING_1, 2 );
	set_global_var( GVAR_DOGMEAT_SOMETHING_0, 2 );

	dogmeat_joins_party;

	set_self_team(TEAM_PLAYER );
	if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
		set_map_var(MVAR_dog_is_angry, 0);
	end
end

procedure dog_remove_party begin
	set_global_var( GVAR_DOGMEAT_HIRELING_STATUS, 0 );
	//party_remove(self_obj);
	set_party_waiting;
end

procedure dog_join_party begin
	if dude_has_free_slot_for_dogmeat then begin
		set_global_var( GVAR_DOGMEAT_HIRELING_STATUS, 1 );
		dogmeat_joins_party;
		float_msg(self_obj, message_str(SCRIPT_ALLDOGS, 117), 3);
	end
	else begin
		Reply(2500);
		NOption(2510,Node999,004);
	end
end

procedure dog_end begin
	float_msg(self_obj, message_str(SCRIPT_ALLDOGS, 102), 3);
end

procedure dog00 begin
	gsay_reply(968, 117);
	if (global_var( GVAR_DOGMEAT_HIRELING_STATUS ) == 0) then begin
		giq_option( 4, SCRIPT_ALLDOGS, 118, dog_join_party, GOOD_REACTION );
		giq_option( -3, SCRIPT_ALLDOGS, 300, dog_join_party, GOOD_REACTION );
	end
	else begin
		giq_option( 4, SCRIPT_ALLDOGS, 119, dog_remove_party, NEUTRAL_REACTION );
		giq_option( -3, SCRIPT_ALLDOGS, 301, dog_remove_party, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_ALLDOGS, 120, dog_end, GOOD_REACTION );
	giq_option( -3, SCRIPT_ALLDOGS, 304, dog_end, GOOD_REACTION );
end

procedure use_skill_on_p_proc begin
	if (action_being_used == SKILL_STEAL) then begin//-- STEAL
		script_overrides;
		display_msg(message_str(SCRIPT_GENCHAT, 211));
		script_overrides;
	end
end
