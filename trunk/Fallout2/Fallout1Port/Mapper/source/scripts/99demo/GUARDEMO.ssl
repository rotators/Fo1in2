#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure guard02a;
procedure guard02b;
procedure guard00;
procedure guard00i;
procedure guard00ii;
procedure guard01;
procedure guard01i;
procedure guard02;
procedure guard02i;
procedure guard03;
procedure guard04;
procedure guard05;
procedure guardend;
procedure weapon_check;

variable Caught;
variable armed;
variable Scared;
variable Occurance;
variable Checked;
variable hostile;
variable rndx;

procedure ReactToLevel;
procedure LevelToReact;
procedure ModReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
procedure items_held;

variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable ReactVal := 50;
variable ReactTier := 2;
variable Talk;
variable exit_line;



procedure start
begin
////////////////////////////////////////////////////////////////////////////////////
////display_msg("INIT GUARDEMO.SSL - contact Sduibek if you see this!");
////display_msg("INIT GUARDEMO.SSL - contact Sduibek if you see this!");
////////////////////////////////////////////////////////////////////////////////////
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call weapon_check;
			if (obj_can_see_obj(self_obj, dude_obj)) then begin
				if ((global_var(WEAPON_LOCKER) == 0) and armed and not(Scared) and not(Checked)) then begin
					Checked := 1;
					dialogue_system_enter;
				end
			end
			if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
				attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
			end
		end
		else begin
			if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
				if (fixed_param == 1) then begin
					if (obj_can_see_obj(self_obj, dude_obj)) then begin
						call weapon_check;
						if (armed) then begin
							attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
						end
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
						else begin
							if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
								script_overrides;
								display_msg(message_str(SCRIPT_GUARDEMO, 100));
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if ((global_var(WEAPON_LOCKER) == 0) and armed and not(Scared)) then begin
		set_global_var(WEAPON_LOCKER, 1);
		start_gdialog(221, self_obj, 4, -1, -1);
		gsay_start;
		call guard00;
		gsay_end;
		end_dialogue;
		add_timer_event(self_obj, game_ticks(5), 1);
	end
	else begin
		call guard02a;
	end
end

procedure guard02a
begin
	rndx := random(1, 3);
	if (rndx == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GUARDEMO, 101), 0);
	end
	else begin
		if (rndx == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_GUARDEMO, 102), 0);
		end
		else begin
			if (rndx == 3) then begin
				float_msg(self_obj, message_str(SCRIPT_GUARDEMO, 103), 0);
			end
		end
	end
end

procedure guard02b
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 114));
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 115), guardend);
	end
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 116), guard02i);
	end
end

procedure guard00
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 104));
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 105), guard01);
	end
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 106), guard00i);
	end
	if (get_critter_stat(dude_obj, 2) >= 5) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 107), guard00ii);
	end
	if (-get_critter_stat(dude_obj, 2) >= -3) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 108), guard05);
	end
end

procedure guard00i
begin
	call DownReact;
	call guard02;
end

procedure guard00ii
begin
	call UpReact;
	call guard04;
end

procedure guard01
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 109));
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 110), guard02);
	end
	if (get_critter_stat(dude_obj, 2) >= 4) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 111), guard01i);
	end
end

procedure guard01i
begin
	if (is_success(roll_vs_skill(dude_obj, 14, -20))) then begin
		call guard03;
	end
	else begin
		call guard02;
	end
end

procedure guard02
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 112));
	if (get_critter_stat(dude_obj, 2) >= 0) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 113), guard02b);
	end
end

procedure guard02i
begin
	hostile := 1;
end

procedure guard03
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 117));
	if (get_critter_stat(dude_obj, 2) >= 0) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 118), guardend);
	end
	Scared := 1;
end

procedure guard04
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 119));
	if (get_critter_stat(dude_obj, 2) >= 0) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 120), guardend);
	end
end

procedure guard05
begin
	sayReply(0, message_str(SCRIPT_GUARDEMO, 121));
	if (get_critter_stat(dude_obj, 2) >= 0) then begin
		sayOption(message_str(SCRIPT_GUARDEMO, 122), guardend);
	end
end

procedure guardend
begin
end

procedure weapon_check
begin
	call items_held;
	if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
		armed := 1;
	end
	else begin
		armed := 0;
	end
end

procedure ReactToLevel
begin
	if (ReactVal < 24) then begin
		ReactTier := 1;
	end
	else begin
		if (ReactVal < 74) then begin
			ReactTier := 2;
		end
		else begin
			ReactTier := 3;
		end
	end
end

procedure LevelToReact
begin
	if (ReactTier == 1) then begin
		ReactVal := random(1, 24);
	end
	else begin
		if (ReactTier == 2) then begin
			ReactVal := random(25, 74);
		end
		else begin
			ReactVal := random(75, 100);
		end
	end
end

procedure ModReact
begin
	Talk := roll_vs_skill(dude_obj, 14, 0);
	if (action_being_used == 14) then begin//-- SPEECH
		if (is_success(Talk)) then begin
			ReactTier := ReactTier + 1;
		end
	end
	call LevelToReact;
end

procedure UpReact
begin
	ReactVal := ReactVal + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	ReactVal := ReactVal - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	ReactTier := 1;
	ReactVal := 1;
end

procedure TopReact
begin
	ReactVal := 100;
	ReactTier := 3;
end

procedure BigUpReact
begin
	ReactVal := ReactVal + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	ReactVal := ReactVal - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	ReactTier := ReactTier + 1;
	if (ReactTier > 3) then begin
		ReactTier := 3;
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	ReactTier := ReactTier - 1;
	if (ReactTier < 1) then begin
		ReactTier := 1;
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		exit_line := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		exit_line := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		exit_line := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		exit_line := "See ya.";
	end
	if (LVar0 == 5) then begin
		exit_line := "Thanks.";
	end
	if (LVar0 == 6) then begin
		exit_line := "Okay, bye.";
	end
end
 
procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	give_exp_points(150);
	display_msg(message_str(SCRIPT_GUARDEMO, 123));
	rm_timer_event(self_obj);
end

