#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure timeforwhat;
procedure critter_p_proc;//    script_action == 12
procedure Start_War;

import variable Fool_Counter;
import variable Crypt_Counter;
import variable is_crypt;
import variable is_fool;
import variable broken_gen;
import variable Fool_Pointer;
import variable Crypt_Pointer;
import variable Phrax_Pointer;
import variable Rock_Pointer;

variable I_Am_A_Crypt;
variable I_Am_A_Fool;

import variable Fool_Taunt;
import variable Crypt_Taunt;

variable Known;
variable line;
variable my_tile;
variable Only_Once;
variable Hostile;
variable knowstart;
variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable MAXLEASH := 9;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable reactionamt := 50;
variable reaction_level := 2;
variable got_reaction;
variable badguy;
variable exit_line;
variable This_Once;




procedure start
begin
	
	
	if (is_fool) then begin
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 0);
	end
	else begin
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 2);
	end
	if (knowstart == 0) then begin
		my_tile := tile_num(self_obj);
		knowstart := 1;
		I_Am_A_Fool := 1;
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
			script_overrides;
			if (Known) then begin
				display_msg(message_str(SCRIPT_DEMOFOOL, 100));
			end
			else begin
				display_msg(message_str(SCRIPT_DEMOFOOL, 101));
			end
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				Hostile := 1;
			end
			else begin
				if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
					call Start_War;
				end
				else begin
					if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
						call critter_p_proc;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							rm_timer_event(self_obj);
	Fool_Counter := Fool_Counter - 1;
						rm_timer_event(self_obj);
	end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	if (is_fool) then begin
		line := message_str(SCRIPT_DEMOFOOL, random(107, 111));
	end
	else begin
		if (is_crypt) then begin
			line := message_str(SCRIPT_DEMOFOOL, random(102, 106));
		end
		else begin
			line := message_str(SCRIPT_DEMOFOOL, random(112, 116));
		end
	end
	float_msg(self_obj, line, 0);
end

procedure timeforwhat
begin
	noevent := 0;
	rndy := random(1, 6);
	if (rndy > 1) then begin
		dist := 2;
	end
	if (rndy > 5) then begin
		dist := 3;
	end
	rndz := random(0, 5);
	prev_tile := tile_num(self_obj);
	new_tile := tile_num_in_direction(prev_tile, rndz, dist);
	if (tile_distance(my_tile, new_tile) < MAXLEASH) then begin
		animate_move_obj_to_tile(self_obj, new_tile, 0);
	end
end

procedure critter_p_proc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := (self_obj == Fool_Pointer) or (self_obj == Crypt_Pointer) or (self_obj == Phrax_Pointer) or (self_obj == Rock_Pointer);
	if (I_Am_A_Fool and Crypt_Taunt) then begin
		Crypt_Taunt := 0;
		if (random(1, 5) == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(100, 113)), -1);
		end
	end
	else begin
		if (I_Am_A_Crypt and Fool_Taunt) then begin
			Fool_Taunt := 0;
			if (random(1, 5) == 1) then begin
				float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(200, 218)), -1);
			end
		end
		else begin
			if ((global_var(QUEST_BONEYARD_7_GANG_WAR) == 1) and (tile_num(self_obj) != 20725)) then begin
				animate_move_obj_to_tile(self_obj, 20725, 0);
			end
			else begin
				if (tile_num(self_obj) == 20725) then begin
					add_timer_event(self_obj, game_ticks(2), 1);
				end
				else begin
					if (broken_gen and (tile_num(self_obj) != 27504)) then begin
						if ((self_obj == Phrax_Pointer) and (This_Once == 0)) then begin
							This_Once := 1;
							float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, 300), 2);
						end
						set_global_var(QUEST_BONEYARD_7_GANG_WAR, 2);
						animate_move_obj_to_tile(self_obj, 27504, 0);
					end
					else begin
						if ((tile_num(self_obj) == 27504) and (global_var(QUEST_BONEYARD_7_GANG_WAR) == 2)) then begin
							if not(is_loading_game) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
							if (I_Am_A_Fool) then begin
								Fool_Counter := Fool_Counter - 1;
							end
							else begin
								Crypt_Counter := Crypt_Counter - 1;
							end
						end
						else begin
							if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
								Hostile := 0;
								attack(dude_obj);
							end
							else begin
								if (not(LVar0)) then begin
									if (random(0, 21) == 1) then begin
										LVar1 := tile_num_in_direction(tile_num(self_obj), random(0, 5), 2);
										animate_move_obj_to_tile(self_obj, LVar1, 0);
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure Start_War
begin
	if (fixed_param == 1) then begin
		set_global_var(QUEST_BONEYARD_7_GANG_WAR, 0);
		if (I_Am_A_Fool) then begin
			Fool_Taunt := 1;
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(100, 115)), -1);
		end
		else begin
			Crypt_Taunt := 1;
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(200, 218)), -1);
		end
		add_timer_event(self_obj, 4, 2);
	end
	else begin
		if (fixed_param == 2) then begin
			if (I_Am_A_Fool) then begin
				attack_complex(Crypt_Pointer, 0, 1, 0, 0, 30000, 0, 0);
			end
			else begin
				attack_complex(Fool_Pointer, 0, 1, 0, 0, 30000, 0, 0);
			end
		end
	end
end

procedure get_reaction
begin
	if (not(got_reaction)) then begin
		got_reaction := 1;
		reactionamt := reactionamt + ((get_critter_stat(dude_obj, STAT_ch) - 5) * 5);
		if (badguy) then begin
			reactionamt := reactionamt - global_var(PLAYER_REPUTATION_GENERAL);
		end
		else begin
			reactionamt := reactionamt + global_var(PLAYER_REPUTATION_GENERAL);
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			reactionamt := reactionamt - 30;
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1)) then begin
			reactionamt := reactionamt + 20;
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1)) then begin
			reactionamt := reactionamt - 20;
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (reactionamt < 24) then begin
		reaction_level := 1;
	end
	else begin
		if (reactionamt < 74) then begin
			reaction_level := 2;
		end
		else begin
			reaction_level := 3;
		end
	end
end

procedure LevelToReact
begin
	if (reaction_level == 1) then begin
		reactionamt := random(1, 24);
	end
	else begin
		if (reaction_level == 2) then begin
			reactionamt := random(25, 74);
		end
		else begin
			reactionamt := random(75, 100);
		end
	end
end

procedure UpReact
begin
	reactionamt := reactionamt + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	reactionamt := reactionamt - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	reaction_level := 1;
	reactionamt := 1;
end

procedure TopReact
begin
	reactionamt := 100;
	reaction_level := 3;
end

procedure BigUpReact
begin
	reactionamt := reactionamt + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	reactionamt := reactionamt - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	reaction_level := reaction_level + 1;
	if (reaction_level > 3) then begin
		reaction_level := 3;
	end
	LevelToReact
end

procedure DownReactLevel
begin
	reaction_level := reaction_level - 1;
	if (reaction_level < 1) then begin
		reaction_level := 1;
	end
	LevelToReact
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		exit_line := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		exit_line := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		exit_line := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		exit_line := "See ya.";
	end
	if (LVar0 == 5) then begin
		exit_line := "Thanks.";
	end
	if (LVar0 == 6) then begin
		exit_line := "Okay, bye.";
	end
end

 
procedure destroy_p_proc
begin
 
end
