#include "..\headers\define.h"
#include "..\headers\command.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure DemoCryp00;
procedure DemoCryp02;
procedure talk_p_proc;//    script_action == 11
procedure timeforwhat;
procedure Start_War;
procedure critter_p_proc;//    script_action == 12

import variable Fool_Counter;
import variable Crypt_Counter;
import variable is_crypt;
import variable is_fool;
import variable Know_Crypts;
import variable broken_gen;
import variable Crypt_Pointer;
import variable Fool_Pointer;

variable I_Am_A_Crypt;
variable I_AM_A_FOOL;

import variable Phrax_Pointer;
import variable Fool_Taunt;
import variable Crypt_Taunt;
import variable Rock_Pointer;

variable line;
variable hostile;
variable my_tile;
variable initial :=  0;
variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable MAXLEASH := 9;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

//variable got_reaction;
variable badguy;
variable exit_line;
variable This_Once;




procedure start
begin


	if (is_crypt) then begin
		set_self_team(TEAM_PLAYER );
	end
	else begin
		set_self_team(TEAM_VAULT13 );
	end
	if not(initial) then begin
		initial :=  1;
		I_Am_A_Crypt := 1;
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
			script_overrides;
			if (Know_Crypts) then begin
				display_msg(message_str(SCRIPT_DEMOCRYP, 100));
			end
			else begin
				display_msg(message_str(SCRIPT_DEMOCRYP, 101));
			end
		end
		else begin
			if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				call critter_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					hostile := 1;
				end
				else begin
					if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
						call Start_War;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
								rm_timer_event(self_obj);
Crypt_Counter := Crypt_Counter - 1;
	rm_timer_event(self_obj);
						end
					end
				end
			end
		end
	end
end

procedure DemoCryp00
begin
	line := random(102, 108);
	if (obj_pid(dude_armor) != PID_LEATHER_ARMOR) then begin
		if (line == 108) then begin
			line := random(102, 107);
		end
		else begin
			line := 108;
		end
	end
end

procedure DemoCryp02
begin
	line := random(113, 118);
	if (obj_pid(dude_armor) == PID_LEATHER_ARMOR) then begin
		if (line == 118) then begin
			line := random(113, 117);
		end
		else begin
			line := 118;
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_self;
	if (is_fool) then begin
		line := random(109, 112);
	end
	else begin
		if (is_crypt) then begin
			call DemoCryp00;
		end
		else begin
			call DemoCryp02;
		end
	end
	float_msg(self_obj, message_str(SCRIPT_DEMOCRYP, line), 0);
end

procedure timeforwhat
begin
	noevent := 0;
	rndy := random(1, 6);
	if (rndy > 1) then begin
		dist := 2;
	end
	if (rndy > 5) then begin
		dist := 3;
	end
	rndz := random(0, 5);
	prev_tile := self_tile;
	new_tile := tile_num_in_direction(prev_tile, rndz, dist);
	if (tile_distance(my_tile, new_tile) < MAXLEASH) then begin
		self_walk_to_tile( new_tile );
	end
end

procedure Start_War
begin
	if (fixed_param == 1) then begin
		set_global_var( GVAR_QUEST_BONEYARD_7_GANG_WAR, 0 );
		if (I_AM_A_FOOL) then begin
			Fool_Taunt := 1;
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(100, 115)), -1);
		end
		else begin
			Crypt_Taunt := 1;
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(200, 218)), -1);
		end
		add_timer_event(self_obj, 4, 2);
	end
	else begin
		if (fixed_param == 2) then begin
			if (I_AM_A_FOOL) then begin
				attack( Crypt_Pointer );
			end
			else begin
				attack( Fool_Pointer );
			end
		end
	end
end

procedure critter_p_proc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := (self_obj == Fool_Pointer) or (self_obj == Crypt_Pointer) or (self_obj == Phrax_Pointer) or (self_obj == Rock_Pointer);
	if (I_AM_A_FOOL and Crypt_Taunt) then begin
		Crypt_Taunt := 0;
		if (random(1, 5) == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(100, 113)), -1);
		end
	end
	else begin
		if (I_Am_A_Crypt and Fool_Taunt) then begin
			Fool_Taunt := 0;
			if (random(1, 5) == 1) then begin
				float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(200, 218)), -1);
			end
		end
		else begin
			if ((global_var( GVAR_QUEST_BONEYARD_7_GANG_WAR ) == 1) and (self_tile != 20725)) then begin
				self_walk_to_tile( 20725 );
			end
			else begin
				if (self_tile == 20725) then begin
					add_timer_event(self_obj, game_ticks(2), 1);
				end
				else begin
					if (broken_gen and (self_tile != 27504)) then begin
						if ((self_obj == Phrax_Pointer) and (This_Once == 0)) then begin
							This_Once := 1;
							float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, 300), 2);
						end
						set_global_var( GVAR_QUEST_BONEYARD_7_GANG_WAR, 2 );
						self_walk_to_tile( 27504 );
					end
					else begin
						if ((self_tile == 27504) and (global_var( GVAR_QUEST_BONEYARD_7_GANG_WAR ) == 2)) then begin
							if not(is_loading_game) then begin    set_self_invisible;    end//  MAKE INVISIBLE
							if (I_AM_A_FOOL) then begin
								Fool_Counter := Fool_Counter - 1;
							end
							else begin
								Crypt_Counter := Crypt_Counter - 1;
							end
						end
						else begin
							if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
								hostile := 0;
								attack(dude_obj);
							end
							else begin
								if (not(LVar0)) then begin
									if (random(0, 21) == 1) then begin
										LVar1 := tile_num_in_direction(self_tile, random(0, 5), 2);
										self_walk_to_tile( LVar1 );
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure get_reaction
begin
//	variable local_var(0);
//	variable local_var(1);
//	got_set_local_var(0, 1;
	set_local_var(0, local_var(0) + ((dude_charisma - 5) * 5));
	if (badguy) then begin
		set_local_var(0, local_var(0) - check_general_rep);
	end
	else begin
		set_local_var(0, local_var(0) + check_general_rep);
	end
	if has_rep_childkiller then begin
		set_local_var(0, local_var(0) - 30);
	end
	if ((global_var( GVAR_BAD_MONSTER ) > (3 * global_var( GVAR_GOOD_MONSTER ))) or (global_var( GVAR_CHAMPION_REPUTATION ) == 1)) then begin
		set_local_var(0, local_var(0) + 20);
	end
	if ((global_var( GVAR_GOOD_MONSTER ) > (2 * global_var( GVAR_BAD_MONSTER ))) or (global_var( GVAR_BERSERKER_REPUTATION ) == 1)) then begin
		set_local_var(0, local_var(0) - 20);
	end
	call ReactToLevel;
end

procedure ReactToLevel
begin
	if (local_var(0) < 24) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) < 74) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 24));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(25, 74));
		end
		else begin
			set_local_var(0, random(75, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		exit_line := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		exit_line := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		exit_line := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		exit_line := "See ya.";
	end
	if (LVar0 == 5) then begin
		exit_line := "Thanks.";
	end
	if (LVar0 == 6) then begin
		exit_line := "Okay, bye.";
	end
end

procedure destroy_p_proc
begin

end
