#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure run_away;
procedure weapon_check;
procedure go_forward;

procedure Phil00;
procedure Phil01;
procedure Phil02;
procedure Phil03;
procedure Phil04;
procedure Phil05;
procedure Phil06;
procedure Phil07;
procedure Phil08;
procedure Phil09;
procedure PhilEnd;

variable known;
variable hostile;
variable armed;
variable initial :=  0;
variable exit_line;
variable GVar0;
variable GVar1;
variable GVar2;
variable GVar3;
variable GVar4;
variable GVar5;
variable GVar6;
variable GVar7;
variable GVar8;
variable GVar9;
variable GVar10;
variable GVar11;

import variable dog_is_angry;
import variable Phil_approaches;
import variable growling;
import variable smartass;
import variable smartass2;

procedure get_reactionAmt;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
procedure items_held;

variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable reactionAmt;
variable reactionAmt_level;
variable got_reactionAmt;
variable badguy;

procedure start
begin
//////////////////////////////////////////////////////////////////////////////////////////////////////////
display_msg("DEMOPHIL.INT - Contact Sduibek if you see this message.");
display_msg("DEMOPHIL.INT - Contact Sduibek if you see this message.");
//////////////////////////////////////////////////////////////////////////////////////////////////////////


	if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
	rm_timer_event(self_obj);
		call destroy_p_proc;
	rm_timer_event(self_obj);
	end
	if not(initial) then begin
set_self_team(TEAM_RADSCORPIONS );
		add_timer_event(self_obj, game_ticks(10), 1);
		initial :=  1;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			call talk_p_proc;
		end
		else begin
			if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
				script_overrides;
				if (known) then begin
					display_msg(message_str(SCRIPT_DEMOPHIL, 100));
				end
				else begin
					display_msg(message_str(SCRIPT_DEMOPHIL, 101));
				end
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					if (growling) then begin
						call run_away;
					end
					if (smartass) then begin
						add_timer_event(self_obj, game_ticks(2), 2);
						smartass := 0;
					end
					if (not(dog_is_angry)) then begin
						animate_move_obj_to_tile(self_obj, 15686, 0);
					end
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						attack(dude_obj);
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							if (fixed_param == 2) then begin
								float_msg(self_obj, message_str(SCRIPT_DEMOPHIL, 102), 0);
							end
							else begin
								if (dog_is_angry) then begin
									call go_forward;
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if dude_right_hand then begin
		RightHand := dude_right_hand;
		PIDright := obj_pid(RightHand);
		if obj_item_subtype( RightHand ) == item_type_weapon then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if dude_left_hand then begin
		LeftHand := dude_left_hand;
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype( LeftHand ) == item_type_weapon then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	call weapon_check;
	if (global_var( GVAR_DOGMEAT_HIRELING_STATUS )) then begin
		call Phil01;
	end
	else begin
		if (not(dog_is_angry)) then begin
			call Phil09;
		end
		else begin
			if (armed) then begin
				call Phil00;
			end
			else begin
				if (not(known)) then begin
					start_gdialog(376, self_obj, 4, -1, -1);
					gsay_start;
					call Phil02;
					gsay_end;
					end_dialogue;
				end
				else begin
					call Phil08;
				end
			end
		end
	end
end

procedure run_away
begin
	animate_move_obj_to_tile(self_obj, 16892, 1);
	growling := 0;
	add_timer_event(self_obj, game_ticks(random(10, 30)), 1);
end

procedure weapon_check
begin

	if (dude_is_armed) then begin
		armed := 1;
	end
	else begin
		armed := 0;
	end
end

procedure go_forward
begin
	Phil_approaches := 1;
	animate_move_obj_to_tile(self_obj, 16886, 0);
end

procedure Phil00
begin
	float_msg(self_obj, message_str(SCRIPT_DEMOPHIL, 103), 0);
end

procedure Phil01
begin
	float_msg(self_obj, message_str(SCRIPT_DEMOPHIL, 104), 0);
end

procedure Phil02
begin
	variable LVar0 := 0;
	known := 1;
	if (dude_is_male) then begin
		LVar0 := message_str(SCRIPT_DEMOPHIL, 105);
	end
	else begin
		LVar0 := message_str(SCRIPT_DEMOPHIL, 106);
	end
	gsay_reply(376, LVar0 + message_str(SCRIPT_DEMOPHIL, 107));
	giq_option( 4, SCRIPT_DEMOPHIL, 108, Phil04, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_DEMOPHIL, 109, PhilEnd, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_DEMOPHIL, 110, Phil05, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_DEMOPHIL, 111, Phil03, NEUTRAL_REACTION );
end

procedure Phil03
begin
	gsay_message(376, 112, 50);
end

procedure Phil04
begin
	gsay_reply(376, 113);
	giq_option( 4, SCRIPT_DEMOPHIL, 114, PhilEnd, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_DEMOPHIL, 115, Phil05, NEUTRAL_REACTION );
end

procedure Phil05
begin
	gsay_reply(376, 116);
	giq_option( 4, SCRIPT_DEMOPHIL, 117, PhilEnd, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_DEMOPHIL, 118, Phil06, NEUTRAL_REACTION );
	giq_option( 6, SCRIPT_DEMOPHIL, 119, Phil07, NEUTRAL_REACTION );
end

procedure Phil06
begin
	gsay_message(376, 120, 50);
	gsay_reply(376, 121);
	call Goodbyes;
	giq_option( 7, SCRIPT_DEMOPHIL, 122, Phil07, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_MODREACT, exit_line, PhilEnd, NEUTRAL_REACTION );
end

procedure Phil07
begin
	gsay_message(376, 123, 50);
	gsay_reply(376, 124);
	giq_option( 4, SCRIPT_DEMOPHIL, 125, PhilEnd, NEUTRAL_REACTION );
end

procedure Phil08
begin
	float_msg(self_obj, message_str(SCRIPT_DEMOPHIL, 126), 0);
end

procedure Phil09
begin
	float_msg(self_obj, message_str(SCRIPT_DEMOPHIL, 127), 0);
end

procedure PhilEnd
begin
end

procedure get_reactionAmt
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
		set_local_var(0, local_var(0) + (10 * dude_presence));
		if (dude_perk( PERK_cult_of_personality )) then begin
			if (check_general_rep > 0) then begin
				set_local_var(0, local_var(0) + check_general_rep);
			end
			else begin
				set_local_var(0, local_var(0) - check_general_rep);
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - check_general_rep);
			end
			else begin
				set_local_var(0, local_var(0) + check_general_rep);
			end
		end
		if has_rep_childkiller then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (has_rep_champion) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (has_rep_berserker) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	GVar4 := message_str(SCRIPT_MODREACT, random(100, 105));
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		GVar8 := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		GVar8 := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		GVar8 := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		GVar8 := "See ya.";
	end
	if (LVar0 == 5) then begin
		GVar8 := "Thanks.";
	end
	if (LVar0 == 6) then begin
		GVar8 := "Okay, bye.";
	end
end

//DEMO reactionAmt CODE BELOW:
/*

procedure get_reactionAmt
begin
	if (not(GVar6)) then begin
		GVar6 := 1;
		GVar4 := GVar4 + ((dude_charisma - 5) * 5);
		if (GVar7) then begin
			GVar4 := GVar4 - check_general_rep;
		end
		else begin
			GVar4 := GVar4 + check_general_rep;
		end
		if has_rep_childkiller then begin
			GVar4 := GVar4 - 30;
		end
		if ((global_var( GVAR_BAD_MONSTER ) > (3 * global_var( GVAR_GOOD_MONSTER ))) or (global_var( GVAR_CHAMPION_REPUTATION ) == 1)) then begin
			GVar4 := GVar4 + 20;
		end
		if ((global_var( GVAR_GOOD_MONSTER ) > (2 * global_var( GVAR_BAD_MONSTER ))) or (global_var( GVAR_BERSERKER_REPUTATION ) == 1)) then begin
			GVar4 := GVar4 - 20;
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (GVar4 < 24) then begin
		GVar5 := 1;
	end
	else begin
		if (GVar4 < 74) then begin
			GVar5 := 2;
		end
		else begin
			GVar5 := 3;
		end
	end
end

procedure LevelToReact
begin
	if (GVar5 == 1) then begin
		GVar4 := random(1, 24);
	end
	else begin
		if (GVar5 == 2) then begin
			GVar4 := random(25, 74);
		end
		else begin
			GVar4 := random(75, 100);
		end
	end
end

procedure UpReact
begin
	GVar4 := GVar4 + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	GVar4 := GVar4 - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	GVar5 := 1;
	GVar4 := 1;
end

procedure TopReact
begin
	GVar4 := 100;
	GVar5 := 3;
end

procedure BigUpReact
begin
	GVar4 := GVar4 + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	GVar4 := GVar4 - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	GVar5 := GVar5 + 1;
	if (GVar5 > 3) then begin
		GVar5 := 3;
	end
	LevelToReact
end

procedure DownReactLevel
begin
	GVar5 := GVar5 - 1;
	if (GVar5 < 1) then begin
		GVar5 := 1;
	end
	LevelToReact
end
*/

procedure destroy_p_proc
begin

end
