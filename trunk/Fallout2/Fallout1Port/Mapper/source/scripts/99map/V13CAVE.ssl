#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\MAPV13ENT.h"
#include "..\headers\updatmap.h"

export variable vault_door_ptr;

procedure start;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;

procedure Endgame_Slides;

procedure base_inventory;
procedure cheat_mode;
procedure NamedInven;
procedure TaggedInven;

procedure SetLight;

variable endgame_running;
variable party_elevation;
variable Item := 0;
variable NumItems := 0;

#define EVENT_END_1 		(1)
#define EVENT_END_2 		(2)

procedure start begin
end

procedure map_enter_p_proc begin
	call SetLight;

	if global_var(GVAR_VAULT_13_WAS_INVADED) then begin
		set_map_var(2, 1);
	end

	if (map_first_run) then begin
		if debug_mode then begin
			override_map_start_hex(25936,0,1);
		end
		else begin
			override_map_start_hex(17690,0,2);
		end

	   // randomize time between 3:00AM and 7:00AM to get "night sky" message:
	   // Advance until 00:00, then add 3 to 7 hours.
	   game_time_advance( (ONE_GAME_MINUTE * (ticks_til_hour(0) / 60) / 10) + (ONE_GAME_MINUTE * random(180,420)) );

		set_global_var(QUEST_VAULT13_0_WATERCHIP_TRACKER, 1);
		set_global_var(QUEST_VAULT15_1_SEARCH_FOR_CLUES, 1);
		set_global_var(QUEST_VAULT15_2_FIND_WATER_CHIP, 1);

		//--- Activate V13 and V15 on the worldmap:
		mark_on_map(AREA_VAULT_13)
		mark_on_map(AREA_VAULT_15)

		display_msg(message_str(SCRIPT_FEARDARK, 100));

		if global_var(IRONMAN_MODE) == 0 then begin
			call base_inventory;
			call TaggedInven;
		end
		else if global_var(IRONMAN_MODE) == 1 then begin
			call base_inventory;
		end
		else if global_var(IRONMAN_MODE) == 2 then begin
			call TaggedInven;
		end

		call NamedInven;
	end

	// Check if we should run the endgame scene:
	else begin
		if ( (global_var(MASTER_BLOWN) and global_var(VATS_BLOWN) and (endgame_running == 0)) and (not(is_story_finished)) ) then begin
			game_ui_disable;
			call Endgame_Slides;
		end
		else begin
			override_map_start(136, 129, 0, 1);
		end
	end

end

procedure map_update_p_proc begin
	call SetLight;
end

procedure SetLight begin
	if not(endgame_running) and (global_var(OVERSEER_END_SEQ) == 0) and (not(is_story_finished)) then begin
		Darkness;
	end
	else begin
		if is_story_finished then
			Darkness;
		else
			set_light_level(100);
	end
end

procedure map_exit_p_proc begin
end

procedure timed_event_p_proc begin
variable Critter;

	if (fixed_param == EVENT_END_1) then begin
		debug("EG Scene 1 - Setup");

		kill_critter_type(PID_RAT_CAVE, 0);

		set_light_level(100);
		override_map_start(90, 96, 0, 5);

		gfade_out(1);
		write_int(0x4A4343, 0x90909090);
		write_byte(0x4A4347, 0x90);
		endgame_slideshow;

		endgame_running := 2;
		add_timer_event(self_obj, game_ticks(0), EVENT_END_2);
	end
	else if (fixed_param == EVENT_END_2) then begin
		debug("EG Scene 2 - Overseer approaching");

		// Create the Overseer while the ending slides are running:
		Critter := create_object_sid(PID_OVERSEER, 0, 0, SCRIPT_OVER);
		set_map_var(0, Critter);
		anim(Critter, 1000, 2);

		// Move to the vault door and use it:
		critter_attempt_placement(Critter, 15690, elevation(dude_obj));
		use_obj(vault_door_ptr);

		set_global_var(OVERSEER_END_SEQ, 1);
		add_timer_event(vault_door_ptr, game_ticks(5), 1);
		endgame_running := 3;
	end
end

procedure base_inventory begin
	Item := create_object( PID_10MM_PISTOL, 0, 0 );
	add_mult_objs_to_inven(dude_obj, item, 1);
	if difficulty_level != 2 then begin
		Item := create_object( PID_10MM_JHP, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 2);
	end
	else begin
		Item := create_object( PID_10MM_JHP, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
	if difficulty_level != 2 then begin
		Item := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 4);
	end
	else begin
		Item := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 3);
	end
	if difficulty_level != 2 then begin
		Item := create_object( PID_FLARE, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 2);
	end
	else begin
		Item := create_object( PID_FLARE, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
end

procedure TaggedInven begin
variable
	HasGifted := has_trait(2, dude_obj, TRAIT_gifted),
	GIFTED_Handicap := HasGifted * 10,
	HasSkilled := has_trait(2, dude_obj, TRAIT_skilled),
	SKILLED_Bonus := HasSkilled * 10,
	HasGoodNat := has_trait(2, dude_obj, TRAIT_good_natured),
	GOOD_NATURED_Handicap := HasGoodNat * TRAIT_good_natured,
	GOOD_NATURED_Bonus := HasGoodNat * TRAIT_good_natured,
	AlreadyHas := 0,
	NumItems := 0,
	DiffLevelTaggedPercent;

	if difficulty_level < 2 then begin
		DiffLevelTaggedPercent := 20;
	end
	else begin
		DiffLevelTaggedPercent := 10;
	end
//
//	0 = Small Guns
//
	if (has_skill(dude_obj, SKILL_SMALL_GUNS) - dude_agility - 35 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_10MM_JHP, 0, 0 );//10mm JHP
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_10MM_JHP, 0, 0 );//10mm JHP
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	1 = Big Guns
//
	if (has_skill(dude_obj, SKILL_BIG_GUNS) - dude_agility - 10 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_FLAMER, 0, 0 );//Flamer
		add_mult_objs_to_inven(dude_obj, item, 1);
		if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_FLAMETHROWER_FUEL, 0, 0 );//Flamer Fuel
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	2 = Energy Weapons
//
	if (has_skill(dude_obj, SKILL_ENERGY_WEAPONS) - dude_agility - 10 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_LASER_PISTOL, 0, 0 );//Laser Pistol
		add_mult_objs_to_inven(dude_obj, item, 1);
		if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
			NumItems := 2 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_SMALL_ENERGY_CELL, 0, 0 );//Small Energy Cell
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	3 = Unarmed
//
	if (has_skill(dude_obj, SKILL_UNARMED_COMBAT) - ((dude_agility + dude_strength) / 2) - 65 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_BRASS_KNUCKLES, 0, 0 );//Brass Knuckles
		add_mult_objs_to_inven(dude_obj, item, 1);
		if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
			NumItems := 2 - difficulty_level;
			if NumItems then begin
			Item := create_object( PID_BUFFOUT, 0, 0 );//Buffout
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	4 = Melee Weapons
//
	if (has_skill(dude_obj, SKILL_MELEE) - ((dude_agility + dude_strength) / 2) - 55 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_CLUB, 0, 0 );//Club
		add_mult_objs_to_inven(dude_obj, item, 1);
		if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
			NumItems := 2 - difficulty_level;
			if NumItems then begin
			Item := create_object( PID_BUFFOUT, 0, 0 );//Buffout
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	5 = Throwing
//
	if (has_skill(dude_obj, SKILL_THROWING) - dude_agility - 40 + GIFTED_Handicap - SKILLED_Bonus + GOOD_NATURED_Handicap) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_THROWING_KNIFE, 0, 0 );//Throwing Knife
			add_mult_objs_to_inven(dude_obj, item, 2);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_THROWING_KNIFE, 0, 0 );//Throwing Knife
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_FRAG_GRENADE, 0, 0 );//Frag Grenade
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
			NumItems := 2 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_PLASMA_GRENADE, 0, 0 );//Plasma Grenade
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
	if difficulty_level == 0 then begin
		DiffLevelTaggedPercent := 40;
	end
//
//	6 = First aid
//
	if (has_skill(dude_obj, SKILL_FIRST_AID) - ((dude_perception + dude_iq) / 2) - 30 + GIFTED_Handicap - SKILLED_Bonus - GOOD_NATURED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_STIMPAK, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 2);
		end
		else begin
			Item := create_object( PID_FIRST_AID_KIT, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_STIMPAK, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	7 = Doctor
//
	if (has_skill(dude_obj, SKILL_DOCTOR) - ((dude_perception + dude_iq) / 2) - 15 + GIFTED_Handicap - SKILLED_Bonus - GOOD_NATURED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_STIMPAK, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 2);
		end
		else begin
			Item := create_object( PID_DOCTORS_BAG, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_STIMPAK, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	8 = Sneak
//
	if (has_skill(dude_obj, SKILL_SNEAK) - dude_agility - 25 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_STEALTH_BOY, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
//
//	9 = Lockpick
//
	if (has_skill(dude_obj, SKILL_LOCKPICK) - ((dude_perception + dude_agility) / 2) - 20 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			AlreadyHas := obj_carrying_pid_obj(dude_obj, PID_LOCKPICKS);
			if not(AlreadyHas) then begin
				Item := create_object( PID_LOCKPICKS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, 1);
			end
		end
		else begin
			Item := create_object( PID_LOCKPICKS, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
	end
//
//	10 = Steal
//
	if (has_skill(dude_obj, SKILL_STEAL) - dude_agility - 20 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			AlreadyHas := obj_carrying_pid_obj(dude_obj, PID_LOCKPICKS);
			if not(AlreadyHas) then begin
				Item := create_object( PID_LOCKPICKS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, 1);
			end
		end
		else begin
			AlreadyHas := obj_carrying_pid_obj(dude_obj, PID_STEALTH_BOY);
			if not(AlreadyHas) then begin
				Item := create_object( PID_STEALTH_BOY, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, 1);
			end
			else begin
				AlreadyHas := obj_carrying_pid_obj(dude_obj, PID_LOCKPICKS);
				if not(AlreadyHas) then begin
					Item := create_object( PID_LOCKPICKS, 0, 0 );
					add_mult_objs_to_inven(dude_obj, item, 1);
				end
				else begin
					Item := create_object( PID_BOTTLE_CAPS, 0, 0 );
					add_mult_objs_to_inven(dude_obj, item, 25);
				end
			end
		end
	end
//
//	11 = Traps
//
	if (has_skill(dude_obj, SKILL_TRAPS) - ((dude_perception + dude_agility) / 2) - 20 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_DYNAMITE, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_DYNAMITE, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	12 = Science
//
	if (has_skill(dude_obj, SKILL_SCIENCE) - (2 * dude_iq) - 25 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_MENTATS, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 2);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_MENTATS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	13 = Repair
//
	if (has_skill(dude_obj, SKILL_REPAIR) - dude_iq - 20 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		Item := create_object( PID_MULTI_TOOL, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
//
//	14 = Speech
//
	if (has_skill(dude_obj, SKILL_SPEECH) - (2 * dude_charisma) - 25 + GIFTED_Handicap - SKILLED_Bonus - GOOD_NATURED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_MENTATS, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_MENTATS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	15 = Barter
//
	if (has_skill(dude_obj, SKILL_BARTER) - (2 * dude_charisma) - 20 + GIFTED_Handicap - SKILLED_Bonus - GOOD_NATURED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_MENTATS, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_MENTATS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	16 = Gambling
//
	if (has_skill(dude_obj, SKILL_GAMBLING) - (3 * dude_luck) - 20 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_BOTTLE_CAPS, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 25);
		end
		else begin
			NumItems := (75 - (difficulty_level * 25));
			if NumItems then begin
			Item := create_object( PID_BOTTLE_CAPS, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
//
//	17 = Outdoorsman
//
	if (has_skill(dude_obj, SKILL_OUTDOORSMAN) - ((dude_endurance + dude_iq) / 2) - 5 + GIFTED_Handicap - SKILLED_Bonus) >= DiffLevelTaggedPercent then begin
		if global_var(FIXT_BUGFIXES_ONLY) then begin
			Item := create_object( PID_WATER_FLASK, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 3);
		end
		else begin
			NumItems := 3 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_WATER_FLASK, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
			NumItems := 2 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_FLARE, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
			NumItems := 1 - difficulty_level;
			if NumItems then begin
				Item := create_object( PID_RADAWAY, 0, 0 );
				add_mult_objs_to_inven(dude_obj, item, NumItems);
				NumItems := 0;
			end
		end
	end
end

procedure NamedInven begin
	if (dude_name == "Max Stone") then begin
		Item := create_object( PID_10MM_AP, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
		Item := create_object( PID_BRASS_KNUCKLES, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
	if (dude_name == "Natalia") then begin
		Item := create_object( PID_THROWING_KNIFE, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 2);
		Item := create_object( PID_LOCKPICKS, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
	if (dude_name == "Albert") then begin
		Item := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
		Item := create_object( PID_MENTATS, 0, 0 );
		add_mult_objs_to_inven(dude_obj, item, 1);
	end
	if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
		if (dude_name == "Hell Razor") or (dude_name == "Angela Deth") or (dude_name == "Thrasher") or (dude_name == "Snake") or (dude_name == "Vargas") or (dude_name == "Snake Varga") or (dude_name == "Snake Vargas") then begin
			Item := create_object( PID_ROPE, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
			Item := create_object( PID_WATER_FLASK, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
			Item := create_object( PID_CROWBAR, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
			Item := create_object( PID_KNIFE, 0, 0 );
			add_mult_objs_to_inven(dude_obj, item, 1);
		end
	end
end

/*******************************************************************
   Set the outcome of the endgame slides.
*******************************************************************/
procedure Endgame_Slides begin
// Start
	if (global_var(GVAR_ENDGAME_MOVIE_MUTANTS) == 0) then
		set_end_Master;

// Necropolis
	if necropolis_invaded then
		set_end_necropolis_invaded;
	else if necropolis_wpump_fixed then
		set_end_necropolis_survived;
	else
		set_end_necropolis_dehydrated;

// Boneyard
	if boneyard_visible_on_map then begin
		if followers_trained then
			set_end_foa_trained;
		else
			set_end_foa_invaded;
	end

// Shady Sands
	if shady_sands_visible_on_map then begin
		if shady_invaded then
			set_end_shady_invaded;
		else if is_tandi_alive and is_aradesh_alive then
			set_end_shady_good;
		else if is_aradesh_alive then
			set_end_shady_tandi_dead;
		else if is_tandi_alive then
			set_end_shady_aradesh_dead;
		else
			set_end_shady_bad;
	end

// Junktown
	if junktown_visible_on_map then begin
		if junktown_invaded or (not(is_killian_alive) and (not(is_gizmo_alive))) then
			set_end_junktown_invaded;
		else if is_killian_alive then
			set_end_junktown_killian;
		else
			set_end_junktown_gizmo;
	end

// Brotherhood of Steel
	if brotherhood_visible_on_map then begin
		if is_rhombus_alive then
			set_end_bos_good;
		else
			set_end_bos_bad;
	end

	// Hub
	if hub_visible_on_map then begin
		if ( (global_var(IS_HAROLD_ALIVE) == 1) and (global_var(DECKER_STATUS) == 1) and (global_var(SLIDE_KIND_TO_HAROLD) == 1) ) then
			set_end_hub_good;
		else
			set_end_hub_bad;
	end

// Raiders
	if raiders_visible_on_map then begin

		if ( (get_raiders_alive <= 3) or ( (not(is_garl_alive)) and (get_raiders_alive <= 8) ) ) then
			set_end_raiders_dead;
		else if (get_raiders_alive < 16) then
			set_end_raiders_hurt;
		else
			set_end_raiders_alive;
	end
	else begin
		set_end_raiders_alive;
	end

// Vault Dweller
	set_end_ending_vd;

	add_timer_event(self_obj, game_ticks(0), EVENT_END_1);
end

