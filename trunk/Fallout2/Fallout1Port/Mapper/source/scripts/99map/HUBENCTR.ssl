//
// CARAVAN ENCOUNTER, ON WAY BACK FROM DESTINATION (ON WAY BACK TO HUB)
//
#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\updatmap.h"

procedure start;
procedure map_enter_p_proc;//    script_action == 15
procedure map_exit_p_proc;//    script_action == 16

procedure Junktown_CC_1;
procedure Junktown_CC_2;
procedure Junktown_CC_3;
procedure Junktown_FGT_1;
procedure Junktown_FGT_2;
procedure Junktown_FGT_3;
procedure Junktown_WM_1;
procedure Junktown_WM_2;
procedure Boneyard_CC_1;
procedure Boneyard_CC_2;
procedure Boneyard_CC_3;
procedure Boneyard_FGT_1;
procedure Boneyard_FGT_2;
procedure Boneyard_FGT_3;
procedure Boneyard_WM_1;
procedure Boneyard_WM_2;
procedure Brotherhood_CC_1;
procedure Brotherhood_CC_2;
procedure Brotherhood_CC_3;
procedure Brotherhood_FGT_1;
procedure Brotherhood_FGT_2;
procedure Brotherhood_FGT_3;
procedure Necrop_CC_1;
procedure Necrop_CC_2;
procedure Necrop_CC_3;
procedure Small_Ghoul;
procedure Medium_Ghoul;
procedure Large_Ghoul;
procedure Huge_Ghoul;
procedure Small_Merc;
procedure Medium_Merc;
procedure Large_Merc;
procedure Huge_Merc;
procedure Small_Mutant;
procedure Medium_Mutant;
procedure Large_Mantis;
procedure Huge_Mantis;
procedure Small_Spawn;
procedure Party_Pack;
procedure Monster_Pack;
procedure Dice_Total;
procedure Cycle;
procedure Place_Caravan;
procedure Place_Stranger;
procedure Mutant_Stuff;
procedure Ghoul_Stuff;
procedure Human_Stuff;

variable Dice_Roll;
variable Critter_Rotation;
variable Total_Rotation;
variable Critter_Tile;
variable Inner_Circle;
variable Outer_Circle;
variable Players_Elevation;
variable Entering_Map;
variable Ghoul_Merc;
variable Mutant_Merc;
variable Human_Merc;

variable party_elevation;
variable dude_start_hex;

procedure Invasion;


procedure start
begin
	if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
		call map_enter_p_proc;
	end
	else begin
		if (script_action == 23) then begin//map_update
			Lighting;
		end
	end
end

procedure map_enter_p_proc
begin
	Lighting;
	Outer_Circle := random(4, 9) + 4;
	Inner_Circle := Outer_Circle - 4;
	if (map_first_run) then begin
		if global_var(DEBUG_MODE_MESSAGES_ON) then begin
			debug_msg(" ");
			debug_msg(" ");
			debug_msg(" ");
			display_msg("Enter Map: CARAVAN ENCOUNTER, HEADING BACK TO THE HUB");
			debug_msg(" ");
			debug_msg(" ");
		end
		if (global_var(CRIMSON_CARAVANS_STATUS) > 1) then begin
			set_global_var(CRIMSON_CARAVANS_STATUS, 1);
		end
		else begin
			if (global_var(WATER_MERCHANTS_STATUS) > 1) then begin
				set_global_var(WATER_MERCHANTS_STATUS, 1);
			end
			else begin
				if (global_var(FARGO_TRADERS_STATUS) > 1) then begin
					set_global_var(FARGO_TRADERS_STATUS, 1);
				end
			end
		end
		set_map_var(0, 0);
		call Place_Caravan;
		if (global_var(CRIMSON_CARAVANS_STATUS) == 1) then begin
			if (cur_map_index == MAP_MNTCRVN4) then begin //  DESERT CARAVAN 4
				if tile_num(dude_obj) == 20683 then begin
					move_to(dude_obj, 18098, elevation(dude_obj));
				end
				if (global_var(LOAD_MAP_INDEX) == 1) then begin
					call Necrop_CC_1;
				end
				else begin
					if (global_var(LOAD_MAP_INDEX) == 2) then begin
						call Necrop_CC_2;
					end
					else begin
						call Necrop_CC_3;
					end
				end
				if tile_num(dude_obj) == 20683 then begin
					move_to(dude_obj, 18098, elevation(dude_obj));
				end
			end
			else begin
				if (global_var(LOAD_MAP_INDEX) == 1) then begin
					call Brotherhood_CC_1;
				end
				else begin
					if (global_var(LOAD_MAP_INDEX) == 2) then begin
						call Brotherhood_CC_2;
					end
					else begin
						call Brotherhood_CC_3;
					end
				end
			end
		end
		else begin
			if (global_var(WATER_MERCHANTS_STATUS) == 1) then begin
				if (cur_map_index == MAP_MNTCRVN4) then begin //  DESERT CARAVAN 4
					if (global_var(LOAD_MAP_INDEX) == 1) then begin
						call Boneyard_WM_1;
					end
					else begin
						call Boneyard_WM_2;
					end
				end
				else begin
					if (global_var(LOAD_MAP_INDEX) == 1) then begin
						call Junktown_WM_1;
					end
					else begin
						call Junktown_WM_2;
					end
				end
			end
			else begin
				if (cur_map_index == MAP_MNTCRVN4) then begin //  DESERT CARAVAN 4
					if (global_var(LOAD_MAP_INDEX) == 1) then begin
						call Boneyard_FGT_1;
					end
					else begin
						if (global_var(LOAD_MAP_INDEX) == 2) then begin
							call Boneyard_FGT_2;
						end
						else begin
							call Boneyard_FGT_3;
						end
					end
				end
				else begin
					if (cur_map_index == MAP_DESERT1) then begin //  MOUNTAIN CARAVAN 4
						if (global_var(LOAD_MAP_INDEX) == 1) then begin
							call Junktown_FGT_1;
						end
						else begin
							if (global_var(LOAD_MAP_INDEX) == 2) then begin
								call Junktown_FGT_2;
							end
							else begin
								call Junktown_FGT_3;
							end
						end
					end
				end
			end
		end
	end
end

procedure map_exit_p_proc
begin
	if (map_var(0) == 0) then begin
		if global_var(CARAVAN_HOW_MANY_BRAHMIN) > 0 then begin
			if (global_var(CRIMSON_CARAVANS_STATUS) == 1) then begin
				set_global_var(CRIMSON_CARAVANS_STATUS, 2);
			end
			else begin
				if (global_var(WATER_MERCHANTS_STATUS) == 1) then begin
					set_global_var(WATER_MERCHANTS_STATUS, 2);
				end
				else begin
					if (global_var(FARGO_TRADERS_STATUS) == 1) then begin
						set_global_var(FARGO_TRADERS_STATUS, 2);
					end
				end
			end
		end
		else begin
			if (global_var(CRIMSON_CARAVANS_STATUS) == 1) then begin
				set_global_var(CRIMSON_CARAVANS_STATUS, 5);
			end
			else begin
				if (global_var(WATER_MERCHANTS_STATUS) == 1) then begin
					set_global_var(WATER_MERCHANTS_STATUS, 5);
				end
				else begin
					if (global_var(FARGO_TRADERS_STATUS) == 1) then begin
						set_global_var(FARGO_TRADERS_STATUS, 5);
					end
				end
			end
		end
	end
	else begin
		if (global_var(CVAN_DRIVER) or global_var(CVAN_GUARD)) and (global_var(CARAVAN_HOW_MANY_BRAHMIN) > 0) then begin
			if (global_var(CRIMSON_CARAVANS_STATUS) == 1) then begin
				set_global_var(CRIMSON_CARAVANS_STATUS, 3);
			end
			else begin
				if (global_var(WATER_MERCHANTS_STATUS) == 1) then begin
					set_global_var(WATER_MERCHANTS_STATUS, 3);
				end
				else begin
					if (global_var(FARGO_TRADERS_STATUS) == 1) then begin
						set_global_var(FARGO_TRADERS_STATUS, 3);
					end
				end
			end
		end
		else begin
			if (global_var(CRIMSON_CARAVANS_STATUS) == 1) then begin
				set_global_var(CRIMSON_CARAVANS_STATUS, 5);
			end
			else begin
				if (global_var(WATER_MERCHANTS_STATUS) == 1) then begin
					set_global_var(WATER_MERCHANTS_STATUS, 5);
				end
				else begin
					if (global_var(FARGO_TRADERS_STATUS) == 1) then begin
						set_global_var(FARGO_TRADERS_STATUS, 5);
					end
				end
			end
		end
	end

end



procedure Junktown_CC_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Mantis;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Merc;
						end
						else begin
							call Small_Spawn;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_CC_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Mutant;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Mantis;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Merc;
						end
						else begin
							call Small_Ghoul;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_CC_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Spawn;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_FGT_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Ghoul;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Medium_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Mantis;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Merc;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_FGT_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Ghoul;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Party_Pack;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Mantis;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Merc;
						end
						else begin
							call Small_Ghoul;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_FGT_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Medium_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Small_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Huge_Mantis;
						end
						else begin
							call Huge_Merc;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_WM_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Medium_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Small_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Large_Merc;
						end
					end
				end
			end
		end
	end
end

procedure Junktown_WM_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Medium_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Large_Mantis;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Merc;
						end
						else begin
							call Huge_Mantis;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_CC_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Spawn;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Huge_Mantis;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Small_Mutant;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_CC_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Medium_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Huge_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Mantis;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Merc;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_CC_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Huge_Mantis;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Medium_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Huge_Merc;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_FGT_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_FGT_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Huge_Mantis;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_FGT_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Mantis;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Large_Merc;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_WM_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Medium_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Small_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Merc;
						end
						else begin
							call Large_Mantis;
						end
					end
				end
			end
		end
	end
end

procedure Boneyard_WM_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Medium_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Small_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Merc;
						end
						else begin
							call Large_Mantis;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_CC_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Spawn;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Party_Pack;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Monster_Pack;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Medium_Ghoul;
						end
						else begin
							call Medium_Mutant;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_CC_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Huge_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Party_Pack;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Spawn;
						end
						else begin
							call Small_Mutant;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_CC_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Huge_Mantis;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Small_Merc;
						end
						else begin
							call Monster_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_FGT_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Large_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Huge_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Mantis;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Medium_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Mantis;
						end
						else begin
							call Small_Mutant;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_FGT_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Mutant;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Merc;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Mantis;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Medium_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Merc;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Huge_Mantis;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Brotherhood_FGT_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Mutant;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Medium_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Large_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Huge_Merc;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Necrop_CC_1
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Ghoul;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Mantis;
	end
	else begin
		call Large_Ghoul;
	end
end

procedure Necrop_CC_2
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Small_Ghoul;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Large_Merc;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Large_Ghoul;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Huge_Ghoul;
						end
						else begin
							call Party_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Necrop_CC_3
begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Ghoul;
	end
	else begin
		if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
			call Medium_Ghoul;
		end
		else begin
			if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
				call Small_Ghoul;
			end
			else begin
				if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
					call Huge_Merc;
				end
				else begin
					if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
						call Huge_Mantis;
					end
					else begin
						if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
							call Large_Ghoul;
						end
						else begin
							call Monster_Pack;
						end
					end
				end
			end
		end
	end
end

procedure Small_Ghoul
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 3);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));
		Ghoul_Merc := create_object_sid(PID_GUARD_5, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Critter_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else begin
			if (Critter_Rotation == 1) then begin
				anim(Ghoul_Merc, 1000, 4);
			end
			else begin
				anim(Ghoul_Merc, 1000, 5);
			end
		end
		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Medium_Ghoul
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(4, 6);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Ghoul_Merc := create_object_sid(PID_GUARD_5, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Ghoul_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Ghoul_Merc, 1000, 5);
				end
				else begin
					anim(Ghoul_Merc, 1000, 3);
				end
			end
		end
		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Large_Ghoul
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(7, 9);
	Outer_Circle := random(6, 12) + 4;
	Inner_Circle := Outer_Circle - 4;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Ghoul_Merc := create_object_sid(PID_GUARD_5, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Ghoul_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Ghoul_Merc, 1000, 5);
				end
				else begin
					anim(Ghoul_Merc, 1000, 3);
				end
			end
		end
		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Huge_Ghoul
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(10, 13);
	Outer_Circle := random(8, 16) + 4;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Ghoul_Merc := create_object_sid(PID_GUARD_5, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Ghoul_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Ghoul_Merc, 1000, 5);
				end
				else begin
					anim(Ghoul_Merc, 1000, 3);
				end
			end
		end
		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Small_Merc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(2, 4);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));
		if (random(0, 1)) then begin
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
			set_map_var(0, map_var(0) + 1);
		end
		else begin
			Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
			set_map_var(0, map_var(0) + 1);
		end
		if (Critter_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else begin
			if (Critter_Rotation == 1) then begin
				anim(Human_Merc, 1000, 4);
			end
			else begin
				anim(Human_Merc, 1000, 5);
			end
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Medium_Merc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty - 1)), (5 + combat_difficulty));
	Outer_Circle := random(5, 10) + 2;
	Inner_Circle := Outer_Circle - 4;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		LVar2 := random(1, 4);
		if (LVar2 == 1) then begin
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
			set_map_var(0, map_var(0) + 1);
		end
		else begin
			if (LVar2 == 2) then begin
				Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
				set_map_var(0, map_var(0) + 1);
			end
			else begin
				if (LVar2 == 3) then begin
					Human_Merc := create_object_sid(PID_MERC_MALE_METAL, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
				else begin
					Human_Merc := create_object_sid(PID_MALE_GUARD_CA, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
			end
		end
		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Human_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Human_Merc, 1000, 5);
				end
				else begin
					anim(Human_Merc, 1000, 3);
				end
			end
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Large_Merc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty * 2)), (7 + (combat_difficulty * 2)));
	Outer_Circle := random(8, 14) + 2;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 3);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		LVar2 := random(1, 4);
		if (LVar2 == 1) then begin
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
			set_map_var(0, map_var(0) + 1);
		end
		else begin
			if (LVar2 == 2) then begin
				Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
				set_map_var(0, map_var(0) + 1);
			end
			else begin
				if (LVar2 == 3) then begin
					Human_Merc := create_object_sid(PID_MERC_MALE_METAL, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
				else begin
					Human_Merc := create_object_sid(PID_MALE_GUARD_CA, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
			end
		end
		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Human_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Human_Merc, 1000, 5);
				end
				else begin
					anim(Human_Merc, 1000, 3);
				end
			end
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Huge_Merc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty * 2)), (7 + (combat_difficulty * 2)));
	Outer_Circle := random(10, 16) + 3;
	Inner_Circle := Outer_Circle - 8;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 3);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		LVar2 := random(1, 4);
		if (LVar2 == 1) then begin
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
			set_map_var(0, map_var(0) + 1);
		end
		else begin
			if (LVar2 == 2) then begin
				Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
				set_map_var(0, map_var(0) + 1);
			end
			else begin
				if (LVar2 == 3) then begin
					Human_Merc := create_object_sid(PID_MERC_MALE_METAL, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
				else begin
					Human_Merc := create_object_sid(PID_MALE_GUARD_CA, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
					set_map_var(0, map_var(0) + 1);
				end
			end
		end
		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Human_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Human_Merc, 1000, 5);
				end
				else begin
					anim(Human_Merc, 1000, 3);
				end
			end
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Small_Mutant
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 2);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));
		Mutant_Merc := create_object_sid(PID_MEAN_SUPER_MUTANT, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Critter_Rotation == 0) then begin
			anim(Mutant_Merc, 1000, 3);
		end
		else begin
			if (Critter_Rotation == 1) then begin
				anim(Mutant_Merc, 1000, 4);
			end
			else begin
				anim(Mutant_Merc, 1000, 5);
			end
		end
		call Mutant_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Medium_Mutant
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	if (combat_difficulty == 2) then begin
		LVar0 := random(3, 5);
	end
	else begin
		LVar0 := random(2, 4);
	end
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Mutant_Merc := create_object_sid(PID_MEAN_SUPER_MUTANT, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(Mutant_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Mutant_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Mutant_Merc, 1000, 5);
				end
				else begin
					anim(Mutant_Merc, 1000, 3);
				end
			end
		end
		call Mutant_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Large_Mantis
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((5 + (combat_difficulty * 2)), (8 + (combat_difficulty * 2)));
	Outer_Circle := random(8, 16) + 2;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		LVar2 := create_object_sid(PID_GREAT_MANTIS, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNMSTR);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(LVar2, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(LVar2, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(LVar2, 1000, 5);
				end
				else begin
					anim(LVar2, 1000, 3);
				end
			end
		end
		LVar1 := LVar1 + 1;
	end
end

procedure Huge_Mantis
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((6 + (combat_difficulty * 3)), (10 + (combat_difficulty * 2)));
	Outer_Circle := random(8, 16) + 2;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		LVar2 := create_object_sid(PID_GREAT_MANTIS, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNMSTR);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(LVar2, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(LVar2, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(LVar2, 1000, 5);
				end
				else begin
					anim(LVar2, 1000, 3);
				end
			end
		end
		LVar1 := LVar1 + 1;
	end
end

procedure Small_Spawn
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random(1, 2);
	while(LVar1 < LVar0) do begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), random(0, 2), random(Inner_Circle, Outer_Circle));
		LVar2 := create_object_sid(PID_DEATHCLAW_SPAWN, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNMSTR);
		set_map_var(0, map_var(0) + 1);
		anim(LVar2, 1000, 3);
		LVar1 := LVar1 + 1;
	end
end

procedure Party_Pack
begin
	call Large_Merc;
	call Medium_Ghoul;
end

procedure Monster_Pack
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	variable LVar3 := 0;
	Outer_Circle := random(4, 9) + 4;
	Inner_Circle := Outer_Circle - 4;
	Critter_Tile := tile_num_in_direction(tile_num(dude_obj), random(0, 2), random(Inner_Circle, Outer_Circle));
	LVar0 := create_object_sid(PID_DEATHCLAW_SPAWN, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNMSTR);
	set_map_var(0, map_var(0) + 1);
	anim(LVar0, 1000, 3);
	if (combat_difficulty == 2) then begin
		LVar3 := random(4, 7);
	end
	else begin
		LVar3 := random(3, (5 + combat_difficulty));
	end
	while(LVar2 < LVar3) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		LVar1 := create_object_sid(PID_GREAT_MANTIS, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNMSTR);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(LVar1, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(LVar1, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(LVar1, 1000, 5);
				end
				else begin
					anim(LVar1, 1000, 3);
				end
			end
		end
		LVar2 := LVar2 + 1;
	end
	LVar2 := 0;
	if (combat_difficulty == 2) then begin
		LVar3 := random(3, 5);
	end
	else begin
		LVar3 := random(2, 4);
	end
	while(LVar2 < LVar3) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Ghoul_Merc := create_object_sid(PID_GUARD_5, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNENMY);
		set_map_var(0, map_var(0) + 1);
		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else begin
			if (Total_Rotation == 1) then begin
				anim(Ghoul_Merc, 1000, 4);
			end
			else begin
				if (Total_Rotation == 2) then begin
					anim(Ghoul_Merc, 1000, 5);
				end
				else begin
					anim(Ghoul_Merc, 1000, 3);
				end
			end
		end
		call Ghoul_Stuff;
		LVar2 := LVar2 + 1;
	end
end

procedure Dice_Total
begin
	Dice_Roll := (random(1, 6) + random(1, 6) + random(1, 6));
end

procedure Cycle
begin
	if (Critter_Rotation > 5) then begin
		Critter_Rotation := Critter_Rotation % 6;
	end
	else begin
		if (Critter_Rotation < 0) then begin
			while(Critter_Rotation < 0) do begin
				Critter_Rotation := Critter_Rotation + 6;
			end
		end
	end
end

procedure Place_Caravan
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	if (global_var(LOAD_MAP_INDEX) == 1) then begin
		if (cur_map_index == MAP_DESERT1) then begin //  MOUNTAIN CARAVAN 4
			override_map_start(85, 95, 0, 1);
		end
		else begin
			override_map_start(83, 103, 0, 1);
		end
		Players_Elevation := 0;
	end
	else begin
		if (global_var(LOAD_MAP_INDEX) == 2) then begin
			if (cur_map_index == MAP_DESERT1) then begin //  MOUNTAIN CARAVAN 4
				override_map_start(85, 95, 1, 1);
			end
			else begin
				override_map_start(83, 103, 1, 1);
			end
			Players_Elevation := 1;
		end
		else begin
			if (cur_map_index == MAP_DESERT1) then begin //  MOUNTAIN CARAVAN 4
				override_map_start(85, 95, 2, 1);
			end
			else begin
				override_map_start(83, 103, 2, 1);
			end
			Players_Elevation := 2;
		end
	end
	if (global_var(CVAN_DRIVER) == 1) then begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), 4, 6);
		LVar0 := create_object_sid(PID_LEATHER_JACKET_MAN, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNTEAM);
		set_team( LVar0, TEAM_PLAYER );
		set_ai( LVar0, AI_BERZERKER );
		anim(LVar0, 1000, 1);
		LVar2 := create_object( PID_SHOTGUN, 0, 0 );
		add_obj_to_inven(LVar0, LVar2);
		wield_obj_critter(LVar0, LVar2);
	end
	if (global_var(CVAN_GUARD) == 2) then begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), 5, 4);
		LVar1 := create_object_sid(PID_MERCHENARY, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNTEAM);
		set_team( LVar1, TEAM_PLAYER );
		set_ai( LVar1, AI_BERZERKER );
		anim(LVar1, 1000, 1);
		LVar2 := create_object( PID_DESERT_EAGLE, 0, 0 );
		add_obj_to_inven(LVar1, LVar2);
		wield_obj_critter(LVar1, LVar2);
	end
	if (global_var(CVAN_GUARD) >= 1) then begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), 3, 4);
		LVar1 := create_object_sid(PID_MERCHENARY, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNTEAM);
		set_team( LVar1, TEAM_PLAYER );
		set_ai( LVar1, AI_BERZERKER );
		anim(LVar1, 1000, 1);
		LVar2 := create_object( PID_DESERT_EAGLE, 0, 0 );
		add_obj_to_inven(LVar1, LVar2);
		wield_obj_critter(LVar1, LVar2);
	end
	if (dude_perk( PERK_mysterious_stranger )) then begin
		call Place_Stranger;
	end
end

procedure Place_Stranger
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	Critter_Tile := tile_num_in_direction(tile_num(dude_obj), 5, 2);
	LVar0 := create_object_sid(PID_MYSTERIOUS_STRANGER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNTEAM);
	set_team( LVar0, TEAM_PLAYER );
	set_ai( LVar0, AI_STRANGER );
	LVar1 := create_object( PID_ASSAULT_RIFLE, 0, 0 );
	add_obj_to_inven(LVar0, LVar1);
	wield_obj_critter(LVar0, LVar1);
	LVar1 := create_object( PID_5MM_AP, 0, 0 );
	if (dude_perk( PERK_scrounger )) then begin
		add_mult_objs_to_inven(LVar0, LVar1, 10);
	end
	else begin
		add_mult_objs_to_inven(LVar0, LVar1, 5);
	end
end

procedure Mutant_Stuff
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 5);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_FLAMER, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
		wield_obj_critter(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 3);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Mutant_Merc, LVar1, random(1, 3));
	end
	LVar0 := random(1, 2);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_SPIKED_KNUCKLES, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
		wield_obj_critter(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 5);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_SUPER_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Mutant_Merc, LVar1, random(1, 2));
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_MOTION_SENSOR, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_GEIGER_COUNTER, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
	end
end

procedure Ghoul_Stuff
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar2 := create_object( PID_BOTTLE_CAPS, 0, 0 );
	add_mult_objs_to_inven(Ghoul_Merc, LVar2, random(1, 10) * (dude_fortune_finder * global_var(FORTUNE_FINDER_HOW_MUCH)));
	LVar0 := random(1, 4);
	if ((LVar0 == 1) or (LVar0 == 2)) then begin
		LVar1 := create_object( PID_KNIFE, 0, 0 );
		add_obj_to_inven(Ghoul_Merc, LVar1);
		wield_obj_critter(Ghoul_Merc, LVar1);
	end
	else begin
		if (LVar0 == 3) then begin
			LVar1 := create_object( PID_SPEAR, 0, 0 );
			add_obj_to_inven(Ghoul_Merc, LVar1);
			wield_obj_critter(Ghoul_Merc, LVar1);
		end
	end
	LVar0 := random(1, 4);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_MUTATED_FRUIT, 0, 0 );
		add_mult_objs_to_inven(Ghoul_Merc, LVar1, random(1, 2));
	end
end

procedure Human_Stuff
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar2 := create_object( PID_BOTTLE_CAPS, 0, 0 );
	add_mult_objs_to_inven(Human_Merc, LVar2, random(4, 20) * (dude_fortune_finder * global_var(FORTUNE_FINDER_HOW_MUCH)));
	LVar0 := random(1, 10);
	if (LVar0 <= 3) then begin
		LVar1 := create_object( PID_SPEAR, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
	end
	else begin
		if ((LVar0 > 3) and (LVar0 <= 5)) then begin
			LVar1 := create_object( PID_COMBAT_KNIFE, 0, 0 );
			add_obj_to_inven(Human_Merc, LVar1);
			wield_obj_critter(Human_Merc, LVar1);
		end
		else begin
			if ((LVar0 > 5) and (LVar0 <= 7)) then begin
				LVar1 := create_object( PID_10MM_PISTOL, 0, 0 );
				add_obj_to_inven(Human_Merc, LVar1);
				wield_obj_critter(Human_Merc, LVar1);
				LVar1 := create_object( PID_10MM_AP, 0, 0 );
				if (dude_perk( PERK_scrounger )) then begin
					add_mult_objs_to_inven(Human_Merc, LVar1, random(2, 4));
				end
				else begin
					add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
				end
			end
			else begin
				if ((LVar0 > 7) and (LVar0 <= 9)) then begin
					LVar1 := create_object( PID_DESERT_EAGLE, 0, 0 );
					add_obj_to_inven(Human_Merc, LVar1);
					wield_obj_critter(Human_Merc, LVar1);
					LVar1 := create_object( PID_44_FMJ_MAGNUM, 0, 0 );
					if (dude_perk( PERK_scrounger )) then begin
						add_mult_objs_to_inven(Human_Merc, LVar1, random(2, 4));
					end
					else begin
						add_mult_objs_to_inven(Human_Merc, LVar1, random(0, 2));
					end
				end
				else begin
					LVar1 := create_object( PID_HUNTING_RIFLE, 0, 0 );
					add_obj_to_inven(Human_Merc, LVar1);
					wield_obj_critter(Human_Merc, LVar1);
					LVar1 := create_object( PID_223_FMJ, 0, 0 );
					if (dude_perk( PERK_scrounger )) then begin
						add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
					end
					else begin
						add_mult_objs_to_inven(Human_Merc, LVar1, random(0, 1));
					end
				end
			end
		end
	end
	LVar0 := random(1, 3);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_FIRST_AID_KIT, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
	end
end

procedure Invasion begin
	//check_invasion
end





