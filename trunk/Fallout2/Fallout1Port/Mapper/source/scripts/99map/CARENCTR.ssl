/*

	Map script:
		CARAVAN ENCOUNTER, ON WAY TO DESTINATION

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\updatmap.h"
#include "..\headers\caravan.h"
#include "..\headers\mapenc.h"

#define NAME                    SCRIPT_CARENCTR

#include "..\headers\command.h"

#define START_HEX                (22097)
#define START_HEX_MOUNTAIN       (20496)

#define HUB_ENT_HEX              (9907)
#define JUNKTOWN_ENT_HEX         (27707)
#define BONEYARD_ENT_HEX         (10700)
#define NECROPOLIS_ENT_HEX       (24086)
#define BOS_ENT_HEX              (21302)

// Basic Scripts information
procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure map_exit_p_proc;
procedure CreateSceneryClutter;

// Caravans
procedure Hub_Caravan;
procedure HUB_NEC_Encounters;
procedure HUB_JNK_Encounters;
procedure HUB_BOS_Encounters;
procedure HUB_ADY_Encounters;

procedure Default_Caravan;

procedure Build_Caravan_Team;
procedure Build_Grey_Caravan;
procedure Add_Mysterious_Stranger;

// Encounters
procedure Junktown_CC_1;
procedure Junktown_CC_2;
procedure Junktown_CC_3;
procedure Junktown_FGT_1;
procedure Junktown_FGT_2;
procedure Junktown_FGT_3;
procedure Junktown_WM_1;
procedure Junktown_WM_2;
procedure Boneyard_CC_1;
procedure Boneyard_CC_2;
procedure Boneyard_CC_3;
procedure Boneyard_FGT_1;
procedure Boneyard_FGT_2;
procedure Boneyard_FGT_3;
procedure Boneyard_WM_1;
procedure Boneyard_WM_2;
procedure Brotherhood_CC_1;
procedure Brotherhood_CC_2;
procedure Brotherhood_CC_3;
procedure Brotherhood_FGT_1;
procedure Brotherhood_FGT_2;
procedure Brotherhood_FGT_3;
procedure Necrop_CC_1;
procedure Necrop_CC_2;
procedure Necrop_CC_3;
procedure Small_Ghoul;
procedure Medium_Ghoul;
procedure Large_Ghoul;
procedure Huge_Ghoul;
procedure Small_Merc;
procedure Medium_Merc;
procedure Large_Merc;
procedure Huge_Merc;
procedure Small_Mutant;
procedure Medium_Mutant;
procedure Large_Mantis;
procedure Huge_Mantis;
procedure Small_Spawn;
procedure Party_Pack;
procedure Monster_Pack;
procedure Dice_Total;
procedure Cycle;
procedure Ghoul_Stuff;
procedure Human_Stuff;
procedure Mutant_Stuff;

variable Encounter_Counter;
variable Encounter_Rotation;
variable Critter;
variable Combat1:=0;
variable Combat2:=0;

variable Dice_Roll;
variable Critter_Rotation;
variable Total_Rotation;
variable Critter_Tile;
variable Inner_Circle;
variable Outer_Circle;
variable Players_Elevation;
variable Entering_Map;
variable Ghoul_Merc;
variable Mutant_Merc;
variable Human_Merc;

procedure start begin
end

procedure map_enter_p_proc begin
   variable Encounter_Number;

   if (map_first_run) then begin
		Combat1:=0;
		Combat2:=0;
		set_map_var(MVAR_Hostile_Total,0);

		call Hub_Caravan;

		// Create clutter after the caravan wagons, to avoid clipping:
		if not(map_is_mountain_caravan_escort) and (cur_map_index != MAP_DESCRVN2) then
		   call CreateSceneryClutter;

		Encounter_Number:=total_encounters - encounters_left;
		debug("Total Encounters == "+total_encounters+". Encounters Left == "+encounters_left+". On Encounter "+Encounter_Number);
		made_encounter;

		if ((Combat1 != 0) and (Combat2 != 0)) then begin
			attack_setup(Combat1,Combat2);
			debug("Having "+Combat1+" fighting "+Combat2+".");
		end
   end

   Lighting;

   set_global_var(GVAR_LOAD_MAP_INDEX,0);
end

procedure map_update_p_proc begin
   variable dude_start_hex;
   variable dude_facing;

   Lighting;

   if (map_var(MVAR_Hostile_Total) <= 0) then begin
       if (encounters_left <= 0 or caravan_carts_left == 0) then begin
           debug("Caravan_End == "+caravan_end);

           // Fo1:
           if (caravan_end == CARAVAN_HUB) then begin
               set_exit_grids(dude_elevation,MAP_HUBENT,0,HUB_ENT_HEX,0);
           end
           if (caravan_end == CARAVAN_JUNKTOWN) then begin
               set_exit_grids(dude_elevation,MAP_JUNKENT,0,JUNKTOWN_ENT_HEX,0);
           end
           if (caravan_end == CARAVAN_BONEYARD) then begin
               set_exit_grids(dude_elevation,MAP_LAADYTUM,0,BONEYARD_ENT_HEX,0);
           end
           if (caravan_end == CARAVAN_NECROPOLIS) then begin
               set_exit_grids(dude_elevation,MAP_HOTEL,1,NECROPOLIS_ENT_HEX,0);
           end
           if (caravan_end == CARAVAN_BOS) then begin
               set_exit_grids(dude_elevation,MAP_BROHDENT,0,BOS_ENT_HEX,0);
           end

           if (global_var(GVAR_CRIMSON_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
               set_global_var(GVAR_CRIMSON_CARAVAN,HUB_CARAVAN_AVERAGE_SUCCESS);
           end
           if (global_var(GVAR_FARGO_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
               set_global_var(GVAR_FARGO_CARAVAN,HUB_CARAVAN_AVERAGE_SUCCESS);
           end
           if (global_var(GVAR_WATER_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
               set_global_var(GVAR_WATER_CARAVAN,HUB_CARAVAN_AVERAGE_SUCCESS);
           end
       end
       else begin
           dude_facing:=random(0,5);
           dude_start_hex:=tile_num_in_direction(START_HEX,dude_facing,random(3,8));
           set_exit_grids(dude_elevation,MAP_DESCRVN1,0,dude_start_hex,dude_facing);
       end

       // This is needed here, otherwise every following encounter won't spawn:
       if (global_var(GVAR_CRIMSON_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
           set_global_var(GVAR_CRIMSON_CARAVAN,HUB_CARAVAN_ON_CARAVAN);
       end
       if (global_var(GVAR_FARGO_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
           set_global_var(GVAR_FARGO_CARAVAN,HUB_CARAVAN_ON_CARAVAN);
		 end
       if (global_var(GVAR_WATER_CARAVAN) == HUB_CARAVAN_ABANDONED) then begin
           set_global_var(GVAR_WATER_CARAVAN,HUB_CARAVAN_ON_CARAVAN);
			end
   end
   else begin
		// In Fo2, leaving the caravan encounter would move the player to the worldmap.
		// In Fo1 we still arrive at the target location, but the caravan job failed!
		// We'll keep this for now, but it will be changed in the future. Big TODO!
		if (caravan_end == CARAVAN_HUB) then begin
		   set_exit_grids(dude_elevation,MAP_HUBENT,0,HUB_ENT_HEX,0);
		end
		if (caravan_end == CARAVAN_JUNKTOWN) then begin
		   set_exit_grids(dude_elevation,MAP_JUNKENT,0,JUNKTOWN_ENT_HEX,0);
		end
		if (caravan_end == CARAVAN_BONEYARD) then begin
		   set_exit_grids(dude_elevation,MAP_LAADYTUM,0,BONEYARD_ENT_HEX,0);
		end
		if (caravan_end == CARAVAN_NECROPOLIS) then begin
		   set_exit_grids(dude_elevation,MAP_HOTEL,1,NECROPOLIS_ENT_HEX,0);
		end
		if (caravan_end == CARAVAN_BOS) then begin
		   set_exit_grids(dude_elevation,MAP_BROHDENT,0,BOS_ENT_HEX,0);
		end

		if (global_var(CRIMSON_CARAVANS_STATUS) > 0) then
			set_global_var(CRIMSON_CARAVANS_STATUS, 5);
		if (global_var(FARGO_TRADERS_STATUS) > 0) then
			set_global_var(FARGO_TRADERS_STATUS, 5);
		if (global_var(WATER_MERCHANTS_STATUS) > 0) then
			set_global_var(WATER_MERCHANTS_STATUS, 5);

		// Fo2:
		//set_exit_grids(0,-2,0,20100,0);                          // Exit grids on elevation 0 goto Worldmap
		//mark_world_subtile_visited(worldmap_xpos, worldmap_ypos, 1);
   end
end

procedure map_exit_p_proc begin
	// Still hostiles left on map_exit? Player has abandoned the caravan!
   if (map_var(MVAR_Hostile_Total) > 0) then begin
   	rm_caravan_masters(caravan_masters_left);
		rm_caravan_drivers(caravan_drivers_left);
		rm_caravan_guards(caravan_guards_left);
		rm_caravan_brahmin(caravan_brahmin_left);
		rm_caravan_carts(caravan_carts_left);
	end

	if (global_var(CRIMSON_CARAVANS_STATUS) > 0) then begin
		if (caravan_carts_left > 0) then
			set_global_var(CRIMSON_CARAVANS_STATUS, 2);
		else
			set_global_var(CRIMSON_CARAVANS_STATUS, 5);
	end
	if (global_var(FARGO_TRADERS_STATUS) > 0) then begin
		if (caravan_carts_left > 0) then
			set_global_var(FARGO_TRADERS_STATUS, 2);
		else
			set_global_var(FARGO_TRADERS_STATUS, 5);
	end
	if (global_var(WATER_MERCHANTS_STATUS) > 0) then begin
		if (caravan_carts_left > 0) then
			set_global_var(WATER_MERCHANTS_STATUS, 2);
		else
			set_global_var(WATER_MERCHANTS_STATUS, 5);
	end
end

procedure Hub_Caravan begin
	variable Encounter_Number;
	call Build_Caravan_Team;

	debug("determine encounter table! caravan end: " + caravan_end);
	// We take the encounter table from target location,
	// but once we are at the target, we use start location to
	// determine the encounter table (traveling the way back).
	if (caravan_end == CARAVAN_NECROPOLIS or caravan_start == CARAVAN_NECROPOLIS) then
		call HUB_NEC_Encounters;
	else if (caravan_end == CARAVAN_JUNKTOWN or caravan_start == CARAVAN_JUNKTOWN) then
		call HUB_JNK_Encounters;
	else if (caravan_end == CARAVAN_BOS or caravan_start == CARAVAN_BOS) then
		call HUB_BOS_Encounters;
	else if (caravan_end == CARAVAN_BONEYARD or caravan_start == CARAVAN_BONEYARD) then
		call HUB_ADY_Encounters;
	else
		debug("BUG!!! NO ENCOUNTER TABLE!!!");

	if (map_var(MVAR_Hostile_Total) > 0) then begin
		set_global_var(GVAR_CRIMSON_CARAVAN,HUB_CARAVAN_ABANDONED);
	end
end

procedure Default_Caravan begin
   variable Encounter_Number;
   call Build_Caravan_Team;
   debug("default caravan. BUG!");
end

procedure Build_Caravan_Team begin
   variable dude_start_hex;
   variable dude_facing;
   variable Master_Counter:=0;
   variable Caravan_Counter:=0;
   variable Brahmin_Counter:=0;
   variable Driver_Counter:=0;
   variable Guard_Counter:=0;
   variable Critter;
   variable Critter_Tile;
   variable Brahmin_Tile;
   variable Driver_Tile;
   variable Critter_Rotation;
   variable Brahmin_Rotation;
   variable Driver_Rotation;
   variable item;
   variable Weapon_Roll;
   variable val;
   variable wagon_cart:=0;

   debug("Build caravan team!");

   // Place the Player
   dude_facing:=random(0,5);
   if map_is_mountain_caravan_escort then
   	dude_start_hex:=tile_num_in_direction(START_HEX_MOUNTAIN,dude_facing,random(2,6));
   else
   	dude_start_hex:=tile_num_in_direction(START_HEX,dude_facing,random(3,8));

   override_map_start_hex(dude_start_hex,0,random(0,5));
   anim(dude_obj,ANIMATE_ROTATION,dude_facing);

   call Add_Mysterious_Stranger;

   debug("start caravan_total_brahmin: " + caravan_total_brahmin);

   // Place the Caravan Master
   while (Master_Counter < caravan_masters_left) do begin
   	debug("create caravan master!");
		Master_Counter+=1;

		// Crimson Caravan master:
		//Critter:=create_object_sid(PID_LEATHER_JACKET_MAN,0,dude_elevation,SCRIPT_CRVNDRVR);
		if caravan_style_crimson then begin
			Critter:=create_object_sid(PID_MERCENARY_HMLTHR,0,dude_elevation,SCRIPT_CRVNDRVR);
			add_obj_to_inven(Critter, create_object(PID_SHOTGUN,0,0));
			give_pid_qty(Critter, PID_SHOTGUN_SHELLS, 1)
		end
		// Far-Go Traders master:
		else if caravan_style_fargo then begin
			Critter:=create_object_sid(PID_MERCENARY_NMLTHR,0,dude_elevation,SCRIPT_CRVNDRVR);
			add_obj_to_inven(Critter, create_object(PID_SHOTGUN,0,0));
			give_pid_qty(Critter, PID_SHOTGUN_SHELLS, 1)
		end
		// Water Merchants master:
		else if caravan_style_water then begin
			Critter:=create_object_sid(PID_MERC_MALE_LEATHER,0,dude_elevation,SCRIPT_CRVNDRVR);
			add_obj_to_inven(Critter, create_object(PID_SHOTGUN,0,0));
			give_pid_qty(Critter, PID_SHOTGUN_SHELLS, 1)
		end

       val := set_team( Critter, TEAM_PLAYER );
       Critter_Rotation:=(dude_facing + 3) % 6;
       Critter_Tile:=tile_num_in_direction(dude_start_hex,Critter_Rotation,random(5,7));
       critter_attempt_placement(Critter,Critter_Tile,0);
       give_money(Critter,random(10,30));
       anim(Critter,ANIMATE_ROTATION,rotation_to_tile(tile_num(Critter),tile_num(dude_obj)));
   end

   // Place the Caravan, Driver and Brahmin
   while (too_many_carts) do begin
       rm_caravan_carts(1);
   end

	// Spawn caravan car with driver:
	while (Caravan_Counter < caravan_carts_left) do begin
		debug("create caravan wagon!");
		Caravan_Counter+=1;

		if map_is_mountain_caravan_escort then
			Critter_Tile:=tile_num_in_direction(Critter_Tile,Critter_Rotation,6);
		else
			Critter_Tile:=tile_num_in_direction(Critter_Tile,Critter_Rotation,8);

		// Always create the red cart first:
		if (wagon_cart == 0) then begin
			wagon_cart := 1;
			Create_EW_Red_Caravan(Critter_Tile,0)
		end
		else begin
			Create_EW_Grey_Caravan(Critter_Tile,0)
		end

      Brahmin_Tile:=tile_num_in_direction(Critter_Tile,1,2);
      Critter:=create_object_sid(PID_BRAHMIN,0,0,SCRIPT_CARCOW); //SCRIPT_ECCRTBRA);
      critter_attempt_placement(Critter,Brahmin_Tile,0);
      val := set_team( Critter, TEAM_PLAYER );
      anim(Critter,ANIMATE_ROTATION,1);
      Brahmin_Counter+=1;

		// Fo1 doesn't use 2 brahmins per cart
		/*if (Brahmin_Counter < caravan_brahmin_left) then begin
			Brahmin_Tile:=tile_num_in_direction(Critter_Tile,2,2);
			Critter:=create_object_sid(PID_BRAHMIN,0,0,SCRIPT_CARCOW); //SCRIPT_ECCRTBRA);
			critter_attempt_placement(Critter,Brahmin_Tile,0);
			val := set_team( Critter, TEAM_PLAYER );
			anim(Critter,ANIMATE_ROTATION,1);
			Brahmin_Counter+=1;
		end*/

      if (Driver_Counter < caravan_drivers_left) then begin
      	debug("create caravan driver!");
         Driver_Counter+=1;

         if caravan_style_crimson then begin // Crimson Caravan guard
				Critter:=create_object_sid(PID_MERCHENARY,0,0,SCRIPT_CRVNDRVR);
         end
         else if caravan_style_fargo then begin // Far Go Traders driver
				Critter:=create_object_sid(PID_MERCHENARY,0,0,SCRIPT_CRVNDRVR);
         end
         else if caravan_style_water then begin // Water Merchants driver
				Critter:=create_object_sid(PID_MERCHENARY,0,0,SCRIPT_CRVNDRVR);
         end

         Driver_Tile:=tile_num_in_direction(Critter_Tile,1,3);
         critter_attempt_placement(Critter,Driver_Tile,0);
         val := set_team( Critter, TEAM_PLAYER );
         give_money(Critter,random(5,20));
         anim(Critter,ANIMATE_ROTATION,1);
      end
   end

	// Spawn the remaining brahmins:
   Brahmin_Rotation:=(Critter_Rotation+1) % 6;
   Brahmin_Tile:=tile_num_in_direction(dude_start_hex,Brahmin_Rotation,random(7,10));

   while (Brahmin_Counter < caravan_brahmin_left) do begin
       Brahmin_Counter+=1;

       Brahmin_Tile:=tile_num_in_direction(Brahmin_Tile,random(0,5),random(2,5));
       Critter:=create_object_sid(PID_BRAHMIN,0,0,SCRIPT_CARCOW); //SCRIPT_ECCRTBRA);
       critter_attempt_placement(Critter,Brahmin_Tile,0);
       val := set_team( Critter, TEAM_PLAYER );
       anim(Critter,ANIMATE_ROTATION,random(0,5));
   end

   // Place the Caravan Drivers
   Driver_Rotation:=(Critter_Rotation+1) % 6;
   Driver_Tile:=tile_num_in_direction(dude_start_hex,Driver_Rotation,random(7,10));

   while (Driver_Counter < caravan_drivers_left) do begin
       Driver_Counter+=1;

       if caravan_style_crimson then begin // Crimson Caravan guard
			Critter:=create_object_sid(PID_LEATHER_JACKET_MAN,0,0,SCRIPT_CRVNDRVR);
       end
       else if caravan_style_fargo then begin // Far Go Traders driver
			Critter:=create_object_sid(PID_LEATHER_JACKET_MAN,0,0,SCRIPT_CRVNDRVR);
       end
       else if caravan_style_water then begin // Water Merchants driver
			Critter:=create_object_sid(PID_LEATHER_JACKET_MAN,0,0,SCRIPT_CRVNDRVR);
       end

       Driver_Tile:=tile_num_in_direction(Driver_Tile,1,3);
       critter_attempt_placement(Critter,Driver_Tile,0);
       val := set_team( Critter, TEAM_PLAYER );
       give_money(Critter,random(5,20));
       anim(Critter,ANIMATE_ROTATION,random(0,5));
   end

   // Place the Caravan Guards
   Critter_Rotation-=1;
   FixRotationArc(Critter_Rotation);
   Critter_Tile:=tile_num_in_direction(dude_start_hex,Critter_Rotation,random(7,10));

   while (Guard_Counter < caravan_guards_left) do begin
   	debug("create caravan guard!");
		Guard_Counter+=1;

		if caravan_style_crimson then begin // Crimson Caravan guard
			Critter:=create_object_sid(PID_MERCHENARY,0,0,SCRIPT_CRVNTEAM);
			item:=create_object(PID_DESERT_EAGLE,0,0);
		end
		else if caravan_style_fargo then begin // Far Go Traders guard
			Critter:=create_object_sid(PID_MERCENARY_HMLTHR,0,0,SCRIPT_CRVNTEAM);
			item:=create_object(PID_DESERT_EAGLE,0,0);
		end
		else if caravan_style_water then begin // Water Merchants guard
			Critter:=create_object_sid(PID_MERC_MALE_METAL,0,0,SCRIPT_CRVNTEAM);
			item:=create_object(PID_DESERT_EAGLE,0,0);
		end

		Critter_Tile:=tile_num_in_direction(Critter_Tile,random(0,5),random(2,4));
		critter_attempt_placement(Critter,Critter_Tile,0);
		give_money(Critter,random(10,20));
		val := set_team( Critter, TEAM_PLAYER );
		anim(Critter,ANIMATE_ROTATION,dude_cur_rot);
		add_obj_to_inven(Critter,item);
		wield_obj_critter(Critter,item);

		if (random(0,99) < 50) then begin
			item:=create_object(PID_STIMPAK,0,0);
			add_obj_to_inven(Critter,item);
		end
   end

   debug("caravan_brahmin_left: " + caravan_brahmin_left);
end

// TODO: Fo2 Myst stranger!
procedure Add_Mysterious_Stranger begin
variable LVar0 := 0;
variable LVar1 := 0;
	debug("Addy mysterious stranger!");

	//if ((map_first_run) and (global_var(MYST_STRANGER_DEAD) == 0) and (Die_Roll < Stranger_Chance) and ((has_trait(TRAIT_PERK,dude_obj,PERK_mysterious_stranger)))) then begin
	if ((map_first_run) and (global_var(MYST_STRANGER_DEAD) == 0) and ((dude_perk( PERK_mysterious_stranger )))) then begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), 5, 2);
		LVar0 := create_object_sid(PID_MYSTERIOUS_STRANGER, Critter_Tile, elevation(dude_obj), SCRIPT_CRVNTEAM);
		set_team( LVar0, TEAM_PLAYER );
		set_ai( LVar0, AI_STRANGER );
		LVar1 := create_object( PID_ASSAULT_RIFLE, 0, 0 );
		add_obj_to_inven(LVar0, LVar1);
		wield_obj_critter(LVar0, LVar1);
		LVar1 := create_object( PID_5MM_AP, 0, 0 );
		if (dude_perk( PERK_scrounger )) then begin
			add_mult_objs_to_inven(LVar0, LVar1, 10);
		end
		else begin
			add_mult_objs_to_inven(LVar0, LVar1, 5);
		end
	end

// FO2:
/*   variable Critter;
   variable Critter_Tile;
   variable Die_Roll;
   variable Stranger_Chance;
   variable val;

   Die_Roll:=random(0,99);
   Stranger_Chance:=30 + (2 * dude_luck);

   if ((map_first_run) and (global_var(MYST_STRANGER_DEAD) == 0) and (Die_Roll < Stranger_Chance) and ((dude_perk( PERK_mysterious_stranger )))) then begin
       if (not(get_stranger_flag(STRANGER_GENDER))) then begin
           set_stranger_flag(STRANGER_GENDER);
           if (random(0,99) < 50) then
               set_stranger_flag(STRANGER_FEMALE);
       end
       if (get_stranger_flag(STRANGER_FEMALE)) then
           Critter:=create_object_sid(PID_MYSTERIOUS_STRANGER_FEMALE,0,0,SCRIPT_ECMSTSTR);
       else
           Critter:=create_object_sid(PID_MYSTERIOUS_STRANGER_MALE,0,0,SCRIPT_ECMSTSTR);
       Critter_Tile:=tile_num_in_direction(tile_num(dude_obj),random(0,5),random(5,10));
       critter_attempt_placement(Critter,Critter_Tile,elevation(dude_obj));
       val := set_team( Critter, TEAM_PLAYER );
//       critter_add_trait(Critter,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_PLAYER);
       give_money(Critter,random(30,60));
       anim(Critter,ANIMATE_ROTATION,dude_cur_rot);
   end*/
end

// Encounter Determination Area
// Hub --> Junktown - 7 Days
procedure HUB_JNK_Encounters begin
variable Encounter_Number;
variable Encounter_Rnd;

   Encounter_Number:=total_encounters - encounters_left;
   debug("reduce encounter!");

   if (total_encounters == 1) then begin
       set_caravan_pos(HUB_JNK_1_1_x,HUB_JNK_1_1_y);
       set_exit_grids(0,-2,0,20100,0);                          // Exit grids on elevation 0 goto Worldmap
       game_time_advance(7*ONE_GAME_DAY);
   end
   else if (total_encounters == 2) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_JNK_2_1_x,HUB_JNK_2_1_y+25);       //added +25 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(3*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_JNK_2_2_x,HUB_JNK_2_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(4*ONE_GAME_DAY);
       end
   end
   else if (total_encounters == 3) then begin
      if (Encounter_Number == 0) then begin                    // this is the first encounter
         set_caravan_pos(HUB_JNK_3_1_x,HUB_JNK_3_1_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(2*ONE_GAME_DAY);
      end
      else if (Encounter_Number == 1) then begin               // this is the second encounter
         set_caravan_pos(HUB_JNK_3_2_x,HUB_JNK_3_2_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(3*ONE_GAME_DAY);
      end
      else if (Encounter_Number == 2) then begin               // this is the third encounter
         set_caravan_pos(HUB_JNK_3_3_x,HUB_JNK_3_3_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(2*ONE_GAME_DAY);
      end
   end
   else if (total_encounters == 4) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_JNK_4_1_x,HUB_JNK_4_1_y-50);       //added -50 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(1*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_JNK_4_2_x,HUB_JNK_4_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 2) then begin               // this is the third encounter
           set_caravan_pos(HUB_JNK_4_3_x,HUB_JNK_4_3_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 3) then begin               // this is the forth encounter
           set_caravan_pos(HUB_JNK_4_4_x,HUB_JNK_4_4_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
       end
   end
   // TODO: Uncomment check_area. Needs new worldmap defines for Fo1.
   // For now we're simply using any of the Fo1 vanilla caravan encounters!
	Encounter_Rnd := random(0, 2);

	// Crimson Caravan:
	if (global_var(CRIMSON_CARAVANS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Junktown_CC_1;
		end
		else if (global_var(LOAD_MAP_INDEX) == 2) then begin
			call Junktown_CC_2;
		end
		else begin
			call Junktown_CC_3;
		end
	end

	// Far-Go Trader:
	else if (global_var(FARGO_TRADERS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Junktown_FGT_1;
		end
		else begin
			if (global_var(LOAD_MAP_INDEX) == 2) then begin
				call Junktown_FGT_2;
			end
			else begin
				call Junktown_FGT_3;
			end
		end
	end

	// Water Merchants:
	else if (global_var(WATER_MERCHANTS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Junktown_WM_1;
		end
		else begin
			call Junktown_WM_2;
		end
	end
end

// Encounter Determination Area
// Hub --> Boneyard - 2 Days
procedure HUB_ADY_Encounters begin
variable Encounter_Number;
variable Encounter_Rnd;

   Encounter_Number:=total_encounters - encounters_left;
   debug("reduce encounter!");

   if (total_encounters == 1) then begin
       set_caravan_pos(HUB_ADY_1_1_x,HUB_ADY_1_1_y);
       set_exit_grids(0,-2,0,20100,0);                          // Exit grids on elevation 0 goto Worldmap
       game_time_advance(2*ONE_GAME_DAY);
       //check_area;
   end
   else if (total_encounters == 2) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_ADY_2_1_x,HUB_ADY_2_1_y+25);       //added +25 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(1*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_ADY_2_2_x,HUB_ADY_2_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(1*ONE_GAME_DAY);
           //check_area;
       end
   end
   else if (total_encounters == 3) then begin
      if (Encounter_Number == 0) then begin                    // this is the first encounter
         set_caravan_pos(HUB_ADY_3_1_x,HUB_ADY_3_1_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(0.5*ONE_GAME_DAY);
         //check_area;
      end
      else if (Encounter_Number == 1) then begin               // this is the second encounter
         set_caravan_pos(HUB_ADY_3_2_x,HUB_ADY_3_2_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(0.5*ONE_GAME_DAY);
         //check_area;
      end
      else if (Encounter_Number == 2) then begin               // this is the third encounter
         set_caravan_pos(HUB_ADY_3_3_x,HUB_ADY_3_3_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(1*ONE_GAME_DAY);
         //check_area;
      end
   end
   else if (total_encounters == 4) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_ADY_4_1_x,HUB_ADY_4_1_y-50);       //added -50 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(0.5*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_ADY_4_2_x,HUB_ADY_4_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(0.5*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 2) then begin               // this is the third encounter
           set_caravan_pos(HUB_ADY_4_3_x,HUB_ADY_4_3_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(0.5*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 3) then begin               // this is the forth encounter
           set_caravan_pos(HUB_ADY_4_4_x,HUB_ADY_4_4_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(0.5*ONE_GAME_DAY);
           //check_area;
       end
   end
   // TODO: Uncomment check_area. Needs new worldmap defines for Fo1.
   // For now we're simply using any of the Fo1 vanilla caravan encounters!
	Encounter_Rnd := random(0, 2);

	// Crimson Caravan:
	if (global_var(CRIMSON_CARAVANS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Boneyard_CC_1;
		end
		else if (global_var(LOAD_MAP_INDEX) == 2) then begin
			call Boneyard_CC_2;
		end
		else begin
			call Boneyard_CC_3;
		end
	end
	// Far-Go Trader:
	else if (global_var(FARGO_TRADERS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Boneyard_FGT_1;
		end
		else begin
			if (global_var(LOAD_MAP_INDEX) == 2) then begin
				call Boneyard_FGT_2;
			end
			else begin
				call Boneyard_FGT_3;
			end
		end
	end
	// Water Merchants:
	else if (global_var(WATER_MERCHANTS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Boneyard_WM_1;
		end
		else begin
			call Boneyard_WM_2;
		end
	end
end

// Encounter Determination Area
// Hub --> Brotherhood - 15 Days
procedure HUB_BOS_Encounters begin
variable Encounter_Number;
variable Encounter_Rnd;

   Encounter_Number:=total_encounters - encounters_left;
   debug("reduce encounter!");

   if (total_encounters == 1) then begin
       set_caravan_pos(HUB_BOS_1_1_x,HUB_BOS_1_1_y);
       set_exit_grids(0,-2,0,20100,0);                          // Exit grids on elevation 0 goto Worldmap
       game_time_advance(15*ONE_GAME_DAY);
   end
   else if (total_encounters == 2) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_BOS_2_1_x,HUB_BOS_2_1_y+25);       //added +25 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(7*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_BOS_2_2_x,HUB_BOS_2_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(8*ONE_GAME_DAY);
       end
   end
   else if (total_encounters == 3) then begin
      if (Encounter_Number == 0) then begin                    // this is the first encounter
         set_caravan_pos(HUB_BOS_3_1_x,HUB_BOS_3_1_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(5*ONE_GAME_DAY);
      end
      else if (Encounter_Number == 1) then begin               // this is the second encounter
         set_caravan_pos(HUB_BOS_3_2_x,HUB_BOS_3_2_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(5*ONE_GAME_DAY);
      end
      else if (Encounter_Number == 2) then begin               // this is the third encounter
         set_caravan_pos(HUB_BOS_3_3_x,HUB_BOS_3_3_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(5*ONE_GAME_DAY);
      end
   end
   else if (total_encounters == 4) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_BOS_4_1_x,HUB_BOS_4_1_y-50);       //added -50 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(5*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_BOS_4_2_x,HUB_BOS_4_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(6*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 2) then begin               // this is the third encounter
           set_caravan_pos(HUB_BOS_4_3_x,HUB_BOS_4_3_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(4*ONE_GAME_DAY);
       end
       else if (Encounter_Number == 3) then begin               // this is the forth encounter
           set_caravan_pos(HUB_BOS_4_4_x,HUB_BOS_4_4_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(6*ONE_GAME_DAY);
       end
   end
   // TODO: Uncomment check_area. Needs new worldmap defines for Fo1.
   // For now we're simply using any of the Fo1 vanilla caravan encounters!
	Encounter_Rnd := random(0, 2);

	// Crimson Caravan:
	if (global_var(CRIMSON_CARAVANS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Brotherhood_CC_1;
		end
		else if (global_var(LOAD_MAP_INDEX) == 2) then begin
			call Brotherhood_CC_2;
		end
		else begin
			call Brotherhood_CC_3;
		end
	end
	// Far-Go Trader:
	else if (global_var(FARGO_TRADERS_STATUS) > 0) then begin
		if (global_var(LOAD_MAP_INDEX) == 1) then begin
			call Brotherhood_FGT_1;
		end
		else begin
			if (global_var(LOAD_MAP_INDEX) == 2) then begin
				call Brotherhood_FGT_2;
			end
			else begin
				call Brotherhood_FGT_3;
			end
		end
	end
end

// Encounter Determination Area
// Hub --> Necropolis - 9 Days
procedure HUB_NEC_Encounters begin
variable Encounter_Number;
variable Encounter_Rnd;

   Encounter_Number:=total_encounters - encounters_left;
   debug("reduce encounter!");

   if (total_encounters == 1) then begin
       set_caravan_pos(HUB_NEC_1_1_x,HUB_NEC_1_1_y);
       set_exit_grids(0,-2,0,20100,0);                          // Exit grids on elevation 0 goto Worldmap
       game_time_advance(9*ONE_GAME_DAY);
       //check_area;
   end
   else if (total_encounters == 2) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_NEC_2_1_x,HUB_NEC_2_1_y+25);       //added +25 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(4*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_NEC_2_2_x,HUB_NEC_2_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(5*ONE_GAME_DAY);
           //check_area;
       end
   end
   else if (total_encounters == 3) then begin
      if (Encounter_Number == 0) then begin                    // this is the first encounter
         set_caravan_pos(HUB_NEC_3_1_x,HUB_NEC_3_1_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(3*ONE_GAME_DAY);
         //check_area;
      end
      else if (Encounter_Number == 1) then begin               // this is the second encounter
         set_caravan_pos(HUB_NEC_3_2_x,HUB_NEC_3_2_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(3*ONE_GAME_DAY);
         //check_area;
      end
      else if (Encounter_Number == 2) then begin               // this is the third encounter
         set_caravan_pos(HUB_NEC_3_3_x,HUB_NEC_3_3_y);
         set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
         game_time_advance(3*ONE_GAME_DAY);
         //check_area;
      end
   end
   else if (total_encounters == 4) then begin
       if (Encounter_Number == 0) then begin                    // this is the first encounter
           set_caravan_pos(HUB_NEC_4_1_x,HUB_NEC_4_1_y-50);       //added -50 -killap
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 1) then begin               // this is the second encounter
           set_caravan_pos(HUB_NEC_4_2_x,HUB_NEC_4_2_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 2) then begin               // this is the third encounter
           set_caravan_pos(HUB_NEC_4_3_x,HUB_NEC_4_3_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(3*ONE_GAME_DAY);
           //check_area;
       end
       else if (Encounter_Number == 3) then begin               // this is the forth encounter
           set_caravan_pos(HUB_NEC_4_4_x,HUB_NEC_4_4_y);
           set_exit_grids(0,-2,0,20100,0);                      // Exit grids on elevation 0 goto Worldmap
           game_time_advance(2*ONE_GAME_DAY);
           //check_area;
       end
   end
   // TODO: Uncomment check_area. Needs new worldmap defines for Fo1.
   // For now we're simply using any of the Fo1 vanilla caravan encounters!
	Encounter_Rnd := random(0, 2);
	if (Encounter_Rnd == 2) then begin
		call Necrop_CC_1;
	end
	else if (Encounter_Rnd == 1) then begin
		call Necrop_CC_2;
	end
	else begin
		call Necrop_CC_3;
	end
end

/*********************************************************
	Encounter tables
*********************************************************/
procedure Junktown_CC_1 begin
	debug("Junktown_CC_1");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Merc;
	end
	else begin
		call Small_Spawn;
	end
end

procedure Junktown_CC_2 begin
	debug("Junktown_CC_2");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Mutant;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Merc;
	end
	else begin
		call Small_Ghoul;
	end
end

procedure Junktown_CC_3 begin
	debug("Junktown_CC_3");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Spawn;
	end
	else begin
		call Party_Pack;
	end
end

procedure Junktown_FGT_1 begin
	debug("Junktown_FGT_1");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Merc;
	end
	else begin
		call Party_Pack;
	end
end

procedure Junktown_FGT_2 begin
	debug("Junktown_FGT_2");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Merc;
	end
	else begin
		call Small_Ghoul;
	end
end

procedure Junktown_FGT_3 begin
	debug("Junktown_FGT_3");
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Mantis;
	end
	else begin
		call Huge_Merc;
	end
end

procedure Junktown_WM_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Large_Merc;
	end
end

procedure Junktown_WM_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Merc;
	end
	else begin
		call Huge_Mantis;
	end
end

procedure Boneyard_CC_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Spawn;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Small_Mutant;
	end
end

procedure Boneyard_CC_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Merc;
	end
	else begin
		call Party_Pack;
	end
end

procedure Boneyard_CC_3 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Huge_Merc;
	end
end

procedure Boneyard_FGT_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Party_Pack;
	end
end

procedure Boneyard_FGT_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Party_Pack;
	end
end

procedure Boneyard_FGT_3 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Large_Merc;
	end
end

procedure Boneyard_WM_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Merc;
	end
	else begin
		call Large_Mantis;
	end
end

procedure Boneyard_WM_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Merc;
	end
	else begin
		call Large_Mantis;
	end
end

procedure Brotherhood_CC_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Spawn;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Medium_Ghoul;
	end
	else begin
		call Medium_Mutant;
	end
end

procedure Brotherhood_CC_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Spawn;
	end
	else begin
		call Small_Mutant;
	end
end

procedure Brotherhood_CC_3 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Small_Merc;
	end
	else begin
		call Monster_Pack;
	end
end

procedure Brotherhood_FGT_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Mantis;
	end
	else begin
		call Small_Mutant;
	end
end

procedure Brotherhood_FGT_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Small_Mutant;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Mantis;
	end
	else begin
		call Party_Pack;
	end
end

procedure Brotherhood_FGT_3 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Monster_Pack;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Mutant;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Medium_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Merc;
	end
	else begin
		call Party_Pack;
	end
end

procedure Necrop_CC_1 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Ghoul;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Party_Pack;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Mantis;
	end
	else begin
		call Large_Ghoul;
	end
end

procedure Necrop_CC_2 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Large_Merc;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Large_Ghoul;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Huge_Ghoul;
	end
	else begin
		call Party_Pack;
	end
end

procedure Necrop_CC_3 begin
	call Dice_Total;
	if (Dice_Roll == 3) then begin
		call Huge_Ghoul;
	end
	else if ((Dice_Roll > 3) and (Dice_Roll < 7)) then begin
		call Medium_Ghoul;
	end
	else if ((Dice_Roll > 6) and (Dice_Roll < 10)) then begin
		call Small_Ghoul;
	end
	else if ((Dice_Roll > 9) and (Dice_Roll < 13)) then begin
		call Huge_Merc;
	end
	else if ((Dice_Roll > 12) and (Dice_Roll < 16)) then begin
		call Huge_Mantis;
	end
	else if ((Dice_Roll > 15) and (Dice_Roll < 18)) then begin
		call Large_Ghoul;
	end
	else begin
		call Monster_Pack;
	end
end

/*********************************************************
	Encounter mobs
*********************************************************/
procedure Small_Ghoul begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 3);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));
		Ghoul_Merc := create_object_sid(PID_GUARD_5, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Ghoul_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters

		inc_map_var(MVAR_Hostile_Total);

		if (Critter_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else if (Critter_Rotation == 1) then begin
			anim(Ghoul_Merc, 1000, 4);
		end
		else begin
			anim(Ghoul_Merc, 1000, 5);
		end

		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Small_Ghoul");
end

procedure Medium_Ghoul begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(4, 6);
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);

		Ghoul_Merc := create_object_sid(PID_GUARD_5, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Ghoul_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Ghoul_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Ghoul_Merc, 1000, 5);
		end
		else begin
			anim(Ghoul_Merc, 1000, 3);
		end

		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Medium_Ghoul");
end

procedure Large_Ghoul begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(7, 9);
	Outer_Circle := random(6, 12) + 4;
	Inner_Circle := Outer_Circle - 4;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);

		Ghoul_Merc := create_object_sid(PID_GUARD_5, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Ghoul_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Ghoul_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Ghoul_Merc, 1000, 5);
		end
		else begin
			anim(Ghoul_Merc, 1000, 3);
		end
		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Large_Ghoul");
end

procedure Huge_Ghoul begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(10, 13);
	Outer_Circle := random(8, 16) + 4;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);

		Ghoul_Merc := create_object_sid(PID_GUARD_5, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Ghoul_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Ghoul_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Ghoul_Merc, 1000, 5);
		end
		else begin
			anim(Ghoul_Merc, 1000, 3);
		end

		call Ghoul_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Huge_Ghoul");
end

procedure Small_Merc begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(2, 4);

	Outer_Circle := random(5, 10) + 2;
	Inner_Circle := Outer_Circle - 4;

	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));

		if (random(0, 1)) then
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else
			Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Human_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Critter_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else if (Critter_Rotation == 1) then begin
			anim(Human_Merc, 1000, 4);
		end
		else begin
			anim(Human_Merc, 1000, 5);
		end

		debug("createing Small_Merc on hex " + (tile_num(Human_Merc)) + ", elevation " + (elevation(Human_Merc)));

		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end
end

procedure Medium_Merc begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty - 1)), (5 + combat_difficulty));
	Outer_Circle := random(5, 10) + 2;
	Inner_Circle := Outer_Circle - 4;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);

		LVar2 := random(1, 4);
		if (LVar2 == 1) then
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 2) then
			Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 3) then
			Human_Merc := create_object_sid(PID_MERC_MALE_METAL, 0, 0, SCRIPT_CRVNENMY);
		else
			Human_Merc := create_object_sid(PID_MALE_GUARD_CA, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Human_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Human_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Human_Merc, 1000, 5);
		end
		else begin
			anim(Human_Merc, 1000, 3);
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Medium_Merc");
end

procedure Large_Merc begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty * 2)), (7 + (combat_difficulty * 2)));
	Outer_Circle := random(6, 10) + 6;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 3);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		LVar2 := random(1, 4);

		if (LVar2 == 1) then
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 2) then
			Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 3) then
			Human_Merc := create_object_sid(PID_MERC_MALE_METAL, 0, 0, SCRIPT_CRVNENMY);
		else
			Human_Merc := create_object_sid(PID_MALE_GUARD_CA, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Human_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Human_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Human_Merc, 1000, 5);
		end
		else begin
			anim(Human_Merc, 1000, 3);
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Large_Merc");
end

procedure Huge_Merc begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := random((4 + (combat_difficulty * 2)), (7 + (combat_difficulty * 2)));
	Outer_Circle := random(10, 16) + 2;
	Inner_Circle := Outer_Circle - 8;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);
		Critter_Rotation := random(0, 3);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 4);

		LVar2 := random(1, 4);
		if (LVar2 == 1) then
			Human_Merc := create_object_sid(PID_MERC_FEMALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 2) then
			Human_Merc := create_object_sid(PID_MERC_MALE_LEATHER, 0, 0, SCRIPT_CRVNENMY);
		else if (LVar2 == 3) then
			Human_Merc := create_object_sid(PID_MERC_MALE_METAL, 0, 0, SCRIPT_CRVNENMY);
		else
			Human_Merc := create_object_sid(PID_MALE_GUARD_CA, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Human_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Human_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Human_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Human_Merc, 1000, 5);
		end
		else begin
			anim(Human_Merc, 1000, 3);
		end
		call Human_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Huge_Merc");
end

procedure Small_Mutant begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 2);

	Outer_Circle := random(5, 10) + 2;
	Inner_Circle := Outer_Circle - 4;

	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle));

		Mutant_Merc := create_object_sid(PID_MEAN_SUPER_MUTANT, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Mutant_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Critter_Rotation == 0) then begin
			anim(Mutant_Merc, 1000, 3);
		end
		else if (Critter_Rotation == 1) then begin
			anim(Mutant_Merc, 1000, 4);
		end
		else begin
			anim(Mutant_Merc, 1000, 5);
		end
		call Mutant_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Small_Mutant at hex " + Critter_Tile);
end

procedure Medium_Mutant begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	if (combat_difficulty == 2) then begin
		LVar0 := random(3, 5);
	end
	else begin
		LVar0 := random(2, 4);
	end
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Total_Rotation - Critter_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);

		Mutant_Merc := create_object_sid(PID_MEAN_SUPER_MUTANT, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Mutant_Merc, Critter_Tile, elevation(dude_obj)); // fix spawning inside other critters
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Mutant_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Mutant_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Mutant_Merc, 1000, 5);
		end
		else begin
			anim(Mutant_Merc, 1000, 3);
		end
		call Mutant_Stuff;
		LVar1 := LVar1 + 1;
	end

	debug("Medium_Mutant");
end

procedure Large_Mantis begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable Mantis := 0;
	LVar0 := random((5 + (combat_difficulty * 2)), (8 + (combat_difficulty * 2)));
	Outer_Circle := random(8, 16) + 2;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);

		Mantis := create_object_sid(PID_GREAT_MANTIS, 0, 0, SCRIPT_CRVNMSTR);
		critter_attempt_placement(Mantis, Critter_Tile, elevation(dude_obj));
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Mantis, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Mantis, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Mantis, 1000, 5);
		end
		else begin
			anim(Mantis, 1000, 3);
		end
		LVar1 := LVar1 + 1;
	end

	debug("Large_Mantis");
end

procedure Huge_Mantis begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable Mantis := 0;
	LVar0 := random((6 + (combat_difficulty * 3)), (10 + (combat_difficulty * 2)));
	Outer_Circle := random(8, 16) + 2;
	Inner_Circle := Outer_Circle - 6;
	while(LVar1 < LVar0) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);

		Mantis := create_object_sid(PID_GREAT_MANTIS, 0, 0, SCRIPT_CRVNMSTR);
		critter_attempt_placement(Mantis, Critter_Tile, elevation(dude_obj));
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Mantis, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Mantis, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Mantis, 1000, 5);
		end
		else begin
			anim(Mantis, 1000, 3);
		end

		LVar1 := LVar1 + 1;
	end

	debug("Huge_Mantis");
end

procedure Small_Spawn begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable Deathclaw := 0;
	LVar0 := random(1, 2);
	Outer_Circle := random(5, 10) + 2;
	Inner_Circle := Outer_Circle - 4;

	while(LVar1 < LVar0) do begin
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), random(0, 2), random(Inner_Circle, Outer_Circle));

		Deathclaw := create_object_sid(PID_DEATHCLAW_SPAWN, 0, 0, SCRIPT_CRVNMSTR);
		critter_attempt_placement(Deathclaw, Critter_Tile, elevation(dude_obj));
		inc_map_var(MVAR_Hostile_Total);

		anim(Deathclaw, 1000, 3);
		LVar1 := LVar1 + 1;

		debug("createing Small_Spawn on hex " + (tile_num(Deathclaw)) + ", elevation " + (elevation(Deathclaw)));
	end

	debug("Small_Spawn");
end

procedure Party_Pack begin
	call Large_Merc;
	call Medium_Ghoul;
	debug("!!!!Party_Pack!!!!");
end

procedure Monster_Pack begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	variable LVar3 := 0;
	Outer_Circle := random(4, 9) + 4;
	Inner_Circle := Outer_Circle - 4;
	Critter_Tile := tile_num_in_direction(tile_num(dude_obj), random(0, 2), random(Inner_Circle, Outer_Circle));

	LVar0 := create_object_sid(PID_DEATHCLAW_SPAWN, 0, 0, SCRIPT_CRVNMSTR);
	critter_attempt_placement(LVar0, Critter_Tile, elevation(dude_obj));
	inc_map_var(MVAR_Hostile_Total);

	anim(LVar0, 1000, 3);
	if (combat_difficulty == 2) then begin
		LVar3 := random(4, 7);
	end
	else begin
		LVar3 := random(3, (5 + combat_difficulty));
	end
	while(LVar2 < LVar3) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 3);

		LVar1 := create_object_sid(PID_GREAT_MANTIS, 0, 0, SCRIPT_CRVNMSTR);
		critter_attempt_placement(LVar1, Critter_Tile, elevation(dude_obj));
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(LVar1, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(LVar1, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(LVar1, 1000, 5);
		end
		else begin
			anim(LVar1, 1000, 3);
		end
		LVar2 := LVar2 + 1;
	end
	LVar2 := 0;
	if (combat_difficulty == 2) then begin
		LVar3 := random(3, 5);
	end
	else begin
		LVar3 := random(2, 4);
	end
	while(LVar2 < LVar3) do begin
		Critter_Rotation := random(0, 2);
		Total_Rotation := Critter_Rotation;
		Critter_Tile := tile_num_in_direction(tile_num(dude_obj), Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);
		Critter_Rotation := random(0, 2);
		Total_Rotation := Total_Rotation + (Critter_Rotation - Total_Rotation);
		Critter_Tile := tile_num_in_direction(Critter_Tile, Critter_Rotation, random(Inner_Circle, Outer_Circle) / 2);

		Ghoul_Merc := create_object_sid(PID_GUARD_5, 0, 0, SCRIPT_CRVNENMY);
		critter_attempt_placement(Ghoul_Merc, Critter_Tile, elevation(dude_obj));
		inc_map_var(MVAR_Hostile_Total);

		if (Total_Rotation == 0) then begin
			anim(Ghoul_Merc, 1000, 3);
		end
		else if (Total_Rotation == 1) then begin
			anim(Ghoul_Merc, 1000, 4);
		end
		else if (Total_Rotation == 2) then begin
			anim(Ghoul_Merc, 1000, 5);
		end
		else begin
			anim(Ghoul_Merc, 1000, 3);
		end
		call Ghoul_Stuff;
		LVar2 := LVar2 + 1;
	end
	debug("!!!!Monster_Pack!!!!");
end


procedure Mutant_Stuff begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := random(1, 5);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_FLAMER, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
		wield_obj_critter(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 3);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Mutant_Merc, LVar1, random(1, 3));
	end
	LVar0 := random(1, 2);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_SPIKED_KNUCKLES, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
		wield_obj_critter(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 5);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_SUPER_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Mutant_Merc, LVar1, random(1, 2));
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_MOTION_SENSOR, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_GEIGER_COUNTER, 0, 0 );
		add_obj_to_inven(Mutant_Merc, LVar1);
	end
end

procedure Ghoul_Stuff begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar2 := create_object( PID_BOTTLE_CAPS, 0, 0 );
	add_mult_objs_to_inven(Ghoul_Merc, LVar2, random(1, 10) * (dude_fortune_finder * global_var(FORTUNE_FINDER_HOW_MUCH)));
	LVar0 := random(1, 4);
	if ((LVar0 == 1) or (LVar0 == 2)) then begin
		LVar1 := create_object( PID_KNIFE, 0, 0 );
		add_obj_to_inven(Ghoul_Merc, LVar1);
		wield_obj_critter(Ghoul_Merc, LVar1);
	end
	else if (LVar0 == 3) then begin
		LVar1 := create_object( PID_SPEAR, 0, 0 );
		add_obj_to_inven(Ghoul_Merc, LVar1);
		wield_obj_critter(Ghoul_Merc, LVar1);
	end
	LVar0 := random(1, 4);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_MUTATED_FRUIT, 0, 0 );
		add_mult_objs_to_inven(Ghoul_Merc, LVar1, random(1, 2));
	end
end

procedure Human_Stuff begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar2 := create_object( PID_BOTTLE_CAPS, 0, 0 );
	add_mult_objs_to_inven(Human_Merc, LVar2, random(4, 20) * (dude_fortune_finder * global_var(FORTUNE_FINDER_HOW_MUCH)));
	LVar0 := random(1, 10);
	if (LVar0 <= 3) then begin
		LVar1 := create_object( PID_SPEAR, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
	end
	else if ((LVar0 > 3) and (LVar0 <= 5)) then begin
		LVar1 := create_object( PID_COMBAT_KNIFE, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
	end
	else if ((LVar0 > 5) and (LVar0 <= 7)) then begin
		LVar1 := create_object( PID_10MM_PISTOL, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
		LVar1 := create_object( PID_10MM_AP, 0, 0 );
		if (dude_perk( PERK_scrounger )) then begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(2, 4));
		end
		else begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
		end
	end
	else if ((LVar0 > 7) and (LVar0 <= 9)) then begin
		LVar1 := create_object( PID_DESERT_EAGLE, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
		LVar1 := create_object( PID_44_FMJ_MAGNUM, 0, 0 );
		if (dude_perk( PERK_scrounger )) then begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(2, 4));
		end
		else begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(0, 2));
		end
	end
	else begin
		LVar1 := create_object( PID_HUNTING_RIFLE, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
		wield_obj_critter(Human_Merc, LVar1);
		LVar1 := create_object( PID_223_FMJ, 0, 0 );
		if (dude_perk( PERK_scrounger )) then begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
		end
		else begin
			add_mult_objs_to_inven(Human_Merc, LVar1, random(0, 1));
		end
	end
	LVar0 := random(1, 3);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_STIMPAK, 0, 0 );
		add_mult_objs_to_inven(Human_Merc, LVar1, random(1, 2));
	end
	LVar0 := random(1, 10);
	if (LVar0 == 1) then begin
		LVar1 := create_object( PID_FIRST_AID_KIT, 0, 0 );
		add_obj_to_inven(Human_Merc, LVar1);
	end
end

procedure Dice_Total begin
	Dice_Roll := (random(1, 6) + random(1, 6) + random(1, 6));
end

procedure Cycle begin
	if (Critter_Rotation > 5) then begin
		Critter_Rotation := Critter_Rotation % 6;
	end
	else if (Critter_Rotation < 0) then begin
		while(Critter_Rotation < 0) do begin
			Critter_Rotation := Critter_Rotation + 6;
		end
	end
end

/*********************************************************
	Create map scenery
*********************************************************/
procedure CreateSceneryClutter begin
variable scenery_pid;
variable scenery_tile;
variable a:=0;
variable iter:=0;
variable temp_pid;

variable iter2:=0;
variable iter_cluster:=0;
variable rnd_tile:=0;

	/*
	// This is the area in which no scenery will be placed:
	//if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	create_object( PID_BURNING_BARREL, 19904, 0 );
	create_object( PID_METAL_BARREL_1, 19698, 0 );
	create_object(33554439,21104,0);
	create_object(33554471,20898,0);
	*/

// Generating desert scenery - piles of tiny white rocks
   iter:=0;
   while iter<10 do
   begin
      iter:=iter+1;
		a:=random(8000,29000);
      scenery_pid:=random( PID_ROCKS_6, PID_ROCKS_8 );
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0); // generuje sceneri?
         end
      end
   end

// Generate desert scenery - scrub grass
   iter:=0;
   while iter<50 do
   begin
      iter:=iter+1;
		a:=random(7000,30000);
      scenery_pid:=random( PID_SCRUB_1, PID_SCRUB_4 );
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0);
         end
      end
   end

// generate desert scenery - remains / dead animals, etc.
   iter:=0;
   while iter<3 do
   begin
      iter:=iter+1;
		a:=random(7000,30000);
      scenery_pid:=random( PID_BONES_4, PID_BONES_5 ); // ashes, dead animals //kosci i zw?oki zwierz?cia i bramina
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0);
         end
      end
   end

// Generation of desert scenery - tires, grass, smog, barrels desert elements
   iter:=0;
   while iter<8 do
   begin
      iter:=iter+1;
		a:=random(7000,30000);
      scenery_pid:=random( PID_TIRE, PID_WEED_3 );
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0);
            create_object(PID_BLOCKING_HEX,a,0); //create a blocker on the same hex
         end
      end
   end

// Generating desert scenery - piles of cool rocks in the desert
   iter:=0;
   while iter<8 do
   begin
      iter:=iter+1;
		a:=random(8000,29000);
      scenery_pid:=random( PID_ROCKS_3, PID_ROCKS_4 );
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0); // generuje sceneri?
         end
      end
   end

// Generation of desert scenery - stone plains just in the desert near the mountains
   iter:=0;
   while iter<5 do
   begin
      iter:=iter+1;
		a:=random(7000,30000);
      scenery_pid:=random(33556497,33556499);
		if tile_contains_pid_obj(a,0,scenery_pid) then begin end else begin
   		if not(tile_in_tile_rect(19904,19698,21104,20898,a)) then
	   	begin
            create_object(scenery_pid,a,0);
         end
      end
   end

end

