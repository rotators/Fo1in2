/*

        Hub, Jacob - Merchant inventory container

*/

/* Include Files */
#include "..\headers\define.h"

#define NAME                    SCRIPT_JAKEDESK

#include "..\headers\command.h"

#define LVAR_RESTOCK_TIME                       (0)

procedure start;
procedure map_enter_p_proc;

import variable Jake_Desk_Ptr;

procedure start begin
   Jake_Desk_Ptr := self_obj;
end

procedure map_enter_p_proc begin
/* Set up the door state when the player first enters the map */
   Jake_Desk_Ptr := self_obj;

   // Fo2-style merchant inventory:
   if not(fo1in2_merch_restock_disabled) then begin
      if (is_loading_game == false) then begin
         if (local_var(LVAR_RESTOCK_TIME) < game_time) then begin
            //item_caps_adjust(self_obj, random(151, 161) - self_caps); // Caps still adjusted via main trader script

            check_restock_item(PID_MINIGUN, 0, 1, 15) // Special!
            check_restock_item(PID_PANCOR_JACKHAMMER, 0, 1, 8) // Special!

            check_restock_item(PID_EXPLOSIVE_ROCKET, 1, 5, 100)
            check_restock_item(PID_FLAMER, 0, 2, 100)
            check_restock_item(PID_HUNTING_RIFLE, 0, 2, 100)
            check_restock_item(PID_10MM_SMG, 0, 2, 100)
            check_restock_item(PID_FRAG_GRENADE, 2, 6, 100)
            check_restock_item(PID_PULSE_GRENADE, 1, 6, 100)
            check_restock_item(PID_ROCKET_LAUNCHER, 0, 1, 100)
            check_restock_item(PID_ASSAULT_RIFLE, 1, 3, 100)
            check_restock_item(PID_METAL_ARMOR, 0, 1, 100)
            check_restock_item(PID_LEATHER_ARMOR, 0, 1, 100)
            check_restock_item(PID_COMBAT_ARMOR, 0, 1, 100)
            check_restock_item(PID_FLAMETHROWER_FUEL, 1, 5, 100)
            check_restock_item(PID_SNIPER_RIFLE, 0, 2, 100)
            check_restock_item(PID_GEIGER_COUNTER, 0, 1, 100)
            check_restock_item(PID_10MM_JHP, 3, 6, 100)
            check_restock_item(PID_10MM_AP, 2, 6, 100)
            check_restock_item(PID_44_MAGNUM_JHP, 0, 7, 100)
            check_restock_item(PID_5MM_JHP, 2, 7, 100)
            check_restock_item(PID_223_FMJ, 3, 16, 100)
            check_restock_item(PID_14MM_AP, 2, 9, 100)
            check_restock_item(PID_5MM_AP, 2, 10, 100)
            check_restock_item(PID_SMALL_ENERGY_CELL, 0, 4, 100)
            check_restock_item(PID_ROCKET_AP, 1, 10, 100)
            check_restock_item(PID_SHOTGUN, 0, 1, 100)
            check_restock_item(PID_COMBAT_KNIFE, 0, 2, 100)
            check_restock_item(PID_SHOTGUN_SHELLS, 4, 14, 100)
            check_restock_item(PID_14MM_PISTOL, 0, 2, 100)
            check_restock_item(PID_DESERT_EAGLE, 0, 2, 100)
            check_restock_item(PID_COMBAT_SHOTGUN, 0, 1, 100)

            set_local_var(LVAR_RESTOCK_TIME, (random(1, 3) * ONE_GAME_DAY) + game_time);
         end
      end
   end

   // Fo1-style merchant inventory:
   else if (local_var(LVAR_RESTOCK_TIME) == 0) then begin
      set_local_var(LVAR_RESTOCK_TIME,1);

      give_pid_qty(self_obj, PID_EXPLOSIVE_ROCKET, 5)
      give_pid_qty(self_obj, PID_FLAMER, 2)
      give_pid_qty(self_obj, PID_HUNTING_RIFLE, 2)
      give_pid_qty(self_obj, PID_10MM_SMG, 2)
      give_pid_qty(self_obj, PID_FRAG_GRENADE, 6)
      give_pid_qty(self_obj, PID_PULSE_GRENADE, 6)
      give_pid_qty(self_obj, PID_ROCKET_LAUNCHER, 1)
      give_pid_qty(self_obj, PID_ASSAULT_RIFLE, 3)
      give_pid_qty(self_obj, PID_METAL_ARMOR, 1)
      give_pid_qty(self_obj, PID_LEATHER_ARMOR, 1)
      give_pid_qty(self_obj, PID_COMBAT_ARMOR, 1)
      give_pid_qty(self_obj, PID_FLAMETHROWER_FUEL, 5)
      give_pid_qty(self_obj, PID_SNIPER_RIFLE, 2)
      give_pid_qty(self_obj, PID_GEIGER_COUNTER, 1)
      give_pid_qty(self_obj, PID_10MM_JHP, 6)
      give_pid_qty(self_obj, PID_10MM_AP, 6)
      give_pid_qty(self_obj, PID_44_MAGNUM_JHP, 7)
      give_pid_qty(self_obj, PID_5MM_JHP, 7)
      give_pid_qty(self_obj, PID_223_FMJ, 16)
      give_pid_qty(self_obj, PID_14MM_AP, 9)
      give_pid_qty(self_obj, PID_5MM_AP, 10)
      give_pid_qty(self_obj, PID_SMALL_ENERGY_CELL, 4)
      give_pid_qty(self_obj, PID_ROCKET_AP, 10)
      give_pid_qty(self_obj, PID_SHOTGUN, 1)
      give_pid_qty(self_obj, PID_COMBAT_KNIFE, 2)
      give_pid_qty(self_obj, PID_SHOTGUN_SHELLS, 14)
      give_pid_qty(self_obj, PID_14MM_PISTOL, 2)
      give_pid_qty(self_obj, PID_DESERT_EAGLE, 2)
      give_pid_qty(self_obj, PID_COMBAT_SHOTGUN, 1)
   end
end




