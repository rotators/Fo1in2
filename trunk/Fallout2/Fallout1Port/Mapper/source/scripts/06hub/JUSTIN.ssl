#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure combat_p_proc;//    script_action == 13
procedure damage_p_proc;//    script_action == 14

procedure Justin00;
procedure Justin01;
procedure Justin01a;
procedure Justin01b;
procedure Justin02;
procedure Justin03;
procedure Justin04;
procedure Justin05a;
procedure Justin05b;
procedure Justin06;
procedure Justin07;
procedure Justin08;
procedure Justin09;
procedure Justin10;
procedure Justin11;
procedure Justin12;
procedure Justin13;
procedure Justin14;
procedure Justin15;
procedure Justin15a;
procedure Justin15b;
procedure Justin15c;
procedure Justin15d;
procedure Justin16;
procedure Justin17;
procedure Justin18;
procedure Justin19;
procedure Justin20;
procedure Justin22;
procedure Justin26;
procedure Justin27;
procedure Justin28;
procedure Justin29;
procedure Justin30;
procedure Justin31;
procedure Justin32;
procedure Justin33;
procedure Justin34;
procedure Justin35;
procedure JustinEnd;
procedure JustinCombat;
procedure JustinTravel;
procedure GoToDecker;

variable hostile;
variable Only_Once := 1;
variable travel;
variable exit_line;

import variable Kane_Ptr;
import variable Decker_Ptr;
import variable Justin_Ptr;
import variable Fry_Stub_Ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;



procedure ReportBob;
procedure BobGuilty;
procedure BobReward;
procedure BobReward2;


procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		Justin_Ptr := self_obj;
		if (global_var(GREENE_DEAD) == 1) then begin
			if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 0);    end//  MAKE VISIBLE
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 40);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 86);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
							call combat_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	if (travel == 1) then begin
		travel := 0;
		call GoToDecker;
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (map_var(53) == 1) then begin
		set_map_var(53, 0);
		start_gdialog(696, self_obj, 4, -1, -1);
		gsay_start;
		call Justin35;
		gsay_end;
		end_dialogue;
	end
	else begin
		if (local_var(7) == 1) then begin
			start_gdialog(696, self_obj, 4, -1, -1);
			gsay_start;
			call Justin29;
			gsay_end;
			end_dialogue;
		end
		else begin
			if (global_var(DECKER_STATUS) == 1) then begin
				start_gdialog(696, self_obj, 4, -1, -1);
				gsay_start;
				call Justin27;
				gsay_end;
				end_dialogue;
			end
			else begin
				if (local_var(6) == 1) then begin
					start_gdialog(696, self_obj, 4, -1, -1);
					gsay_start;
					call Justin26;
					gsay_end;
					end_dialogue;
				end
				else begin
					if (local_var(6) == 2) then begin
						start_gdialog(696, self_obj, 4, -1, -1);
						gsay_start;
						call Justin28;
						gsay_end;
						end_dialogue;
					end
					else begin
						if (local_var(4) == 0) then begin
							set_local_var(4, 1);
							start_gdialog(696, self_obj, 4, -1, -1);
							gsay_start;
							call Justin00;
							gsay_end;
							end_dialogue;
						end
						else begin
							if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
								call Justin03;
							end
							else begin
								if ((local_var(1) == 3) or (local_var(1) == 0)) then begin
									start_gdialog(696, self_obj, 4, -1, -1);
									gsay_start;
									call Justin31;
									gsay_end;
									end_dialogue;
								end
								else begin
									if (local_var(1) == 2) then begin
										start_gdialog(696, self_obj, 4, -1, -1);
										gsay_start;
										call Justin32;
										gsay_end;
										end_dialogue;
									end
									else begin
										if (local_var(1) == 1) then begin
											start_gdialog(696, self_obj, 4, -1, -1);
											gsay_start;
											call Justin33;
											gsay_end;
											end_dialogue;
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure destroy_p_proc
begin
	set_global_var(GREENE_DEAD, 1);

	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_JUSTIN, 100));
end

procedure combat_p_proc
begin
	if (map_var(54) == 1) then begin
		script_overrides;
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (map_var(52) == 0) then begin
			set_global_var(ENEMY_HUB, 1);
		end
	end
end

procedure Justin00
begin
	if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
		gsay_message(696, 101, 50);
	end
	else begin
		if (get_critter_stat(dude_obj, 34) == 0) then begin
			gsay_reply(696, 102);
		end
		else begin
			gsay_reply(696, 103);
		end
		call Justin30;
	end
end

procedure Justin01
begin
	gsay_reply(696, 104);
	if ((global_var(DECKER_STATUS) == 0) and ((map_var(46) > 0) and (map_var(46) != 6))) then begin
		giq_option(4, 696, 105, Justin01a, 50);
	end
	if ((global_var(DECKER_STATUS) == 0) and ((map_var(47) > 0) and (map_var(47) != 7))) then begin
		giq_option(4, 696, 106, Justin01b, 50);
	end
	if (global_var(GRETCH_PRIMECUTS) and global_var(CAN_REPORT_BITS_BOB) and not(global_var(BITS_BOB_REPORTED)) and not(global_var(FIXT_BUGFIXES_ONLY))) then begin// player knows about Bob's human meat, CAN_REPORT_BITS_BOB==true, haven't already reported him, and BugFixesOnly==false
		giq_option(4, 696, 180, ReportBob, 50);
	end
	giq_option(4, 696, 107, JustinEnd, 50);
	giq_option(4, 696, 108, Justin04, 50);
end

procedure ReportBob
begin
	gsay_reply(696, 181);
	giq_option(4, 696, 182, BobGuilty, 50);
end

procedure BobGuilty
begin
	variable LVar0 := 500;
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(10 * 60 * 60 * 2);
	gfade_in(1);
	gsay_reply(696, 183);
	set_global_var(BITS_BOB_REPORTED, 1);
	give_exp_points(LVar0);
	display_msg(message_str(SCRIPT_GENCHAT, 103) + LVar0 + message_str(SCRIPT_GENCHAT, 104));
	giq_option(4, 696, 184, BobReward, 50);
end

procedure BobReward
begin
	set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 2);
	gsay_reply(696, 186);
	giq_option(4, 696, 189, Justin22, 50);
	giq_option(4, 696, 187, Justin22, 49);
	giq_option(4, 696, 188, BobReward2, 51);
end

procedure BobReward2
begin
	gsay_reply(696, 190);
	item_caps_adjust(dude_obj, 250);
	giq_option(4, 696, 191, Justin22, 51);
	giq_option(4, 696, 192, Justin22, 51);
	set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
end

procedure Justin01a
begin
	if (global_var(KILL_MERCHANT) != 2) then begin
		call Justin05a;
	end
	else begin
		if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
			call Justin06;
		end
		else begin
			call Justin07;
		end
	end
end

procedure Justin01b
begin
	if (global_var(KILL_JAIN) != 2) then begin
		call Justin05a;
	end
	else begin
		if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
			call Justin06;
		end
		else begin
			call Justin08;
		end
	end
end

procedure Justin02
begin
	if (local_var(5) == 0) then begin
		call UpReact;
		set_local_var(5, 1);
		gsay_message(696, 109, 49);
	end
	else begin
		gsay_message(696, 110, 49);
	end
end

procedure Justin03
begin
	float_msg(self_obj, message_str(SCRIPT_JUSTIN, 111), 2);
end

procedure Justin04
begin
	gsay_message(696, 112, 50);
end

procedure Justin05a
begin
	gsay_reply(696, 170);
	giq_option(4, 696, 171, Justin05b, 50);
end

procedure Justin05b
begin
	gsay_reply(696, 113);
	call Justin09;
end

procedure Justin06
begin
	gsay_reply(696, 114);
	call Justin09;
end

procedure Justin07
begin
	gsay_reply(696, 115);
	call Justin15;
end

procedure Justin08
begin
	gsay_reply(696, 116);
	call Justin15;
end

procedure Justin09
begin
	giq_option(4, 696, 117, Justin11, 50);
	giq_option(4, 696, 118, Justin10, 50);
	giq_option(4, 696, 119, Justin12, 50);
end

procedure Justin10
begin
	gsay_reply(696, 120);
	giq_option(4, 696, 121, Justin11, 50);
	giq_option(4, 696, 122, Justin12, 50);
end

procedure Justin11
begin
	variable LVar0 := 0;
	set_local_var(6, 1);
	item_caps_adjust(dude_obj, 300);
	gsay_message(696, 123, 50);
	gsay_reply(696, 174);
	giq_option(4, 696, 124, Justin20, 50);
	giq_option(4, 696, 125, JustinEnd, 50);
end

procedure Justin12
begin
	set_local_var(6, 2);
	gsay_reply(696, 126);
	giq_option(4, 696, 127, Justin13, 50);
	giq_option(4, 696, 128, Justin14, 50);
	giq_option(4, 696, 129, JustinEnd, 50);
end

procedure Justin13
begin
	variable LVar0 := 0;
	set_local_var(6, 1);
	item_caps_adjust(dude_obj, 300);
	gsay_message(696, 130, 49);
	gsay_message(696, 175, 50);
end

procedure Justin14
begin
	gsay_message(696, 131, 50);
end

procedure Justin15
begin
	giq_option(4, 696, 132, JustinCombat, 50);
	giq_option(4, 696, 133, Justin15a, 50);
	giq_option(4, 696, 134, Justin15b, 50);
	giq_option(4, 696, 135, Justin15c, 50);
	giq_option(4, 696, 136, Justin15d, 50);
end

procedure Justin15a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 30))) then begin
		call Justin16;
	end
	else begin
		call Justin17;
	end
end

procedure Justin15b
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Justin16;
	end
	else begin
		call Justin17;
	end
end

procedure Justin15c
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 15))) then begin
		call Justin16;
	end
	else begin
		call Justin17;
	end
end

procedure Justin15d
begin
	if (is_success(roll_vs_skill(dude_obj, 14, -50))) then begin
		call Justin18;
	end
	else begin
		call Justin19;
	end
end

procedure Justin16
begin
	gsay_reply(696, 137);
	call Justin09;
end

procedure Justin17
begin
	set_local_var(7, 1);
	gsay_message(696, 138, 51);
end

procedure Justin18
begin
	gsay_reply(696, 139);
	call Justin09;
end

procedure Justin19
begin
	set_local_var(7, 1);
	gsay_message(696, 140, 51);
end

procedure Justin20
begin
	gsay_message(696, 141, 50);
	call JustinTravel;
end

procedure Justin22
begin
	gsay_message(696, 129, 50);
end

procedure Justin26
begin
	gsay_reply(696, 151);
	giq_option(4, 696, 152, JustinTravel, 50);
	giq_option(4, 696, 153, JustinEnd, 50);
	giq_option(-3, 696, 154, Justin34, 50);
end

procedure Justin27
begin
	gsay_message(696, 155, 49);
end

procedure Justin28
begin
	gsay_reply(696, 156);
	giq_option(4, 696, 157, Justin11, 50);
	giq_option(4, 696, 158, JustinEnd, 50);
	giq_option(-3, 696, 159, Justin34, 50);
end

procedure Justin29
begin
	gsay_message(696, 160, 50);
end

procedure Justin30
begin
	giq_option(4, 696, 161, Justin01, 50);
	giq_option(4, 696, 162, Justin02, 50);
	giq_option(4, 696, 163, JustinEnd, 50);
	giq_option(-3, 696, 164, Justin34, 50);
end

procedure Justin31
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(696, 165);
	end
	else begin
		gsay_reply(696, 166);
	end
	call Justin30;
end

procedure Justin32
begin
	gsay_reply(696, 167);
	call Justin30;
end

procedure Justin33
begin
	gsay_reply(696, 168);
	call Justin30;
end

procedure Justin34
begin
	gsay_message(696, 169, 50);
end

procedure Justin35
begin
	variable LVar0 := 0;
	item_caps_adjust(dude_obj, 1000);
	set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 4);
	give_exp_points(1400);
	display_msg(message_str(SCRIPT_GENCHAT, 103) + 1400 + message_str(SCRIPT_GENCHAT, 104));
	gsay_message(696, 172, 49);
	gsay_message(696, 173, 49);
end

procedure JustinEnd
begin
end

procedure JustinCombat
begin
	call combat;
end

procedure JustinTravel
begin
	travel := 1;
end

procedure GoToDecker
begin
	set_map_var(52, 1);
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	if (metarule(22, 0) == 0) then begin	set_obj_visibility(Fry_Stub_Ptr, 0);	end
	move_to(self_obj, 23926, 1);
	anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(Decker_Ptr)));
	critter_add_trait(self_obj, 1, 6, 0);
	if (map_var(49) == 0) then begin
		move_to(Kane_Ptr, 22526, 1);
		anim(Kane_Ptr, 1000, rotation_to_tile(tile_num(Kane_Ptr), tile_num(Decker_Ptr)));
	end
	move_to(dude_obj, 24125, 1);
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(Decker_Ptr)));
	gfade_in(1);
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

