#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure damage_p_proc;//    script_action == 14
procedure Jain00;
procedure Jain01;
procedure Jain02;
procedure Jain03;
procedure Jain04;
procedure Jain05;
procedure Jain06;
procedure Jain07;
procedure Jain08;
procedure Jain09;
procedure Jain10;
procedure Jain11;
procedure Jain12;
procedure Jain13;
procedure Jain14;
procedure Jain15;
procedure Jain16;
procedure Jain17;
procedure Jain18;
procedure Jain19;
procedure Jain20;
procedure Jain21;
procedure Jain22;
procedure Jain23;
procedure Jain24;
procedure Jain25;
procedure Jain26;
procedure Jain27;
procedure Jain28;
procedure Jain29;
procedure Jain30;
procedure Jain31;
procedure Jain32;
procedure Jain33;
procedure Jain34;
procedure Jain35;
procedure Jain36;
procedure Jain37;
procedure Jain38;
procedure Jain39;
procedure JainEnd;
procedure JainEndCombat;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 72);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 77);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	if ((map_var(6) == 1) and (obj_can_see_obj(self_obj, dude_obj) == 1)) then begin
		call combat;
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (map_var(0) == 1) then begin
		start_gdialog(46, self_obj, 4, 18, 3);
		gsay_start;
		call Jain29;
		gsay_end;
		end_dialogue;
	end
	else begin
		if (global_var(MASTER_BLOWN) == 1) then begin
			start_gdialog(46, self_obj, 4, 18, 3);
			gsay_start;
			call Jain30;
			gsay_end;
			end_dialogue;
		end
		else begin
			if (local_var(4) == 0) then begin
				set_local_var(4, 1);
				start_gdialog(46, self_obj, 4, 18, 3);
				gsay_start;
				call Jain00;
				gsay_end;
				end_dialogue;
			end
			else begin
				if (local_var(1) >= 2) then begin
					start_gdialog(46, self_obj, 4, 18, 3);
					gsay_start;
					call Jain27;
					gsay_end;
					end_dialogue;
				end
				else begin
					start_gdialog(46, self_obj, 4, 18, 3);
					gsay_start;
					call Jain29;
					gsay_end;
					end_dialogue;
				end
			end
		end
	end
end

procedure destroy_p_proc
begin
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	set_global_var(KILL_JAIN, 2);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_JAIN, 100));
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_map_var(6, 1);
	end
end

procedure Jain00
begin
	gsay_reply(46, 101);
	giq_option(4, 46, 102, Jain04, 50);
	giq_option(4, 46, 103, Jain07, 50);
	giq_option(4, 46, 104, Jain10, 50);
	giq_option(-3, 46, 105, Jain02, 50);
end

procedure Jain01
begin
	gsay_reply(46, 106);
	giq_option(-3, 46, 107, Jain03, 50);
	giq_option(-3, 46, 108, Jain02, 50);
end

procedure Jain02
begin
	gsay_message(46, 109, 51);
	call JainEndCombat;
end

procedure Jain03
begin
	set_map_var(0, 1);
	gsay_message(46, 110, 50);
end

procedure Jain04
begin
	gsay_reply(46, 111);
	giq_option(4, 46, 112, Jain05, 50);
	giq_option(4, 46, 113, Jain03, 50);
end

procedure Jain05
begin
	set_map_var(0, 1);
	gsay_message(46, 114, 51);
end

procedure Jain06
begin
end

procedure Jain07
begin
	gsay_reply(46, 115);
	giq_option(4, 46, 116, Jain10, 50);
	giq_option(4, 46, 117, Jain09, 50);
	giq_option(4, 46, 118, Jain08, 51);
	giq_option(4, 46, 119, JainEnd, 50);
end

procedure Jain08
begin
	gsay_message(46, 120, 51);
	call JainEndCombat;
end

procedure Jain09
begin
	call BigDownReact;
	gsay_message(46, 121, 51);
	call JainEndCombat;
end

procedure Jain10
begin
	gsay_reply(46, 122);
	giq_option(4, 46, 123, Jain11, 49);
	giq_option(4, 46, 124, Jain26, 51);
	giq_option(4, 46, 125, Jain20, 50);
end

procedure Jain11
begin
	call UpReact;
	gsay_reply(46, 126);
	giq_option(4, 46, 127, Jain17, 51);
	giq_option(4, 46, 128, Jain13, 50);
	giq_option(4, 46, 129, Jain12, 50);
end

procedure Jain12
begin
	set_map_var(0, 1);
	gsay_reply(46, 130);
	giq_option(4, 46, 131, JainEnd, 50);
	giq_option(4, 46, 132, JainEndCombat, 51);
end

procedure Jain13
begin
	gsay_reply(46, 133);
	giq_option(4, 46, 134, Jain14, 50);
	giq_option(4, 46, 135, Jain15, 51);
end

procedure Jain14
begin
	gsay_reply(46, 136);
	giq_option(4, 46, 137, Jain20, 49);
	giq_option(4, 46, 138, Jain09, 51);
	giq_option(4, 46, 139, Jain15, 51);
end

procedure Jain15
begin
	call DownReact;
	gsay_message(46, 140, 50);
end

procedure Jain16
begin
end

procedure Jain17
begin
	gsay_reply(46, 141);
	giq_option(4, 46, 142, Jain18, 51);
	giq_option(4, 46, 143, Jain19, 50);
end

procedure Jain18
begin
	call DownReact;
	gsay_message(46, 144, 51);
end

procedure Jain19
begin
	gsay_reply(46, 145);
	giq_option(4, 46, 146, Jain13, 50);
	giq_option(4, 46, 147, JainEnd, 50);
end

procedure Jain20
begin
	call UpReact;
	gsay_reply(46, 148);
	giq_option(4, 46, 149, Jain21, 50);
	giq_option(4, 46, 150, Jain22, 50);
end

procedure Jain21
begin
	gsay_reply(46, 151);
	giq_option(4, 46, 152, Jain38, 50);
	giq_option(4, 46, 153, JainEndCombat, 51);
	giq_option(4, 46, 154, Jain37, 50);
	giq_option(4, 46, 155, JainEnd, 50);
end

procedure Jain22
begin
	gsay_reply(46, 156);
	giq_option(4, 46, 157, Jain37, 50);
	giq_option(4, 46, 158, Jain15, 51);
	giq_option(4, 46, 159, JainEnd, 50);
end

procedure Jain23
begin
end

procedure Jain24
begin
end

procedure Jain25
begin
end

procedure Jain26
begin
	call BigDownReact;
	gsay_reply(46, 161);
	giq_option(4, 46, 161, Jain19, 50);
	giq_option(4, 46, 162, JainEndCombat, 50);
end

procedure Jain27
begin
	gsay_reply(46, 163);
	giq_option(4, 46, 164, Jain36, 50);
	giq_option(4, 46, 165, Jain28, 51);
	giq_option(4, 46, 166, JainEnd, 50);
	giq_option(-3, 46, 167, Jain39, 50);
	giq_option(-3, 46, 168, Jain34, 50);
end

procedure Jain28
begin
	call BigDownReact;
	set_map_var(0, 1);
	gsay_message(46, 169, 50);
end

procedure Jain29
begin
	gsay_message(46, 170, 50);
end

procedure Jain30
begin
	gsay_reply(46, 171);
	giq_option(4, 46, 172, Jain31, 50);
	giq_option(4, 46, 173, Jain32, 50);
	giq_option(-3, 46, 174, Jain39, 50);
	giq_option(-3, 46, 175, JainEnd, 50);
end

procedure Jain31
begin
	gsay_message(46, 176, 51);
	call JainEndCombat;
end

procedure Jain32
begin
	gsay_reply(46, 177);
	giq_option(4, 46, 178, Jain33, 50);
	giq_option(4, 46, 179, JainEnd, 50);
end

procedure Jain33
begin
	gsay_message(46, 180, 50);
end

procedure Jain34
begin
	set_map_var(0, 1);
	gsay_message(46, 181, 51);
end

procedure Jain35
begin
	set_map_var(0, 1);
	gsay_message(46, 182, 51);
end

procedure Jain36
begin
	gsay_reply(46, 183);
	giq_option(4, 46, 184, Jain14, 50);
	giq_option(4, 46, 185, JainEnd, 50);
end

procedure Jain37
begin
	call UpReact;
	gsay_message(46, 186, 49);
end

procedure Jain38
begin
	gsay_message(46, 187, 50);
end

procedure Jain39
begin
	gsay_message(46, 188, 50);
end

procedure JainEnd
begin
end

procedure JainEndCombat
begin
	call BottomReact;
	set_map_var(0, 1);
	call combat;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end



