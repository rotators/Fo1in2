#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure damage_p_proc;//    script_action == 14
procedure look_at_p_proc;//    script_action == 21
procedure combat_p_proc;//    script_action == 13
procedure timed_event_p_proc;//    script_action == 22

procedure Billy00;
procedure Billy01;
procedure Billy02;
procedure Billy03;
procedure Billy04;
procedure Billy05;
procedure Billy06;
procedure Billy07;
procedure Billy08;
procedure Billy09;
procedure Billy10;
procedure Billy11;
procedure Billy12;
procedure Billy13;
procedure Billy14;
procedure Billy14a;
procedure Billy15;
procedure Billy15a;
procedure Billy16;
procedure Billy17;
procedure Billy18;
procedure Billy19;
procedure Billy20;
procedure Billy21;
procedure Billy22;
procedure Billy23;

procedure BillyRunAway;
procedure SendToStart;
procedure SendToLeft;
procedure SendToRight;
procedure SendToLower;
procedure SendToSleep;
procedure BillyEnd;

import variable Billy_ptr;
import variable Dan_ptr;

variable hostile;
variable Only_Once := 1;
variable Once_Which_One;
variable Runaway;
variable Sleeping;
variable SetDayNight;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 62);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 51);
		Billy_ptr := self_obj;
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
							call combat_p_proc;
						end
						else begin
							if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
								call timed_event_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	if (Runaway == 0) then begin
		if (global_var(DAN_HUB_STATUS) == 1) then begin
			call BillyRunAway;
		end
		if ((game_time_hour >= 600) and (game_time_hour < 700)) then begin
			if (SetDayNight != 1) then begin
				add_timer_event(self_obj, game_ticks(10), 1);
				SetDayNight := 1;
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		call Billy11;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (local_var(6) == 1) then begin
		call Billy10;
	end
	else begin
		if (obj_can_see_obj(self_obj, Dan_ptr) or obj_can_hear_obj(self_obj, Dan_ptr)) then begin
			if (map_var(0) != 2) then begin
				set_map_var(0, 1);
			end
		end
		if (local_var(4) == 1) then begin
			if (map_var(1) == 1) then begin
				call Billy21;
			end
			else begin
				if (map_var(0) == 2) then begin
					call Billy14;
				end
				else begin
					call Billy23;
				end
			end
		end
		else begin
			call Billy00;
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_HUB, 1);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	if (global_var(CHILDKILLER_FROM_HOMIES) == 0) then begin
		if source_obj == dude_obj then begin
			if (metarule(51, self_obj) == 2) or (obj_pid(self_obj) == PID_BOY) or (obj_pid(self_obj) == PID_GIRL) then begin
				set_global_var(CHILDKILLER_REPUTATION, global_var(CHILDKILLER_REPUTATION) + 1);
				set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 4));
			end
		end
	end
	else begin
		if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
			if (metarule(51, self_obj) == 2) or (obj_pid(self_obj) == PID_BOY) or (obj_pid(self_obj) == PID_GIRL) then begin
				set_global_var(CHILDKILLER_REPUTATION, global_var(CHILDKILLER_REPUTATION) + 1);
				set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 4));
			end
		end
	end
	rm_timer_event(self_obj);
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_HUB, 1);
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_BILLY, 100));
end

procedure combat_p_proc
begin
	set_local_var(6, 1);
end

procedure timed_event_p_proc
begin
	if (Runaway == 0) then begin
		if ((game_time_hour >= 600) and (game_time_hour < 700) or ((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
			if (Sleeping == 1) then begin
				reg_anim_func(2, self_obj);
				reg_anim_func(1, 1);
				reg_anim_obj_move_to_tile(self_obj, 13889, -1);
				reg_anim_func(3, 0);
				add_timer_event(self_obj, game_ticks(60 * 5), 2);
				Sleeping := 0;
			end
			else begin
				if (fixed_param == 1) then begin
					call SendToStart;
				end
				if (fixed_param == 2) then begin
					call SendToRight;
				end
				if (fixed_param == 3) then begin
					call SendToLeft;
				end
				if (fixed_param == 4) then begin
					call SendToLower;
				end
			end
		end
		else begin
			call SendToSleep;
		end
	end
end

procedure Billy00
begin
	set_local_var(4, 1);
	start_gdialog(556, self_obj, 4, -1, -1);
	gsay_start;
	gsay_reply(556, 101);
	giq_option(4, 556, 102, Billy04, 50);
	giq_option(4, 556, 103, Billy01, 50);
	giq_option(4, 556, 104, BillyEnd, 50);
	giq_option(-3, 556, 105, Billy06, 50);
	giq_option(-3, 556, 106, Billy06, 50);
	gsay_end;
	end_dialogue;
end

procedure Billy01
begin
	set_local_var(11, 1);
	gsay_reply(556, 107);
	giq_option(4, 556, 108, Billy02, 50);
	giq_option(4, 556, 109, Billy03, 50);
end

procedure Billy02
begin
	set_global_var(MISSING_CARAVAN, 1);
	gsay_message(556, 110, 50);
end

procedure Billy03
begin
	gsay_message(556, 111, 50);
end

procedure Billy04
begin
	set_local_var(10, 1);
	gsay_reply(556, 112);
	giq_option(4, 556, 113, Billy12, 50);
	giq_option(4, 556, 114, Billy05, 50);
end

procedure Billy05
begin
	gsay_reply(556, 115);
	giq_option(4, 556, 116, Billy08, 50);
	giq_option(4, 556, 117, Billy07, 49);
	giq_option(4, 556, 118, BillyEnd, 50);
end

procedure Billy06
begin
	gsay_message(556, 119, 50);
end

procedure Billy07
begin
	gsay_message(556, 120, 49);
end

procedure Billy08
begin
	gsay_reply(556, 121);
	giq_option(4, 556, 122, BillyEnd, 50);
	giq_option(4, 556, 123, Billy09, 49);
end

procedure Billy09
begin
	gsay_message(556, 124, 49);
end

procedure Billy10
begin
	if (Once_Which_One == 0) then begin
		Once_Which_One := 1;
		float_msg(self_obj, message_str(SCRIPT_BILLY, 125), 8);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_BILLY, random(126, 129)), 8);
	end
	animate_move_obj_to_tile(self_obj, 15890, 1);
end

procedure Billy11
begin
	if (local_var(5) == 0) then begin
		set_local_var(5, 1);
		float_msg(self_obj, message_str(SCRIPT_BILLY, 130), 8);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_BILLY, 131), 8);
	end
end

procedure Billy12
begin
	gsay_reply(556, 132);
	giq_option(4, 556, 133, Billy13, 50);
	giq_option(4, 556, 134, BillyEnd, 50);
end

procedure Billy13
begin
	gsay_message(556, 135, 50);
end

procedure Billy14
begin
	if (local_var(7) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_BILLY, 142), 8);
	end
	else begin
		set_local_var(7, 1);
		start_gdialog(556, self_obj, 4, -1, -1);
		gsay_start;
		gsay_reply(556, 136);
		giq_option(4, 556, 137, Billy15, 50);
		giq_option(4, 556, 138, Billy14a, 50);
		giq_option(4, 556, 139, BillyEnd, 50);
		giq_option(-3, 556, 140, Billy06, 50);
		giq_option(-3, 556, 141, Billy06, 50);
		gsay_end;
		end_dialogue;
	end
end

procedure Billy14a
begin
	if (item_caps_total(dude_obj) >= 50) then begin
		item_caps_adjust(dude_obj, -50);
		call Billy19;
	end
	else begin
		call Billy20;
	end
end

procedure Billy15
begin
	gsay_reply(556, 143);
	giq_option(4, 556, 144, Billy15a, 50);
	giq_option(4, 556, 145, Billy18, 51);
	giq_option(4, 556, 146, BillyEnd, 50);
end

procedure Billy15a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Billy16;
	end
	else begin
		call Billy17;
	end
end

procedure Billy16
begin
	gsay_message(556, 147, 50);
end

procedure Billy17
begin
	gsay_message(556, 148, 51);
end

procedure Billy18
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_message(556, 149, 51);
	end
	else begin
		gsay_message(556, 150, 51);
	end
end

procedure Billy19
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_message(556, 151, 49);
	end
	else begin
		gsay_message(556, 152, 49);
	end
	call BillyRunAway;
end

procedure Billy20
begin
	gsay_message(556, 153, 49);
end

procedure Billy21
begin
	if (local_var(8) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_BILLY, random(158, 164)), 8);
	end
	else begin
		set_local_var(8, 1);
		start_gdialog(556, self_obj, 4, -1, -1);
		gsay_start;
		gsay_reply(556, 154);
		giq_option(4, 556, 155, Billy22, 50);
		giq_option(4, 556, 156, BillyEnd, 50);
		giq_option(-3, 556, 157, Billy06, 50);
		gsay_end;
		end_dialogue;
	end
end

procedure Billy22
begin
	gsay_message(556, 165, 50);
end

procedure Billy23
begin
	if (local_var(9) == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_BILLY, random(172, 178)), 8);
	end
	else begin
		set_local_var(9, 1);
		start_gdialog(556, self_obj, 4, -1, -1);
		gsay_start;
		gsay_reply(556, 166);
		if (local_var(10) == 0) then begin
			giq_option(4, 556, 167, Billy04, 50);
		end
		if (local_var(11) == 4) then begin
			giq_option(4, 556, 168, Billy01, 50);
		end
		giq_option(4, 556, 169, BillyEnd, 50);
		giq_option(-3, 556, 170, Billy06, 50);
		giq_option(-3, 556, 171, Billy06, 50);
		gsay_end;
		end_dialogue;
	end
end

procedure BillyRunAway
begin
	Runaway := 1;
	animate_move_obj_to_tile(self_obj, 9858, 1);
end

procedure SendToStart
begin
	if (random(1, 10) >= 7) then begin
		reg_anim_func(2, self_obj);
		reg_anim_func(1, 1);
		reg_anim_obj_move_to_tile(self_obj, 13889, -1);
		reg_anim_func(3, 0);
	end
	else begin
		animate_move_obj_to_tile(self_obj, 13889, 1);
	end
	add_timer_event(self_obj, game_ticks(120), 2);
end

procedure SendToLeft
begin
	if (random(1, 10) >= 7) then begin
		reg_anim_func(2, self_obj);
		reg_anim_func(1, 1);
		reg_anim_obj_move_to_tile(self_obj, 13889, -1);
		reg_anim_func(3, 0);
	end
	else begin
		animate_move_obj_to_tile(self_obj, 13889, 1);
	end
	add_timer_event(self_obj, game_ticks(60), 4);
end

procedure SendToRight
begin
	if (random(1, 10) >= 7) then begin
		reg_anim_func(2, self_obj);
		reg_anim_func(1, 1);
		reg_anim_obj_move_to_tile(self_obj, 12072, -1);
		reg_anim_func(3, 0);
	end
	else begin
		animate_move_obj_to_tile(self_obj, 12072, 1);
	end
	add_timer_event(self_obj, game_ticks(60), 3);
end

procedure SendToLower
begin
	if (random(1, 10) >= 7) then begin
		reg_anim_func(2, self_obj);
		reg_anim_func(1, 1);
		reg_anim_obj_move_to_tile(self_obj, 13872, -1);
		reg_anim_func(3, 0);
	end
	else begin
		animate_move_obj_to_tile(self_obj, 13872, 1);
	end
	add_timer_event(self_obj, game_ticks(90), 1);
end

procedure SendToSleep
begin
	if (Sleeping == 0) then begin
		reg_anim_func(2, self_obj);
		reg_anim_func(1, 1);
		reg_anim_obj_move_to_tile(self_obj, 16285, -1);
		reg_anim_func(3, 0);
		Sleeping := 1;
		SetDayNight := 0;
	end
end

procedure BillyEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
