#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure damage_p_proc;//    script_action == 14
procedure FryDialog;
procedure FryCombat;
procedure FryEnd;
procedure Fry00;
procedure Fry01;
procedure Fry02;
procedure Fry03;
procedure Fry04;
procedure Fry05;
procedure Fry06;
procedure Fry07;
procedure Fry08;
procedure Fry09;
procedure Fry10;
procedure Fry11;
procedure Fry12;
procedure Fry13;
procedure Fry14;
procedure Fry15;
procedure Fry16;
procedure Fry17;
procedure Fry18;
procedure Fry19;
procedure Fry20;
procedure Fry21;
procedure Fry22;
procedure Fry23;
procedure Fry24;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		if (global_var(FRY_DEAD) == 1) then begin
			if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 40);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 86);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	if ((game_time_hour >= 600) and (game_time_hour < 700) or ((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
		if (tile_num(self_obj) != 21508) then begin
			animate_move_obj_to_tile(self_obj, 21508, 0);
		end
		else begin
			if (random(1, 150) == 1) then begin
				animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(3, 5)), 0);
			end
		end
	end
	else begin
		if (tile_num(self_obj) != 22280) then begin
			animate_move_obj_to_tile(self_obj, 22280, 0);
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	call FryDialog;
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	set_global_var(FRY_DEAD, 1);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_FRY, 100));
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_HUB, 1);
	end
end

procedure FryDialog
begin
	if ((game_time_hour >= 1800) and (game_time_hour < 1900) or ((game_time_hour >= 1900) or (game_time_hour < 600))) then begin
		float_msg(self_obj, message_str(SCRIPT_FRY, 146), 3);
	end
	else begin
		start_gdialog(567, self_obj, 4, -1, -1);
		gsay_start;
		if (global_var(WANTED_FOR_MURDER) > 2) then begin
			call Fry11;
		end
		else begin
			if (global_var(GREENE_DEAD) == 1) then begin
				call Fry12;
			end
			else begin
				if (global_var(WANTED_THEFT) > 2) then begin
					call Fry13;
				end
				else begin
					if (local_var(4) == 0) then begin
						call Fry00;
						set_local_var(4, 1);
					end
					else begin
						if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
							call Fry10;
						end
						else begin
							if (local_var(1) == 3) then begin
								call Fry14;
							end
							else begin
								if (local_var(1) == 2) then begin
									call Fry15;
								end
								else begin
									call Fry16;
								end
							end
						end
					end
				end
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure FryCombat
begin
	hostile := 1;
end

procedure FryEnd
begin
end

procedure Fry00
begin
	if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
		gsay_reply(567, 101);
	end
	else begin
		gsay_reply(567, 102);
	end
	giq_option(4, 567, 103, Fry01, 50);
	giq_option(4, 567, 104, FryEnd, 50);
	giq_option(-3, 567, 105, Fry09, 50);
	giq_option(-3, 567, 106, Fry09, 50);
end

procedure Fry01
begin
	gsay_reply(567, 107);
	giq_option(4, 567, 108, Fry02, 50);
	giq_option(4, 567, 109, Fry03, 50);
end

procedure Fry02
begin
	set_global_var(DECKER_KNOWN, 1);
	gsay_reply(567, 110);
	if (global_var(MISSING_CARAVAN) != 2) then begin
		set_global_var(MISSING_CARAVAN, 1);
	end
	call Fry05;
end

procedure Fry03
begin
	set_global_var(DECKER_KNOWN, 1);
	gsay_reply(567, 111);
	if (global_var(MISSING_CARAVAN) != 2) then begin
		set_global_var(MISSING_CARAVAN, 1);
	end
	giq_option(4, 567, 112, Fry07, 50);
	giq_option(4, 567, 113, Fry04, 50);
	giq_option(4, 567, 114, Fry06, 50);
	giq_option(4, 567, 115, Fry21, 50);
	if (global_var(QUEST_VAULT13_4_WATERCHIP) != 2) then begin
		giq_option(4, 567, 147, Fry23, 50);
	end
	giq_option(4, 567, 116, Fry08, 50);
end

procedure Fry04
begin
	gsay_reply(567, 117);
	call Fry05;
end

procedure Fry05
begin
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 567, 112, Fry07, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 567, 114, Fry06, 50);
	end
	giq_option(4, 567, 115, Fry21, 50);
	if (global_var(QUEST_VAULT13_4_WATERCHIP) != 2) then begin
		giq_option(4, 567, 147, Fry23, 50);
	end
	giq_option(4, 567, 116, Fry08, 50);
end

procedure Fry06
begin
	gsay_reply(567, 118);
	call Fry05;
end

procedure Fry07
begin
	gsay_reply(567, 119);
	call Fry05;
end

procedure Fry08
begin
	gsay_message(567, 120, 50);
	call FryEnd;
end

procedure Fry09
begin
	gsay_message(567, 121, 50);
	call FryEnd;
end

procedure Fry10
begin
	gsay_message(567, 122, 50);
	call FryEnd;
end

procedure Fry11
begin
	gsay_message(567, 123, 50);
	call FryCombat;
end

procedure Fry12
begin
	gsay_message(567, 124, 50);
	call FryEnd;
end

procedure Fry13
begin
	gsay_reply(567, 125);
	call FryCombat;
end

procedure Fry14
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(567, 130);
	end
	else begin
		gsay_reply(567, 131);
	end
	call Fry17;
end

procedure Fry15
begin
	gsay_reply(567, 132);
	call Fry17;
end

procedure Fry16
begin
	gsay_reply(567, 133);
	call Fry17;
end

procedure Fry17
begin
	if (global_var(QUEST_VAULT13_4_WATERCHIP) != 2) then begin
		giq_option(4, 567, 147, Fry24, 50);
	end
	giq_option(4, 567, 134, Fry18, 49);
	giq_option(4, 567, 135, Fry19, 50);
	giq_option(4, 567, 136, Fry20, 50);
	giq_option(4, 567, 137, Fry21, 49);
	giq_option(4, 567, 138, FryEnd, 50);
	giq_option(-3, 567, 139, Fry09, 50);
	giq_option(-3, 567, 140, Fry09, 50);
end

procedure Fry18
begin
	gsay_reply(567, 141);
	call Fry17;
end

procedure Fry19
begin
	gsay_reply(567, 142);
	call Fry17;
end

procedure Fry20
begin
	gsay_reply(567, 143);
	call Fry17;
end

procedure Fry21
begin
	gsay_reply(567, 144);
	call Fry17;
end

procedure Fry22
begin
	gsay_message(567, 145, 50);
	call FryEnd;
end

procedure Fry23
begin
	gsay_reply(567, 148);
	call Fry05;
end

procedure Fry24
begin
	gsay_reply(567, 148);
	call Fry17;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end



