#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat_p_proc;//    script_action == 13
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure combat_rads_inc;

procedure Harold00;
procedure Harold00a;
procedure Harold00b;
procedure Harold01;
procedure Harold02;
procedure Harold03;
procedure Harold04;
procedure Harold05;
procedure Harold06;
procedure Harold07;
procedure Harold08;
procedure Harold09;
procedure Harold09a;
procedure Harold10;
procedure Harold10a;
procedure Harold11;
procedure Harold12;
procedure Harold13;
procedure Harold14;
procedure Harold15;
procedure Harold15a;
procedure Harold16;
procedure Harold17;
procedure Harold17a;
procedure Harold18;
procedure Harold19;
procedure Harold20;
procedure Harold21;
procedure Harold22;
procedure Harold23;
procedure Harold24;
procedure Harold25;
procedure Harold25a;
procedure Harold26;
procedure Harold26a;
procedure Harold26b;
procedure Harold27;
procedure Harold28;
procedure Harold29;
procedure Harold30;
procedure Harold31;
procedure Harold32;
procedure Harold33;
procedure Harold34;
procedure Harold36;
procedure Harold37;
procedure Harold38;
procedure Harold39;
procedure Harold39a;
procedure Harold39b;
procedure Harold40;
procedure Harold41;
procedure Harold41a;
procedure Harold42;
procedure Harold43;
procedure Harold43a;
procedure Harold43b;
procedure Harold44;
procedure Harold45;
procedure Harold47;
procedure Harold49;
procedure Harold50;
procedure Harold51;
procedure Harold52;
procedure Harold53;
procedure Harold54;
procedure Harold55;
procedure Harold56;
procedure Harold57;
procedure HaroldEnd;

variable hostile;
variable Only_Once := 1;
variable rndz;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

variable rndx;
variable rndRads;


procedure start
begin
	if self_obj != 0 then begin
		set_global_var(IS_HAROLD_ALIVE, 1);
//		display_msg("Harold exist: self_obj!=0, set_global_var(IS_HAROLD_ALIVE, 1)");
	end
	else begin
		set_global_var(IS_HAROLD_ALIVE, 0);
//		display_msg("Harold dead: self_obj==0, set_global_var(IS_HAROLD_ALIVE, 0)");
	end
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, 17) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, 17); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 2) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, 2); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 1) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, 1); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 74) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, 74); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 113) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, 113); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 41);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 53);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<----caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						 if (script_action == 13) then begin//<-- combat_p_proc , basically does combat_is_initialized == 1
							call combat_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (local_var(4) == 0) then begin
		if (local_var(1) > 1) then begin
			set_local_var(4, 1);
			start_gdialog(45, self_obj, 4, 14, 3);
			gsay_start;
			call Harold00;
			gsay_end;
			end_dialogue;
		end
		else begin
			start_gdialog(45, self_obj, 4, 14, 3);
			gsay_start;
			call Harold39;
			gsay_end;
			end_dialogue;
		end
	end
	else begin
		if (local_var(1) > 1) then begin
			set_local_var(4, 1);
			start_gdialog(45, self_obj, 4, 14, 3);
			gsay_start;
			call Harold41;
			gsay_end;
			end_dialogue;
		end
		else begin
			start_gdialog(45, self_obj, 4, 14, 3);
			gsay_start;
			call Harold55;
			gsay_end;
			end_dialogue;
		end
	end
end

procedure destroy_p_proc
begin
	set_global_var(IS_HAROLD_ALIVE, 0);
//	display_msg("Harold killed, set_global_var(IS_HAROLD_ALIVE, 0)");
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(45, 100));
end

procedure Harold00
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(45, 266);
	end
	else begin
		gsay_reply(45, 267);
	end
	giq_option(4, 45, 102, Harold00a, 50);
	giq_option(4, 45, 103, Harold00b, 50);
	giq_option(4, 45, 104, Harold38, 50);
	if (global_var(MISSING_CARAVANS_STATUS) == 2) then begin
		giq_option(4, 45, 225, Harold45, 50);
	end
	giq_option(4, 45, 105, Harold37, 51);
	giq_option(-3, 45, 106, Harold01, 50);
end

procedure Harold00a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		call Harold02;
	end
	else begin
		call Harold01;
	end
end

procedure Harold00b
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 5) then begin
		item_caps_adjust(dude_obj, -5);
		call Harold02;
	end
	else begin
		call Harold01;
	end
end

procedure Harold01
begin
	gsay_message(45, 107, 50);
end

procedure Harold02
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(45, 268);
	end
	else begin
		gsay_reply(45, 269);
	end
	giq_option(4, 45, 109, Harold03, 50);
	if (global_var(MISSING_CARAVANS_STATUS) == 2) then begin
		giq_option(4, 45, 225, Harold45, 50);
	end
	giq_option(4, 45, 110, HaroldEnd, 50);
end

procedure Harold03
begin
	gsay_reply(45, 111);
	giq_option(4, 45, 112, Harold04, 50);
	giq_option(4, 45, 113, Harold36, 50);
	giq_option(4, 45, 114, HaroldEnd, 50);
end

procedure Harold04
begin
	gsay_reply(45, 115);
	giq_option(4, 45, 116, Harold05, 50);
	giq_option(4, 45, 117, Harold32, 50);
end

procedure Harold05
begin
	gsay_reply(45, 118);
	giq_option(4, 45, 119, Harold07, 50);
	giq_option(4, 45, 120, Harold06, 50);
	giq_option(4, 45, 121, Harold30, 50);
end

procedure Harold06
begin
	gsay_reply(45, 122);
	giq_option(4, 45, 123, Harold07, 50);
end

procedure Harold07
begin
	gsay_reply(45, 124);
	giq_option(4, 45, 125, Harold08, 50);
end

procedure Harold08
begin
	gsay_reply(45, 126);
	giq_option(4, 45, 127, Harold09, 50);
	giq_option(4, 45, 128, Harold10, 50);
end

procedure Harold09
begin
	gsay_reply(45, 129);
	giq_option(4, 45, 130, Harold09a, 50);
end

procedure Harold09a
begin
	gsay_reply(45, 131);
	giq_option(4, 45, 132, Harold11, 50);
end

procedure Harold10
begin
	gsay_reply(45, 133);
	giq_option(4, 45, 134, Harold11, 50);
	giq_option(4, 45, 135, Harold12, 50);
	giq_option(4, 45, 136, Harold10a, 50);
end

procedure Harold10a
begin
	gsay_message(45, 137, 50);
	call Harold11;
end

procedure Harold11
begin
	gsay_reply(45, 138);
	giq_option(4, 45, 139, Harold14, 50);
	giq_option(4, 45, 140, Harold13, 50);
end

procedure Harold12
begin
	gsay_reply(45, 141);
	giq_option(4, 45, 142, Harold11, 50);
end

procedure Harold13
begin
	gsay_reply(45, 143);
	giq_option(4, 45, 144, Harold15, 50);
	giq_option(4, 45, 145, Harold14, 50);
end

procedure Harold14
begin
	gsay_reply(45, 146);
	giq_option(4, 45, 147, Harold18, 50);
end

procedure Harold15
begin
	gsay_reply(45, 148);
	giq_option(4, 45, 149, Harold14, 50);
	giq_option(4, 45, 150, Harold15a, 50);
	giq_option(4, 45, 152, HaroldEnd, 50);
end

procedure Harold15a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		set_local_var(6, 1);
		call Harold14;
	end
	else begin
		call Harold17;
	end
end

procedure Harold16
begin
	gsay_message(45, 153, 50);
	giq_option(4, 45, 154, Harold14, 50);
end

procedure Harold17
begin
	gsay_message(45, 156, 50);
	if (local_var(1) >= 3) then begin
		call Harold16;
	end
	else begin
		call Harold17a;
	end
end

procedure Harold17a
begin
	gsay_reply(45, 157);
	giq_option(4, 45, 158, HaroldEnd, 50);
	giq_option(4, 45, 159, Harold14, 50);
end

procedure Harold18
begin
	gsay_reply(45, 160);
	giq_option(4, 45, 161, Harold20, 50);
	giq_option(4, 45, 162, Harold19, 50);
end

procedure Harold19
begin
	gsay_reply(45, 163);
	giq_option(4, 45, 164, Harold21, 50);
end

procedure Harold20
begin
	gsay_reply(45, 165);
	giq_option(4, 45, 166, Harold21, 50);
end

procedure Harold21
begin
	gsay_reply(45, 167);
	giq_option(4, 45, 168, Harold22, 50);
end

procedure Harold22
begin
	gsay_reply(45, 169);
	giq_option(4, 45, 170, Harold23, 50);
	giq_option(4, 45, 171, Harold24, 50);
end

procedure Harold23
begin
	gsay_reply(45, 172);
	giq_option(4, 45, 173, Harold24, 50);
end

procedure Harold24
begin
	gsay_reply(45, 174);
	giq_option(4, 45, 175, Harold25, 50);
end

procedure Harold25
begin
	gsay_reply(45, 176);
	giq_option(4, 45, 177, Harold25a, 50);
	giq_option(4, 45, 178, Harold27, 50);
end

procedure Harold25a
begin
	gsay_reply(45, 179);
	giq_option(4, 45, 180, Harold26, 50);
end

procedure Harold26
begin
	gsay_reply(45, 181);
	giq_option(4, 45, 182, Harold28, 50);
	giq_option(4, 45, 183, Harold26a, 50);
end

procedure Harold26a
begin
	set_local_var(5, 1);
	if (local_var(6) == 1) then begin
		gsay_reply(45, 184);
		giq_option(4, 45, 185, Harold26b, 50);
	end
	else begin
		gsay_message(45, 184, 50);
	end
end

procedure Harold26b
begin
	gsay_message(45, 187, 50);
end

procedure Harold27
begin
	gsay_reply(45, 188);
	giq_option(4, 45, 189, Harold26, 50);
end

procedure Harold28
begin
	gsay_reply(45, 190);
	giq_option(4, 45, 191, Harold29, 50);
	giq_option(4, 45, 192, Harold26a, 50);
end

procedure Harold29
begin
	gsay_reply(45, 193);
	giq_option(4, 45, 194, Harold26a, 50);
end

procedure Harold30
begin
	gsay_reply(45, 195);
	giq_option(4, 45, 196, Harold31, 50);
end

procedure Harold31
begin
	gsay_reply(45, 197);
	giq_option(4, 45, 198, Harold07, 50);
end

procedure Harold32
begin
	gsay_reply(45, 199);
	giq_option(4, 45, 200, Harold11, 50);
end

procedure Harold33
begin
	gsay_reply(45, 201);
	giq_option(4, 45, 202, Harold34, 50);
	giq_option(4, 45, 203, HaroldEnd, 50);
end

procedure Harold34
begin
	gsay_reply(45, 204);
	giq_option(4, 45, 205, Harold05, 50);
end

procedure Harold36
begin
	gsay_message(45, 207, 50);
end

procedure Harold37
begin
	call BigDownReact;
	gsay_message(45, 208, 51);
end

procedure Harold38
begin
	gsay_message(45, 209, 50);
end

procedure Harold39
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(45, 272);
	end
	else begin
		gsay_reply(45, 273);
	end
	giq_option(4, 45, 211, Harold39a, 50);
	giq_option(4, 45, 212, Harold39b, 50);
	if (global_var(MISSING_CARAVANS_STATUS) == 2) then begin
		giq_option(4, 45, 225, Harold45, 50);
	end
	giq_option(4, 45, 213, Harold38, 50);
	giq_option(-3, 45, 214, Harold01, 50);
end

procedure Harold39a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 25) then begin
		item_caps_adjust(dude_obj, -25);
		call Harold40;
	end
	else begin
		call Harold01;
	end
end

procedure Harold39b
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 5) then begin
		item_caps_adjust(dude_obj, -5);
		call Harold40;
	end
	else begin
		call Harold01;
	end
end

procedure Harold40
begin
	gsay_reply(45, 215);
	giq_option(4, 45, 216, Harold03, 50);
	giq_option(4, 45, 217, HaroldEnd, 50);
end

procedure Harold41
begin
	gsay_reply(45, 218);
	giq_option(4, 45, 219, Harold41a, 50);
	giq_option(4, 45, 220, Harold43, 50);
	giq_option(-3, 45, 221, HaroldEnd, 50);
end

procedure Harold41a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 20) then begin
		item_caps_adjust(dude_obj, -20);
		call Harold43;
	end
	else begin
		call Harold01;
	end
end

procedure Harold42
begin
	call DownReact;
	gsay_message(45, 222, 51);
end

procedure Harold43
begin
	gsay_reply(45, 223);
	if (global_var(MISSING_CARAVANS_STATUS) == 2) then begin
		giq_option(4, 45, 225, Harold45, 50);
	end
	if (((global_var(THE_HUB_INVADED_DATE) - (game_time / (10 * 60 * 60 * 24))) < 10) or (global_var(QUEST_BROHOOD_2_FIND_LOST) == 1)) then begin
		giq_option(4, 45, 224, Harold43b, 50);
	end
	if (local_var(5) == 0) then begin
		giq_option(4, 45, 226, Harold43a, 50);
	end
	giq_option(4, 45, 265, HaroldEnd, 50);
end

procedure Harold43a
begin
	gsay_message(45, 228, 50);
	call Harold04;
end

procedure Harold43b
begin
	if (global_var(QUEST_BROHOOD_2_FIND_LOST) == 1) then begin
		call Harold53;
	end
	else begin
		if ((global_var(THE_HUB_INVADED_DATE) - (game_time / (10 * 60 * 60 * 24))) < 10) then begin
			call Harold54;
		end
	end
end

procedure Harold44
begin
	gsay_message(45, 229, 50);
end

procedure Harold45
begin
	set_global_var(MISSING_CARAVANS_STATUS, 3);
	gsay_reply(45, 230);
	giq_option(4, 45, 231, Harold47, 50);
	giq_option(4, 45, 232, Harold47, 50);
end

procedure Harold47
begin
	set_global_var(KILL_DEATHCLAW, 1);
	gsay_reply(45, 233);
	giq_option(4, 45, 234, Harold49, 50);
end

procedure Harold49
begin
	gsay_reply(45, 235);
	giq_option(4, 45, 236, Harold50, 50);
end

procedure Harold50
begin
	gsay_reply(45, 237);
	giq_option(4, 45, 238, Harold51, 50);
end

procedure Harold51
begin
	gsay_reply(45, 239);
	giq_option(4, 45, 240, HaroldEnd, 50);
end

procedure Harold52
begin
	gsay_message(45, 241, 50);
end

procedure Harold53
begin
	set_global_var(DECKER_KNOWN, 1);
	gsay_reply(45, 242);
	giq_option(4, 45, 243, HaroldEnd, 50);
end

procedure Harold54
begin
	gsay_reply(45, 244);
	giq_option(4, 45, 245, HaroldEnd, 50);
end

procedure Harold55
begin
	gsay_reply(45, 246);
	giq_option(4, 45, 247, Harold56, 50);
	giq_option(4, 45, 248, Harold57, 50);
end

procedure Harold56
begin
	gsay_message(45, 249, 51);
end

procedure Harold57
begin
	gsay_message(45, 250, 51);
end

procedure HaroldEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(634, random(100, 105));
end
 
procedure combat_p_proc
begin
	if (fixed_param == 2) then begin
		if (target_obj == dude_obj) then begin
			if global_var(DEBUG_MODE_MESSAGES_ON) then begin
				debug_msg("Combat Rads From Irradiated Critters BEGINS");
			end
			if not(global_var(FIXT_BUGFIXES_ONLY)) then begin
				variable cont := 0;// checked to see if continue to run the code after each stage
				variable CritterTYPE := 0;// 1 = Ghoul, 2 = Floater, 3 = Centaur, 4 = RadRat, 5 = GlowingOne
				if global_var(HIT_GIVES_RADS_GHOULS) > 0 then begin// HIT_GIVES_RADS_GHOULS
					if (obj_pid(self_obj) == (16777216 + 14)) or (obj_pid(self_obj) == (16777216 + 104)) or (obj_pid(self_obj) == (16777216 + 105)) or (obj_pid(self_obj) == (16777216 + 106)) or (obj_pid(self_obj) == (16777216 + 109)) or (obj_pid(self_obj) == (16777216 + 110)) or (obj_pid(self_obj) == (16777216 + 131)) or (obj_pid(self_obj) == (16777216 + 157)) or (obj_pid(self_obj) == (16777216 + 184)) then begin// 14 = Zombie Guard, 104 = Set, 105 = Garret, 106 = Zombie, 109 = Ghoul Guard, 110 = Undergrounder, 131 = Talius, 157 = Harold, 184 = Zombie
						CritterTYPE := 1;
						cont := 1;
					end
				end
				if not(continue) then begin
					if global_var(HIT_GIVES_MORE_RADS_GLOW) > 0 then begin// HIT_GIVES_MORE_RADS_GLOW
						if (obj_pid(self_obj) == (16777216 + 16)) or (obj_pid(self_obj) == (16777216 + 182)) or (obj_pid(self_obj) == (16777216 + 183)) then begin// 16 = Glowing One, 182 = Glower, 183 = Mad Glowing One
							CritterTYPE := 5;
							cont := 1;
						end
					end
				end
				if not(continue) then begin
					if global_var(HIT_GIVES_MORE_RADS_RATS) > 0 then begin// HIT_GIVES_MORE_RADS_RATS
						if (obj_pid(self_obj) == (16777216 + 160)) or (obj_pid(self_obj) == (16777216 + 161)) then begin//  160, 161 = Rad Rat
							CritterTYPE := 4;
							cont := 1;
						end
					end
				end
				if not(continue) then begin
					if global_var(HIT_GIVES_RADS_FLOATERS) > 0 then begin// HIT_GIVES_RADS_FLOATERS
						if (obj_pid(self_obj) == (16777216 + 45)) or (obj_pid(self_obj) == (16777216 + 167)) then begin//  45 = Floater, 167 = Bloody Floater
							CritterTYPE := 2;
							cont := 1;
						end
					end
				end
				if not(continue) then begin
					if global_var(HIT_GIVES_RADS_CENTAURS) > 0 then begin// HIT_GIVES_RADS_CENTAURS
						if (obj_pid(self_obj) == (16777216 + 43)) or (obj_pid(self_obj) == (16777216 + 168)) then begin//  43 = Lesser Centaur, 168 = Greater Centaur
							CritterTYPE := 3;
							cont := 1;
						end
					end
				end
				if continue then begin
					variable BonusRads := 0;
					if (CritterTYPE == 5) or (CritterTYPE == 4) then begin
						BonusRads := 1;
					end
					if (random(0, 3) + combat_difficulty + BonusRads) >= 3 then begin// CHANCE TO RUN = Easy: 25%, 50% if glowing/radrat - Normal: 50%, 75% if glowing - Brutal: 75%, 100% if glowing/radrat
						variable giveRads := 1;
						if critter_inven_obj(self_obj, 1) then begin
							if (obj_pid(critter_inven_obj(self_obj, 1)) != 21) and (obj_pid(critter_inven_obj(self_obj, 1)) != 234) and (obj_pid(critter_inven_obj(self_obj, 1)) != 235) then begin// Brass Knuckles, Spiked Knuckles, Power Fist
								giveRads := 0;
							end
						end
						if critter_inven_obj(self_obj, 2) then begin
							if (obj_pid(critter_inven_obj(self_obj, 2)) != 21) and (obj_pid(critter_inven_obj(self_obj, 2)) != 234) and (obj_pid(critter_inven_obj(self_obj, 2)) != 235) then begin// Brass Knuckles, Spiked Knuckles, Power Fist
								giveRads := 0;
							end
						end
						if giveRads == 1 then begin
							variable LuckRoll := 0;
							variable EnduranceRoll := 0;
							LuckRoll := do_check(dude_obj, 6, 0);
							EnduranceRoll := do_check(dude_obj, 2, 0);
							rndRads := 0;
							if not(is_success(LuckRoll)) and not(is_success(EnduranceRoll)) then begin
								rndRads := random((2 + combat_difficulty + BonusRads), (3 + combat_difficulty + BonusRads));// EASY: 2-3 / 3-4 if glowing/radrat, NORMAL: 3-4 / 4-5 if glowing/radrat, BRUTAL: 4-5 / 5-6 if glowing/radrat
							end
							else begin
								if not(is_success(LuckRoll)) or not(is_success(EnduranceRoll)) then begin
									rndRads := random((1 + combat_difficulty + BonusRads), (2 + combat_difficulty + BonusRads));// EASY: 1-2 / 2-3 if glowing/radrat, NORMAL: 2-3 / 3-4 if glowing/radrat, BRUTAL: 3-4 / 4-5 if glowing/radrat
								end
								else begin
									if (random(0, 5) + BonusRads) >= 5 then begin// Chance to run if both stat checks pass: 16.67%, 33% if glowing/radrat
										rndRads := random((0 + combat_difficulty + BonusRads), (1 + combat_difficulty + BonusRads));// EASY: 0-1 / 1-2 if glowing/radrat, NORMAL: 1-2 / 2-3 if glowing/radrat, BRUTAL: 2-3 / 3-4 if glowing/radrat
									end
								end
							end
							if rndRads > 0 then begin
								call combat_rads_inc;
							end
						end
					end
				end
			end
			else begin// if (BUG_FIXES_ONLY == 1)
				if (obj_pid(self_obj) == 16777232) or (obj_pid(self_obj) == 16777376) or (obj_pid(self_obj) == 16777377) or (obj_pid(self_obj) == 16777398) or (obj_pid(self_obj) == 16777399) then begin
					variable rndx := 0;
					rndx := (random(1, 4) - 3);// was 1d6 - 5, is now 1d4 - 3
					if (rndx < 0) then begin
						rndx := 0;
					end
					if (rndx > 0) then begin
						radiation_inc(dude_obj, rndx);
						display_msg(message_str(32, 1004));
					end
				end
			end
			if global_var(DEBUG_MODE_MESSAGES_ON) then begin
				debug_msg("Combat Rads From Irradiated Critters ENDS");
			end
		end
	end
end

procedure combat_rads_inc
begin
	radiation_inc(dude_obj, rndRads);
	if ((rndRads == 1) or (rndRads == 2)) then begin
		display_msg(message_str(32, 1004));
	end
	else begin
		if ((rndRads > 2) and (rndRads <= 5)) then begin
			display_msg(message_str(32, 1005));
		end
		else begin
			if ((rndRads > 5) and (rndRads < 10)) then begin
				display_msg(message_str(32, 1006));
			end
		end
	end
end

