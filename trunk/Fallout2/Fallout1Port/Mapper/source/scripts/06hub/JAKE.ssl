#include "..\headers\define.h"

procedure start;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_update_p_proc;//    script_action == 23
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22

procedure Jake00;
procedure Jake01;
procedure Jake02;
procedure Jake03;
procedure Jake04;
procedure Jake05;
procedure Jake06;
procedure Jake07;
procedure Jake08;
procedure Jake09;
procedure Jake10;
procedure Jake11;
procedure Jake12;
procedure Jake13;
procedure Jake14;
procedure Jake15;
procedure Jake16;
procedure Jake17;
procedure Jake18;
procedure JakeCombat;
procedure JakeEnd;

variable hostile;
variable initial :=  0;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		initial :=  1;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 34);
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
			call timed_event_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 23) then begin//map_update_p_proc -- called every dozen seconds or so, & additionally on certain events (exit dialog, end combat, load map, etc)
						call map_update_p_proc;
					end
					else begin
						if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
							call pickup_p_proc;
						end
						else begin
							if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
								call talk_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj) and (map_var(1) == 1)) then begin
		float_msg(self_obj, message_str(SCRIPT_JAKE, 143), 3);
		animate_move_obj_to_tile(self_obj, 15484, 0);
		add_timer_event(self_obj, game_ticks(15), 1);
	end
	if (obj_can_see_obj(self_obj, dude_obj) and (map_var(1) == 2)) then begin
		float_msg(self_obj, message_str(SCRIPT_JAKE, 144), 3);
		hostile := 1;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4) == 1) then begin
		display_msg(message_str(SCRIPT_JAKE, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_JAKE, 101));
	end
end

procedure map_update_p_proc
begin
	if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
		kill_critter(self_obj, ANIM_burned_to_nothing_sf);
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (not(local_var(5))) then begin
		start_gdialog(268, self_obj, 4, -1, -1);
		gsay_start;
		set_local_var(4, 1);
		if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
			call Jake14;
		end
		else begin
			if (global_var(SLIDE_TRAIN_FOLLOWERS)) then begin
				call Jake17;
			end
			else begin
				if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 2) then begin
					call Jake16;
				end
				else begin
					if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 1) then begin
						call Jake15;
					end
					else begin
						call Jake00;
					end
				end
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure timed_event_p_proc
begin
	float_msg(self_obj, message_str(SCRIPT_JAKE, 143), 3);
	set_map_var(1, 2);
end

procedure Jake00
begin
	gsay_reply(268, 102);
	giq_option(-3, 268, 103, Jake01, 50);
	giq_option(4, 268, 104, Jake02, 50);
	giq_option(4, 268, 105, Jake12, 50);
	giq_option(4, 268, 106, Jake13, 50);
	if ((global_var(QUEST_BONEYARD_3_BOMBFOLL) == 1) and (obj_is_carrying_obj_pid(dude_obj, PID_BRIEFCASE) != 0)) then begin
		giq_option(4, 268, 141, Jake18, 50);
	end
end

procedure Jake01
begin
	gsay_message(268, 107, 50);
end

procedure Jake02
begin
	gsay_reply(268, 108);
	giq_option(4, 268, 109, Jake03, 50);
	giq_option(4, 268, 110, JakeEnd, 50);
	giq_option(4, 268, 111, Jake04, 50);
end

procedure Jake03
begin
	gsay_reply(268, 112);
	giq_option(4, 268, 113, JakeEnd, 50);
end

procedure Jake04
begin
	gsay_reply(268, 114);
	giq_option(4, 268, 115, Jake05, 50);
	giq_option(4, 268, 116, Jake06, 50);
end

procedure Jake05
begin
	gsay_message(268, 117, 50);
	set_local_var(5, 1);
end

procedure Jake06
begin
	gsay_reply(268, 118);
	giq_option(4, 268, 119, Jake07, 50);
	giq_option(4, 268, 120, Jake11, 50);
end

procedure Jake07
begin
	gsay_reply(268, 121);
	giq_option(4, 268, 122, Jake08, 50);
	giq_option(4, 268, 123, Jake09, 50);
	giq_option(4, 268, 124, Jake10, 50);
end

procedure Jake08
begin
	set_global_var(QUEST_BONEYARD_4_FIND_SPY, 1);
	gsay_message(268, 125, 50);
end

procedure Jake09
begin
	gsay_reply(268, 126);
	giq_option(4, 268, 127, Jake08, 50);
	giq_option(4, 268, 128, Jake10, 50);
end

procedure Jake10
begin
	gsay_message(268, 129, 50);
	call JakeCombat;
end

procedure Jake11
begin
	gsay_message(268, 130, 50);
end

procedure Jake12
begin
	gsay_reply(268, 131);
	giq_option(4, 268, 132, Jake07, 50);
	giq_option(4, 268, 133, Jake08, 50);
	giq_option(4, 268, 134, Jake09, 50);
	giq_option(4, 268, 135, Jake10, 50);
end

procedure Jake13
begin
	gsay_message(268, 136, 50);
end

procedure Jake14
begin
	gsay_message(268, 137, 50);
end

procedure Jake15
begin
	gsay_message(268, 138, 50);
end

procedure Jake16
begin
	gsay_message(268, 139, 50);
end

procedure Jake17
begin
	gsay_message(268, 140, 50);
end

procedure Jake18
begin
	variable LVar0 := 0;
	LVar0 := obj_carrying_pid_obj(dude_obj, PID_BRIEFCASE);
	rm_obj_from_inven(dude_obj, LVar0);
	destroy_object(LVar0);
	gsay_message(268, 142, 50);
end

procedure JakeCombat
begin
	hostile := 1;
end

procedure JakeEnd
begin
end
