#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure damage_p_proc;//    script_action == 14
procedure look_at_p_proc;//    script_action == 21
procedure timed_event_p_proc;//    script_action == 22


procedure Lemmy01;
procedure Lemmy02;
procedure Lemmy03;
procedure Lemmy04;
procedure Lemmy05;
procedure Lemmy06;
procedure Lemmy08;
procedure Lemmy09;
procedure Lemmy10;
procedure Lemmy10a;
procedure Lemmy10b;
procedure Lemmy10c;
procedure Lemmy11;
procedure Lemmy12;
procedure Lemmy13;
procedure Lemmy14;
procedure Lemmy15;
procedure Lemmy16;
procedure Lemmy17;
procedure Lemmy18;
procedure Lemmy19;
procedure Lemmy20;
procedure Lemmy20a;
procedure Lemmy20b;
procedure Lemmy20c;
procedure Lemmy20d;
procedure Lemmy20e;
procedure Lemmy20f;
procedure Lemmy21;
procedure Lemmy22;
procedure Lemmy23;
procedure Lemmy24;
procedure Lemmy24a;
procedure Lemmy24b;
procedure Lemmy24c;
procedure Lemmy24d;
procedure Lemmy24e;
procedure Lemmy24f;
procedure Lemmy25;
procedure Lemmy26;
procedure Lemmy27;
procedure LemmyEnd;

procedure LemmyCombat;
procedure SendLemmyAtDay;
procedure combat;

variable tmp_hostile;
variable Only_Once := 1;
variable lastPsst;
variable Destination;
variable LastMove;
variable SetDayNight;

procedure start
begin
	

	if Only_Once then begin
		Only_Once := 0;
		if (local_var(7) == 0) then begin
			set_local_var(7, 1);
			item_caps_adjust(self_obj, 500);
		end
		set_self_team(TEAM_HUB_SKAG );
		set_self_ai( AI_HUB_PEASANTS );
		LastMove := 21325;
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat
begin
	tmp_hostile := 1;
end

procedure critter_p_proc
begin
	variable LVar0 := 0;
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if (SetDayNight == 0) then begin
		add_timer_event(self_obj, game_ticks(random(5, 20)), 1);
		SetDayNight := 1;
	end
	if (local_var(6) == 0) then begin
		if ((((game_time / 10) - lastPsst) >= 10) and (tile_distance_objs(self_obj, dude_obj) <= 6)) then begin
			lastPsst := game_time / 10;
			float_msg(self_obj, message_str(SCRIPT_LEMMY, 101), 2);
		end
	end
	LVar0 := tile_num(self_obj);
	if ((LVar0 == 21917) or (LVar0 == 20116) or (LVar0 == 25318)) then begin
		if (anim_busy(self_obj) == 0) then begin
			if (has_trait( TRAIT_OBJECT, self_obj, OBJECT_CUR_ROT ) != 3) then begin
				anim(self_obj, 1000, 3);
			end
		end
	end
	else begin
		if (LVar0 == 26327) then begin
			if (anim_busy(self_obj) == 0) then begin
				if (has_trait( TRAIT_OBJECT, self_obj, OBJECT_CUR_ROT ) != 2) then begin
					anim(self_obj, 1000, 2);
				end
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		tmp_hostile := 1;
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	get_reaction
	set_local_var(6, 1);
	if (local_var(4) == 0) then begin
		set_local_var(4, 1);
		start_gdialog(846, self_obj, 4, -1, -1);
		gsay_start;
		call Lemmy01;
		gsay_end;
		end_dialogue;
	end
	else begin
		if (local_var(5) == 1) then begin
			start_gdialog(846, self_obj, 4, -1, -1);
			gsay_start;
			call Lemmy26;
			gsay_end;
			end_dialogue;
		end
		else begin
			start_gdialog(846, self_obj, 4, -1, -1);
			gsay_start;
			call Lemmy27;
			gsay_end;
			end_dialogue;
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
	end
	rm_timer_event(self_obj);
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_HUB, 1);
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_LEMMY, 100));
end

procedure timed_event_p_proc
begin
	call SendLemmyAtDay;
end

procedure SendLemmyAtDay
begin
	variable LVar0 := 0;
	Destination := 0;
	LVar0 := random(25, 45);
	while(Destination == 0) do begin
		Destination := random(1, 9);
		if (Destination == 1) then begin
			Destination := 25931;
		end
		else begin
			if (Destination == 2) then begin
				Destination := 25551;
			end
			else begin
				if (Destination == 3) then begin
					Destination := 21325;
				end
				else begin
					if (Destination == 4) then begin
						Destination := 21917;
					end
					else begin
						if (Destination == 5) then begin
							Destination := 18925;
						end
						else begin
							if (Destination == 6) then begin
								Destination := 23322;
							end
							else begin
								if (Destination == 7) then begin
									Destination := 26327;
								end
								else begin
									if (Destination == 8) then begin
										Destination := 20116;
									end
									else begin
										if (Destination == 9) then begin
											Destination := 25318;
										end
									end
								end
							end
						end
					end
				end
			end
		end
		if (Destination == LastMove) then begin
			Destination := 0;
		end
	end
	LastMove := Destination;
	reg_anim_func(2, self_obj);
	reg_anim_func(1, 1);
	reg_anim_obj_move_to_tile(self_obj, Destination, -1);
	reg_anim_func(3, 0);
	rm_timer_event(self_obj);
	add_timer_event(self_obj, game_ticks(LVar0), 1);
end

procedure Lemmy01
begin
	gsay_reply(846, 102);
	giq_option( 4, SCRIPT_LEMMY, 103, Lemmy03, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 104, Lemmy04, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 105, Lemmy05, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_LEMMY, 106, Lemmy02, NEUTRAL_REACTION );
end

procedure Lemmy02
begin
	gsay_reply(846, 107);
	giq_option( -3, SCRIPT_LEMMY, 108, LemmyEnd, NEUTRAL_REACTION );
end

procedure Lemmy03
begin
	set_local_var(5, 1);
	gsay_message(846, 109, 50);
end

procedure Lemmy04
begin
	if (dude_is_male) then begin
		gsay_reply(846, 110);
	end
	else begin
		gsay_reply(846, 178);
	end
	giq_option( 4, SCRIPT_LEMMY, 111, Lemmy06, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 112, LemmyCombat, BAD_REACTION );
	giq_option( 5, SCRIPT_LEMMY, 113, Lemmy03, NEUTRAL_REACTION );
end

procedure Lemmy05
begin
	gsay_reply(846, 114);
	if (global_var(VANCE_KNOWS_PLAYER) != 1) then begin
		giq_option( 4, SCRIPT_LEMMY, 116, Lemmy23, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_LEMMY, 117, Lemmy09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 118, Lemmy03, NEUTRAL_REACTION );
end

procedure Lemmy06
begin
	gsay_reply(846, 119);
	giq_option( 4, SCRIPT_LEMMY, 120, Lemmy05, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 121, Lemmy09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 123, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy08
begin
	gsay_message(846, 128, 50);
end

procedure Lemmy09
begin
	gsay_reply(846, 129);
	call Lemmy18;
end

procedure Lemmy10
begin
	gsay_reply(846, 130);
	giq_option( 4, SCRIPT_LEMMY, 131, Lemmy10a, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 132, Lemmy10b, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 133, Lemmy10c, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 134, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy10a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 500) then begin
		item_caps_adjust(dude_obj, -500);
		call Lemmy13;
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy10b
begin
	variable LVar0 := 0;
	if (is_success(do_check(dude_obj, STAT_ch, -3)) or is_success(roll_vs_skill(dude_obj, SKILL_BARTER, -30))) then begin
		if (item_caps_total(dude_obj) >= 400) then begin
			item_caps_adjust(dude_obj, -400);
			call Lemmy14;
		end
		else begin
			call Lemmy11;
		end
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy10c
begin
	if (is_success(do_check(dude_obj, STAT_st, -3))) then begin
		call Lemmy15;
	end
	else begin
		call Lemmy12;
	end
end

procedure Lemmy11
begin
	gsay_message(846, 135, 50);
end

procedure Lemmy12
begin
	set_local_var(5, 1);
	gsay_message(846, 136, 51);
end

procedure Lemmy13
begin
	gsay_message(846, 137, 50);
	call Lemmy16;
end

procedure Lemmy14
begin
	gsay_message(846, 138, 50);
	call Lemmy16;
end

procedure Lemmy15
begin
	gsay_message(846, 139, 50);
	call Lemmy16;
end

procedure Lemmy16
begin
	gsay_reply(846, 140);
	giq_option( 4, SCRIPT_LEMMY, 141, Lemmy17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 142, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy17
begin
	gsay_message(846, 143, 50);
	call Lemmy18;
end

procedure Lemmy18
begin
	if (global_var(QUEST_VAULT13_4_WATERCHIP) != 2) then begin
		giq_option( 4, SCRIPT_LEMMY, 144, Lemmy10, NEUTRAL_REACTION );
	end
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option( 4, SCRIPT_LEMMY, 145, Lemmy19, NEUTRAL_REACTION );
	end
	if (map_var(41) == 1) then begin
		giq_option( 4, SCRIPT_LEMMY, 146, Lemmy20, NEUTRAL_REACTION );
	end
	if (global_var(VANCE_KNOWS_PLAYER) != 1) then begin
		giq_option( 4, SCRIPT_LEMMY, 147, Lemmy23, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_LEMMY, 148, Lemmy08, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_LEMMY, 106, Lemmy02, NEUTRAL_REACTION );
end

procedure Lemmy19
begin
	gsay_reply(846, 149);
	giq_option( 4, SCRIPT_LEMMY, 150, Lemmy17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 151, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy20
begin
	gsay_reply(846, 152);
	giq_option( 4, SCRIPT_LEMMY, 153, Lemmy20a, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 154, Lemmy20b, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 155, Lemmy20c, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 156, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy20a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 300) then begin
		item_caps_adjust(dude_obj, -300);
		call Lemmy20d;
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy20b
begin
	variable LVar0 := 0;
	if (is_success(do_check(dude_obj, STAT_ch, -3)) or is_success(roll_vs_skill(dude_obj, SKILL_BARTER, -30))) then begin
		if (item_caps_total(dude_obj) >= 240) then begin
			item_caps_adjust(dude_obj, -240);
			call Lemmy20e;
		end
		else begin
			call Lemmy11;
		end
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy20c
begin
	if (is_success(do_check(dude_obj, STAT_st, -3))) then begin
		call Lemmy20f;
	end
	else begin
		call Lemmy12;
	end
end

procedure Lemmy20d
begin
	gsay_message(846, 137, 50);
	call Lemmy21;
end

procedure Lemmy20e
begin
	gsay_message(846, 138, 50);
	call Lemmy21;
end

procedure Lemmy20f
begin
	gsay_message(846, 139, 50);
	call Lemmy21;
end

procedure Lemmy21
begin
	gsay_reply(846, 157);
	giq_option( 4, SCRIPT_LEMMY, 158, Lemmy22, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 159, Lemmy17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 160, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy22
begin
	gsay_reply(846, 161);
	giq_option( 4, SCRIPT_LEMMY, 162, Lemmy17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 163, LemmyCombat, BAD_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 164, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy23
begin
	gsay_reply(846, 165);
	giq_option( 4, SCRIPT_LEMMY, 166, Lemmy24, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 167, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy24
begin
	gsay_reply(846, 168);
	giq_option( 4, SCRIPT_LEMMY, 169, Lemmy24a, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 170, Lemmy24b, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 171, Lemmy24c, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 172, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy24a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 1000) then begin
		item_caps_adjust(dude_obj, -1000);
		call Lemmy24d;
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy24b
begin
	variable LVar0 := 0;
	if (is_success(do_check(dude_obj, STAT_ch, -3)) or is_success(roll_vs_skill(dude_obj, SKILL_BARTER, -30))) then begin
		if (item_caps_total(dude_obj) >= 800) then begin
			item_caps_adjust(dude_obj, -800);
			call Lemmy24e;
		end
		else begin
			call Lemmy11;
		end
	end
	else begin
		call Lemmy11;
	end
end

procedure Lemmy24c
begin
	if (is_success(do_check(dude_obj, STAT_st, -3))) then begin
		call Lemmy24f;
	end
	else begin
		call Lemmy12;
	end
end

procedure Lemmy24d
begin
	gsay_message(846, 137, 50);
	call Lemmy25;
end

procedure Lemmy24e
begin
	gsay_message(846, 138, 50);
	call Lemmy25;
end

procedure Lemmy24f
begin
	gsay_message(846, 139, 50);
	call Lemmy25;
end

procedure Lemmy25
begin
	set_global_var(VANCE_KNOWS_PLAYER, 1);// VANCE_KNOWS_PLAYER
	gsay_reply(846, 173);
	giq_option( 4, SCRIPT_LEMMY, 174, Lemmy17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEMMY, 175, Lemmy08, NEUTRAL_REACTION );
end

procedure Lemmy26
begin
	gsay_message(846, 176, 50);
end

procedure Lemmy27
begin
	gsay_reply(846, 177);
	call Lemmy18;
end

procedure LemmyEnd
begin
end

procedure LemmyCombat
begin
	set_local_var(5, 1);
	call combat;
end




