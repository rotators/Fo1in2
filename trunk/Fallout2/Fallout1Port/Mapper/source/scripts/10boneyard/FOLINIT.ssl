/*

	Boneyard - Followers initiate

*/

#include "..\headers\define.h"

#define NAME                    SCRIPT_FOLINIT
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;

procedure float_line0;
procedure float_line1;
procedure float_line2;

variable initial :=  0;

import variable removal_ptr;

procedure start begin
	if not(initial) then begin
		set_self_team(TEAM_LA_FOLLOWERS );
		if (local_var(0) == 0) then begin
			if (self_is_male) then begin
				set_local_var(0, random(100, 104));
			end
			else begin
				set_local_var(0, random(105, 109));
			end
		end
		if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
			if (random(0, 1)) then begin
				kill_critter(self_obj, ANIM_exploded_to_nothing_sf);
			end
			else begin
				kill_critter(self_obj, ANIM_burned_to_nothing_sf);
			end
		end
		initial :=  1;
	end
end

procedure critter_p_proc begin
	if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
		removal_ptr := self_obj;
	end
	if (local_var(1) or global_var(ENEMY_FOLLOWERS)) then begin
		if (tile_distance_objs(dude_obj, self_obj) < 8) then begin
			flee_dude
		end
	end
end

procedure damage_p_proc begin
	if (source_obj == dude_obj) then begin
		set_local_var(1, 1);
	end
end

procedure destroy_p_proc begin
	inc_good_critter
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_FOLINIT, local_var(0)));
end

procedure talk_p_proc
begin
	script_overrides;
	dude_look_at_critter;
	if (local_var(1) or global_var(ENEMY_FOLLOWERS)) then begin
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 0);
	end
	else begin
		if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 1) then begin
			call float_line1;
		end
		else begin
			if (global_var(SLIDE_TRAIN_FOLLOWERS) == 1) then begin
				call float_line2;
			end
			else begin
				call float_line0;
			end
		end
	end
end

procedure float_line0
begin
	float_msg(self_obj, message_str(SCRIPT_FOLINIT, random(110, 117)), 0);
end

procedure float_line1
begin
	float_msg(self_obj, message_str(SCRIPT_FOLINIT, random(118, 122)), 0);
end

procedure float_line2
begin
	float_msg(self_obj, message_str(SCRIPT_FOLINIT, random(123, 126)), 0);
end
