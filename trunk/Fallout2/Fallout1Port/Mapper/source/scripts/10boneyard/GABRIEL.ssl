#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure look_at_p_proc;//    script_action == 21
procedure description_p_proc;//    script_action == 3
procedure talk_p_proc;//    script_action == 11
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure Gab01;
procedure Gab02;
procedure Gab03;
procedure Gab04;
procedure Gab05;
procedure Gab06;
procedure Gab07;
procedure Gab08;
procedure Gab09;
procedure Gab09a;
procedure Gab11;
procedure Gab12;
procedure Gab13;
procedure Gab14;
procedure Gab15;
procedure Gab16;
procedure Gab17;
procedure Gab18;
procedure Gab19;
procedure Gab20;
procedure Gab21;
procedure Gab22;
procedure Gab23;
procedure Gab24;
procedure Gab25;
procedure Gab26;
procedure Gab27;
procedure Gab28;
procedure GabBarter;
procedure GabEnd;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
import variable JonPtr;
variable Only_Once := 1;
variable exit_line;

procedure Start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, PID_BOTTLE_CAPS) == 0) then begin
			item_caps_adjust(self_obj, random(50, 150));
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 48);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 28);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin
				call damage_p_proc;
			end
			else begin
				if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
					call description_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
						else begin
							if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
								call talk_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4) == 1) then begin
		display_msg(message_str(SCRIPT_GABRIEL, 101));
	end
	else begin
		display_msg(message_str(SCRIPT_GABRIEL, 100));
	end
	script_overrides;
end

procedure description_p_proc
begin
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if ((global_var(DUDE_ENEMY_BLADES) == 1) or (get_critter_stat(dude_obj, STAT_iq) < 4)) then begin
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 2);
	end
	else begin
		call get_reaction;
		start_gdialog(156, self_obj, -1, -1, -1);
		gsay_start;
		if (local_var(4) == 0) then begin
			if (global_var(WATER_CHIP_8) == 9250) then begin
				call Gab17;
			end
			else begin
				call Gab01;
			end
		end
		else begin
			if (local_var(5) == 1) then begin
				if ((local_var(8) == 0) and (global_var(BLADES_STATUS) == 2)) then begin
					set_local_var(8, 1);
					call Gab25;
				end
				else begin
					call Gab27;
				end
			end
			else begin
				if ((global_var(GUN_RUNNERS_STATUS) == 9201) and (global_var(WATER_CHIP_8) == 9250)) then begin
					call Gab20;
				end
				else begin
					if (global_var(GUN_RUNNERS_STATUS) == 9201) then begin
						call Gab13;
					end
					else begin
						if ((local_var(6) == 1) or (local_var(7) == 1)) then begin
							call Gab24;
						end
						else begin
							call Gab12;
						end
					end
				end
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_BLADES, 1);
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_BLADES, 1);
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if (global_var(DUDE_ENEMY_BLADES) == 1) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure pickup_p_proc
begin
	set_global_var(DUDE_ENEMY_BLADES, 1);
end

procedure Gab01
begin
	gsay_reply(156, 102);
	gsay_option(156, 103, Gab02, 50);
	gsay_option(156, 104, Gab04, 50);
end

procedure Gab02
begin
	gsay_reply(156, 105);
	gsay_option(156, 106, Gab03, 50);
	set_local_var(4, 1);
end

procedure Gab03
begin
	gsay_reply(156, 107);
	gsay_option(156, 108, Gab08, 50);
end

procedure Gab04
begin
	gsay_reply(156, 109);
	gsay_option(156, 110, Gab05, 50);
end

procedure Gab05
begin
	gsay_reply(156, 111);
	gsay_option(156, 112, Gab06, 50);
end

procedure Gab06
begin
	gsay_reply(156, 113);
	if (global_var(WATER_CHIP_8) == 9250) then begin
		gsay_option(156, 114, Gab19, 50);
	end
	else begin
		gsay_option(156, 114, Gab07, 50);
	end
	gsay_option(156, 115, Gab08, 50);
end

procedure Gab07
begin
	gsay_reply(156, 116);
	gsay_option(156, 117, Gab03, 50);
end

procedure Gab08
begin
	gsay_reply(156, 118);
	gsay_option(156, 119, Gab09, 50);
	if (global_var(BLADES_STATUS) == 9101) then begin
		if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
			gsay_option(156, 170, Gab11, 50);
		end
		else begin
			gsay_option(156, 171, Gab11, 50);
		end
	end
end

procedure Gab09
begin
	gsay_reply(156, 121);
	gsay_option(156, 122, Gab09a, 50);
	gsay_option(156, 123, GabEnd, 50);
end

procedure Gab09a
begin
	set_global_var(GUN_RUNNERS_STATUS, 9201);
end

procedure Gab11
begin
	gsay_reply(156, 125);
	gsay_option(156, 126, Gab09a, 50);
	gsay_option(156, 127, GabEnd, 50);
end

procedure Gab12
begin
	gsay_reply(156, 128);
	gsay_option(156, 129, Gab04, 50);
	gsay_option(156, 130, GabEnd, 50);
end

procedure Gab13
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 172);
	end
	else begin
		gsay_reply(156, 173);
	end
	gsay_option(156, 132, Gab15, 50);
	gsay_option(156, 133, Gab14, 50);
end

procedure Gab14
begin
	gsay_reply(156, 134);
	gsay_option(156, 135, GabEnd, 50);
end

procedure Gab15
begin
	gsay_reply(156, 136);
	gsay_option(156, 137, GabEnd, 50);
end

procedure Gab16
begin
	gsay_reply(156, 138);
	gsay_option(156, 139, GabEnd, 50);
end

procedure Gab17
begin
	gsay_reply(156, 140);
	gsay_option(156, 141, Gab18, 50);
	gsay_option(156, 142, Gab04, 50);
end

procedure Gab18
begin
	gsay_reply(156, 143);
	gsay_option(156, 144, Gab20, 50);
	set_local_var(4, 1);
end

procedure Gab19
begin
	gsay_reply(156, 145);
	gsay_option(156, 146, Gab20, 50);
end

procedure Gab20
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 174);
	end
	else begin
		gsay_reply(156, 175);
	end
	gsay_option(156, 148, Gab21, 50);
	if (global_var(BLADES_STATUS) == 9101) then begin
		if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
			gsay_option(156, 170, Gab22, 50);
		end
		else begin
			gsay_option(156, 171, Gab22, 50);
		end
	end
	gsay_option(156, 150, Gab23, 50);
end

procedure Gab21
begin
	gsay_reply(156, 151);
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_option(156, 176, GabEnd, 50);
	end
	else begin
		gsay_option(156, 177, GabEnd, 50);
	end
	if (global_var(WATER_CHIP_8) != 2) then begin
		set_global_var(WATER_CHIP_8, 2);
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		give_exp_points(1000);
		display_msg(message_str(SCRIPT_GENCHAT, 103) + 1000 + message_str(SCRIPT_GENCHAT, 104));
		set_local_var(6, 1);
	end
end

procedure Gab22
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 178);
	end
	else begin
		gsay_reply(156, 179);
	end
	gsay_option(156, 154, GabEnd, 50);
	if (global_var(GUN_RUNNERS_STATUS) != 9202) then begin
		set_global_var(GUN_RUNNERS_STATUS, 9202);
		set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		give_exp_points(1000);
		display_msg(message_str(SCRIPT_GENCHAT, 103) + 1000 + message_str(SCRIPT_GENCHAT, 104));
		set_local_var(5, 1);
	end
end

procedure Gab23
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 180);
	end
	else begin
		gsay_reply(156, 181);
	end
	gsay_option(156, 156, GabEnd, 50);
	call UpReactLevel;
end

procedure Gab24
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_message(156, 182, 50);
	end
	else begin
		gsay_message(156, 183, 50);
	end
end

procedure Gab25
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 184);
	end
	else begin
		gsay_reply(156, 185);
	end
	gsay_option(156, 159, Gab26, 50);
	gsay_option(156, 160, GabBarter, 50);
	gsay_option(156, 161, GabEnd, 50);
end

procedure Gab26
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 186);
	end
	else begin
		gsay_reply(156, 187);
	end
	gsay_option(156, 163, GabBarter, 50);
	gsay_option(156, 164, GabEnd, 50);
end

procedure Gab27
begin
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(156, 184);
	end
	else begin
		gsay_reply(156, 185);
	end
	gsay_option(156, 166, GabBarter, 50);
	gsay_option(156, 167, GabEnd, 50);
end

procedure Gab28
begin
	gsay_message(156, 168, 50);
end

procedure GabBarter
begin
	gsay_message(156, 188, 50);
end

procedure GabEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
