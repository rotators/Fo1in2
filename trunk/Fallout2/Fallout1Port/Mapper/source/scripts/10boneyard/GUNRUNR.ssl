#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure Jon01;
procedure Jon02;
procedure Jon03;
procedure Jon04;
procedure Jon05;
procedure Jon06;
procedure Jon07;
procedure Jon08;
procedure Jon09;
procedure Jon10;
procedure Jon11;
procedure Jon12;
procedure Jon13;
procedure Jon14;
procedure Jon15;
procedure Jon16;
procedure Jon17;
procedure JonQuest;
procedure JonCombat;
procedure JonEnd;
variable dinner;
variable hostile;
variable initial :=  0;
variable item;
variable taking_outside;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;
procedure description_p_proc;//    script_action == 3

procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		initial :=  1;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 49);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 39);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				call pickup_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			if (local_var(4) == 0) then begin
				dialogue_system_enter;
			end
		end
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 7) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4)) then begin
		display_msg(message_str(SCRIPT_JON, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_JON, 101));
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(288, self_obj, 4, -1, -1);
	gsay_start;
	if ((global_var(QUEST_BONEYARD_5_FIX_FARM) == 2) and not(local_var(5))) then begin
		call Jon12;
	end
	else begin
		if (global_var(JASON_STATUS) == 1) then begin
			call Jon14;
		end
		else begin
			if (global_var(QUEST_BONEYARD_7_GANG_WAR) == 1) then begin
				call Jon09;
			end
			else begin
				if ((global_var(QUEST_BONEYARD_7_GANG_WAR) == 2) and (local_var(8) == 0)) then begin
					call Jon16;
				end
				else begin
					if (local_var(4)) then begin
						call Jon13;
					end
					else begin
						if (local_var(1) < 2) then begin
							call Jon08;
						end
						else begin
							call Jon01;
						end
					end
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
	if (taking_outside) then begin
		if global_var(FADE_TIMES_INCREASED) then begin
			gfade_out(1);
			gfade_out(1);
		end
		gfade_out(1);
		move_to(dude_obj, 10700, 0);
		gfade_in(1);
		taking_outside := 0;
	end
	if (local_var(8) == 1) then begin
		set_local_var(8, 2);
		if global_var(FADE_TIMES_INCREASED) then begin
			gfade_out(1);
			gfade_out(1);
		end
		gfade_out(1);
		game_time_advance(game_ticks(3600 * (1800 - game_time_hour)));
		critter_heal(dude_obj, 5);
		display_msg(message_str(SCRIPT_JON, 151));
		gfade_in(1);
	end
end

procedure Jon01
begin
	set_local_var(4, 1);
	gsay_reply(288, 103);
	giq_option(4, 288, 104, Jon04, 50);
	giq_option(4, 288, 105, Jon03, 50);
	giq_option(4, 288, 106, Jon02, 50);
	giq_option(5, 288, 107, Jon06, 50);
	giq_option(4, 288, 108, Jon05, 50);
	giq_option(-3, 288, 109, Jon07, 50);
end

procedure Jon02
begin
	gsay_reply(288, 110);
	giq_option(4, 288, 111, Jon04, 50);
	giq_option(4, 288, 112, Jon03, 50);
	giq_option(4, 288, 113, Jon05, 50);
end

procedure Jon03
begin
	gsay_reply(288, 114);
	giq_option(4, 288, 115, Jon04, 50);
	giq_option(4, 288, 116, Jon05, 50);
end

procedure Jon04
begin
	gsay_message(288, 117, 50);
	gsay_message(288, 118, 50);
	call JonQuest;
end

procedure Jon05
begin
	gsay_message(288, 119, 50);
	call JonQuest;
end

procedure Jon06
begin
	gsay_reply(288, 120);
	call DownReact;
	giq_option(4, 288, 121, Jon02, 50);
	giq_option(4, 288, 122, Jon05, 50);
end

procedure Jon07
begin
	gsay_reply(288, 123);
	giq_option(-3, 288, 124, JonQuest, 50);
	giq_option(-3, 288, 125, Jon05, 50);
end

procedure Jon08
begin
	gsay_reply(288, 126);
	giq_option(4, 288, 127, Jon02, 50);
	giq_option(4, 288, 128, Jon05, 50);
	giq_option(4, 288, 129, JonCombat, 50);
end

procedure Jon09
begin
	gsay_reply(288, 130);
	if (local_var(7) == 0) then begin
		giq_option(4, 288, 131, Jon10, 50);
	end
	giq_option(4, 288, 132, Jon11, 50);
	if (local_var(7) == 0) then begin
		giq_option(-3, 288, 133, Jon10, 50);
	end
	giq_option(-3, 288, 134, Jon11, 50);
end

procedure Jon10
begin
	variable LVar0 := 0;
	/* has how many? */    if (obj_is_carrying_obj_pid(dude_obj, 116) and obj_is_carrying_obj_pid(dude_obj, 114)) then begin
		set_local_var(7, 1);
		LVar0 := create_object_sid(PID_ASSAULT_RIFLE, 0, 0, -1);
		add_obj_to_inven(dude_obj, LVar0);
		LVar0 := create_object_sid(PID_5MM_AP, 0, 0, -1);
		add_mult_objs_to_inven(dude_obj, LVar0, 3);
		gsay_message(288, 135, 50);
		call UpReact;
	end
	else begin
		gsay_message(288, 136, 50);
	end
end

procedure Jon11
begin
	gsay_message(288, 137, 50);
end

procedure Jon12
begin
	item_caps_adjust(dude_obj, 500);
	set_local_var(5, 1);
	gsay_message(288, message_str(SCRIPT_JON, 138) + " " + message_str(SCRIPT_JON, 139), 50);
	call UpReact;
end

procedure Jon13
begin
	if (local_var(1) == 1) then begin
		gsay_reply(288, 140);
	end
	else begin
		gsay_reply(288, 141);
	end
	giq_option(-3, 288, 142, JonEnd, 50);
	if (local_var(6) == 0) then begin
		giq_option(4, 288, 144, Jon15, 50);
	end
	giq_option(4, 288, 145, Jon16, 50);
	giq_option(4, 288, 146, JonEnd, 50);
end

procedure Jon14
begin
	gsay_message(288, 143, 50);
end

procedure Jon15
begin
	set_local_var(6, 1);
	if (local_var(1) == 1) then begin
		gsay_message(288, 148, 50);
	end
	else begin
		item := create_object_sid(PID_5MM_JHP, 0, 0, -1);
		add_mult_objs_to_inven(dude_obj, item, 2);
		item := create_object_sid(PID_10MM_JHP, 0, 0, -1);
		add_mult_objs_to_inven(dude_obj, item, 2);
		item := create_object_sid(PID_STIMPAK, 0, 0, -1);
		add_mult_objs_to_inven(dude_obj, item, 2);
		item := create_object_sid(PID_BOOZE, 0, 0, -1);
		add_obj_to_inven(dude_obj, item);
		gsay_message(288, 147, 49);
	end
end

procedure Jon16
begin
	if (local_var(1) == 3) then begin
		gsay_reply(288, 150);
		giq_option(0, 634, 152, Jon17, 49);
	end
	else begin
		gsay_message(288, 149, 50);
	end
end

procedure Jon17
begin
	set_local_var(8, 1);
end

procedure JonQuest
begin
	set_global_var(QUEST_BONEYARD_7_GANG_WAR, 1);
	taking_outside := 1;
end

procedure JonCombat
begin
	hostile := 1;
end

procedure JonEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure description_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_JON, 102));
end

