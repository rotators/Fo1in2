#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure talk_p_proc;//    script_action == 11
procedure Scout0;
procedure Scout1;
procedure Scout2;
procedure Scout3;
procedure Scout4;
procedure Scout5;
procedure Scout6;
procedure Scout7;
procedure Scout8;
procedure Scout9;
procedure Scout10;
procedure Scout11;
procedure Scout12;
procedure Scout13;
procedure Scout14;
procedure Scout15;
procedure Scout16;
procedure Scout16a;
procedure Scout17;
procedure Scout18;
procedure Scout19;
procedure Scout20;
procedure Scout21;
procedure Scout22;
procedure Scout23;
procedure combat;
procedure ScoutEnd;
procedure flee_dude;

variable hostile;
variable initial :=  0;

import variable removal_ptr;

procedure damage_p_proc;//    script_action == 14




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 46);
		if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
			if (random(0, 1)) then begin
				kill_critter(self_obj, ANIM_exploded_to_nothing_sf);
			end
			else begin
				kill_critter(self_obj, ANIM_burned_to_nothing_sf);
			end
		end
		initial :=  1;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (map_var(1) == 1) then begin
		animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(dude_obj), random(0, 6), random(3, 7)), 0);
	end
	else begin
		if ((map_var(1) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
			hostile := 1;
		end
	end
	if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
		removal_ptr := self_obj;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (local_var(1) or global_var(ENEMY_FOLLOWERS)) then begin
			if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
				call flee_dude;
			end
		end
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
		set_global_var(ENEMY_FOLLOWERS, 1);
	end
end

procedure look_at_p_proc
begin
	if (local_var(0) == 0) then begin
		if (get_critter_stat(self_obj, STAT_gender) == 0) then begin
			set_local_var(0, random(100, 104));
		end
		else begin
			set_local_var(0, random(105, 109));
		end
	end
	script_overrides;
	display_msg(message_str(SCRIPT_FOLSCOUT, local_var(0)));
end

procedure talk_p_proc
begin
	script_overrides;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(1) or global_var(ENEMY_FOLLOWERS)) then begin
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 0);
	end
	else begin
		start_gdialog(263, self_obj, 4, -1, -1);
		gsay_start;
		if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 1) then begin
			call Scout16;
		end
		else begin
			if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 2) then begin
				call Scout22;
			end
			else begin
				call Scout0;
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure Scout0
begin
	gsay_reply(263, 110);
	giq_option(-3, 263, 111, Scout1, 50);
	giq_option(4, 263, message_str(SCRIPT_FOLSCOUT, 112) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_FOLSCOUT, 113), Scout4, 50);
	giq_option(4, 263, message_str(SCRIPT_FOLSCOUT, 114) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_FOLSCOUT, 115), combat, 50);
	giq_option(6, 263, 116, Scout11, 50);
end

procedure Scout1
begin
	gsay_reply(263, 117);
	giq_option(-3, 263, message_str(SCRIPT_FOLSCOUT, 118) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_FOLSCOUT, 119), combat, 50);
	giq_option(-3, 263, message_str(SCRIPT_FOLSCOUT, 120) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_FOLSCOUT, 121), Scout2, 50);
	giq_option(-3, 263, message_str(SCRIPT_FOLSCOUT, 122), combat, 50);
	giq_option(-3, 263, message_str(SCRIPT_FOLSCOUT, 123) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_FOLSCOUT, 124), Scout3, 50);
end

procedure Scout2
begin
	gsay_message(263, 125, 50);
end

procedure Scout3
begin
	gsay_message(263, 126, 50);
end

procedure Scout4
begin
	gsay_reply(263, 127);
	giq_option(4, 263, 128, Scout5, 50);
	giq_option(4, 263, 129, combat, 50);
	giq_option(4, 263, 130, Scout6, 50);
	giq_option(4, 263, 131, Scout10, 50);
end

procedure Scout5
begin
	gsay_message(263, 132, 50);
end

procedure Scout6
begin
	gsay_reply(263, 133);
	giq_option(4, 263, 134, Scout5, 50);
	giq_option(4, 263, 135, Scout7, 50);
	giq_option(4, 263, 136, Scout9, 50);
	giq_option(4, 263, 137, Scout8, 50);
end

procedure Scout7
begin
	gsay_reply(263, 138);
	giq_option(4, 263, 139, Scout5, 50);
	giq_option(4, 263, 140, Scout8, 50);
end

procedure Scout8
begin
	gsay_message(263, 141, 50);
end

procedure Scout9
begin
	gsay_reply(263, 142);
	giq_option(4, 263, 143, ScoutEnd, 50);
end

procedure Scout10
begin
	gsay_reply(263, 144);
	giq_option(4, 263, 145, Scout5, 50);
	giq_option(4, 263, 146, Scout8, 50);
	giq_option(4, 263, 147, Scout6, 50);
end

procedure Scout11
begin
	gsay_reply(263, 148);
	giq_option(6, 263, 149, ScoutEnd, 50);
	giq_option(6, 263, 150, Scout12, 50);
	giq_option(6, 263, 151, Scout15, 50);
end

procedure Scout12
begin
	gsay_reply(263, 152);
	giq_option(6, 263, 153, ScoutEnd, 50);
	giq_option(6, 263, 154, Scout13, 50);
	giq_option(6, 263, 155, Scout14, 50);
end

procedure Scout13
begin
	gsay_reply(263, 156);
	giq_option(6, 263, 157, ScoutEnd, 50);
	giq_option(6, 263, 158, combat, 50);
end

procedure Scout14
begin
	gsay_message(263, 159, 50);
end

procedure Scout15
begin
	gsay_reply(263, 160);
	giq_option(6, 263, 161, ScoutEnd, 50);
end

procedure Scout16
begin
	gsay_reply(263, 162);
	giq_option(4, 263, 163, Scout17, 50);
	giq_option(4, 263, 164, Scout19, 50);
	giq_option(6, 263, 165, Scout16a, 50);
	giq_option(-3, 263, 111, Scout1, 50);
end

procedure Scout16a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call Scout20;
	end
	else begin
		call Scout21;
	end
end

procedure Scout17
begin
	gsay_reply(263, 166);
	giq_option(4, 263, 167, Scout18, 50);
	giq_option(4, 263, 168, ScoutEnd, 50);
	giq_option(4, 263, 169, combat, 50);
end

procedure Scout18
begin
	gsay_reply(263, 170);
	giq_option(4, 263, 171, ScoutEnd, 50);
end

procedure Scout19
begin
	gsay_message(263, 172, 50);
	call combat;
end

procedure Scout20
begin
	gsay_message(263, 173, 50);
end

procedure Scout21
begin
	gsay_message(263, 174, 50);
	call combat;
end

procedure Scout22
begin
	gsay_reply(263, 175);
	giq_option(4, 263, 176, ScoutEnd, 50);
	if (global_var(SLIDE_TRAIN_FOLLOWERS) == 0) then begin
		giq_option(4, 263, 177, Scout23, 50);
	end
	giq_option(-3, 263, 111, Scout1, 50);
end

procedure Scout23
begin
	variable LVar0 := 0;
	LVar0 := 4 * 3600;
	set_global_var(SLIDE_TRAIN_FOLLOWERS, 1);
	gsay_reply(263, 178);
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(game_ticks(LVar0));
	gfade_in(1);
	giq_option(4, 263, 179, ScoutEnd, 50);
end

procedure combat
begin
	hostile := 1;
end

procedure ScoutEnd
begin
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_local_var(1, 1);
	end
end
