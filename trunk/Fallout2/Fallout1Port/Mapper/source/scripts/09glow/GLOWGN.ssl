#include "..\headers\define.h"

procedure start;
procedure use_p_proc;//    script_action == 6
procedure use_skill_on_p_proc;//    script_action == 8
procedure use_obj_on_p_proc;//    script_action == 7
procedure look_at_p_proc;//    script_action == 21
procedure description_p_proc;//    script_action == 3
procedure damage_p_proc;//    script_action == 14
procedure map_enter_p_proc;//    script_action == 15
procedure map_update_p_proc;//    script_action == 23
procedure Trapped_And_Locked;
procedure Locked_Door;
procedure Trapped_Door;
procedure Damage_Dude;
procedure Skill_Checks;
procedure Stat_Checks;
procedure Locks_Check;
procedure Display_Armed_And_Locked;
procedure Display_Locked;
procedure Display_Trapped;

variable Only_Once;
variable Locks;
variable Traps;
variable Per;


procedure start
begin
	if (map_first_run) then begin
		//display_msg("INIT GLOWGN.SSL at map number " + cur_map_index + " and elevation " + elevation(self_obj));
		//display_msg("Please take a screenshot now and send to Sduibek. Thanks!");
	end
	if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
		call use_p_proc;
	end
	else begin
		if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
			call map_enter_p_proc;
		end
		else begin
			if (script_action == 23) then begin//map_update_p_proc -- called every dozen seconds or so, & additionally on certain events (exit dialog, end combat, load map, etc)
				call map_update_p_proc;
			end
			else begin
				if (script_action == 7) then begin//<-- use_obj_on_p_proc
					call use_obj_on_p_proc;
				end
				else begin
					if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
						call look_at_p_proc;
					end
					else begin
						if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
							call description_p_proc;
						end
						else begin
							if (script_action == 8) then begin//<-- use_skill_on_p_proc
								call use_skill_on_p_proc;
							end
							else begin
								if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
									call damage_p_proc;
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure use_p_proc
begin
	variable LVar0 := 0;
	LVar0 := roll_vs_skill(source_obj, 11, -20);
	if (local_var(2) == 0) then begin
		if (is_success(LVar0)) then begin
			script_overrides;
			display_msg(message_str(306, 204));
			reg_anim_func(2, source_obj);
		end
		else begin
			if (obj_is_locked(self_obj)) then begin
				script_overrides;
				set_local_var(0, local_var(0) + 1);
				call Damage_Dude;
			end
			else begin
				script_overrides;
				set_local_var(0, local_var(0) + 1);
				call Damage_Dude;
			end
		end
	end
	else begin
		if (local_var(3) == 0) then begin
			script_overrides;
			display_msg(message_str(306, 105));
		end
	end
end

procedure use_skill_on_p_proc
begin
	if ((local_var(2) == 0) and obj_is_locked(self_obj)) then begin
		call Trapped_And_Locked;
	end
	else begin
		if (local_var(2) == 0) then begin
			call Trapped_Door;
		end
		else begin
			if (obj_is_locked(self_obj)) then begin
				call Locked_Door;
			end
		end
	end
end

procedure use_obj_on_p_proc
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := obj_pid(obj_being_used_with);
	if (LVar0 == 77) then begin
		script_overrides;
		if (local_var(2) == 0) then begin
			LVar1 := roll_vs_skill(source_obj, 11, -20);
			if (is_success(LVar1)) then begin
				display_msg(204);
				reg_anim_func(2, source_obj);
			end
			else begin
				set_local_var(0, local_var(0) + 1);
				call Damage_Dude;
			end
		end
		if (obj_is_locked(self_obj)) then begin
			LVar2 := roll_vs_skill(source_obj, 9, -10);
			if (is_success(LVar2)) then begin
				obj_unlock(self_obj);
				set_local_var(3, 1);
				display_msg(message_str(306, 109));
			end
			else begin
				if (is_critical(LVar2)) then begin
					display_msg(message_str(306, 121));
					rm_obj_from_inven(source_obj, LVar0);
					destroy_object(LVar0);
				end
				else begin
					display_msg(message_str(306, 122));
				end
			end
		end
	end
	else begin
		if (LVar0 == 97) then begin
			script_overrides;
			set_local_var(2, 1);
			obj_unlock(self_obj);
			set_local_var(3, 1);
			display_msg(message_str(306, 106));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(306, 123));
end

procedure description_p_proc
begin
	script_overrides;
	if ((local_var(3) == 0) and (local_var(2) == 0)) then begin
		call Skill_Checks;
		call Display_Armed_And_Locked;
	end
	else begin
		if (local_var(2) == 0) then begin
			call Skill_Checks;
			call Display_Trapped;
		end
		else begin
			if (local_var(3) == 0) then begin
				call Locks_Check;
				call Display_Locked;
			end
			else begin
				display_msg(message_str(306, 123));
			end
		end
	end
end

procedure damage_p_proc
begin
	if (local_var(1) > 3) then begin
		set_local_var(2, 1);
		if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
		obj_open(self_obj);
		set_local_var(3, 1);
	end
end

procedure map_enter_p_proc
begin
	if (local_var(3) == 0) then begin
		obj_lock(self_obj);
	end
end

procedure map_update_p_proc
begin
	if (local_var(3) == 0) then begin
		obj_lock(self_obj);
	end
	else begin
		obj_unlock(self_obj);
	end
end

procedure Trapped_And_Locked
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	if (action_being_used == 11) then begin//-- TRAPS
		script_overrides;
		LVar0 := roll_vs_skill(source_obj, 11, -20);
		if (is_success(LVar0)) then begin
			display_msg(message_str(306, 113));
			set_local_var(2, 1);
		end
		else begin
			if (is_critical(LVar0)) then begin
				display_msg(message_str(306, 114));
				if (local_var(0) == 0) then begin
					set_local_var(0, 4);
				end
				else begin
					set_local_var(0, local_var(0) + 4);
				end
				call Damage_Dude;
			end
			else begin
				set_local_var(0, local_var(0) + 1);
				display_msg(message_str(306, 115));
				call Damage_Dude;
			end
		end
	end
	else begin
		if (action_being_used == 9) then begin//-- LOCKPICK
			script_overrides;
			LVar0 := roll_vs_skill(source_obj, 9, -30);
			LVar1 := roll_vs_skill(source_obj, 11, -20);
			if (is_success(LVar1)) then begin
				if (is_success(LVar0)) then begin
					obj_unlock(self_obj);
					set_local_var(3, 1);
					display_msg(message_str(306, 116));
				end
				else begin
					if (is_critical(LVar0)) then begin
						set_local_var(0, local_var(0) + 2);
						display_msg(message_str(306, 117));
						call Damage_Dude;
					end
					else begin
						set_local_var(0, local_var(0) + 1);
						display_msg(message_str(306, 118));
						call Damage_Dude;
					end
				end
			end
			else begin
				if (is_critical(LVar1)) then begin
					display_msg(message_str(306, 120));
					if (local_var(0) == 0) then begin
						set_local_var(0, 4);
					end
					else begin
						set_local_var(0, local_var(0) + 4);
					end
					call Damage_Dude;
				end
				else begin
					set_local_var(0, local_var(0) + 1);
					display_msg(message_str(306, 119));
					call Damage_Dude;
				end
			end
		end
	end
end

procedure Locked_Door
begin
	variable LVar0 := 0;
	if (action_being_used == 9) then begin//-- LOCKPICK
		script_overrides;
		LVar0 := roll_vs_skill(source_obj, 9, -30);
		if (is_success(LVar0)) then begin
			obj_unlock(self_obj);
			set_local_var(3, 1);
			display_msg(message_str(306, 116));
		end
		else begin
			if (is_critical(LVar0)) then begin
				display_msg(message_str(306, 121));
				game_time_advance(game_ticks(600));
			end
			else begin
				display_msg(message_str(306, 122));
			end
		end
	end
end

procedure Trapped_Door
begin
	variable LVar0 := 0;
	if (action_being_used == 11) then begin//-- TRAPS
		script_overrides;
		LVar0 := roll_vs_skill(source_obj, 11, -20);
		if (is_success(LVar0)) then begin
			display_msg(message_str(306, 113));
			set_local_var(2, 1);
		end
		else begin
			if (is_critical(LVar0)) then begin
				display_msg(message_str(306, 114));
				if (local_var(0) == 0) then begin
					set_local_var(0, 4);
				end
				else begin
					set_local_var(0, local_var(0) + 4);
				end
				call Damage_Dude;
			end
			else begin
				set_local_var(0, local_var(0) + 1);
				display_msg(message_str(306, 115));
				call Damage_Dude;
			end
		end
	end
end

procedure Damage_Dude
begin
	critter_dmg(source_obj, local_var(0), 0);
	if (local_var(0) == 1) then begin
		display_msg(message_str(306, 101));
	end
	else begin
		display_msg(message_str(306, 102) + local_var(0) + message_str(306, 103));
	end
end

procedure Skill_Checks
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	LVar0 := roll_vs_skill(source_obj, 11, 0);
	LVar1 := roll_vs_skill(source_obj, 9, -10);
	LVar2 := do_check(source_obj, 1, 0);
	if (is_success(LVar0)) then begin
		if (is_critical(LVar0)) then begin
			call Locks_Check;
			Traps := 3;
		end
		else begin
			call Locks_Check;
			Traps := 2;
		end
	end
	else begin
		if (is_critical(LVar0)) then begin
			call Locks_Check;
			Traps := 0;
		end
		else begin
			call Locks_Check;
			Traps := 1;
		end
	end
end

procedure Stat_Checks
begin
	variable LVar0 := 0;
	LVar0 := do_check(source_obj, 1, 0);
	if (is_success(LVar0)) then begin
		if (is_critical(LVar0)) then begin
			Per := 3;
		end
		else begin
			Per := 2;
		end
	end
	else begin
		if (is_critical(LVar0)) then begin
			Per := 0;
		end
		else begin
			Per := 1;
		end
	end
end

procedure Locks_Check
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar0 := roll_vs_skill(source_obj, 9, -10);
	LVar1 := do_check(source_obj, 1, 0);
	if (is_success(LVar0)) then begin
		if (is_critical(LVar0)) then begin
			call Stat_Checks;
			Locks := 3;
		end
		else begin
			call Stat_Checks;
			Locks := 2;
		end
	end
	else begin
		if (is_critical(LVar0)) then begin
			call Stat_Checks;
			Locks := 0;
		end
		else begin
			call Stat_Checks;
			Locks := 1;
		end
	end
end

procedure Display_Armed_And_Locked
begin
	if (Per == 0) then begin
		if (Locks == 0) then begin
			if (Traps == 0) then begin
				display_msg(message_str(306, 124));
			end
			else begin
				if (Traps == 1) then begin
					display_msg(message_str(306, 125));
				end
				else begin
					if (Traps == 2) then begin
						display_msg(message_str(306, 126));
					end
					else begin
						display_msg(message_str(306, 127));
					end
				end
			end
		end
		else begin
			if (Locks == 1) then begin
				if (Traps == 0) then begin
					display_msg(message_str(306, 128));
				end
				else begin
					if (Traps == 1) then begin
						display_msg(message_str(306, 129));
					end
					else begin
						if (Traps == 2) then begin
							display_msg(message_str(306, 130));
						end
						else begin
							display_msg(message_str(306, 131));
						end
					end
				end
			end
			else begin
				if (Locks == 2) then begin
					if (Traps == 0) then begin
						display_msg(message_str(306, 132));
					end
					else begin
						if (Traps == 1) then begin
							display_msg(message_str(306, 133));
						end
						else begin
							if (Traps == 2) then begin
								display_msg(message_str(306, 134));
							end
							else begin
								display_msg(message_str(306, 135));
							end
						end
					end
				end
				else begin
					if (Traps == 0) then begin
						display_msg(message_str(306, 136));
					end
					else begin
						if (Traps == 1) then begin
							display_msg(message_str(306, 137));
						end
						else begin
							if (Traps == 2) then begin
								display_msg(message_str(306, 138));
							end
							else begin
								display_msg(message_str(306, 139));
							end
						end
					end
				end
			end
		end
	end
	else begin
		if (Per == 1) then begin
			if (Locks == 0) then begin
				if (Traps == 0) then begin
					display_msg(message_str(306, 140));
				end
				else begin
					if (Traps == 1) then begin
						display_msg(message_str(306, 141));
					end
					else begin
						if (Traps == 2) then begin
							display_msg(message_str(306, 142));
						end
						else begin
							display_msg(message_str(306, 143));
						end
					end
				end
			end
			else begin
				if (Locks == 1) then begin
					if (Traps == 0) then begin
						display_msg(message_str(306, 144));
					end
					else begin
						if (Traps == 1) then begin
							display_msg(message_str(306, 145));
						end
						else begin
							if (Traps == 2) then begin
								display_msg(message_str(306, 146));
							end
							else begin
								display_msg(message_str(306, 147));
							end
						end
					end
				end
				else begin
					if (Locks == 2) then begin
						if (Traps == 0) then begin
							display_msg(message_str(306, 148));
						end
						else begin
							if (Traps == 1) then begin
								display_msg(message_str(306, 149));
							end
							else begin
								if (Traps == 2) then begin
									display_msg(message_str(306, 150));
								end
								else begin
									display_msg(message_str(306, 151));
								end
							end
						end
					end
					else begin
						if (Traps == 0) then begin
							display_msg(message_str(306, 152));
						end
						else begin
							if (Traps == 1) then begin
								display_msg(message_str(306, 153));
							end
							else begin
								if (Traps == 2) then begin
									display_msg(message_str(306, 154));
								end
								else begin
									display_msg(message_str(306, 155));
								end
							end
						end
					end
				end
			end
		end
		else begin
			if (Per == 2) then begin
				if (Locks == 0) then begin
					if (Traps == 0) then begin
						display_msg(message_str(306, 156));
					end
					else begin
						if (Traps == 1) then begin
							display_msg(message_str(306, 157));
						end
						else begin
							if (Traps == 2) then begin
								display_msg(message_str(306, 158));
							end
							else begin
								display_msg(message_str(306, 159));
							end
						end
					end
				end
				else begin
					if (Locks == 1) then begin
						if (Traps == 0) then begin
							display_msg(message_str(306, 160));
						end
						else begin
							if (Traps == 1) then begin
								display_msg(message_str(306, 161));
							end
							else begin
								if (Traps == 2) then begin
									display_msg(message_str(306, 162));
								end
								else begin
									display_msg(message_str(306, 163));
								end
							end
						end
					end
					else begin
						if (Locks == 2) then begin
							if (Traps == 0) then begin
								display_msg(message_str(306, 164));
							end
							else begin
								if (Traps == 1) then begin
									display_msg(message_str(306, 165));
								end
								else begin
									if (Traps == 2) then begin
										display_msg(message_str(306, 166));
									end
									else begin
										display_msg(message_str(306, 167));
									end
								end
							end
						end
						else begin
							if (Traps == 0) then begin
								display_msg(message_str(306, 168));
							end
							else begin
								if (Traps == 1) then begin
									display_msg(message_str(306, 169));
								end
								else begin
									if (Traps == 2) then begin
										display_msg(message_str(306, 170));
									end
									else begin
										display_msg(message_str(306, 171));
									end
								end
							end
						end
					end
				end
			end
			else begin
				if (Locks == 0) then begin
					if (Traps == 0) then begin
						display_msg(message_str(306, 172));
					end
					else begin
						if (Traps == 1) then begin
							display_msg(message_str(306, 173));
						end
						else begin
							if (Traps == 2) then begin
								display_msg(message_str(306, 174));
							end
							else begin
								display_msg(message_str(306, 175));
							end
						end
					end
				end
				else begin
					if (Locks == 1) then begin
						if (Traps == 0) then begin
							display_msg(message_str(306, 176));
						end
						else begin
							if (Traps == 1) then begin
								display_msg(message_str(306, 177));
							end
							else begin
								if (Traps == 2) then begin
									display_msg(message_str(306, 178));
								end
								else begin
									display_msg(message_str(306, 179));
								end
							end
						end
					end
					else begin
						if (Locks == 2) then begin
							if (Traps == 0) then begin
								display_msg(message_str(306, 180));
							end
							else begin
								if (Traps == 1) then begin
									display_msg(message_str(306, 181));
								end
								else begin
									if (Traps == 2) then begin
										display_msg(message_str(306, 182));
									end
									else begin
										display_msg(message_str(306, 183));
									end
								end
							end
						end
						else begin
							if (Traps == 0) then begin
								display_msg(message_str(306, 184));
							end
							else begin
								if (Traps == 1) then begin
									display_msg(message_str(306, 185));
								end
								else begin
									if (Traps == 2) then begin
										display_msg(message_str(306, 186));
									end
									else begin
										display_msg(message_str(306, 187));
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure Display_Locked
begin
	if (Per == 0) then begin
		if (Locks == 0) then begin
			display_msg(message_str(306, 124));
		end
		else begin
			if (Locks == 1) then begin
				display_msg(message_str(306, 128));
			end
			else begin
				if (Locks == 2) then begin
					display_msg(message_str(306, 132));
				end
				else begin
					display_msg(message_str(306, 136));
				end
			end
		end
	end
	else begin
		if (Per == 1) then begin
			if (Locks == 0) then begin
				display_msg(message_str(306, 140));
			end
			else begin
				if (Locks == 1) then begin
					display_msg(message_str(306, 144));
				end
				else begin
					if (Locks == 2) then begin
						display_msg(message_str(306, 148));
					end
					else begin
						display_msg(message_str(306, 152));
					end
				end
			end
		end
		else begin
			if (Per == 2) then begin
				if (Locks == 0) then begin
					display_msg(message_str(306, 156));
				end
				else begin
					if (Locks == 1) then begin
						display_msg(message_str(306, 160));
					end
					else begin
						if (Locks == 2) then begin
							display_msg(message_str(306, 164));
						end
						else begin
							display_msg(message_str(306, 168));
						end
					end
				end
			end
			else begin
				if (Locks == 0) then begin
					display_msg(message_str(306, 172));
				end
				else begin
					if (Locks == 1) then begin
						display_msg(message_str(306, 176));
					end
					else begin
						if (Locks == 2) then begin
							display_msg(message_str(306, 180));
						end
						else begin
							display_msg(message_str(306, 184));
						end
					end
				end
			end
		end
	end
end

procedure Display_Trapped
begin
	if (Per == 0) then begin
		if (Traps == 0) then begin
			display_msg(message_str(306, 188));
		end
		else begin
			if (Traps == 1) then begin
				display_msg(message_str(306, 189));
			end
			else begin
				if (Traps == 2) then begin
					display_msg(message_str(306, 190));
				end
				else begin
					display_msg(message_str(306, 191));
				end
			end
		end
	end
	else begin
		if (Per == 1) then begin
			if (Traps == 0) then begin
				display_msg(message_str(306, 192));
			end
			else begin
				if (Traps == 1) then begin
					display_msg(message_str(306, 193));
				end
				else begin
					if (Traps == 2) then begin
						display_msg(message_str(306, 194));
					end
					else begin
						display_msg(message_str(306, 195));
					end
				end
			end
		end
		else begin
			if (Per == 2) then begin
				if (Traps == 0) then begin
					display_msg(message_str(306, 196));
				end
				else begin
					if (Traps == 1) then begin
						display_msg(message_str(306, 197));
					end
					else begin
						if (Traps == 2) then begin
							display_msg(message_str(306, 198));
						end
						else begin
							display_msg(message_str(306, 199));
						end
					end
				end
			end
			else begin
				if (Traps == 0) then begin
					display_msg(message_str(306, 200));
				end
				else begin
					if (Traps == 1) then begin
						display_msg(message_str(306, 201));
					end
					else begin
						if (Traps == 2) then begin
							display_msg(message_str(306, 202));
						end
						else begin
							display_msg(message_str(306, 203));
						end
					end
				end
			end
		end
	end
end

