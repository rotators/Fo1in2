#include "..\headers\define.h"

procedure start;
procedure talk_p_proc;//    script_action == 11

procedure ZAX01;
procedure ZAX02;
procedure ZAX03;
procedure ZAX04;
procedure ZAX05;
procedure ZAX06;
procedure ZAX07;
procedure ZAX08;
procedure ZAX09;
procedure ZAX10;
procedure ZAX11;
procedure ZAX12;
procedure ZAX13;
procedure ZAX14;
procedure ZAX15;
procedure ZAX16;
procedure ZAX17;
procedure ZAX18;
procedure ZAX19;
procedure ZAX20;
procedure ZAX21;
procedure ZAX22;
procedure ZAX23;
procedure ZAX24;
procedure ZAX25;
procedure ZAXClearance;

procedure Term01;
procedure Term02;
procedure Term03;
procedure Term03a;
procedure Term04;
procedure Term05;
procedure Term06;
procedure Term06a;
procedure Term07;
procedure Term08;
procedure Term09;
procedure Term09a;
procedure Term10;
procedure Term11;
procedure Term11a;
procedure Term12;
procedure Term13;
procedure Term14;
procedure Term14a;
procedure Term15;
procedure TermEnd;
procedure TermStart;

procedure Mainframe00;
procedure Mainframe01;
procedure Mainframe02;
procedure Mainframe03;
procedure Mainframe04;
procedure Mainframe04a;
procedure Mainframe05;
procedure Mainframe05a;
procedure Mainframe05b;
procedure Mainframe05c;
procedure Mainframe06;
procedure Mainframe06a;
procedure Mainframe07;
procedure Mainframe07a;
procedure Mainframe08;
procedure Mainframe08a;
procedure Mainframe09;
procedure Mainframe10;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;

// for Fallout Fixt:
procedure ChessBlack;
procedure ChessWhite;
procedure ChessLongTourn;
procedure ChessTourn;
procedure ChessShortTourn;
procedure ChessQuick;
procedure ChessBlitz;
procedure ChessBullet;
procedure ChessPLAY;
procedure ChessLength;
variable BLACK;
variable WHITE;
variable Length;
variable ZAXroll;
variable XP;
variable Penalty;
variable LuckBonus;
variable PlayerRoll;


procedure start
begin
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
			dialogue_system_enter;
		end
		else begin
			if (script_action == 21) then begin// 21 is look_at
				script_overrides;
				if (local_var(4) == 1) then begin
					display_msg(message_str(SCRIPT_ZAX, 100));
				end
				else begin
					display_msg(message_str(SCRIPT_ZAX, 101));
				end
			end
			else begin
				if (script_action == 3) then begin//  3 is description (Binoculars) 
					if (local_var(4) == 1) then begin
						script_overrides;
						display_msg(message_str(SCRIPT_ZAX, 101));
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	script_overrides;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(312, self_obj, 4, -1, -1);
	gsay_start;
	call ZAX01;
	gsay_end;
	end_dialogue;
end

procedure ZAX01
begin
	gsay_reply(312, 102);
	if (local_var(4) == 0) then begin
		giq_option(5, 312, 103, ZAX02, 50);
	end
	giq_option(5, 312, 105, ZAX04, 50);
	giq_option(5, 312, 106, ZAX12, 50);
	giq_option(5, 828, 200, Mainframe00, 50);
	giq_option(5, 312, 108, ZAX13, 50);
	giq_option(-4, 312, 109, ZAX05, 50);
end

procedure ZAX02
begin
	set_local_var(4, 1);
	gsay_reply(312, 110);
	giq_option(5, 312, 111, ZAX06, 50);
	giq_option(5, 312, 112, ZAX04, 50);
	giq_option(5, 312, 113, ZAX07, 50);
	giq_option(7, 312, 114, ZAX08, 50);
	giq_option(0, 312, 115, ZAX13, 50);
end

procedure ZAX03
begin
	gsay_message(312, 116, 50);
	set_local_var(5, 1);
	call ZAX01;
end

procedure ZAX04
begin
	call ZAXClearance;
	gsay_reply(828, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
	giq_option(7, 312, 119, ZAX21, 50);
	giq_option(7, 312, 120, ZAX15, 50);
	giq_option(5, 312, 121, ZAX13, 50);
end

procedure ZAX05
begin
	gsay_message(312, 122, 50);
end

procedure ZAX06
begin
	call ZAXClearance;
	gsay_reply(312, 123);
	giq_option(5, 312, 124, ZAX14, 50);
	giq_option(7, 312, 125, ZAX15, 50);
	giq_option(5, 312, 126, ZAX07, 50);
end

procedure ZAX07
begin
	gsay_reply(312, 127);
	giq_option(7, 312, 128, ZAX08, 50);
	giq_option(5, 312, 121, ZAX13, 50);
end

procedure ZAX08
begin
	gsay_message(312, 129, 50);
	gsay_reply(312, 130);
	giq_option(5, 312, 131, ZAX01, 50);
	giq_option(7, 312, 132, ZAX09, 50);
	giq_option(9, 312, 133, ZAX11, 50);
end

procedure ZAX09
begin
	gsay_message(312, 134, 50);
	gsay_reply(312, 135);
	giq_option(7, 312, 136, ZAX10, 50);
	giq_option(7, 312, 137, ZAX01, 50);
	giq_option(9, 312, 138, ZAX11, 50);
end

procedure ZAX10
begin
	gsay_message(312, 139, 50);
	gsay_reply(312, 140);
	giq_option(7, 312, 141, ZAX01, 50);
	giq_option(9, 312, 142, ZAX11, 50);
end

procedure ZAX11
begin
	gsay_message(312, 143, 50);
	gsay_message(312, 144, 50);
	gsay_reply(312, 145);
	giq_option(5, 312, 146, ZAX01, 50);
	giq_option(5, 312, 147, ZAX13, 50);
end

procedure ZAX12
begin
	gsay_reply(312, message_str(SCRIPT_ZAX, 148) + local_var(11) + message_str(SCRIPT_ZAX, 228) + local_var(12) + message_str(SCRIPT_ZAX, 229) + local_var(13) + message_str(SCRIPT_ZAX, 230));
	giq_option(5, 312, 215, ChessBlack, 50);
	giq_option(5, 312, 216, ChessWhite, 50);
end

procedure ChessBlack
begin
	BLACK := 1;
	WHITE := 0;
	call ChessLength;
end

procedure ChessWhite
begin
	WHITE := 1;
	BLACK := 0;
	call ChessLength;
end

procedure ChessLength
begin
	gsay_reply(312, 217);
	giq_option(5, 312, 218, ChessLongTourn, 50);
	giq_option(5, 312, 219, ChessTourn, 50);
	giq_option(5, 312, 220, ChessShortTourn, 50);
	giq_option(5, 312, 221, ChessQuick, 50);
	giq_option(5, 312, 222, ChessBlitz, 50);
	giq_option(5, 312, 223, ChessBullet, 50);
end

procedure ChessLongTourn
begin
	Length := 360;//  6 hours
	Penalty := random(1, 3) + random(1, 3) + random(1, 3);
	LuckBonus := 0;
	XP := 700;// 650 or 750
	call ChessPLAY;
end

procedure ChessTourn
begin
	Length := 240;//  4 hours
	Penalty := random(1, 3) + random(1, 3);
	LuckBonus := 0;
	XP := 600;// 550 or 650
	call ChessPLAY;
end

procedure ChessShortTourn
begin
	Length := 120;//  2 hours
	Penalty := random(1, 3);
	LuckBonus := 0;
	XP := 500;// 450 or 550
	call ChessPLAY;
end

procedure ChessQuick
begin
	Length := 60;//   1 hour
	Penalty := 0;
	LuckBonus := 0;
	XP := 450;// 400 or 500
	call ChessPLAY;
end

procedure ChessBlitz
begin
	Length := 30;//  minutes
	Penalty := 0;
	if get_critter_stat(dude_obj, STAT_lu) > 5 then begin
		LuckBonus := get_critter_stat(dude_obj, STAT_lu) - 5;
	end
	XP := 350;// 300 or 400
	call ChessPLAY;
end

procedure ChessBullet
begin
	Length := 6;//  minutes
	Penalty := 0;
	if get_critter_stat(dude_obj, STAT_lu) > 5 then begin
		LuckBonus := get_critter_stat(dude_obj, STAT_lu);
	end
	XP := 250;// 200 or 300
	call ChessPLAY;
end

procedure ChessPLAY
begin
	if global_var(FADE_TIMES_INCREASED) then begin
		gfade_out(1);
		gfade_out(1);
	end
	gfade_out(1);
	game_time_advance(10 * 60 * Length);// how many minutes
	gfade_in(1);
	if get_critter_stat(dude_obj, STAT_iq) == 10 then begin
// ZAX rolls 1 to 101
		ZAXroll := 1 + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10) + random(0, 10);
		PlayerRoll := (50 - Penalty) + LuckBonus;
		if BLACK == 1 then begin
			XP := (XP + 50);
			PlayerRoll := (PlayerRoll - (random(1, 3) + random(1, 3)));
		end
		else begin
			if WHITE == 1 then begin
				XP := (XP - 50);
				PlayerRoll := (PlayerRoll + (random(1, 3) + random(1, 3)));
			end
		end
		if PlayerRoll == ZAXroll then begin
			set_local_var(12, local_var(12) + 1);// Draws
			gsay_reply(312, 225);
		end
		else begin
			if PlayerRoll > ZAXroll then begin
				set_local_var(11, local_var(11) + 1);// Wins
				if local_var(6) == 0 then begin
					set_local_var(6, 1);// already_got_XP flag
					display_msg(message_str(SCRIPT_ZAX, 226) + XP + message_str(SCRIPT_ZAX, 227));
					give_exp_points(XP);
				end
				gsay_reply(312, 149);
			end
			else begin
				set_local_var(13, local_var(13) + 1);// Losses
				gsay_reply(312, 150);
			end
		end
	end
	else begin
		set_local_var(13, local_var(13) + 1);// Losses
		gsay_reply(312, 224);
	end
	giq_option(5, 312, 151, ZAX12, 50);
	giq_option(5, 312, 152, ZAX01, 50);
end

procedure ZAX13
begin
	gsay_message(312, 153, 50);
end

procedure ZAX14
begin
	gsay_reply(312, 154);
	giq_option(5, 312, 155, ZAX13, 50);
	giq_option(5, 312, 156, ZAX01, 50);
end

procedure ZAX15
begin
	gsay_message(312, 157, 50);
	gsay_reply(312, 158);
	giq_option(5, 312, 159, ZAX16, 50);
	giq_option(7, 312, 160, ZAX17, 50);
	giq_option(9, 312, 161, ZAX18, 50);
end

procedure ZAX16
begin
	gsay_reply(312, 162);
	giq_option(5, 312, 163, ZAX01, 50);
	giq_option(7, 312, 164, ZAX17, 50);
	giq_option(9, 312, 165, ZAX18, 50);
end

procedure ZAX17
begin
	gsay_reply(312, 166);
	giq_option(5, 312, 167, ZAX01, 50);
	giq_option(9, 312, 168, ZAX18, 50);
end

procedure ZAX18
begin
	gsay_message(312, 169, 50);
	gsay_message(312, 170, 50);
	gsay_message(312, 171, 50);
	gsay_message(312, 172, 50);
	gsay_reply(312, 173);
	giq_option(9, 312, 174, ZAX19, 50);
	giq_option(10, 312, 175, ZAX20, 50);
	giq_option(5, 312, 176, ZAX01, 50);
	giq_option(5, 312, 177, ZAX13, 50);
end

procedure ZAX19
begin
	gsay_message(312, 178, 50);
	gsay_message(312, 179, 50);
	gsay_reply(312, 180);
	giq_option(10, 312, 181, ZAX20, 50);
	giq_option(5, 312, 182, ZAX01, 50);
	giq_option(5, 312, 183, ZAX13, 50);
end

procedure ZAX20
begin
	gsay_reply(312, 184);
	giq_option(9, 312, 185, ZAX19, 50);
	giq_option(5, 312, 186, ZAX01, 50);
	giq_option(5, 312, 187, ZAX13, 50);
end

procedure ZAX21
begin
	gsay_reply(312, 188);
	giq_option(5, 312, 189, ZAX22, 50);
	giq_option(5, 312, 190, ZAX23, 50);
	giq_option(5, 312, 191, ZAX24, 50);
	giq_option(5, 312, 192, ZAX01, 50);
end

procedure ZAX22
begin
	gsay_reply(312, 193);
	giq_option(5, 312, 194, ZAX23, 50);
	giq_option(5, 312, 195, ZAX24, 50);
	giq_option(5, 312, 196, ZAX01, 50);
	giq_option(5, 312, 197, ZAX13, 50);
end

procedure ZAX23
begin
	gsay_reply(312, 198);
	giq_option(5, 312, 199, ZAX22, 50);
	giq_option(5, 312, 200, ZAX24, 50);
	giq_option(5, 312, 201, ZAX01, 50);
	giq_option(5, 312, 202, ZAX13, 50);
end

procedure ZAX24
begin
	gsay_reply(312, 203);
	giq_option(5, 312, 204, ZAX22, 50);
	giq_option(5, 312, 205, ZAX23, 50);
	giq_option(5, 312, 206, ZAX01, 50);
	giq_option(5, 312, 207, ZAX13, 50);
end

procedure ZAX25
begin
	gsay_message(312, 208, 50);
	if (global_var(WEAPON_LOCKER) == 1) then begin
		gsay_message(312, 209, 50);
		set_global_var(WEAPON_LOCKER, 2);
	end
end

procedure ZAXClearance
begin
	if (global_var(QUEST_GLOW_1_TRAPS_OFF)) then begin
		gsay_message(312, 210, 50);
		gsay_message(312, 211, 50);
		set_global_var(QUEST_GLOW_1_TRAPS_OFF, 0);
	end
end

procedure Term01
begin
	gsay_reply(828, 100);
	giq_option(4, 828, 101, Term02, 50);
	giq_option(-3, 828, 102, Term10, 50);
	giq_option(0, 828, 103, Mainframe02, 50);
end

procedure Term02
begin
	gsay_reply(828, 104);
	giq_option(4, 828, 105, Term03, 50);
	giq_option(4, 828, 106, Term06, 50);
	giq_option(4, 828, 107, Term01, 50);
end

procedure Term03
begin
	gsay_reply(828, 108);
	giq_option(4, 828, 109, Term03a, 50);
	giq_option(4, 828, 110, Term02, 50);
end

procedure Term03a
begin
	if (global_var(QUEST_GLOW_2_START_POWER) != 2) then begin
		call Term04;
	end
	else begin
		set_global_var(GLOW_POWER, 2);
	end
end

procedure Term04
begin
	gsay_reply(828, 111);
	giq_option(8, 828, 112, Term05, 50);
	giq_option(4, 828, 113, Term02, 50);
end

procedure Term05
begin
	gsay_reply(828, 114);
	giq_option(4, 828, 115, Term02, 50);
end

procedure Term06
begin
	gsay_reply(828, 116);
	giq_option(4, 828, 117, Term06a, 50);
	giq_option(4, 828, 118, Term02, 50);
end

procedure Term06a
begin
	set_global_var(GLOW_POWER, 0);
end

procedure Term07
begin
	gsay_reply(828, 119);
	giq_option(4, 828, 120, Term08, 50);
	giq_option(0, 828, 121, Mainframe02, 50);
end

procedure Term08
begin
	gsay_reply(828, 122);
	giq_option(4, 828, 123, Term09a, 50);
	giq_option(4, 828, 124, Term07, 50);
end

procedure Term09
begin
	gsay_reply(828, 125);
	giq_option(-3, 828, 126, Term09a, 50);
	giq_option(4, 828, 127, Term09a, 50);
	giq_option(0, 828, 128, Mainframe02, 50);
end

procedure Term09a
begin
	set_global_var(GLOW_POWER, 1);
end

procedure Term10
begin
	gsay_reply(828, 129);
	giq_option(-3, 828, 130, Term11, 50);
	giq_option(-3, 828, 131, Term13, 50);
	giq_option(-3, 828, 132, Term01, 50);
end

procedure Term11
begin
	gsay_reply(828, 133);
	giq_option(-3, 828, 134, Term11a, 50);
	giq_option(-3, 828, 135, Term10, 50);
end

procedure Term11a
begin
	if (global_var(QUEST_GLOW_2_START_POWER) != 2) then begin
		call Term12;
	end
	else begin
		set_global_var(GLOW_POWER, 2);
	end
end

procedure Term12
begin
	gsay_reply(828, 136);
	giq_option(-3, 828, 137, Term10, 50);
end

procedure Term13
begin
	gsay_reply(828, 138);
	giq_option(-3, 828, 148, Term06a, 50);
	giq_option(-3, 828, 137, Term10, 50);
end

procedure Term14
begin
	gsay_reply(828, 139);
	giq_option(4, 828, 140, Term14a, 50);
	giq_option(-3, 828, 141, Term15, 50);
	giq_option(-3, 828, 142, Term15, 50);
	giq_option(-3, 828, 143, Term14a, 50);
	giq_option(-3, 828, 144, Term15, 50);
	giq_option(0, 828, 145, Mainframe02, 50);
end

procedure Term14a
begin
	set_global_var(GLOW_POWER, 1);
	if (global_var(QUEST_GLOW_2_START_POWER) == 2) then begin
		call Term01;
	end
end

procedure Term15
begin
	gsay_reply(828, 146);
	giq_option(0, 828, 147, Mainframe02, 50);
end

procedure TermEnd
begin
end

procedure TermStart
begin
	if (global_var(GLOW_POWER) == 0) then begin
		call Term14;
	end
	else begin
		if (global_var(GLOW_POWER) == 1) then begin
			call Term01;
		end
		else begin
			call Term09;
		end
	end
end

procedure Mainframe00
begin
	if (has_skill(dude_obj, SKILL_SCIENCE) >= 25) then begin
		set_local_var(8, 0);
	end
	if (local_var(8) == 0) then begin
		if (local_var(7) == 1) then begin
			call Mainframe01;
		end
		else begin
			if (is_success(roll_vs_skill(dude_obj, 12, -10))) then begin
				set_local_var(7, 1);
				call Mainframe01;
			end
			else begin
				if (has_skill(dude_obj, SKILL_SCIENCE) < 25) then begin
					set_local_var(8, 1);
				end
				gsay_message(828, 201, 50);
			end
		end
	end
	else begin
		gsay_message(828, 201, 50);
		display_msg(message_str(SCRIPT_ZAX, 214));
	end
end

procedure Mainframe01
begin
	gsay_reply(828, 202);
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 204, ZAX01, 50);
end

procedure Mainframe02
begin
	gsay_reply(828, 206);
	giq_option(4, 828, 207, Mainframe03, 50);
	giq_option(4, 828, 208, Mainframe04, 50);
	giq_option(4, 828, 209, Mainframe05, 50);
	giq_option(4, 828, 210, TermStart, 50);
	giq_option(4, 828, 204, ZAX01, 50);
end

procedure Mainframe03
begin
	gsay_reply(828, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe04
begin
	if ((global_var(QUEST_GLOW_1_TRAPS_OFF) == 0) and (global_var(GLOW_POWER) == 2)) then begin
		gsay_reply(828, 212);
	end
	else begin
		gsay_reply(828, 213);
	end
	if (global_var(GLOW_POWER) == 2) then begin
		if (global_var(QUEST_GLOW_1_TRAPS_OFF) == 0) then begin
			giq_option(4, 828, 214, Mainframe04a, 50);
		end
		else begin
			giq_option(4, 828, 215, Mainframe04a, 50);
		end
	end
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe04a
begin
	game_time_advance(game_ticks(600));
	if (has_skill(dude_obj, SKILL_SCIENCE) >= 40) then begin
		set_local_var(9, 0);
	end
// HOLODISK_SECDISK_GLOW //  484  // ! Fallout Fixt: SECDISK.SSL, has read it?
	if (global_var(SECDISK_HOLODISK_FLAG) == 1) then begin
		if (global_var(QUEST_GLOW_1_TRAPS_OFF) == 0) then begin
			set_global_var(QUEST_GLOW_1_TRAPS_OFF, 1);
		end
		else begin
			set_global_var(QUEST_GLOW_1_TRAPS_OFF, 0);
		end
		if (local_var(10) == 0) then begin
			give_exp_points(100);
			display_msg(message_str(SCRIPT_ZAX, 213));
			set_local_var(10, 1);
		end
		call Mainframe09;
	end
	if (local_var(9) == 0) then begin
		if (is_success(roll_vs_skill(dude_obj, 12, -25))) then begin
			if (global_var(QUEST_GLOW_1_TRAPS_OFF) == 0) then begin
				set_global_var(QUEST_GLOW_1_TRAPS_OFF, 1);
			end
			else begin
				set_global_var(QUEST_GLOW_1_TRAPS_OFF, 0);
			end
			if (local_var(10) == 0) then begin
				give_exp_points(100);
				display_msg(message_str(SCRIPT_ZAX, 213));
				set_local_var(10, 1);
			end
			call Mainframe09;
		end
		else begin
			if (has_skill(dude_obj, SKILL_SCIENCE) < 40) then begin
				set_local_var(9, 1);
			end
			call Mainframe10;
		end
	end
	else begin
		if (local_var(9) == 1) then begin
			display_msg(message_str(SCRIPT_ZAX, 214));
			call Mainframe10;
		end
		else begin
			call Mainframe10;
		end
	end
end

procedure Mainframe05
begin
	gsay_reply(828, 216);
	giq_option(4, 828, 217, Mainframe05a, 50);
	giq_option(4, 828, 218, Mainframe05b, 50);
	giq_option(4, 828, 219, Mainframe05c, 50);
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe05a
begin
	call Mainframe06;
end

procedure Mainframe05b
begin
	call Mainframe07;
end

procedure Mainframe05c
begin
	call Mainframe08;
end

procedure Mainframe06
begin
	gsay_message(828, 220, 50);
	gsay_message(828, 221, 50);
	gsay_message(828, 222, 50);
	gsay_message(828, 223, 50);
	gsay_message(828, 224, 50);
	gsay_message(828, 225, 50);
	gsay_message(828, 226, 50);
	gsay_message(828, 227, 50);
	gsay_reply(828, 228);
	giq_option(4, 828, 229, Mainframe06a, 50);
	giq_option(4, 828, 230, Mainframe05, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe06a
begin
	set_global_var(HOLODISK_PERSONNEL_RECORD, 1);
	call Mainframe05;
end

procedure Mainframe07
begin
	gsay_reply(828, message_str(SCRIPT_GPWRTERM, 231) + message_str(SCRIPT_GPWRTERM, 250) + message_str(SCRIPT_GPWRTERM, 251) + message_str(SCRIPT_GPWRTERM, 252));
	giq_option(4, 828, 229, Mainframe07a, 50);
	giq_option(4, 828, 230, Mainframe05, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe07a
begin
	set_global_var(HOLODISK_POWER_ARMOR_SPEC, 1);
	call Mainframe05;
end

procedure Mainframe08
begin
	gsay_message(828, message_str(SCRIPT_GPWRTERM, 232) + message_str(SCRIPT_GPWRTERM, 233), 50);
	gsay_message(828, message_str(SCRIPT_GPWRTERM, 234) + message_str(SCRIPT_GPWRTERM, 235), 50);
	gsay_reply(828, message_str(SCRIPT_GPWRTERM, 236) + message_str(SCRIPT_GPWRTERM, 237) + message_str(SCRIPT_GPWRTERM, 238));
	giq_option(4, 828, 229, Mainframe08a, 50);
	giq_option(4, 828, 230, Mainframe05, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe08a
begin
	set_global_var(HOLODISK_FEV_SUMMARY_INFO, 1);
	call Mainframe05;
end

procedure Mainframe09
begin
	gsay_reply(828, 239);
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end

procedure Mainframe10
begin
	game_time_advance(game_ticks(18000));
	gsay_reply(828, 240);
	giq_option(4, 828, 203, Mainframe02, 50);
	giq_option(4, 828, 205, TermEnd, 50);
end


