#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure Initialize_p_proc;
procedure critter_p_proc;//    script_action == 12
procedure map_enter_p_proc;//    script_action == 15

variable Only_Once := 1;
variable Hex_Number;


procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once == 1 then begin
		call Initialize_p_proc;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			call talk_p_proc;
		end
		else begin
			if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				call critter_p_proc;
			end
			else begin
				if (script_action == 15) then begin
					call map_enter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (local_var(3) == 0) then begin
		float_msg(self_obj, message_str(SCRIPT_FOLINVAD, random(100, 107)), 9);
	end
end

procedure Initialize_p_proc
begin
	Only_Once := 0;
	critter_add_trait(self_obj, 1, 6, 0);
	critter_add_trait(self_obj, 1, 5, 33);// was 65
end

procedure critter_p_proc
begin
	variable LVar0 := 0;
	if (global_var(FOLLOWER_MACHO_HELP) == 1) then begin
		if (local_var(4) == 0) then begin
			if (Hex_Number == 0) then begin
				if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 0);    end//  MAKE VISIBLE
				LVar0 := random(1, 10);
				if (LVar0 == 1) then begin
					Hex_Number := 19905;
				end
				else begin
					if (LVar0 == 2) then begin
						Hex_Number := 20308;
					end
					else begin
						if (LVar0 == 3) then begin
							Hex_Number := 20506;
						end
						else begin
							if (LVar0 == 4) then begin
								Hex_Number := 20906;
							end
							else begin
								if (LVar0 == 5) then begin
									Hex_Number := 20110;
								end
								else begin
									if (LVar0 == 6) then begin
										Hex_Number := 19503;
									end
									else begin
										if (LVar0 == 7) then begin
											Hex_Number := 19103;
										end
										else begin
											if (LVar0 == 8) then begin
												Hex_Number := 20904;
											end
											else begin
												if (LVar0 == 9) then begin
													Hex_Number := 21113;
												end
												else begin
													Hex_Number := 19910;
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
			if (tile_num(self_obj) != Hex_Number) then begin
				animate_move_obj_to_tile(self_obj, Hex_Number, 0);
			end
			else begin
				if (tile_num(self_obj) == Hex_Number) then begin
					set_local_var(4, 1);
				end
			end
		end
		else begin
			if ((tile_distance_objs(dude_obj, self_obj) > 10) and (tile_distance_objs(dude_obj, self_obj) < 15)) then begin
				animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(dude_obj), random(0, 5), random(3, 6)), 0);
			end
			else begin
				if (tile_distance_objs(dude_obj, self_obj) >= 15) then begin
					animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(dude_obj), random(0, 5), random(3, 6)), 1);
				end
				else begin
					if (random(1, 100) == 1) then begin
						animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(3, 6)), 0);
					end
				end
			end
		end
		if (local_var(4) == 1) then begin
			if (cur_map_index == 17) or (cur_map_index == 18) then begin //  CATHEDRAL - ENTRANCE AND ANY LEVELS
				if (local_var(0) == 0) then begin
					set_local_var(0, 1);
					party_add(self_obj);
					float_msg(self_obj, message_str(SCRIPT_FOLINVAD, 112), 9);
				end
			end
			else begin
				if (cur_map_index == 33) then begin //  MASTER'S VAULT -  ENTRANCE AND FIRST LEVEL   (LEVELS 1 AND 2)
					if (local_var(1) == 0) then begin
						if (elevation(self_obj) == 1) then begin
							set_local_var(1, 1);
							float_msg(self_obj, message_str(SCRIPT_FOLINVAD, 109), 9);
						end
					end
				end
				else begin
					if (cur_map_index == 34) then begin //  MASTER'S VAULT -  LEVELS 3 AND 4
						if (local_var(2) == 0) then begin
							set_local_var(2, 1);
							float_msg(self_obj, message_str(SCRIPT_FOLINVAD, 110), 9);
						end
					end
					else begin
						if (local_var(3) == 0) then begin
							set_local_var(3, 1);
							float_msg(self_obj, message_str(SCRIPT_FOLINVAD, 111), 9);
							party_remove(self_obj);
							animate_move_obj_to_tile(self_obj, 26000, 0);
							set_global_var(FOLLOWER_MACHO_HELP, 5);
						end
					end
				end
			end
		end
	end
	else begin
		if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
	end
end

procedure map_enter_p_proc
begin
	if (global_var(FOLLOWER_MACHO_HELP) != 1) then begin
		if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
	end
end
 
procedure destroy_p_proc
begin

end

