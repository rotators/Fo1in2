#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure dialog_end;
procedure madsci00;
procedure madsci00a;
procedure madsci00b;
procedure madsci01;
procedure madsci01a;
procedure madsci02;
procedure madsci02a;
procedure madsci02b;
procedure madsci03;
procedure madsci03a;
procedure madsci03b;
procedure madsci04;
procedure madsci04a;
procedure madsci05;
procedure madsci06;
procedure madsci07;
procedure madsci08;
procedure madsci09;
procedure madsci09a;
procedure madsci09b;
procedure madsci09c;
procedure madsci10;
procedure madsci10a;
procedure madsci10b;
procedure madsci11;
procedure madsci12;
procedure madsci12a;
procedure madsci12b;
procedure madsci12c;
procedure madsci13;
procedure madsci13a;
procedure madsci13b;
procedure madsci14;
procedure madsci14a;

variable hostile;
variable Only_Once := 1;
variable home_tile;
variable sleep_tile;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

procedure madscinull;




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 34);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 69);
		home_tile := tile_num(self_obj);
		if (home_tile == 22093) then begin
			sleep_tile := 21881;
		end
		else begin
			if (home_tile == 22704) then begin
				sleep_tile := 22281;
			end
			else begin
				sleep_tile := 22083;
			end
		end
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if ((game_time_hour >= 700) and (game_time_hour < 1800)) then begin
			if (local_var(6)) then begin
				set_local_var(6, 0);
				animate_move_obj_to_tile(self_obj, home_tile, 0);
			end
			else begin
				if (tile_num(self_obj) != home_tile) then begin
					animate_move_obj_to_tile(self_obj, home_tile, 0);
				end
			end
		end
		else begin
			if (local_var(6)) then begin
				if (tile_num(self_obj) != sleep_tile) then begin
					animate_move_obj_to_tile(self_obj, sleep_tile, 0);
				end
			end
			else begin
				set_local_var(6, 1);
				animate_move_obj_to_tile(self_obj, sleep_tile, 0);
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (tile_num(self_obj) == sleep_tile) then begin
		float_msg(self_obj, message_str(SCRIPT_MADSCI, 303), 2);
	end
	else begin
		call get_reaction;
		start_gdialog(679, self_obj, 4, -1, -1);
		gsay_start;
		if critter_inven_obj(dude_obj, 0) then begin  variable RobesCheck;  RobesCheck := critter_inven_obj(dude_obj, 0);  end      if (obj_pid(RobesCheck) == 113) then begin
			if (local_var(5) == 1) then begin
				call madsci01;
			end
			else begin
				call madsci00;
			end
			set_local_var(5, 1);
		end
		else begin
			if (local_var(4) == 1) then begin
				call madsci01;
			end
			else begin
				call madsci12;
			end
			set_local_var(4, 1);
		end
		gsay_end;
		end_dialogue;
	end
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (tile_num(self_obj) == sleep_tile) then begin
		display_msg(message_str(SCRIPT_MADSCI, 300));
	end
	else begin
		display_msg(message_str(SCRIPT_MADSCI, 100));
	end
end

procedure dialog_end
begin
end

procedure madsci00
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(679, 101);
	end
	else begin
		gsay_reply(679, 102);
	end
	giq_option(7, 679, 103, madsci00a, 50);
	giq_option(4, 679, 104, madsci04, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 105, madsci00b, 50);
	end
	giq_option(-3, 679, 106, madsci06, 50);
end

procedure madsci00a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci02;
	end
	else begin
		call madsci09;
	end
end

procedure madsci00b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call madsci03;
	end
	else begin
		call madsci08;
	end
end

procedure madsci01
begin
	gsay_reply(679, 107);
	giq_option(4, 679, 108, madsci01a, 50);
	giq_option(4, 679, 109, madsci02, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 110, combat, 51);
	end
	giq_option(-3, 679, 111, madsci06, 50);
end

procedure madsci01a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call madsci03;
	end
	else begin
		call madsci09;
	end
end

procedure madsci02
begin
	gsay_reply(679, 112);
	giq_option(7, 679, 113, madsci07, 50);
	giq_option(4, 679, 114, madsci02a, 50);
	giq_option(4, 679, 115, madsci02b, 50);
	giq_option(4, 679, 116, madsci14, 50);
end

procedure madsci02a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci07;
	end
	else begin
		call madsci09;
	end
end

procedure madsci02b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci04;
	end
	else begin
		call madsci06;
	end
end

procedure madsci03
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(679, 117);
	end
	else begin
		gsay_reply(679, 118);
	end
	giq_option(4, 679, 103, madsci03a, 50);
	giq_option(4, 679, 104, madsci04, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 119, madsci03b, 50);
	end
end

procedure madsci03a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci02;
	end
	else begin
		call madsci06;
	end
end

procedure madsci03b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call madsci09;
	end
	else begin
		call madsci08;
	end
end

procedure madsci04
begin
	gsay_reply(679, 120);
	giq_option(4, 679, 121, madsci04a, 50);
	giq_option(4, 679, 122, madsci05, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 123, combat, 51);
	end
end

procedure madsci04a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci09;
	end
	else begin
		call madsci08;
	end
end

procedure madsci05
begin
	gsay_reply(679, 124);
	giq_option(4, 679, 125, dialog_end, 50);
	giq_option(4, 679, 126, madsci09, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 127, combat, 51);
	end
end

procedure madsci06
begin
	gsay_message(679, 128, 50);
end

procedure madsci07
begin
	gsay_reply(679, 129);
	giq_option(4, 679, 130, madsci05, 50);
	giq_option(4, 679, 131, dialog_end, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 132, combat, 51);
	end
end

procedure madsci08
begin
	gsay_message(679, 133, 50);
end

procedure madsci09
begin
	gsay_reply(679, 134);
	giq_option(4, 679, 135, madsci09a, 50);
	giq_option(4, 679, 136, madsci09b, 51);
	giq_option(4, 679, 137, madsci09c, 51);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 138, combat, 51);
	end
end

procedure madsci09a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -5))) then begin
		call madsci06;
	end
	else begin
		call madsci08;
	end
end

procedure madsci09b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call madsci10;
	end
	else begin
		call madsci11;
	end
end

procedure madsci09c
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call madsci10;
	end
	else begin
		call madsci11;
	end
end

procedure madsci10
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(679, 117);
	end
	else begin
		gsay_reply(679, 118);
	end
	giq_option(4, 679, 139, madsci10a, 50);
	giq_option(4, 679, 140, dialog_end, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 119, madsci10b, 50);
	end
end

procedure madsci10a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci02;
	end
	else begin
		call madsci06;
	end
end

procedure madsci10b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call madsci06;
	end
	else begin
		call madsci08;
	end
end

procedure madsci11
begin
	gsay_message(679, 141, 51);
	call combat;
end

procedure madsci12
begin
	gsay_reply(679, 142);
	giq_option(4, 679, 143, madsci12a, 50);
	giq_option(4, 679, 144, madsci12b, 51);
	giq_option(4, 679, 145, madsci12c, 50);
	giq_option(4, 679, 146, combat, 50);
end

procedure madsci12a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call madsci03;
	end
	else begin
		call madsci09;
	end
end

procedure madsci12b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
		call madsci10;
	end
	else begin
		call madsci11;
	end
end

procedure madsci12c
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -15))) then begin
		call madsci13;
	end
	else begin
		call madsci08;
	end
end

procedure madsci13
begin
	gsay_reply(679, 147);
	giq_option(4, 679, 148, madsci02, 50);
	giq_option(4, 679, 144, madsci13a, 51);
	giq_option(4, 679, 149, madsci13b, 50);
end

procedure madsci13a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
		call madsci10;
	end
	else begin
		call madsci11;
	end
end

procedure madsci13b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call madsci10;
	end
	else begin
		call madsci08;
	end
end

procedure madsci14
begin
	gsay_reply(679, 150);
	giq_option(4, 679, 151, madsci14a, 50);
	giq_option(4, 679, 122, madsci05, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 679, 123, combat, 50);
	end
end

procedure madsci14a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call madsci09;
	end
	else begin
		call madsci08;
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure madscinull
begin
end



