#include "..\headers\define.h"

procedure start;
procedure map_enter_p_proc;//    script_action == 15
procedure map_update_p_proc;//    script_action == 23
procedure use_p_proc;//    script_action == 6
procedure pickup_p_proc;//    script_action == 4
procedure use_skill_on_p_proc;//    script_action == 8

variable Free_To_Steal;

import variable Shop_Ptr;
import variable Shopkeeper_Ptr;


procedure start
begin
	if (script_action == 15) then begin//map_enter_p_proc (or "map_init") called when entering from World Map, on green "exit" grids, SOME ladders, doesn't appear to call on elevators or manholes
		call map_enter_p_proc;
	end
	else begin
		if (script_action == 23) then begin//map_update_p_proc -- called every dozen seconds or so, & additionally on certain events (exit dialog, end combat, load map, etc)
			call map_update_p_proc;
		end
		else begin
			if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
				call use_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 8) then begin//<-- use_skill_on_p_proc
						call use_skill_on_p_proc;
					end
				end
			end
		end
	end
end

procedure map_enter_p_proc
begin
	Shop_Ptr := self_obj;
end

procedure map_update_p_proc
begin
	Shop_Ptr := self_obj;
end

procedure use_p_proc
begin
	if (Shopkeeper_Ptr != 0) then begin
		script_overrides;
		add_timer_event(Shopkeeper_Ptr, 1, 1);
	end
end

procedure pickup_p_proc
begin
	if ((Shopkeeper_Ptr != 0) and (Free_To_Steal == 0)) then begin
		script_overrides;
		add_timer_event(Shopkeeper_Ptr, 1, 1);
	end
end

procedure use_skill_on_p_proc
begin
	if ((action_being_used == 10) and (Shopkeeper_Ptr != 0)) then begin//-- STEAL
		if (is_success(roll_vs_skill(dude_obj, 10, -10))) then begin
			Free_To_Steal := 1;
		end
		else begin
			script_overrides;
			add_timer_event(Shopkeeper_Ptr, 1, 2);
		end
	end
end

