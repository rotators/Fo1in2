#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11

procedure social_skills;

procedure DocWu00;
procedure DocWu01;
procedure DocWu02;
procedure DocWu03;
procedure DocWu04;
procedure DocWu05;
procedure DocWu06;
procedure DocWu06a;
procedure DocWu07;
procedure DocWu08;
procedure DocWu09;
procedure DocWu10;
procedure DocWu10a;
procedure DocWu10b;
procedure DocWu10c;
procedure DocWu11;
procedure DocWu12;
procedure DocWu13;
procedure DocWu14;
procedure DocWu15;
procedure DocWu16;
procedure DocWu17;
procedure DocWu17a;
procedure DocWu17b;
procedure DocWu18;
procedure DocWu19;
procedure DocWu19a;
procedure DocWu19b;
procedure DocWu20;
procedure DocWu20a;
procedure DocWu20b;
procedure DocWu21;
procedure DocWu21a;
procedure DocWu22;
procedure DocWu23;
procedure DocWu24;
procedure DocWu24a;
procedure DocWu24b;
procedure DocWuOpts1;
procedure DocWuOpts2;
procedure DocWuOpts3;
procedure DocWuOpts4;
procedure DocWuOpts5;
procedure DocWuOpts5a;
procedure DocWuEnd;

variable healing;
variable Only_Once := 1;
variable hostile;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	
	
	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 20);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 69);
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
					hostile := 0;
					attack(dude_obj);
				end
			end
			else begin
				if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						hostile := 1;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							if (fixed_param == 1) then begin
								if ((healing == 1) or (healing == 3)) then begin
									float_msg(dude_obj, message_str(SCRIPT_DOCWU, 138), 2);
								end
								else begin
									if (healing == 2) then begin
										float_msg(dude_obj, message_str(SCRIPT_DOCWU, 152), 2);
									end
									else begin
										if (healing == 4) then begin
											float_msg(dude_obj, message_str(SCRIPT_DOCWU, 175), 2);
										end
										else begin
											if (healing == 5) then begin
												float_msg(self_obj, message_str(SCRIPT_DOCWU, 150), 8);
											end
											else begin
												if (healing == 6) then begin
													float_msg(self_obj, message_str(SCRIPT_DOCWU, 178), 8);
												end
											end
										end
									end
								end
								add_timer_event(self_obj, game_ticks(3), 2);
							end
							else begin
								if (fixed_param == 2) then begin
									if (healing < 4) then begin
										float_msg(self_obj, message_str(SCRIPT_DOCWU, 139), 8);
									end
									else begin
										if (healing == 4) then begin
											float_msg(self_obj, message_str(SCRIPT_DOCWU, 176), 8);
										end
									end
									add_timer_event(self_obj, game_ticks(3), 3);
								end
								else begin
									if (fixed_param == 3) then begin
										if (healing == 1) then begin
											if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
												float_msg(self_obj, message_str(SCRIPT_DOCWU, 140), 8);
											end
											else begin
												float_msg(self_obj, message_str(SCRIPT_DOCWU, 141), 8);
											end
										end
										else begin
											if (healing == 2) then begin
												float_msg(self_obj, message_str(SCRIPT_DOCWU, 153), 8);
											end
											else begin
												if (healing == 3) then begin
													if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
														float_msg(self_obj, message_str(SCRIPT_DOCWU, 167), 8);
													end
													else begin
														float_msg(self_obj, message_str(SCRIPT_DOCWU, 168), 8);
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	get_reaction
	start_gdialog(400, self_obj, 4, -1, -1);
	gsay_start;
	healing := 0;
	if (local_var(5) == 1) then begin
		call DocWu00;
	end
	else begin
		if (local_var(6) == 1) then begin
			call DocWu01;
		end
		else begin
			if (local_var(7) == 1) then begin
				call DocWu02;
			end
			else begin
				call DocWu03;
			end
		end
	end
	gsay_end;
	end_dialogue;
	if (healing) then begin
		use_obj(dude_obj);
		add_timer_event(self_obj, game_ticks(2), 1);
	end
end

procedure social_skills
begin
	get_reaction
	dialogue_system_enter;
end

procedure DocWu00
begin
	variable LVar0 := 0;
	set_local_var(4, 1);
	set_local_var(5, 1);
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_reply(400, message_str(SCRIPT_DOCWU, 102));
	end
	else begin
		gsay_reply(400, message_str(SCRIPT_DOCWU, 103));
	end
	giq_option(7, 400, 106, DocWu04, 50);
	call DocWuOpts1;
	giq_option(4, 400, 109, DocWu07, 50);
	call DocWuOpts2;
	giq_option(4, 400, 111, DocWu09, 50);
	call DocWuOpts3;
end

procedure DocWu01
begin
	set_local_var(6, 1);
	gsay_reply(400, 113);
	giq_option(7, 400, 114, DocWu11, 50);
	call DocWuOpts1;
	giq_option(4, 400, 115, DocWu12, 50);
	call DocWuOpts2;
	giq_option(4, 400, 116, DocWu09, 50);
	call DocWuOpts3;
end

procedure DocWu02
begin
	set_local_var(7, 1);
	gsay_reply(400, 117);
	giq_option(7, 400, 118, DocWu13, 50);
	call DocWuOpts1;
	giq_option(4, 400, 119, DocWu12, 50);
	call DocWuOpts2;
	giq_option(4, 400, 120, DocWu14, 50);
	call DocWuOpts3;
end

procedure DocWu03
begin
	set_local_var(5, 0);
	set_local_var(6, 0);
	set_local_var(7, 0);
	gsay_reply(400, 121);
	giq_option(7, 400, 122, DocWu15, 50);
	call DocWuOpts1;
	giq_option(4, 400, 123, DocWu12, 50);
	call DocWuOpts2;
	giq_option(4, 400, 124, DocWu14, 50);
	call DocWuOpts3;
end

procedure DocWu04
begin
	gsay_reply(400, 125);
	giq_option(7, 400, 126, DocWu16, 50);
	call DocWuOpts4;
end

procedure DocWu05
begin
	gsay_reply(400, 130);
	giq_option(0, 400, 101, DocWuEnd, 50);
end

procedure DocWu06
begin
	gsay_reply(400, 131);
	giq_option(0, 400, 100, DocWu06a, 50);
end

procedure DocWu06a
begin
	healing := 1;
end

procedure DocWu07
begin
	gsay_reply(400, 142);
	call DocWuOpts4;
end

procedure DocWu08
begin
	gsay_reply(400, 143);
	giq_option(0, 400, 101, DocWuEnd, 50);
end

procedure DocWu09
begin
	gsay_reply(400, 144);
	giq_option(4, 400, 145, DocWu06, 50);
	giq_option(4, 400, 146, DocWu23, 50);
	giq_option(4, 400, 147, DocWu24, 50);
end

procedure DocWu10
begin
	gsay_reply(400, 148);
	giq_option(0, 400, 100, DocWu10a, 50);
end

procedure DocWu10a
begin
	gsay_reply(400, 151);
	giq_option(0, 400, 100, DocWu10c, 50);
end

procedure DocWu10b
begin
	healing := 5;
end

procedure DocWu10c
begin
	healing := 2;
end

procedure DocWu11
begin
	gsay_reply(400, 154);
	call DocWuOpts4;
end

procedure DocWu12
begin
	gsay_reply(400, 155);
	call DocWuOpts4;
end

procedure DocWu13
begin
	gsay_reply(400, 156);
	call DocWuOpts4;
end

procedure DocWu14
begin
	gsay_reply(400, 157);
	giq_option(4, 400, 158, DocWu06, 50);
	giq_option(4, 400, 159, DocWu23, 50);
	giq_option(4, 400, 160, DocWu24, 50);
end

procedure DocWu15
begin
	gsay_reply(400, 161);
	giq_option(4, 400, 162, DocWu06, 50);
	giq_option(4, 400, 163, DocWu23, 50);
	giq_option(4, 400, 160, DocWu24, 50);
end

procedure DocWu16
begin
	gsay_reply(400, 164);
	giq_option(4, 400, 162, DocWu06, 50);
	giq_option(4, 400, 163, DocWu23, 50);
	giq_option(4, 400, 160, DocWu24, 50);
end

procedure DocWu17
begin
	gsay_reply(400, 165);
	giq_option(0, 400, 100, DocWu17a, 50);
end

procedure DocWu17a
begin
	gsay_reply(400, 166);
	giq_option(0, 400, 100, DocWu17b, 50);
end

procedure DocWu17b
begin
	healing := 3;
end

procedure DocWu18
begin
	gsay_reply(400, 169);
	giq_option(0, 400, 101, DocWuEnd, 50);
end

procedure DocWu19
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar1 := get_critter_stat(dude_obj, STAT_max_hp);
	LVar0 := get_critter_stat(dude_obj, STAT_current_hp);
	if (LVar0 == LVar1) then begin
		gsay_reply(400, 170);
		giq_option(0, 400, 101, DocWuEnd, 50);
	end
	else begin
		if (LVar0 > (LVar1 / 2)) then begin
			call DocWu19a;
		end
		else begin
			call DocWu19b;
		end
	end
end

procedure DocWu19a
begin
	gsay_reply(400, 171);
	giq_option(4, 400, 127, DocWu06, 50);
	giq_option(4, 400, 173, DocWu23, 50);
end

procedure DocWu19b
begin
	gsay_reply(400, 171);
	giq_option(4, 400, 127, DocWu06, 50);
	giq_option(4, 400, 173, DocWu18, 50);
end

procedure DocWu20
begin
	gsay_reply(400, 174);
	giq_option(0, 400, 100, DocWu20a, 50);
end

procedure DocWu20a
begin
	gsay_reply(400, 137);
	giq_option(0, 400, 100, DocWu20b, 50);
end

procedure DocWu20b
begin
	healing := 4;
end

procedure DocWu21
begin
	gsay_reply(400, 177);
	giq_option(0, 400, 100, DocWu21a, 50);
end

procedure DocWu21a
begin
	healing := 6;
end

procedure DocWu22
begin
	gsay_reply(400, 179);
	giq_option(0, 400, 101, DocWuEnd, 50);
end

procedure DocWu23
begin
	gsay_reply(400, 180);
	giq_option(0, 400, 101, DocWuEnd, 50);
end

procedure DocWu24
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	LVar1 := get_critter_stat(dude_obj, STAT_max_hp);
	LVar0 := get_critter_stat(dude_obj, STAT_current_hp);
	if (LVar0 == LVar1) then begin
		gsay_reply(400, 170);
		giq_option(0, 400, 101, DocWuEnd, 50);
	end
	else begin
		if (LVar0 > (LVar1 / 2)) then begin
			call DocWu24a;
		end
		else begin
			call DocWu24b;
		end
	end
end

procedure DocWu24a
begin
	gsay_reply(400, 181);
	giq_option(4, 400, 127, DocWu17, 50);
	giq_option(4, 400, 173, DocWu23, 50);
end

procedure DocWu24b
begin
	gsay_reply(400, 182);
	giq_option(4, 400, 183, DocWu06, 50);
	giq_option(4, 400, 173, DocWu23, 50);
end

procedure DocWuOpts1
begin
	giq_option(4, 400, 107, DocWu05, 50);
	giq_option(4, 400, 108, DocWu06, 50);
end

procedure DocWuOpts2
begin
	giq_option(4, 400, 110, DocWu08, 50);
end

procedure DocWuOpts3
begin
	giq_option(-3, 400, 112, DocWu10, 50);
	giq_option(-3, 400, 184, DocWuEnd, 50);
end

procedure DocWuOpts4
begin
	giq_option(4, 400, 127, DocWu17, 50);
	giq_option(4, 400, 128, DocWu18, 50);
	giq_option(4, 400, 129, DocWu19, 50);
end

procedure DocWuOpts5
begin
	gsay_reply(400, 132);
	giq_option(7, 400, 133, DocWuOpts5a, 50);
	giq_option(4, 400, 134, DocWu21, 50);
	giq_option(4, 400, 135, DocWu22, 50);
	giq_option(4, 400, 136, DocWuOpts5a, 50);
end

procedure DocWuOpts5a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call DocWu20;
	end
	else begin
		call DocWu21;
	end
end

procedure DocWuEnd
begin
end



procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end 
	rm_timer_event(self_obj);
end
