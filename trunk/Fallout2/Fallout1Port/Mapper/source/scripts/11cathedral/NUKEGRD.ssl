#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;
procedure damage_p_proc;//    script_action == 14
procedure pre_dialogue;//    script_action == 11
procedure talk_p_proc;//    called by pre_dialogue
procedure critter_p_proc;
procedure destroy_p_proc;

procedure NukeGuard00;
procedure NukeGuard01;
procedure NukeGuard02;
procedure NukeGuard03;
procedure NukeGuard03a;
procedure NukeGuard04;
procedure NukeGuard05;
procedure NukeGuard05a;
procedure NukeGuard05b;
procedure NukeGuard06;
procedure NukeGuard07;
procedure NukeGuard08;
procedure NukeGuard08a;
procedure NukeGuard08b;
procedure NukeGuard09;
procedure NukeGuard10;
procedure NukeGuard11;
procedure NukeGuard11a;
procedure NukeGuard12;
procedure NukeGuard13;
procedure NukeGuard13a;
procedure NukeGuard13b;
procedure NukeGuard14;
procedure NukeGuard15;
procedure NukeGuard21;
procedure NukeGuard22;
procedure NukeGuard23;
procedure NukeGuard23a;
procedure NukeGuard24;
procedure NukeGuard24a;
procedure NukeGuard25;
procedure NukeGuard26;
procedure NukeGuardend;
procedure NukeGuardcbt;

variable tmp_hostile;
variable Only_Once := 1;
variable DISGUISED;
variable again;
variable Weapons;
variable rndx;

procedure start
begin
	

	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 34);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 48);
	end
	if (local_var(6) == 0) then begin
		variable HasItem := 0;
		variable item := 0;
		set_local_var(6, 1);
		item := create_object_sid(PID_SMALL_ENERGY_CELL, 0, 0, -1);//small energy cell
		add_mult_objs_to_inven(self_obj, item, 1);
		item := create_object_sid(PID_MICRO_FUSION_CELL, 0, 0, -1);//microfusion cell
		add_mult_objs_to_inven(self_obj, item, 1);
		item := create_object_sid(PID_RADIO, 0, 0, -1);//Radio
		add_mult_objs_to_inven(self_obj, item, 1);
		item := create_object_sid(PID_BOTTLE_CAPS, 0, 0, -1);//caps
		add_mult_objs_to_inven(self_obj, item, (random(1, 6) * (get_critter_stat(dude_obj, STAT_lu) - 1)));
		HasItem := obj_carrying_pid_obj(self_obj, PID_GATLING_LASER);//gatling laser
		if (HasItem) then begin
			item := create_object_sid(PID_POWER_FIST, 0, 0, -1);//powerfist
			add_mult_objs_to_inven(self_obj, item, 1);
		end
		else begin
			item := create_object_sid(PID_TURBO_PLASMA_RIFLE, 0, 0, -1);//turbo plasma rifle
			add_mult_objs_to_inven(self_obj, item, 1);
			wield_obj_critter(self_obj, item);
		end
		set_local_var(6, 1);
	end
	if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
		call damage_p_proc;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			call pre_dialogue;
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				tmp_hostile := 1;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
						script_overrides;
						display_msg(message_str(SCRIPT_GENSARG, 200));
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
					end
				end
			end
		end
	end
end



procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if (map_var(5)) then begin
			tmp_hostile := 1;
		end
		else begin

			if (dude_is_armed) then begin
				if (Weapons == 0) then begin
					Weapons := 1;
					if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
						dialogue_system_enter;
					end
				end
			end
			DISGUISED := 0;
			if critter_inven_obj(dude_obj, 0) then begin  variable RobesCheck;  RobesCheck := critter_inven_obj(dude_obj, 0);  end      if (obj_pid(RobesCheck) == PID_PURPLE_ROBE) then begin
				if (metarule(16, 0) > 1) then begin//  PARTY_COUNT > 1.    Is player travelling with homies?
					DISGUISED := 0;
				end
				else begin
					DISGUISED := 1;
				end
			end
			if ((DISGUISED == 0) and (again == 0)) then begin
				if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
					again := 1;
					dialogue_system_enter;
				end
			end
		end
	end
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		tmp_hostile := 0;
		attack(dude_obj);
	end
end

procedure damage_p_proc
begin
	if (global_var(MUTANTS_ENEMY_UNSURE) == 0) then begin
		set_global_var(MUTANTS_ENEMY_UNSURE, 1);
	end
end

procedure destroy_p_proc
begin

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	set_local_var(3, 1);
	get_reaction
	start_gdialog(525, self_obj, 4, -1, -1);
	gsay_start;
	if (Weapons == 1) then begin
		call NukeGuard01;
	end
	else begin
		if (local_var(4)) then begin
			call NukeGuard13;
		end
		else begin
			set_local_var(4, 1);
			call NukeGuard05;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure pre_dialogue
begin
	dude_look_at_critter;
	DISGUISED := 0;
	if critter_inven_obj(dude_obj, 0) then begin  variable RobesCheck;  RobesCheck := critter_inven_obj(dude_obj, 0);  end      if (obj_pid(RobesCheck) == PID_PURPLE_ROBE) then begin
		if (metarule(16, 0) > 1) then begin//  PARTY_COUNT > 1.    Is player travelling with homies?
			DISGUISED := 0;
		end
		else begin
			DISGUISED := 1;
		end
	end
	if (Weapons == 1) then begin
		if (DISGUISED) then begin
			call talk_p_proc;
		end
		else begin
			call NukeGuard00;
		end
	end
	else begin
		if (DISGUISED) then begin
			call talk_p_proc;
		end
		else begin
			call NukeGuard00;
		end
	end
end

procedure NukeGuard00
begin
	rndx := random(1, 4);
	if (rndx == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 100), 2);
	end
	else begin
		if (rndx == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 101), 2);
		end
		else begin
			if (rndx == 3) then begin
				float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 102), 2);
			end
			else begin
				if (rndx == 4) then begin
					float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 103), 2);
				end
			end
		end
	end
	call NukeGuardcbt;
end

procedure NukeGuard01
begin
	if (dude_is_male) then begin
		gsay_reply(525, 107);
	end
	else begin
		gsay_reply(525, 108);
	end
	giq_option(4, 525, 110, NukeGuard02, 51);
	giq_option(6, 525, 111, NukeGuard03, 50);
	giq_option(9, 525, 112, NukeGuard04, 50);
	giq_option(-3, 525, 109, NukeGuard02, 51);
end

procedure NukeGuard02
begin
	gsay_message(525, 113, 51);
	call NukeGuardcbt;
end

procedure NukeGuard03
begin
	gsay_reply(525, 114);
	giq_option(6, 525, 115, NukeGuard03a, 50);
	giq_option(6, 525, 116, NukeGuardcbt, 51);
end

procedure NukeGuard03a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call NukeGuard04;
	end
	else begin
		call NukeGuard02;
	end
end

procedure NukeGuard04
begin
	gsay_message(525, 117, 50);
	set_local_var(5, 1);
end

procedure NukeGuard05
begin
	if (dude_is_male) then begin
		gsay_reply(525, 118);
	end
	else begin
		gsay_reply(525, 119);
	end
	giq_option(4, 525, 121, NukeGuard05a, 50);
	giq_option(6, 525, 122, NukeGuard05b, 50);
	giq_option(6, 525, 201, NukeGuard21, 50);
	giq_option(-3, 525, 109, NukeGuard06, 50);
end

procedure NukeGuard05a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call NukeGuard08;
	end
	else begin
		call NukeGuard07;
	end
end

procedure NukeGuard05b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call NukeGuard10;
	end
	else begin
		call NukeGuard11;
	end
end

procedure NukeGuard06
begin
	gsay_message(525, 123, 50);
	set_local_var(5, 1);
end

procedure NukeGuard07
begin
	gsay_message(525, 124, 51);
	call NukeGuardcbt;
end

procedure NukeGuard08
begin
	gsay_reply(525, 125);
	giq_option(4, 525, 126, NukeGuard08a, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 525, 127, NukeGuardcbt, 51);
	end
	giq_option(7, 525, 128, NukeGuard08b, 50);
end

procedure NukeGuard08a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call NukeGuard04;
	end
	else begin
		call NukeGuard07;
	end
end

procedure NukeGuard08b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
		call NukeGuard04;
	end
	else begin
		call NukeGuard09;
	end
end

procedure NukeGuard09
begin
	gsay_message(525, 129, 51);
	call NukeGuardcbt;
end

procedure NukeGuard10
begin
	gsay_message(525, 130, 50);
	set_local_var(5, 1);
end

procedure NukeGuard11
begin
	gsay_reply(525, 131);
	giq_option(6, 525, 132, NukeGuard11a, 50);
	giq_option(6, 525, 133, NukeGuardcbt, 51);
end

procedure NukeGuard11a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call NukeGuard12;
	end
	else begin
		call NukeGuard09;
	end
end

procedure NukeGuard12
begin
	gsay_message(525, 134, 50);
	set_local_var(5, 1);
end

procedure NukeGuard13
begin
	gsay_reply(525, 135);
	giq_option(4, 525, 137, NukeGuardcbt, 51);
	giq_option(4, 525, 138, NukeGuard13a, 50);
	giq_option(6, 525, 139, NukeGuard13b, 50);
	giq_option(6, 525, 201, NukeGuard21, 50);
	giq_option(-3, 525, 136, NukeGuard14, 51);
end

procedure NukeGuard13a
begin
	if (is_success(do_check(dude_obj, STAT_lu, 0))) then begin
		call NukeGuard12;
	end
	else begin
		call NukeGuard09;
	end
end

procedure NukeGuard13b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
		call NukeGuard10;
	end
	else begin
		call NukeGuard11;
	end
end

procedure NukeGuard14
begin
	gsay_message(525, 140, 51);
	call NukeGuardcbt;
end

procedure NukeGuard15
begin
	rndx := random(1, 2);
	if (rndx == 1) then begin
		gsay_message(525, 141, 50);
	end
	else begin
		if (rndx == 2) then begin
			gsay_message(525, 142, 50);
		end
	end
end

procedure NukeGuard21
begin
	gsay_reply(525, 202);
	giq_option(6, 525, 203, NukeGuard22, 50);
	giq_option(6, 525, 204, NukeGuard23, 50);
end

procedure NukeGuard22
begin
	gsay_message(525, 205, 50);
end

procedure NukeGuard23
begin
	gsay_reply(525, 206);
	giq_option(6, 525, 207, NukeGuard22, 50);
	giq_option(6, 525, 208, NukeGuard23a, 50);
end

procedure NukeGuard23a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
		call NukeGuard24;
	end
	else begin
		call NukeGuard26;
	end
end

procedure NukeGuard24
begin
	gsay_reply(525, 209);
	giq_option(6, 525, 210, NukeGuard22, 50);
	giq_option(7, 525, 211, NukeGuard24a, 50);
end

procedure NukeGuard24a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
		call NukeGuard25;
	end
	else begin
		call NukeGuard26;
	end
end

procedure NukeGuard25
begin
	gsay_reply(525, 212);
	giq_option(6, 525, 213, NukeGuard22, 50);
end

procedure NukeGuard26
begin
	gsay_message(525, 214, 51);
	call NukeGuardcbt;
end

procedure NukeGuardend
begin
end

procedure NukeGuardcbt
begin
	tmp_hostile := 1;
end


