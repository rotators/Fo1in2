/*

	Generic Super Mutant

	Also checks for Nightkins and Stealth Boys -- they will actually use the!

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_GENMUTAN
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"
#include "..\headers\Sfall\main.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure do_dialogue;

procedure pre_dialogue;
procedure mutan00;
procedure mutan01;
procedure mutan02;
procedure mutan03;
procedure mutan03a;
procedure mutan04;
procedure mutan05;
procedure mutan05a;
procedure mutan05b;
procedure mutan06;
procedure mutan07;
procedure mutan08;
procedure mutan08a;
procedure mutan08b;
procedure mutan09;
procedure mutan10;
procedure mutan11;
procedure mutan11a;
procedure mutan12;
procedure mutan13;
procedure mutan13a;
procedure mutan13b;
procedure mutan14;
procedure mutan15;
procedure mutanend;
procedure mutancbt;

#define SetSelfFlag(x) 		set_flags(self_obj, x)
#define GetSelfFlag 			get_flags(self_obj)

#define set_ghost 			SetSelfFlag(GetSelfFlag bwor FLAG_TRANSGLASS)
#define rem_ghost 			SetSelfFlag(GetSelfFlag bwand bwnot(FLAG_TRANSGLASS))

#define self_is_nightkin 	((obj_pid(self_obj) == PID_NIGHTKIN) or (obj_pid(self_obj) == PID_NIGHTKIN_GUARD) or \
									(obj_pid(self_obj) == PID_NIGHTKIN_GUARD_2) or (obj_pid(self_obj) == PID_TOUGH_NIGHTKIN) or \
									(obj_pid(self_obj) == PID_DEADLY_NIGHTKIN) or (obj_pid(self_obj) == PID_SUPER_NIGHTKIN) or (obj_pid(self_obj) == PID_MASTER_NIGHTKIN))

#define spawn_stealth_boy 	if self_is_nightkin and random(0,15) == 1 then begin	\
									   Item:=create_object(PID_STEALTH_BOY,0,0);				\
									   add_mult_objs_to_inven(self_obj,Item,1);				\
									end

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

import variable signal_mutants;

/* Local variables which do not need to be saved between map changes. */

variable tmp_hostile;
variable Only_Once := 1;
variable Weapons;
variable DISGUISED;
variable again;
variable rndx;
variable RobesCheck;
variable Use_Stealth_Boy := 0;
variable Item;

procedure start begin
	if Only_Once then begin

		// Are we in the Cathedral vault?
		//if (cur_map_index == MAP_MSTRLR12 or cur_map_index == MAP_MSTRLR34) then
		//	critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, TEAM_MASTER_LAIR);
		//else
			critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, TEAM_NECROPOLIS_MUTANT);

		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, AI_SUPER_MUTANT_AGGRESSIVE);
		Only_Once := 0;
	end

	if (script_action == 11) then begin//<--- do_dialogue (Face icon), can also call "do_dialogue" or "do_dialog"
		call pre_dialogue;
	end
end

procedure map_enter_p_proc begin
	if (map_first_run) then
		spawn_stealth_boy
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (signal_mutants == 1) then begin
			signal_mutants := 0;
			call mutancbt;
		end
		else begin
			if (obj_can_see_obj(self_obj, dude_obj)) then begin

				if (dude_is_armed) then begin
					if (Weapons == 0) then begin
						Weapons := 1;
						if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
							dialogue_system_enter;
						end
					end
				end

				DISGUISED := 0;

				if critter_inven_obj(dude_obj, 0) then begin
					RobesCheck := critter_inven_obj(dude_obj, 0);
				end

				coc_disguise_check
				if ((DISGUISED == 0) and (again == 0)) then begin
					if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
						again := 1;
						dialogue_system_enter;
					end
				end

			end
		end
	end
end

procedure combat_p_proc begin
	if (self_is_nightkin and obj_is_carrying_obj_pid(self_obj, PID_STEALTH_BOY)) then begin
		if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
			if (Use_Stealth_Boy == 0) then begin
				Use_Stealth_Boy:=1;

				//TODO: Add sfx for activation?
				anim(self_obj, ANIM_magic_hands_middle, -1);
				set_ghost;

				display_msg(self_name + message_str(SCRIPT_GENCHAT, 190));
			end
		end

		//--- Always add transparency when in combat!
		if (Use_Stealth_Boy == 1) then
			set_ghost;
	end
end

procedure do_dialogue begin
	set_local_var(3, 1);
	get_reaction
	start_gdialog(524, self_obj, 4, -1, -1);
	gsay_start;
	if (Weapons == 1) then begin
		call mutan01;
	end
	else begin
		if (local_var(4)) then begin
			call mutan13;
		end
		else begin
			set_local_var(4, 1);
			call mutan05;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure pre_dialogue begin
	dude_look_at_critter;
	if critter_inven_obj(dude_obj, 0) then begin
		RobesCheck := critter_inven_obj(dude_obj, 0);
	end
	coc_disguise_check
	if (Weapons == 1) then begin
		if (DISGUISED) then begin
			call do_dialogue;
		end
		else begin
			call mutan00;
		end
	end
	else begin
		if (DISGUISED) then begin
			call do_dialogue;
		end
		else begin
			call mutan00;
		end
	end
end

procedure mutan00 begin
	rndx := random(1, 8);
	if (rndx <= 2) then begin
		float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 100), 2);
	end
	else if (rndx <= 4) then begin
		float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 101), 2);
	end
	else if (rndx <= 6) then begin
		float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 102), 2);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 103), 2);
	end
	call mutancbt;
end

procedure mutan01 begin
	if (dude_is_male) then begin
		gsay_reply(524, 104);
	end
	else begin
		gsay_reply(524, 105);
	end
	giq_option(4, 524, 107, mutan02, 51);
	giq_option(6, 524, 108, mutan03, 50);
	giq_option(9, 524, 109, mutan04, 50);
	giq_option(-3, 524, 106, mutan02, 51);
end

procedure mutan02 begin
	gsay_message(524, 110, 51);
	call mutancbt;
end

procedure mutan03 begin
	gsay_reply(524, 111);
	giq_option(6, 524, 112, mutan03a, 50);
	giq_option(6, 524, 113, mutancbt, 51);
end

procedure mutan03a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call mutan04;
	end
	else begin
		call mutan02;
	end
end

procedure mutan04 begin
	gsay_message(524, 114, 50);
	set_local_var(5, 1);
end

procedure mutan05 begin
	if (dude_is_male) then begin
		gsay_reply(524, 115);
	end
	else begin
		gsay_reply(524, 116);
	end
	giq_option(4, 524, 118, mutan05a, 50);
	giq_option(6, 524, 119, mutan05b, 50);
	giq_option(-3, 524, 106, mutan06, 50);
end

procedure mutan05a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call mutan08;
	end
	else begin
		call mutan07;
	end
end

procedure mutan05b begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call mutan10;
	end
	else begin
		call mutan11;
	end
end

procedure mutan06 begin
	gsay_message(524, 120, 50);
	set_local_var(5, 1);
end

procedure mutan07 begin
	gsay_message(524, 121, 51);
	call mutancbt;
end

procedure mutan08 begin
	gsay_reply(524, 122);
	giq_option(4, 524, 123, mutan08a, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 524, 124, mutancbt, 51);
	end
	giq_option(7, 524, 125, mutan08b, 50);
end

procedure mutan08a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call mutan04;
	end
	else begin
		call mutan07;
	end
end

procedure mutan08b begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
		call mutan04;
	end
	else begin
		call mutan09;
	end
end

procedure mutan09 begin
	gsay_message(524, 126, 51);
	call mutancbt;
end

procedure mutan10 begin
	gsay_message(524, 127, 50);
	set_local_var(5, 1);
end

procedure mutan11 begin
	gsay_reply(524, 128);
	giq_option(6, 524, 129, mutan11a, 50);
	giq_option(6, 524, 130, mutancbt, 51);
end

procedure mutan11a begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call mutan12;
	end
	else begin
		call mutan09;
	end
end

procedure mutan12 begin
	gsay_message(524, 131, 50);
	set_local_var(5, 1);
end

procedure mutan13 begin
	gsay_reply(524, 132);
	giq_option(4, 524, 134, mutancbt, 51);
	giq_option(4, 524, 135, mutan13a, 50);
	giq_option(6, 524, 136, mutan13b, 50);
	giq_option(-3, 524, 133, mutan14, 51);
end

procedure mutan13a begin
	if (is_success(do_check(dude_obj, STAT_lu, 0))) then begin
		call mutan12;
	end
	else begin
		call mutan09;
	end
end

procedure mutan13b begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
		call mutan10;
	end
	else begin
		call mutan11;
	end
end

procedure mutan14 begin
	gsay_message(524, 137, 51);
	call mutancbt;
end

procedure mutan15 begin
	rndx := random(1, 3);
	if (rndx == 1) then begin
		gsay_message(524, 138, 50);
	end
	else if (rndx == 2) then begin
		gsay_message(524, 139, 50);
	end
	else if (rndx == 3) then begin
		gsay_message(524, 140, 50);
	end
end

procedure mutanend begin
end

procedure mutancbt begin
	tmp_hostile := 1;
end

procedure damage_p_proc begin
	if (global_var(MUTANTS_ENEMY_UNSURE) == 0) then begin
		set_global_var(MUTANTS_ENEMY_UNSURE, 1);
	end
end

procedure destroy_p_proc begin
	inc_evil_critter
end

