/*

	Cathedral - Masters Vault (Vault entrance guards)

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_AIRGRD
#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"
#include "..\headers\Sfall\main.h"

/* Standard Script Procedures */
procedure start;

procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure timed_event_p_proc;

procedure airgrd00;
procedure airgrd01;
procedure airgrd02;
procedure airgrd03;
procedure airgrd03a;
procedure airgrd04;
procedure airgrd04a;
procedure airgrd04b;
procedure airgrd05;
procedure airgrd06;
procedure airgrd07;
procedure airgrd08;
procedure airgrd09;
procedure airgrd10;
procedure airgrd11;
procedure airgrd12;
procedure airgrd13;
procedure airgrd14;
procedure airgrd15;
procedure bluff_end;
procedure dialog;
procedure dialog_end;
procedure airgrdtim;
procedure combat;

variable tmp_hostile;
variable Only_Once := 1;
variable Weapons;
variable DISGUISED;
variable again;
variable first;
variable rndx;
variable jumpcode;
variable indialog;
variable temp;

procedure start begin
	if Only_Once then begin
		Only_Once := 0;
		set_self_team(TEAM_NECROPOLIS_MUTANT );
		set_self_ai( AI_SUPER_MUTANT_GUARD );
	end
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
			if (dude_is_armed) then begin
				if (Weapons == 0) then begin
					Weapons := 1;
					again := 1;
					dialogue_system_enter;
				end
			end
			DISGUISED := 0;

			coc_disguise_check
			if (DISGUISED == 0) then begin
				again := 1;
				dialogue_system_enter;
			end
			if (again == 0) then begin
				again := 1;
				dialogue_system_enter;
			end
		end
	end
end

procedure timed_event_p_proc begin
	if (dude_is_armed) then begin
		call combat;
	end
end

procedure talk_p_proc begin
	dude_look_at_critter;
	coc_disguise_check
	if ((map_var(1) == 1) and (global_var( GVAR_MASTER_FILLER_4 ) == 1)) then begin
		call airgrd00;
	end
	else begin
		if (DISGUISED) then begin
			if (Weapons) then begin
				jumpcode := 1;
				call dialog;
			end
			else begin
				if (first == 0) then begin
					first := 1;
					jumpcode := 2;
					call dialog;
				end
				else begin
					if (first == 1) then begin
						call airgrd08;
					end
				end
			end
		end
		else begin
			if (Weapons) then begin
				call airgrd15;
			end
			else begin
				jumpcode := 3;
				call dialog;
			end
		end
	end
end

procedure dialog begin
	set_local_var(3, 1);
	get_reaction
	start_gdialog(673, self_obj, 4, -1, -1);
	gsay_start;
	indialog := 1;
	if (jumpcode < 2) then begin
		call airgrd01;
	end
	else begin
		if (jumpcode == 2) then begin
			call airgrd03;
		end
		else begin
			if (jumpcode > 2) then begin
				call airgrd09;
			end
		end
	end
	indialog := 0;
	gsay_end;
	end_dialogue;
end

procedure airgrd00
begin
	float_msg(self_obj, message_str(SCRIPT_AIRGRD, random(102, 104)), 2);
end

procedure airgrd01
begin
	gsay_reply(673, 105);
	BOption( 106, airgrd02, -3 );
	NOption( 107, airgrdtim, 4 );
	BOption( 108, airgrd02, 4 );
	NOption( 109, airgrdtim, 4 );
end

procedure airgrd02
begin
	gsay_message(673, 110, 51);
	call combat;
end

procedure airgrd03
begin
	gsay_reply(673, 111);
	BOption( 112, airgrd02, -3 );
	NOption( 113, airgrd04, 4 );
	NOption( 114, airgrd03a, 4 );
	BOption( 115, airgrd02, 4 );
end

procedure airgrd03a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call airgrd06;
	end
	else begin
		call airgrd08;
	end
end

procedure airgrd04
begin
	gsay_reply(673, 116);
	NOption( 117, airgrd04a, 4 );
	NOption( 118, airgrd04b, 6 );
end

procedure airgrd04a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -30))) then begin
		call airgrd06;
	end
	else begin
		call airgrd05;
	end
end

procedure airgrd04b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -15))) then begin
		call airgrd06;
	end
	else begin
		call airgrd05;
	end
end

procedure airgrd05
begin
	gsay_message(673, 119, 51);
	call combat;
end

procedure airgrd06
begin
	gsay_reply(673, 120);
	NOption( 121, bluff_end, 4 );
	BOption( 122, airgrd07, 4 );
	NOption( 123, bluff_end, 4 );
end

procedure airgrd07
begin
	gsay_message(673, 124, 51);
	call combat;
end

procedure airgrd08
begin
	if (indialog == 1) then begin
		gsay_message(673, random(125, 127), 50);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_AIRGRD, random(125, 127)), 2);
	end
	call bluff_end;
end

procedure airgrd09
begin
	gsay_reply(673, 128);
	BOption( 129, airgrd10, -3 );
	BOption( 130, airgrd10, 4 );
	BOption( 131, airgrd11, 4 );
	BOption( 132, airgrd02, 4 );
end

procedure airgrd10
begin
	gsay_message(673, 133, 51);
	call combat;
end

procedure airgrd11
begin
	gsay_reply(673, 134);
	BOption( 135, airgrd02, 4 );
	BOption( 136, airgrd12, 4 );
end

procedure airgrd12
begin
	gsay_reply(673, 137);
	BOption( 138, airgrd13, 4 );
	BOption( 139, airgrd14, 6 );
end

procedure airgrd13
begin
	gsay_message(673, 140, 51);
	call combat;
end

procedure airgrd14
begin
	gsay_message(673, 141, 51);
	call combat;
end

procedure airgrd15
begin
	if (indialog == 1) then begin
		gsay_message(673, 142, 51);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_AIRGRD, 142), 2);
	end
	call combat;
end

procedure bluff_end
begin
	if (local_var(4) == 0) then begin
		set_local_var(4, 1);
		temp := 750;
		display_msg(message_str(SCRIPT_AIRGRD, 200) + temp + message_str(SCRIPT_AIRGRD, 201));
		give_exp_points(temp);
	end
end

procedure dialog_end
begin
end

procedure airgrdtim
begin
	add_timer_event(self_obj, game_ticks(10), 1);
end

procedure combat
begin
	tmp_hostile := 1;
end



procedure destroy_p_proc begin
	rm_timer_event(self_obj);
	inc_inv_evil_crit
	rm_timer_event(self_obj);
end

procedure damage_p_proc
begin
	if (global_var( GVAR_MUTANTS_ENEMY_UNSURE ) == 0) then begin
		set_global_var( GVAR_MUTANTS_ENEMY_UNSURE, 1 );
	end
end
