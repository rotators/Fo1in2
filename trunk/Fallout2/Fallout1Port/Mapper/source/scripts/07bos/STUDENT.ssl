#include "..\headers\define.h"

#define NAME                    SCRIPT_STUDENT

#include "..\headers\command.h"

procedure start;
procedure destroy_p_proc;//    script_action == 18
procedure critter_p_proc;//    script_action == 12
procedure talk_p_proc;//    script_action == 11

procedure Student00;

import variable Student_ptr;

variable tmp_hostile := 0;
variable initial :=  0;
variable my_knife;
variable home_face := 2;
variable temp;
variable counter := 0;


procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
				if obj_carrying_pid_obj(self_obj, PID_BROTHERHOOD_COMBAT_ARMOR) then begin
					variable BroArmor := 0;
					BroArmor := obj_carrying_pid_obj(self_obj, PID_BROTHERHOOD_COMBAT_ARMOR);
					rm_obj_from_inven(dude_obj, BroArmor);
					destroy_object(BroArmor);
					BroArmor := 0;
					BroArmor := create_object_sid(PID_BROTHERHOOD_COMBAT_ARMOR, 0, 0, -1);
					add_obj_to_inven(self_obj, BroArmor);
					wield_obj_critter(self_obj, BroArmor);
				end
			end
		end
	end
	if not(initial) then begin
		if (local_var(3) == 0) then begin
			set_local_var(3, tile_num(self_obj));
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 44);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 62);
		my_knife := obj_carrying_pid_obj(self_obj, PID_KNIFE);
		if (local_var(0) != 0) then begin
			if (map_var(4) == local_var(0)) then begin
				Student_ptr := self_obj;
				set_map_var(0, 1);
			end
		end
		else begin
			temp := map_var(5) + 1;
			set_map_var(5, temp);
			set_local_var(0, temp);
			Student_ptr := self_obj;
			set_map_var(0, 1);
		end
		initial :=  1;
	end
	if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
		call destroy_p_proc;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			if (global_var(ENEMY_BROTHERHOOD)) then begin
				tmp_hostile := 1;
			end
			if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
				tmp_hostile := 0;
			end
			if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
				set_global_var(ENEMY_BROTHERHOOD, 1);
				tmp_hostile := 0;
				attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
			end
			else begin
				if (global_var(ENEMY_BROTHERHOOD) == 0) then begin
					call critter_p_proc;
				end
			end
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
		end
	end
end

procedure destroy_p_proc
begin
	set_global_var(ENEMY_BROTHERHOOD, 1);

	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
	rm_timer_event(self_obj);
end

procedure critter_p_proc
begin
	if (local_var(1) == 1) then begin
		if (tile_num(self_obj) != map_var(1)) then begin
			animate_move_obj_to_tile(self_obj, map_var(1), 0);
		end
		else begin
			set_local_var(1, 0);
			set_map_var(0, 1);
			anim(self_obj, 1000, 1);
		end
	end
	else begin
		if (local_var(2) == 1) then begin
			if (tile_num(self_obj) != local_var(3)) then begin
				animate_move_obj_to_tile(self_obj, local_var(3), 0);
			end
			else begin
				set_local_var(2, 0);
				anim(self_obj, 1000, home_face);
			end
		end
		else begin
			if (map_var(2) == local_var(0)) then begin
				set_map_var(2, 0);
				Student_ptr := self_obj;
				set_map_var(3, map_var(4));
				set_map_var(4, local_var(0));
				set_local_var(1, 1);
			end
			else begin
				if (map_var(3) == local_var(0)) then begin
					set_map_var(3, 0);
					set_local_var(2, 1);
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	counter := counter + 1;
	call Student00;
end

procedure Student00
begin
	if counter < 4 then begin
		variable Msg;
		Msg := random(100, 103);
		if Msg == 101 then begin
			float_msg(self_obj, message_str(SCRIPT_STUDENT, 100), 3);
		end
		else begin
			float_msg(self_obj, message_str(SCRIPT_STUDENT, 100), 2);
		end
	end
	else begin
		display_msg(message_str(SCRIPT_STUDENT, random(104, 106)));
	end
end

