#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure Paul01;
procedure Paul02;
procedure Paul03;
procedure Paul04;
procedure Paul05;
procedure Paul06;
procedure Paul07;
procedure Paul08;
procedure Paul09;
procedure Paul10;
procedure Paul11;
procedure Paul12;
procedure Paul13;
procedure Paul14;
procedure Paul15;
procedure PaulEnd;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
				if obj_carrying_pid_obj(self_obj, PID_BROTHERHOOD_COMBAT_ARMOR) then begin
					variable BroArmor := 0;
					BroArmor := obj_carrying_pid_obj(self_obj, PID_BROTHERHOOD_COMBAT_ARMOR);
					rm_obj_from_inven(dude_obj, BroArmor);
					destroy_object(BroArmor);
					BroArmor := 0;
					BroArmor := create_object_sid(PID_BROTHERHOOD_COMBAT_ARMOR, 0, 0, -1);
					add_obj_to_inven(self_obj, BroArmor);
					wield_obj_critter(self_obj, BroArmor);
				end
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 44);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 64);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(865, self_obj, 4, -1, -1);
	gsay_start;
	if (local_var(4) == 0) then begin
		set_local_var(4, 1);
		call Paul01;
	end
	else begin
		call Paul14;
	end
	gsay_end;
	end_dialogue;
end

procedure destroy_p_proc
begin

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_PAUL, 100));
end

procedure Paul01
begin
	gsay_reply(865, 101);
	giq_option(4, 865, 102, Paul02, 50);
	giq_option(4, 865, 103, Paul04, 50);
	if (map_var(0) == 1) then begin
		giq_option(4, 865, 104, Paul07, 50);
	end
	if (global_var(NECROP_WATER_CHIP_TAKEN) != 1) then begin
		giq_option(4, 865, 105, Paul09, 50);
	end
	if (global_var(BROTHER_BUILD_POWER_ARMOR) == 1) then begin
		giq_option(4, 865, 106, Paul12, 50);
	end
	giq_option(4, 865, 108, PaulEnd, 50);
	giq_option(-3, 865, 107, Paul15, 50);
end

procedure Paul02
begin
	gsay_reply(865, 109);
	giq_option(4, 865, 110, Paul03, 50);
	if (map_var(0) == 1) then begin
		giq_option(4, 865, 111, Paul07, 50);
	end
end

procedure Paul03
begin
	gsay_reply(865, 112);
	giq_option(4, 865, 113, Paul04, 50);
	giq_option(4, 865, 114, PaulEnd, 50);
end

procedure Paul04
begin
	gsay_reply(865, 115);
	giq_option(4, 865, 116, Paul05, 50);
	giq_option(4, 865, 117, PaulEnd, 50);
end

procedure Paul05
begin
	gsay_reply(865, 118);
	giq_option(4, 865, 119, Paul06, 50);
	giq_option(4, 865, 120, PaulEnd, 50);
end

procedure Paul06
begin
	gsay_reply(865, 121);
	giq_option(4, 865, 122, Paul04, 50);
	if (global_var(NECROP_WATER_CHIP_TAKEN) != 1) then begin
		giq_option(4, 865, 123, Paul09, 50);
	end
	if (global_var(BROTHER_BUILD_POWER_ARMOR) == 1) then begin
		giq_option(4, 865, 124, Paul12, 50);
	end
	if (map_var(0) == 1) then begin
		giq_option(4, 865, 125, Paul07, 50);
	end
	giq_option(4, 865, 126, PaulEnd, 50);
end

procedure Paul07
begin
	gsay_reply(865, 127);
	giq_option(4, 865, 128, Paul08, 50);
	giq_option(4, 865, 129, Paul11, 50);
end

procedure Paul08
begin
	gsay_reply(865, 130);
	giq_option(4, 865, 131, Paul05, 50);
	giq_option(4, 865, 132, PaulEnd, 50);
	giq_option(4, 865, 133, Paul06, 50);
end

procedure Paul09
begin
	gsay_reply(865, 134);
	giq_option(4, 865, 135, Paul10, 50);
end

procedure Paul10
begin
	gsay_reply(865, 136);
	giq_option(4, 865, 138, Paul06, 50);
	giq_option(4, 865, 137, PaulEnd, 50);
end

procedure Paul11
begin
	gsay_reply(865, 139);
	giq_option(4, 865, 140, Paul08, 50);
end

procedure Paul12
begin
	gsay_reply(865, 141);
	giq_option(4, 865, 142, Paul13, 50);
	giq_option(4, 865, 143, PaulEnd, 50);
end

procedure Paul13
begin
	gsay_reply(865, 144);
	giq_option(4, 865, 146, Paul06, 50);
	giq_option(4, 865, 145, PaulEnd, 50);
end

procedure Paul14
begin
	gsay_reply(865, message_str(SCRIPT_PAUL, 147) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_PAUL, 148));
	giq_option(4, 865, 149, Paul02, 50);
	giq_option(4, 865, 150, Paul04, 50);
	if (map_var(0) == 1) then begin
		giq_option(4, 865, 151, Paul07, 50);
	end
	if (global_var(NECROP_WATER_CHIP_TAKEN) != 1) then begin
		giq_option(4, 865, 152, Paul09, 50);
	end
	if (global_var(BROTHER_BUILD_POWER_ARMOR) == 1) then begin
		giq_option(4, 865, 153, Paul12, 50);
	end
	giq_option(4, 865, 155, PaulEnd, 50);
	giq_option(-3, 865, 154, Paul15, 50);
end

procedure Paul15
begin
	gsay_message(865, 156, 50);
end

procedure PaulEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, STAT_ch)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
