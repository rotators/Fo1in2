#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure Maxson01;
procedure Maxson02;
procedure Maxson02a;
procedure Maxson03;
procedure Maxson04;
procedure Maxson04a;
procedure Maxson05;
procedure Maxson06;
procedure Maxson07;
procedure Maxson08;
procedure Maxson08a;
procedure Maxson09;
procedure Maxson09a;
procedure Maxson10;
procedure Maxson11;
procedure Maxson12;
procedure Maxson13;
procedure Maxson14;
procedure Maxson15;
procedure Maxson16;
procedure Maxson17;
procedure Maxson18;
procedure Maxson19;
procedure Maxson20;
procedure Maxson21;
procedure Maxson22;
procedure Maxson23;
procedure Maxson24;
procedure Maxson25;
procedure Maxson26;
procedure Maxson27;
procedure Maxson28;
procedure Maxson29;
procedure Maxson30;
procedure Maxson31;
procedure Maxson32;
procedure Maxson33;
procedure Maxson34;
procedure Maxson35;
procedure MaxsonEnd;
procedure Remove_Player;

variable hostile;
variable Only_Once := 1;
variable Denounce_Player;
variable Asked_For_1000;
variable temp;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

procedure MaxsonAccept;




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 44);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 80);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (global_var(ENEMY_BROTHERHOOD)) then begin
		hostile := 1;
	end
	if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
		hostile := 0;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		set_global_var(ENEMY_BROTHERHOOD, 1);
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(52, self_obj, 4, 12, 5);
	gsay_start;
	if ((global_var(BROTHERHOOD_SEND_HELP) == 1) or (global_var(BROTHERHOOD_SEND_HELP) == 2)) then begin
		call Maxson34;
	end
	else begin
		if (local_var(5) == 1) then begin
			call Maxson24;
		end
		else begin
			if (local_var(9) == 1) then begin
				call Maxson22;
			end
			else begin
				if (global_var(WORLDMAPLIST_MILITARYBASE) == 2) then begin
					call Maxson20;
				end
				else begin
					if (local_var(4) == 0) then begin
						set_local_var(4, 1);
						call Maxson01;
					end
					else begin
						if (local_var(1) == 1) then begin
							call Maxson21;
						end
						else begin
							call Maxson19;
						end
					end
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
	if (local_var(8) == 1) then begin
		set_local_var(8, 2);
		set_global_var(SCOUTED_NORTH_BRO, 1);
		temp := 1500;
		display_msg(message_str(SCRIPT_MAXSON, 351) + temp + message_str(SCRIPT_MAXSON, 352));
		give_exp_points(temp);
	end
	if (Denounce_Player == 1) then begin
		call Remove_Player;
	end
end

procedure destroy_p_proc
begin

	set_global_var(ENEMY_BROTHERHOOD, 1);
	rm_timer_event(self_obj);
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_MAXSON, 100));
end

procedure Maxson01
begin
	gsay_reply(52, 106);
	giq_option(-3, 52, 333, Maxson32, 50);
	if ((global_var(MISSING_CARAVAN) == 2) and (local_var(9) == 0)) then begin
		giq_option(4, 52, 300, Maxson14, 50);
	end
	if ((global_var(MISSING_CARAVAN) == 1) and (local_var(9) == 0)) then begin
		giq_option(4, 52, 301, Maxson06, 50);
	end
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson02
begin
	gsay_reply(52, 162);
	giq_option(4, 52, 302, Maxson04, 50);
	giq_option(4, 52, 303, Maxson09, 50);
	giq_option(4, 52, 304, Maxson02a, 51);
	giq_option(4, 52, 305, Maxson08, 50);
end

procedure Maxson02a
begin
	if (is_success(roll_vs_skill(dude_obj, 15, 0))) then begin
		Asked_For_1000 := 1;
		call Maxson09;
	end
	else begin
		call Maxson12;
	end
end

procedure Maxson03
begin
end

procedure Maxson04
begin
	set_local_var(9, 1);
	gsay_reply(52, 133);
	giq_option(4, 52, 306, Maxson04a, 50);
	giq_option(4, 52, 307, Maxson27, 50);
	giq_option(4, 52, 308, MaxsonEnd, 50);
end

procedure Maxson04a
begin
	set_local_var(9, 1);
	set_map_var(20, 1);
	call Maxson05;
end

procedure Maxson05
begin
	gsay_reply(52, 276);
	giq_option(4, 52, 309, MaxsonEnd, 50);
end

procedure Maxson06
begin
	gsay_reply(52, 122);
	giq_option(4, 52, 310, Maxson07, 50);
	giq_option(4, 52, 311, Maxson02, 50);
end

procedure Maxson07
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(52, 355);
	end
	else begin
		gsay_reply(52, 356);
	end
	giq_option(4, 52, 312, Maxson14, 50);
	giq_option(4, 52, 313, Maxson13, 50);
end

procedure Maxson08
begin
	gsay_reply(52, 184);
	giq_option(4, 52, 314, Maxson18, 50);
	giq_option(4, 52, 315, Maxson04a, 50);
	giq_option(4, 52, 316, Maxson08a, 50);
end

procedure Maxson08a
begin
	if (is_success(roll_vs_skill(dude_obj, 15, -20))) then begin
		Asked_For_1000 := 1;
		call Maxson09;
	end
	else begin
		call Maxson12;
	end
end

procedure Maxson09
begin
	gsay_reply(52, 223);
	giq_option(4, 52, 317, Maxson09a, 51);
	giq_option(4, 52, 318, Maxson18, 50);
	giq_option(4, 52, 319, MaxsonAccept, 50);
end

procedure Maxson09a
begin
	if (is_success(roll_vs_skill(dude_obj, 15, -10))) then begin
		call Maxson10;
	end
	else begin
		call Maxson11;
	end
end

procedure Maxson10
begin
	set_local_var(9, 1);
	if (Asked_For_1000) then begin
		item_caps_adjust(dude_obj, 1000);
	end
	else begin
		item_caps_adjust(dude_obj, 500);
	end
	call DownReact;
	gsay_reply(52, 226);
	giq_option(4, 52, 320, MaxsonEnd, 51);
end

procedure Maxson11
begin
	gsay_message(52, 229, 51);
	Denounce_Player := 1;
end

procedure Maxson12
begin
	gsay_message(52, 229, 51);
	Denounce_Player := 1;
end

procedure Maxson13
begin
	gsay_message(52, 231, 51);
	Denounce_Player := 1;
end

procedure Maxson14
begin
	gsay_reply(52, 146);
	giq_option(4, 52, 321, Maxson02, 50);
end

procedure Maxson15
begin
	gsay_reply(52, 141);
	giq_option(4, 52, 322, Maxson02, 50);
	giq_option(4, 52, 323, Maxson16, 50);
end

procedure Maxson16
begin
	gsay_reply(52, 223);
	giq_option(4, 52, 324, Maxson17, 50);
	giq_option(4, 52, 325, Maxson18, 50);
	giq_option(4, 52, 326, Maxson17, 50);
end

procedure Maxson17
begin
	gsay_reply(52, 168);
	giq_option(4, 52, 327, MaxsonEnd, 51);
end

procedure Maxson18
begin
	gsay_message(52, 222, 50);
end

procedure Maxson19
begin
	gsay_reply(52, 201);
	giq_option(-3, 52, 333, Maxson32, 50);
	if ((global_var(MISSING_CARAVAN) == 2) and (local_var(9) == 0)) then begin
		giq_option(4, 52, 329, Maxson14, 50);
	end
	if ((global_var(MISSING_CARAVAN) == 1) and (local_var(9) == 0)) then begin
		giq_option(4, 52, 330, Maxson06, 50);
	end
	giq_option(4, 52, 332, Maxson27, 50);
	giq_option(4, 52, 331, Maxson18, 50);
end

procedure Maxson20
begin
	gsay_reply(52, 193);
	giq_option(-3, 52, 333, Maxson32, 50);
	if (local_var(7) == 0) then begin
		giq_option(4, 52, 334, Maxson22, 50);
	end
	giq_option(4, 52, 335, Maxson27, 50);
	giq_option(4, 52, 336, Maxson18, 50);
end

procedure Maxson21
begin
	gsay_reply(52, 201);
	giq_option(-3, 52, 333, Maxson32, 50);
	giq_option(4, 52, 334, Maxson22, 50);
	giq_option(4, 52, 335, Maxson27, 50);
	giq_option(4, 52, 336, Maxson18, 50);
end

procedure Maxson22
begin
	temp := local_var(7);
	gsay_reply(52, 205);
	if ((temp == 0) and (global_var(VATS_BLOWN) == 1)) then begin
		giq_option(4, 52, 400, Maxson35, 50);
	end
	else begin
		if ((temp == 0) and (global_var(WORLDMAPLIST_MILITARYBASE) != 2)) then begin
			giq_option(4, 52, 337, Maxson18, 50);
		end
		else begin
			if ((temp == 0) and (global_var(WORLDMAPLIST_MILITARYBASE) == 2) and (global_var(WORLDMAPLIST_MASTERS_LAIR) == 2)) then begin
				giq_option(4, 52, 339, Maxson23, 50);
			end
			else begin
				if ((temp == 0) and (global_var(WORLDMAPLIST_MILITARYBASE) == 2) and (global_var(WORLDMAPLIST_MASTERS_LAIR) != 2)) then begin
					giq_option(4, 52, 338, Maxson23, 50);
				end
			end
		end
	end
	giq_option(4, 52, 335, Maxson27, 50);
	giq_option(4, 52, 336, Maxson18, 50);
end

procedure Maxson23
begin
	set_local_var(7, 1);
	set_local_var(8, 1);
	gsay_reply(52, 213);
	giq_option(4, 52, 340, Maxson24, 50);
end

procedure Maxson24
begin
	set_local_var(5, 1);
	gsay_reply(52, 219);
	giq_option(4, 52, 341, Maxson25, 50);
	giq_option(4, 52, 342, MaxsonEnd, 50);
end

procedure Maxson25
begin
	set_local_var(5, 0);
	set_map_var(19, 1);
	gsay_message(52, 221, 50);
end

procedure Maxson26
begin
	gsay_reply(52, 210);
	giq_option(4, 52, 343, Maxson23, 50);
end

procedure Maxson27
begin
	gsay_reply(52, random(138, 140));
	if (local_var(6) == 0) then begin
		giq_option(4, 52, 344, Maxson28, 50);
	end
	giq_option(4, 52, 345, Maxson29, 50);
	giq_option(4, 52, 346, Maxson30, 50);
	giq_option(4, 52, 347, Maxson31, 50);
	giq_option(4, 52, 348, Maxson18, 50);
end

procedure Maxson28
begin
	variable LVar0 := 0;
	set_local_var(6, 1);
	LVar0 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_MAXDISK);
	add_obj_to_inven(dude_obj, LVar0);
	gsay_reply(52, 186);
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson29
begin
	gsay_reply(52, 172);
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson30
begin
	gsay_reply(52, 244);
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson31
begin
	gsay_reply(52, 262);
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson32
begin
	gsay_message(52, 275, 50);
end

procedure Maxson33
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(52, 357);
	end
	else begin
		gsay_reply(52, 358);
	end
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson34
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_reply(52, 359);
	end
	else begin
		gsay_reply(52, 360);
	end
	giq_option(4, 52, 349, Maxson27, 50);
	giq_option(4, 52, 350, Maxson18, 50);
end

procedure Maxson35
begin
	set_local_var(7, 1);
	set_local_var(8, 1);
	gsay_reply(52, 133);
	giq_option(4, 52, 335, Maxson27, 50);
	giq_option(4, 52, 336, Maxson18, 50);
end

procedure MaxsonEnd
begin
end

procedure Remove_Player
begin
	set_global_var(QUEST_BROHOOD_1_JOIN_THEM, 5);
	set_global_var(MARK_BROTHER_2, 0);
	set_global_var(MARK_BROTHER_3, 0);
	set_global_var(MARK_BROTHER_4, 0);
	set_global_var(MARK_BROTHER_5, 0);
	load_map(13, 1);
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure MaxsonAccept
begin
	set_local_var(9, 1);
end



