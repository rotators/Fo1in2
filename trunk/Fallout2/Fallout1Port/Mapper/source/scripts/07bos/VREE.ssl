#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\modreact.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure talk_p_proc;//    script_action == 11
procedure look_at_p_proc;//    script_action == 21
procedure timed_event_p_proc;
procedure pickup_p_proc;//    script_action == 4
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18

procedure vree00;
procedure vree01;
procedure vree02;
procedure vree03;
procedure vree03a;
procedure vree17;
procedure vree17a;
procedure vree17z;
procedure vree18;
procedure vree19;
procedure vree21;
procedure vree22;
procedure vree23;
procedure vree24;
procedure vree25;
procedure vree26;
procedure vree27;
procedure vree28;
procedure vree29;
procedure vree30;
procedure vree31;
procedure vree32;
procedure vree33;
procedure vree34;
procedure vree35;
procedure vree36;
procedure vree36_1;
procedure vree37;
procedure vree38;
procedure vree39;
procedure vree40;
procedure vree41;
procedure vree42;
procedure vree43;
procedure vree44;
procedure vree45;
procedure vree46;
procedure vree47;
procedure vree48;
procedure vree200;
procedure vree201;
procedure vree202;
procedure vree203;
procedure vree204;
procedure vree205;
procedure vree300;
procedure vree301;
procedure vree302;
procedure vree303;
procedure vree304;
procedure vree305;
procedure vree306;
procedure branch01;
procedure branch02;
procedure branch03;
procedure branch04;
procedure vree00a;
procedure vree01a;
procedure vree01b;
procedure vree45a;
procedure vree46a;
procedure vree_end;
procedure vreecbt;

import variable term1_ptr;
import variable term2_ptr;
import variable term3_ptr;
import variable term4_ptr;
import variable term5_ptr;
import variable term6_ptr;
import variable term7_ptr;
import variable term8_ptr;
import variable Vree_ptr;

variable rndx;
variable item;
variable MALE;
variable tmp_hostile;
variable ATKBROTHERS;
variable KNOWKEDPLAN;
variable INITIAT;// never set to any values!! TODO to do
variable Only_Once := 1;

procedure start
begin
	fixt_critter_healing

	if Only_Once then begin
		Only_Once := 0;
		Vree_ptr := self_obj;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 44);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 80);
		add_timer_event(self_obj, game_ticks(40), 1);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
					call timed_event_p_proc;
				end
				else begin
					if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
						call critter_p_proc;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(57, self_obj, 4, 4, 5);
	get_reaction
	gsay_start;
	MALE := get_critter_stat(dude_obj, STAT_gender) == 0;
	if (local_var(4) > 0) then begin
		if (ATKBROTHERS) then begin
			call vree32;
		end
		if (KNOWKEDPLAN) then begin
			call vree34;
		end
		if (INITIAT == 1) then begin
			call vree43;
		end
		if (INITIAT == 2) then begin
			call vree45;
		end
		if (INITIAT < 1) then begin
			if (local_var(1) > 1) then begin
				call vree17;
			end
			else begin
				call vree46;
			end
		end
	end
	else begin
		set_local_var(4, 1);
		if (local_var(1) >= 2) then begin
			call vree02;
		end
		else begin
			call vree00;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_VREE, 100));
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		rndx := random(2, 3);
		if (rndx == 2) then begin
			use_obj(term2_ptr);
		end
		else begin
			if (rndx == 3) then begin
				use_obj(term3_ptr);
			end
		end
		add_timer_event(self_obj, game_ticks(40), 1);
	end
	else begin
		if (fixed_param == 2) then begin
			use_obj(term1_ptr);
			if (local_var(7) < 2) then begin
				add_timer_event(self_obj, game_ticks(4), 2);
			end
		end
		else begin
			if (fixed_param == 3) then begin
				set_local_var(7, 2);
				add_timer_event(self_obj, game_ticks(4), 1);
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		tmp_hostile := 1;
	end
end

procedure critter_p_proc
begin
	if (global_var(ENEMY_BROTHERHOOD)) then begin
		tmp_hostile := 1;
	end
	if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
		tmp_hostile := 0;
	end
	if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		set_global_var(ENEMY_BROTHERHOOD, 1);
		tmp_hostile := 0;
		attack(dude_obj);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_BROTHERHOOD, 1);
	end
	inc_good_critter
	rm_timer_event(self_obj);
end

procedure vree_end
begin
end

procedure vreecbt
begin
end

procedure vree00
begin
	gsay_reply(58, 101);
	giq_option(4, 58, 102, vree00a, 49);
	giq_option(4, 58, 104, vree01, 50);
	giq_option(-3, 58, 105, vree31, 50);
	giq_option(4, 58, 103, vree_end, 50);
end

procedure vree01
begin
	gsay_reply(58, 106);
	giq_option(4, 58, 108, vree01a, 51);
	giq_option(4, 58, 109, vree01b, 51);
	giq_option(4, 58, 107, vree_end, 50);
end

procedure vree02
begin
	gsay_reply(58, 110);
	giq_option(4, 58, 111, vree03, 50);
	giq_option(5, 58, 112, vree17, 50);
	giq_option(-3, 58, 113, vree31, 50);
end

procedure vree03
begin
	gsay_reply(58, 114);
	giq_option(4, 58, 115, vree03a, 50);
end

procedure vree03a
begin
	gsay_message(58, 116, 50);
	call vree17;
end

procedure vree17
begin
	gsay_reply(58, 117);
	call vree17z;
end

procedure vree17a
begin
	gsay_reply(58, 118);
	call vree17z;
end

procedure vree17z
begin
	if (global_var(NECROP_WATER_CHIP_TAKEN) != 1) then begin
		giq_option(4, 58, 119, vree48, 50);
	end
	giq_option(4, 58, 120, branch01, 50);
	giq_option(5, 58, 121, branch02, 50);
	if (local_var(5) != 1) then begin
		giq_option(6, 58, 122, branch03, 50);
	end
	if (local_var(6) == 0) then begin
		giq_option(7, 58, 123, branch04, 50);
	end
end

procedure vree18
begin
	set_map_var(0, 1);
	gsay_reply(58, 124);
	giq_option(4, 58, 126, vree17a, 50);
	giq_option(4, 58, 125, vree_end, 50);
end

procedure vree19
begin
	gsay_reply(58, 127);
	call vree_end;
end

procedure vree21
begin
	gsay_reply(58, 128);
	if (local_var(7) == 0) then begin
		giq_option(5, 58, 129, vree22, 50);
	end
	giq_option(4, 58, 131, vree17a, 50);
	giq_option(4, 58, 130, vree_end, 50);
end

procedure vree22
begin
	set_local_var(7, 1);
	gsay_message(58, 132, 50);
	add_timer_event(self_obj, game_ticks(4), 2);
end

procedure vree23
begin
end

procedure vree24
begin
	gsay_message(58, 134, 50);
	call vree_end;
end

procedure vree25
begin
	item := create_object_sid(PID_RAD_X, 0, 0, -1);
	add_obj_to_inven(dude_obj, item);
	gsay_reply(58, 135);
	giq_option(4, 58, 137, vree17a, 50);
	giq_option(4, 58, 136, vree_end, 50);
end

procedure vree26
begin
	gsay_message(58, 138, 50);
	call vree_end;
end

procedure vree27
begin
	gsay_reply(58, 139);
	giq_option(6, 58, 140, vree28, 50);
	giq_option(4, 58, 142, vree17a, 50);
	giq_option(5, 58, 141, vree_end, 50);
end

procedure vree28
begin
	gsay_reply(58, 143);
	giq_option(6, 58, 145, vree29, 50);
	giq_option(4, 58, 146, vree17a, 50);
	giq_option(6, 58, 144, vree_end, 50);
end

procedure vree29 begin
variable holodisk;

	set_global_var(VREE_DISK_TRACKER, 1);
	set_global_var(VREE_GIVEN_DUDE_AUTOPSY, 1);
	set_local_var(6, 1);
	gsay_reply(58, 147);
	giq_option(4, 58, 149, vree17a, 50);
	giq_option(4, 58, 148, vree_end, 50);

	// TODO: Figure out why this was in obj_dude critter_p_proc ....
	set_global_var(VREE_DISK_TRACKER, 2);
	holodisk := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_VREEDISK);// RegDisk.int
	add_obj_to_inven(dude_obj, holodisk);
	set_global_var(VREE_AUTOPSY_POINTER, holodisk);
end

procedure vree30
begin
	gsay_message(58, 150, 50);
	call vree_end;
end

procedure vree31
begin
	gsay_message(58, 151, 50);
	call vree_end;
end

procedure vree32
begin
	gsay_reply(58, 152);
	giq_option(4, 58, 153, vreecbt, 51);
	giq_option(5, 58, 154, vree33, 50);
end

procedure vree33
begin
	gsay_reply(58, 155);
	giq_option(4, 58, 156, vreecbt, 51);
end

procedure vree34
begin
	gsay_reply(58, 157);
	giq_option(4, 58, 158, vree36, 50);
	giq_option(5, 58, 159, vree39, 50);
	giq_option(-3, 58, 160, vree35, 50);
end

procedure vree35
begin
	gsay_message(58, 161, 50);
	call vree_end;
end

procedure vree36
begin
	gsay_reply(58, 162);
	giq_option(5, 58, 163, vree36_1, 50);
	giq_option(4, 58, 164, vree_end, 50);
end

procedure vree36_1
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call vree37;
	end
	else begin
		call vree38;
	end
end

procedure vree37
begin
	gsay_message(58, 165, 50);
	call vree_end;
end

procedure vree38
begin
	gsay_message(58, 166, 50);
	call vree_end;
end

procedure vree39
begin
	gsay_reply(58, 167);
	giq_option(6, 58, 168, vree40, 50);
	giq_option(6, 58, 169, vree42, 50);
end

procedure vree40
begin
	gsay_reply(58, 170);
	giq_option(6, 58, 171, vree41, 50);
	giq_option(6, 58, 172, vree_end, 50);
end

procedure vree41
begin
	gsay_message(58, 173, 50);
	call vree_end;
end

procedure vree42
begin
	gsay_message(58, 174, 50);
	call vree_end;
end

procedure vree43
begin
	gsay_reply(58, 175);
	giq_option(4, 58, 176, vree44, 50);
	giq_option(-3, 58, 177, vree35, 50);
end

procedure vree44
begin
	gsay_message(58, 178, 50);
	call vree_end;
end

procedure vree45
begin
	gsay_message(58, 179, 50);
	call vree45a;
end

procedure vree46
begin
	gsay_reply(58, 180);
	giq_option(4, 58, 181, vree47, 50);
	giq_option(4, 58, 182, vree46a, 50);
end

procedure vree47
begin
	gsay_message(58, 183, 50);
	if (local_var(1) > 2) then begin
		call vree17;
	end
	else begin
		gsay_message(58, 184, 50);
		call vree_end;
	end
end

procedure vree48
begin
	gsay_reply(58, 185);
	giq_option(4, 58, 187, vree17, 50);
	giq_option(4, 58, 186, vree_end, 50);
end

procedure vree200
begin
	gsay_message(58, 188, 50);
end

procedure vree201
begin
	gsay_message(58, 189, 50);
end

procedure vree202
begin
	gsay_message(58, 190, 50);
end

procedure vree203
begin
	gsay_message(58, 191, 50);
end

procedure vree204
begin
	gsay_message(58, 192, 50);
end

procedure vree205
begin
	gsay_message(58, 193, 50);
end

procedure vree300
begin
	gsay_message(58, 194, 50);
end

procedure vree301
begin
	gsay_message(58, 195, 50);
end

procedure vree302
begin
	gsay_message(58, 196, 50);
end

procedure vree303
begin
	gsay_message(58, 197, 50);
end

procedure vree304
begin
	gsay_message(58, 198, 50);
end

procedure vree305
begin
	gsay_message(58, 199, 50);
end

procedure vree306
begin
	gsay_message(58, 200, 50);
end

procedure branch01
begin
	if (local_var(1) >= 2) then begin
		call vree18;
	end
	else begin
		call vree19;
	end
end

procedure branch02
begin
	if (local_var(1) > 1) then begin
		call vree21;
	end
	else begin
		call vree24;
	end
end

procedure branch03
begin
	set_local_var(5, 1);
	if (local_var(1) > 1) then begin
		call vree25;
	end
	else begin
		call vree26;
	end
end

procedure branch04
begin
	if (local_var(1) > 1) then begin
		call vree27;
	end
	else begin
		call vree30;
	end
end

procedure vree00a
begin
	UpReact
	call vree_end;
end

procedure vree01a
begin
	DownReact
	call vree_end;
end

procedure vree01b
begin
	BigDownReact
	call vree_end;
end

procedure vree45a
begin
	variable LVar0 := 0;
	LVar0 := create_object_sid(PID_RADAWAY, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	LVar0 := create_object_sid(PID_RADAWAY, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	LVar0 := create_object_sid(PID_SMALL_ENERGY_CELL, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	LVar0 := create_object_sid(PID_MICRO_FUSION_CELL, 0, 0, -1);
	add_obj_to_inven(dude_obj, LVar0);
	BigUpReact
	call vree_end;
end

procedure vree46a
begin
	DownReact
	call vree_end;
end


