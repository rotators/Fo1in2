/*

   Scan for holodisks and replace them with a different item + script.
   This is a rewrite of a Fixt script (was in obj_dude before).
   Honestly not sure right now if this can't be avoided with simply making correct protos,
   but oh well. Here we are.

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\sfall\sfall.h"

/* Defines */
#define holodisk_pointer(x)   if Ian_ptr > 0 then begin                          \
               						rm_obj_from_inven(Ian_ptr, global_var( x ));    \
               					end                                                \
               					if Tandi_ptr > 0 then begin                        \
               						rm_obj_from_inven(Tandi_ptr, global_var( x ));  \
               					end                                                \
               					if Tycho_ptr > 0 then begin                        \
               						rm_obj_from_inven(Tycho_ptr, global_var( x ));  \
               					end                                                \
               					if Katja_ptr > 0 then begin                        \
               						rm_obj_from_inven(Katja_ptr, global_var( x ));  \
               					end                                                \
               					rm_obj_from_inven(dude_obj, global_var( x ));      \
               					destroy_object(global_var( x ));                   \
               					set_global_var( x, 0 );                            \
               					display_msg(message_str(SCRIPT_GENDISK, 107))

#define create_disk(x)        Remove_ptr := dude_item( PID_BOS_HOLODISK );       \
                     			rm_obj_from_inven(dude_obj, Remove_ptr);           \
                     			destroy_object(Remove_ptr);                        \
                     			NewDisk := create_object_sid(PID_HOLODISK, 0, 0, x);   \
                     			add_obj_to_inven(dude_obj, NewDisk)

/* Script Procedures */
procedure start;
procedure InventoryMove;

procedure start begin
   if game_loaded then begin
     register_hook_proc(HOOK_INVENTORYMOVE, InventoryMove);
   end
end

procedure InventoryMove begin
variable Remove_ptr := 0;
variable NewDisk := 0;
// Behold the madness.
// TODO: Cleanup?

	if CUR_MAP_GLOW2 then begin//GLOW2.MAP
		if global_var( GVAR_THE_GLOW_DISKS_REFRESH ) < 3 then begin//tracker
			if dude_item_count( PID_FEV_HOLODISK ) > 0 then begin// <-- FEV Disk
				set_global_var( GVAR_THE_GLOW_DISKS_REFRESH, global_var( GVAR_THE_GLOW_DISKS_REFRESH ) + 1 );//tracker
				create_disk(SCRIPT_FEVDISK);
				set_global_var( GVAR_FEVDISK_HOLODISK_POINTER, NewDisk );
			end
			if dude_item_count( PID_ALPHA_EXPERIMENT_HOLODISK ) > 0 then begin// <-- Alpha Experiment Disk
				set_global_var( GVAR_THE_GLOW_DISKS_REFRESH, global_var( GVAR_THE_GLOW_DISKS_REFRESH ) + 1 );//tracker
				create_disk(SCRIPT_DISKA);
				set_global_var( GVAR_DISKA_HOLODISK_POINTER, NewDisk );
			end
			if dude_item_count( PID_DELTA_EXPERIMENT_HOLODISK ) > 0 then begin// <-- Delta Experiment Disk
				set_global_var( GVAR_THE_GLOW_DISKS_REFRESH, global_var( GVAR_THE_GLOW_DISKS_REFRESH ) + 1 );//tracker
				create_disk(SCRIPT_DISKD);
				set_global_var( GVAR_DISKD_HOLODISK_POINTER, NewDisk );
			end
		end
	end
	else if CUR_MAP_GLOW1 then begin//GLOW1.MAP
		if dude_item_count( PID_BOS_HOLODISK ) > 0 then begin// <-- Brotherhood Disk
			set_global_var( GVAR_ARTIFACT_DISK_FOUND_GIVEN, 1 );// ARTIFACT_DISK_FOUND_GIVEN
			create_disk(SCRIPT_ARTIFACT);
			set_global_var( GVAR_ARTIFACT_HOLODISK_POINTER, NewDisk );
		end
	end
	/*
	// Moved to vree.ssl
	if global_var( GVAR_VREE_DISK_TRACKER ) == 1 then begin// VREE_DISK_TRACKER :=0;         //  310  // set to 1 when given disk, set to 2 when item created and placed in inventory.
		variable NewDisk4 := 0;
		set_global_var( GVAR_VREE_DISK_TRACKER, 2 );
		NewDisk4 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_VREEDISK);// VreeDisk.int
		add_obj_to_inven(dude_obj, NewDisk4);
		set_global_var( GVAR_VREE_AUTOPSY_POINTER, NewDisk4 );// <-- VREE_AUTOPSY_POINTER // 450  // ! Fallout Fixt: Pointer used to create and destroy the tape.
	end

	// Moved to razor.ssl
	if global_var( GVAR_RECEIVED_HOLODISK_RAZOR ) == 1 then begin// RECEIVED_HOLODISK_RAZOR   :=0;  //  446  Fixt: Has player gotten the disk from Razor already?
		variable NewDisk5 := 0;
		set_global_var( GVAR_RECEIVED_HOLODISK_RAZOR, 2 );
		NewDisk5 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_REGDISK);// RegDisk.int
		add_obj_to_inven(dude_obj, NewDisk5);
		set_global_var( GVAR_RAZOR_HOLODISK_POINTER, NewDisk5 );// <-- RAZOR_HOLODISK_POINTER    :=0;  //  453  Fixt: For tracking and destroying it
	end
	*/
	if not(is_loading_game) then begin// not IS_LOADING_GAME
		if global_var( GVAR_ARTIFACT_HOLODISK_POINTER ) != 0 then begin// ARTIFACT_HOLODISK_POINTER	<--- Done!
			if global_var( GVAR_QUEST_BROHOOD_1_JOIN_THEM ) == 2 then begin// Became an Initiate
				if global_var( GVAR_ARTIFACT_HOLODISK_POINTER ) > 255 then begin
					set_global_var( GVAR_ARTIFACT_DISK_FOUND_GIVEN, 3 );// ARTIFACT_DISK_FOUND_GIVEN
					holodisk_pointer(GVAR_ARTIFACT_HOLODISK_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_ARTIFACT_HOLODISK_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_FEVDISK_HOLODISK_POINTER ) != 0 then begin// FEVDISK_HOLODISK_POINTER	<--- Done!
			if global_var( GVAR_FEVDISK_HOLODISK_USED ) == 1 then begin// FEVDISK_HOLODISK_USED
				if global_var( GVAR_FEVDISK_HOLODISK_POINTER ) > 255 then begin
					set_global_var( GVAR_FEVDISK_HOLODISK_FLAG, 2 );// FEVDISK_HOLODISK_FLAG
					holodisk_pointer(GVAR_FEVDISK_HOLODISK_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_FEVDISK_HOLODISK_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_DISKA_HOLODISK_POINTER ) != 0 then begin// DISKA_HOLODISK_POINTER	<--- Done!
			if global_var( GVAR_DISKA_HOLODISK_USED ) == 1 then begin// DISKA_HOLODISK_USED
				if global_var( GVAR_DISKA_HOLODISK_POINTER ) > 255 then begin
				   holodisk_pointer(GVAR_DISKA_HOLODISK_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_DISKA_HOLODISK_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_DISKD_HOLODISK_POINTER ) != 0 then begin// DISKD_HOLODISK_POINTER	<--- Done!
			if global_var( GVAR_DISKD_HOLODISK_USED ) == 1 then begin// DISKD_HOLODISK_USED
				if global_var( GVAR_DISKD_HOLODISK_POINTER ) > 255 then begin
				   holodisk_pointer(GVAR_DISKD_HOLODISK_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_DISKD_HOLODISK_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_RAZOR_HOLODISK_POINTER ) != 0 then begin// RAZOR_HOLODISK_POINTER    :=0;  //  453  Fixt: For tracking and destroying it
			if global_var( GVAR_REMOVE_JON_DISK_SON ) == 1 then begin// REMOVE_JON_DISK_SON       :=0;  //  452  Fixt: Has he taken it from the player in the Zimmerman/Razor quest
				if global_var( GVAR_RAZOR_HOLODISK_POINTER ) > 255 then begin
					set_global_var( GVAR_REMOVE_JON_DISK_SON, 2 );// REMOVE_JON_DISK_SON       :=0;  //  452  Fixt: Has he taken it from the player in the Zimmerman/Razor quest
					holodisk_pointer(GVAR_RAZOR_HOLODISK_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_RAZOR_HOLODISK_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_VREE_AUTOPSY_POINTER ) != 0 then begin//   VREE_AUTOPSY_POINTER // 450  // ! Fallout Fixt: Pointer used to create and destroy the tape.
			if global_var( GVAR_VREE_GIVEN_DUDE_AUTOPSY ) == 2 then begin//   VREE_GIVEN_DUDE_AUTOPSY  :=0;  //  449  // Vree sets to 1, Master sets to 2, set to 5 is given to Master
				if global_var( GVAR_VREE_AUTOPSY_POINTER ) > 255 then begin
					set_global_var( GVAR_VREE_GIVEN_DUDE_AUTOPSY, 5 );
					holodisk_pointer(GVAR_VREE_AUTOPSY_POINTER);
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var( GVAR_VREE_AUTOPSY_POINTER, 0 );
				end
			end
		end
		if global_var( GVAR_GENDISK_HOLODISK_POINTER1 ) > 0 then begin// GENDISK_HOLODISK_POINTER1	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER1");
			holodisk_pointer(GVAR_GENDISK_HOLODISK_POINTER1);
		end
		if global_var( GVAR_GENDISK_HOLODISK_POINTER2 ) > 0 then begin// GENDISK_HOLODISK_POINTER2	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER2");
			holodisk_pointer(GVAR_GENDISK_HOLODISK_POINTER2);
		end
		if global_var( GVAR_GENDISK_HOLODISK_POINTER3 ) > 0 then begin// GENDISK_HOLODISK_POINTER3	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER3");
			holodisk_pointer(GVAR_GENDISK_HOLODISK_POINTER3);
		end
	end

end
