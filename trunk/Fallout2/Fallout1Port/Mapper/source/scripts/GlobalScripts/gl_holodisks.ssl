/*

   Scan for holodisks and replace them with a different item + script.
   This is a rewrite of a Fixt script (was in obj_dude before).
   Honestly not sure right now if this can't be avoided with simply making correct protos,
   but oh well. Here we are.

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\sfall\sfall.h"

/* Defines */


/* Script Procedures */
procedure start;
procedure InventoryMove;

import variable Ian_ptr;
import variable Tycho_ptr;
import variable Katja_ptr;
import variable Tandi_ptr;

procedure start begin
   if game_loaded then begin
     register_hook_proc(HOOK_INVENTORYMOVE, InventoryMove);
   end
end

procedure InventoryMove begin

// Behold the madness.
// TODO: Cleanup?

	if cur_map_index == MAP_GLOW2 then begin//GLOW2.MAP
		if global_var(THE_GLOW_DISKS_REFRESH) < 3 then begin//tracker
			if obj_is_carrying_obj_pid(dude_obj, PID_FEV_HOLODISK) > 0 then begin// <-- FEV Disk
				variable Remove_ptr0 := 0;
				variable NewDisk0 := 0;
				set_global_var(THE_GLOW_DISKS_REFRESH, global_var(THE_GLOW_DISKS_REFRESH) + 1);//tracker
				Remove_ptr0 := obj_carrying_pid_obj(dude_obj, PID_FEV_HOLODISK);
				rm_obj_from_inven(dude_obj, Remove_ptr0);
				destroy_object(Remove_ptr0);
				NewDisk0 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_FEVDISK);// FEVDisk.int
				add_obj_to_inven(dude_obj, NewDisk0);
				set_global_var(FEVDISK_HOLODISK_POINTER, NewDisk0);
			end
			if obj_is_carrying_obj_pid(dude_obj, PID_ALPHA_EXPERIMENT_HOLODISK) > 0 then begin// <-- Alpha Experiment Disk
				variable Remove_ptr1 := 0;
				variable NewDisk1 := 0;
				set_global_var(THE_GLOW_DISKS_REFRESH, global_var(THE_GLOW_DISKS_REFRESH) + 1);//tracker
				Remove_ptr1 := obj_carrying_pid_obj(dude_obj, PID_ALPHA_EXPERIMENT_HOLODISK);
				rm_obj_from_inven(dude_obj, Remove_ptr1);
				destroy_object(Remove_ptr1);
				NewDisk1 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_DISKA);// DiskA.int
				add_obj_to_inven(dude_obj, NewDisk1);
				set_global_var(DISKA_HOLODISK_POINTER, NewDisk1);
			end
			if obj_is_carrying_obj_pid(dude_obj, PID_DELTA_EXPERIMENT_HOLODISK) > 0 then begin// <-- Delta Experiment Disk
				variable Remove_ptr2 := 0;
				variable NewDisk2 := 0;
				set_global_var(THE_GLOW_DISKS_REFRESH, global_var(THE_GLOW_DISKS_REFRESH) + 1);//tracker
				Remove_ptr2 := obj_carrying_pid_obj(dude_obj, PID_DELTA_EXPERIMENT_HOLODISK);
				rm_obj_from_inven(dude_obj, Remove_ptr2);
				destroy_object(Remove_ptr2);
				NewDisk2 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_DISKD);// DiskD.int
				add_obj_to_inven(dude_obj, NewDisk2);
				set_global_var(DISKD_HOLODISK_POINTER, NewDisk2);
			end
		end
	end
	else if cur_map_index == MAP_GLOW1 then begin//GLOW1.MAP
		if obj_is_carrying_obj_pid(dude_obj, PID_BOS_HOLODISK) > 0 then begin// <-- Brotherhood Disk
			variable Remove_ptr3 := 0;
			variable NewDisk3 := 0;
			set_global_var(ARTIFACT_DISK_FOUND_GIVEN, 1);// ARTIFACT_DISK_FOUND_GIVEN
			Remove_ptr3 := obj_carrying_pid_obj(dude_obj, PID_BOS_HOLODISK);
			rm_obj_from_inven(dude_obj, Remove_ptr3);
			destroy_object(Remove_ptr3);
			NewDisk3 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_ARTIFACT);// Artifact.int
			add_obj_to_inven(dude_obj, NewDisk3);
			set_global_var(ARTIFACT_HOLODISK_POINTER, NewDisk3);
		end
	end
	if global_var(VREE_DISK_TRACKER) == 1 then begin// VREE_DISK_TRACKER :=0;         //  310  // set to 1 when given disk, set to 2 when item created and placed in inventory.
		variable NewDisk4 := 0;
		set_global_var(VREE_DISK_TRACKER, 2);
		NewDisk4 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_VREEDISK);// VreeDisk.int
		add_obj_to_inven(dude_obj, NewDisk4);
		set_global_var(VREE_AUTOPSY_POINTER, NewDisk4);// <-- VREE_AUTOPSY_POINTER // 450  // ! Fallout Fixt: Pointer used to create and destroy the tape.
	end
	if global_var(RECEIVED_HOLODISK_RAZOR) == 1 then begin// RECEIVED_HOLODISK_RAZOR   :=0;  //  446  Fixt: Has player gotten the disk from Razor already?
		variable NewDisk5 := 0;
		set_global_var(RECEIVED_HOLODISK_RAZOR, 2);
		NewDisk5 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_REGDISK);// RegDisk.int
		add_obj_to_inven(dude_obj, NewDisk5);
		set_global_var(RAZOR_HOLODISK_POINTER, NewDisk5);// <-- RAZOR_HOLODISK_POINTER    :=0;  //  453  Fixt: For tracking and destroying it
	end
	if (metarule(22, 0) == 0) then begin// not IS_LOADING_GAME
		if global_var(ARTIFACT_HOLODISK_POINTER) != 0 then begin// ARTIFACT_HOLODISK_POINTER	<--- Done!
			if global_var(QUEST_BROHOOD_1_JOIN_THEM) == 2 then begin// Became an Initiate
				if global_var(ARTIFACT_HOLODISK_POINTER) > 255 then begin
					set_global_var(ARTIFACT_DISK_FOUND_GIVEN, 3);// ARTIFACT_DISK_FOUND_GIVEN
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(ARTIFACT_HOLODISK_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(ARTIFACT_HOLODISK_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(ARTIFACT_HOLODISK_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(ARTIFACT_HOLODISK_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(ARTIFACT_HOLODISK_POINTER));
					destroy_object(global_var(ARTIFACT_HOLODISK_POINTER));
					set_global_var(ARTIFACT_HOLODISK_POINTER, 0);
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(ARTIFACT_HOLODISK_POINTER, 0);
				end
			end
		end
		if global_var(FEVDISK_HOLODISK_POINTER) != 0 then begin// FEVDISK_HOLODISK_POINTER	<--- Done!
			if global_var(FEVDISK_HOLODISK_USED) == 1 then begin// FEVDISK_HOLODISK_USED
				if global_var(FEVDISK_HOLODISK_POINTER) > 255 then begin
					set_global_var(FEVDISK_HOLODISK_FLAG, 2);// FEVDISK_HOLODISK_FLAG
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(FEVDISK_HOLODISK_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(FEVDISK_HOLODISK_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(FEVDISK_HOLODISK_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(FEVDISK_HOLODISK_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(FEVDISK_HOLODISK_POINTER));
					destroy_object(global_var(FEVDISK_HOLODISK_POINTER));
					set_global_var(FEVDISK_HOLODISK_POINTER, 0);// This is necessary.
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(FEVDISK_HOLODISK_POINTER, 0);
				end
			end
		end
		if global_var(DISKA_HOLODISK_POINTER) != 0 then begin// DISKA_HOLODISK_POINTER	<--- Done!
			if global_var(DISKA_HOLODISK_USED) == 1 then begin// DISKA_HOLODISK_USED
				if global_var(DISKA_HOLODISK_POINTER) > 255 then begin
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(DISKA_HOLODISK_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(DISKA_HOLODISK_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(DISKA_HOLODISK_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(DISKA_HOLODISK_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(DISKA_HOLODISK_POINTER));
					destroy_object(global_var(DISKA_HOLODISK_POINTER));
					set_global_var(DISKA_HOLODISK_POINTER, 0);// This is necessary.
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(DISKA_HOLODISK_POINTER, 0);
				end
			end
		end
		if global_var(DISKD_HOLODISK_POINTER) != 0 then begin// DISKD_HOLODISK_POINTER	<--- Done!
			if global_var(DISKD_HOLODISK_USED) == 1 then begin// DISKD_HOLODISK_USED
				if global_var(DISKD_HOLODISK_POINTER) > 255 then begin
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(DISKD_HOLODISK_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(DISKD_HOLODISK_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(DISKD_HOLODISK_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(DISKD_HOLODISK_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(DISKD_HOLODISK_POINTER));
					destroy_object(global_var(DISKD_HOLODISK_POINTER));
					set_global_var(DISKD_HOLODISK_POINTER, 0);// This is necessary.
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(DISKD_HOLODISK_POINTER, 0);
				end
			end
		end
		if global_var(RAZOR_HOLODISK_POINTER) != 0 then begin// RAZOR_HOLODISK_POINTER    :=0;  //  453  Fixt: For tracking and destroying it
			if global_var(REMOVE_JON_DISK_SON) == 1 then begin// REMOVE_JON_DISK_SON       :=0;  //  452  Fixt: Has he taken it from the player in the Zimmerman/Razor quest
				if global_var(RAZOR_HOLODISK_POINTER) > 255 then begin
					set_global_var(REMOVE_JON_DISK_SON, 2);// REMOVE_JON_DISK_SON       :=0;  //  452  Fixt: Has he taken it from the player in the Zimmerman/Razor quest
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(RAZOR_HOLODISK_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(RAZOR_HOLODISK_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(RAZOR_HOLODISK_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(RAZOR_HOLODISK_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(RAZOR_HOLODISK_POINTER));
					destroy_object(global_var(RAZOR_HOLODISK_POINTER));
					set_global_var(RAZOR_HOLODISK_POINTER, 0);// Clear it too, just in case.
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(RAZOR_HOLODISK_POINTER, 0);
				end
			end
		end
		if global_var(VREE_AUTOPSY_POINTER) != 0 then begin//   VREE_AUTOPSY_POINTER // 450  // ! Fallout Fixt: Pointer used to create and destroy the tape.
			if global_var(VREE_GIVEN_DUDE_AUTOPSY) == 2 then begin//   VREE_GIVEN_DUDE_AUTOPSY  :=0;  //  449  // Vree sets to 1, Master sets to 2, set to 5 is given to Master
				if global_var(VREE_AUTOPSY_POINTER) > 255 then begin
					set_global_var(VREE_GIVEN_DUDE_AUTOPSY, 5);
					if Ian_ptr > 0 then begin
						rm_obj_from_inven(Ian_ptr, global_var(VREE_AUTOPSY_POINTER));
					end
					if Tandi_ptr > 0 then begin
						rm_obj_from_inven(Tandi_ptr, global_var(VREE_AUTOPSY_POINTER));
					end
					if Tycho_ptr > 0 then begin
						rm_obj_from_inven(Tycho_ptr, global_var(VREE_AUTOPSY_POINTER));
					end
					if Katja_ptr > 0 then begin
						rm_obj_from_inven(Katja_ptr, global_var(VREE_AUTOPSY_POINTER));
					end
					rm_obj_from_inven(dude_obj, global_var(VREE_AUTOPSY_POINTER));
					destroy_object(global_var(VREE_AUTOPSY_POINTER));
					set_global_var(VREE_AUTOPSY_POINTER, 0);// This is necessary.
					display_msg(message_str(SCRIPT_GENDISK, 107));
				end
				else begin// else if invalid pointer, then clear it.
					set_global_var(global_var(VREE_AUTOPSY_POINTER), 0);
				end
			end
		end
		if global_var(GENDISK_HOLODISK_POINTER1) > 0 then begin// GENDISK_HOLODISK_POINTER1	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER1");
			if Ian_ptr > 0 then begin
				rm_obj_from_inven(Ian_ptr, global_var(GENDISK_HOLODISK_POINTER1));
			end
			if Tandi_ptr > 0 then begin
				rm_obj_from_inven(Tandi_ptr, global_var(GENDISK_HOLODISK_POINTER1));
			end
			if Tycho_ptr > 0 then begin
				rm_obj_from_inven(Tycho_ptr, global_var(GENDISK_HOLODISK_POINTER1));
			end
			if Katja_ptr > 0 then begin
				rm_obj_from_inven(Katja_ptr, global_var(GENDISK_HOLODISK_POINTER1));
			end
			rm_obj_from_inven(dude_obj, global_var(GENDISK_HOLODISK_POINTER1));
			destroy_object(global_var(GENDISK_HOLODISK_POINTER1));
			set_global_var(GENDISK_HOLODISK_POINTER1, 0);// This is necessary.
			display_msg(message_str(SCRIPT_GENDISK, 107));
		end
		if global_var(GENDISK_HOLODISK_POINTER2) > 0 then begin// GENDISK_HOLODISK_POINTER2	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER2");
			if Ian_ptr > 0 then begin
				rm_obj_from_inven(Ian_ptr, global_var(GENDISK_HOLODISK_POINTER2));
			end
			if Tandi_ptr > 0 then begin
				rm_obj_from_inven(Tandi_ptr, global_var(GENDISK_HOLODISK_POINTER2));
			end
			if Tycho_ptr > 0 then begin
				rm_obj_from_inven(Tycho_ptr, global_var(GENDISK_HOLODISK_POINTER2));
			end
			if Katja_ptr > 0 then begin
				rm_obj_from_inven(Katja_ptr, global_var(GENDISK_HOLODISK_POINTER2));
			end
			rm_obj_from_inven(dude_obj, global_var(GENDISK_HOLODISK_POINTER2));
			destroy_object(global_var(GENDISK_HOLODISK_POINTER2));
			set_global_var(GENDISK_HOLODISK_POINTER2, 0);// This is necessary.
			display_msg(message_str(SCRIPT_GENDISK, 107));
		end
		if global_var(GENDISK_HOLODISK_POINTER3) > 0 then begin// GENDISK_HOLODISK_POINTER3	<--- Done!
			display_msg("GENDISK_HOLODISK_POINTER3");
			if Ian_ptr > 0 then begin
				rm_obj_from_inven(Ian_ptr, global_var(GENDISK_HOLODISK_POINTER3));
			end
			if Tandi_ptr > 0 then begin
				rm_obj_from_inven(Tandi_ptr, global_var(GENDISK_HOLODISK_POINTER3));
			end
			if Tycho_ptr > 0 then begin
				rm_obj_from_inven(Tycho_ptr, global_var(GENDISK_HOLODISK_POINTER3));
			end
			if Katja_ptr > 0 then begin
				rm_obj_from_inven(Katja_ptr, global_var(GENDISK_HOLODISK_POINTER3));
			end
			rm_obj_from_inven(dude_obj, global_var(GENDISK_HOLODISK_POINTER3));
			destroy_object(global_var(GENDISK_HOLODISK_POINTER3));
			set_global_var(GENDISK_HOLODISK_POINTER3, 0);// This is necessary.
			display_msg(message_str(SCRIPT_GENDISK, 107));
		end
	end

end


