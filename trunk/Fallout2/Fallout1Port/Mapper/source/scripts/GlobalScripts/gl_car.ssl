/******************************************************************************************
        Item: Player car
        Location: local maps
        Description: handles the create & remove of the player car at various locations
******************************************************************************************/


/* Include Files */
#include "..\headers\define.h"
#include "..\headers\maps.h"
#include "..\headers\updatmap.h"
#include "..\headers\command.h"

//#include "..\headers\Den.h"
#include "..\headers\Sfall\main.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;

procedure check_vehicle_trunk;
procedure check_vehicle_location;

#define is_car_created						((tile_contains_obj_pid(car_hex,car_elev,PID_DRIVABLE_MOTO1)) or (tile_contains_obj_pid(car_hex,car_elev,PID_DRIVABLE_MOTO2)))
#define location_valid						(car_area != 0 and car_hex != 0)

#define Place_Trunk(Hex,Elevation)		if (global_var(GVAR_PLAYER_GOT_CAR) == 1) then begin 				\
														tile:=tile_num_in_direction(Hex,1,1);								\
													end else if (global_var(GVAR_PLAYER_GOT_CAR) == 2) then begin 	\
														tile:=Hex+2; 																\
														/*debug("newmove!"); */														\
													end																				\
                                       move_to(Trunk_Ptr,tile,Elevation)

#define trunk_size_small		(40)
#define trunk_size_big			(60)

variable tile;
variable car_area:=0;
variable car_hex:=0;
variable car_elev:=0;

procedure start begin
   if (game_loaded) then begin
   	set_global_script_type(0);
   end
end

procedure map_enter_p_proc begin
	if (global_var(GVAR_PLAYER_GOT_CAR) != 0) then begin
		debug("car location: " + car_current_town);
		debug("dude location: " + cur_town);

		call check_vehicle_trunk;
		call check_vehicle_location;
	end
end

procedure check_vehicle_trunk begin
variable trunk_size;

	if (global_var(GVAR_PLAYER_GOT_CAR) == 1) then begin
		art_change_fid_num(Trunk_Ptr, FID_MOTOTRUNK1);
		set_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE,trunk_size_small);
	end
	else if (global_var(GVAR_PLAYER_GOT_CAR) == 2) then begin
		art_change_fid_num(Trunk_Ptr, FID_MOTOTRUNK2);
		set_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE,trunk_size_big);
	end

	trunk_size := get_proto_data(obj_pid(Trunk_Ptr),PROTO_CN_MAX_SIZE);
	debug("trunk size: " + trunk_size);
end

procedure check_vehicle_location begin
	//display_msg("test map enter");

	// V13
   if is_map(MAP_V13ENT) then begin
   	car_area := AREA_VAULT_13;
   	car_hex := CAR_V13_HEX;
   	car_elev := CAR_V13_ELEV;
   end

	// V15
   else if is_map(MAP_VAULTENT) then begin
   	car_area := AREA_VAULT_15;
   	car_hex := CAR_V15_HEX;
   	car_elev := CAR_V15_ELEV;
   end

	// Shady Sands
   else if is_map(MAP_SHADYW) then begin
   	car_area := AREA_SHADY_SANDS;
   	car_hex := CAR_SHADY_HEX;
   	car_elev := CAR_SHADY_ELEV;
   end

	// Junktown
   else if is_map(MAP_JUNKENT) then begin
   	car_area := AREA_JUNKTOWN;
   	car_hex := CAR_JUNKTOWN_HEX;
   	car_elev := CAR_JUNKTOWN_ELEV;
   end

	// Raiders
   else if is_map(MAP_RAIDERS) then begin
   	car_area := AREA_RAIDERS;
   	car_hex := CAR_RAIDERS_HEX;
   	car_elev := CAR_RAIDERS_ELEV;
   end

	// Necropolis
   else if is_map(MAP_HOTEL) then begin
   	car_area := AREA_NECROPOLIS;
   	car_hex := CAR_NECROPOLIS_HOTEL_HEX;
   	car_elev := CAR_NECROPOLIS_ELEV;
   end

	// Hub
   else if is_map(MAP_HUBENT) then begin
   	car_area := AREA_HUB;
   	car_hex := CAR_HUB_HEX;
   	car_elev := CAR_HUB_ELEV;
   end

	// Brotherhood
   else if is_map(MAP_BROHDENT) then begin
   	car_area := AREA_BROTHERHOOD;
   	car_hex := CAR_BOS_HEX;
   	car_elev := CAR_BOS_ELEV;
   end

	// Military Base
   else if is_map(MAP_MBENT) then begin
   	car_area := AREA_MILITARY_BASE;
   	car_hex := CAR_MBASE_HEX;
   	car_elev := CAR_MBASE_ELEV;
   end

	// Glow
   else if is_map(MAP_GLOWENT) then begin
   	car_area := AREA_GLOW;
   	car_hex := CAR_GLOW_HEX;
   	car_elev := CAR_GLOW_ELEV;
   end

	// Boneyard
   else if is_map(MAP_LAADYTUM) then begin
   	car_area := AREA_BONEYARD;
   	car_hex := CAR_BONEYARD_ADY_HEX;
   	car_elev := CAR_BONEYARD_ELEV;
   end

	// Cathedral
   else if is_map(MAP_CHILDRN1) then begin
   	car_area := AREA_CATHEDRAL;
   	car_hex := CAR_CATHEDRAL_HEX;
   	car_elev := CAR_CATHEDRAL_ELEV;
   end

   // Bike outa gas
   else if is_map(MAP_CAR_DESERT) then begin
   	car_area := AREA_CAR_OUTTA_GAS;
   	car_hex := CAR_CAR_OUTTA_GAS_HEX;
   	car_elev := CAR_CAR_OUTTA_GAS_ELEV;
   end

   // No valid location
   else begin
   	//debug("not a valid location: " + cur_map_index);
		car_area:=0;
		car_hex:=0;
		car_elev:=0;
   end

   // ====================================================================
	// Create & Delete car
   // ====================================================================
   if location_valid then begin
		Upgrade_Car(car_hex,car_elev)
		if (not(is_car_created) and (global_var(GVAR_PLAYER_GOT_CAR) != 0) and (car_current_town == car_area)) then begin
			Create_Car(car_hex, car_elev)
			Place_Trunk(car_hex, car_elev);
			set_obj_visibility(Trunk_Ptr,0);
			debug("create car at hex: " + car_hex);
		end
		else if is_car_created and (car_current_town != car_area) then begin
			Dest_Car(car_hex, car_elev)
			debug("destroy car");
		end
		else if is_car_created and (car_current_town == car_area) then begin
			Place_Trunk(car_hex, car_elev);
			set_obj_visibility(Trunk_Ptr,0);
			debug("show trunk");
		end
	end
	else begin
		debug("invalid location!");
		debug("cur_map_index: " + cur_map_index);
		debug("cur_town: " + cur_town);

		if car_in_any_encounter then begin
		   debug("create car in encounter!");
      	car_hex := dude_tile + 5;
      	car_elev := dude_elevation;

			Create_Car(car_hex, car_elev)
			Place_Trunk(car_hex, car_elev);
			set_obj_visibility(Trunk_Ptr,0);
			debug("create car at hex: " + car_hex);
      end
      else begin
   		set_obj_visibility(Trunk_Ptr,1);
   		debug("hide trunk");
      end

	end
end