/*

	Necropolis - Ghoul in Hotel map

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_HOTGHOUL
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure critter_p_proc;
procedure combat_p_proc;
procedure destroy_p_proc;
procedure combat_rads_inc;

procedure generic00;
procedure generic02;
procedure generic03;
procedure genericcbt;

variable tmp_hostile;
variable init := 0;
variable rndx;

//////////////////////////////////////////////////
//	66 - Generic
//	792 - Valtglo
//	908 - Hotghoul
//////////////////////////////////////////////////


procedure start begin
	if (not(init)) then begin
		set_self_team(TEAM_NECROPOLIS_GANGER );
		set_self_ai( AI_GHOUL_NORMAL );
		init := 1;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			if (global_var( GVAR_ENEMY_NECROPOLIS )) then begin
				attack(dude_obj);
			end
			else begin
				call talk_p_proc;
			end
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				tmp_hostile := 1;
			end
		end
	end
end

procedure talk_p_proc begin
	dude_look_at_critter;
	call generic00;
end

procedure genericcbt begin
end

procedure generic00 begin
	rndx := random(1, 7);
	if (rndx == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 100), 7);
	end
	else if (rndx == 2) then begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 101), 7);
	end
	else if (rndx == 3) then begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 102), 7);
	end
	else if (rndx == 4) then begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 103), 7);
	end
	else if (rndx == 5) then begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 104), 7);
	end
	else if (rndx == 6) then begin
		call generic02;
	end
	else begin
		call generic03;
	end
end

procedure generic02
begin
	if (global_var( GVAR_SET_DEAD )) then begin
		rndx := random(1, 2);
		if (rndx == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 109), 7);
		end
		if (rndx == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 110), 7);
		end
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 111), 7);
	end
end

procedure generic03
begin
	if (global_var( GVAR_NECROP_MUTANTS_KILLED ) == 2) then begin
		rndx := random(1, 2);
		if (rndx == 1) then begin
			float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 112), 7);
		end
		if (rndx == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 113), 7);
		end
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 114), 7);
	end
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if (global_var( GVAR_ENEMY_NECROPOLIS )) then begin
			set_local_var(0, 1);
			attack(dude_obj);
		end
		else begin
			if (map_var(5)) then begin
				float_msg(self_obj, message_str(SCRIPT_HOTGHOUL, 103), 7);
				set_local_var(0, 1);
				attack(dude_obj);
			end
			else begin
				if (local_var(0) > 0) then begin
					attack(dude_obj);
				end
			end
		end
	end
	if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) != 0) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
		variable LVar0 := 0;
		LVar0 := random(2,5);
		if LVar0 == 2 then begin
			float_msg(self_obj, message_str(SCRIPT_VALTGLO, 102), 2);
		end
		else if LVar0 == 3 then begin
			float_msg(self_obj, message_str(SCRIPT_VALTGLO, 103), 2);
		end
		else if LVar0 == 4 then begin
			float_msg(self_obj, message_str(SCRIPT_VALTGLO, 104), 2);
		end
		else begin
			float_msg(self_obj, message_str(SCRIPT_VALTGLO, 105), 2);
		end
		tmp_hostile := 1;
	end
end

procedure combat_p_proc begin
end

procedure destroy_p_proc begin
	inc_inv_evil_crit
end
