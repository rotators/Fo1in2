#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure garretend;
procedure garretcbt;
procedure goodstuff;
procedure neutstuff;
procedure badstuff;
procedure reward;
procedure done;
procedure garret00a;
procedure garret00b;
procedure garret00c;
procedure garret00ca;
procedure garret01a;
procedure garret01c;
procedure garret02a;
procedure garret02c;
procedure garret03c;
procedure garret04;
procedure give_flare;
procedure give_cola;

import variable Fridge_ptr;
import variable Garret_ptr;

variable Shotgun_ptr;
variable Shells_ptr;
variable Cola_ptr;
variable Flare_ptr;
variable Hostile;
variable init := 0;
variable maxleash := 9;
variable noevent;
variable loopcount;
variable new_tile;
variable gavelist;
variable moving;
variable stuff;
variable indlog;
variable robbed;
variable flare_count;
variable cola_count;
variable CASH;
variable THRONE;
variable target_hex := 20113;
variable my_hex;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (not(init)) then begin
		if (local_var(7) == 0) then begin
			set_local_var(7, tile_num(self_obj));
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 30);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 78);
		Garret_ptr := self_obj;
		init := 1;
	end
	else begin
		if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
			call damage_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					script_overrides;
					display_msg(message_str(SCRIPT_GARRET, 100));
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						Hostile := 1;
					end
					else begin
						if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
							if (global_var(ENEMY_NECROPOLIS) and obj_can_see_obj(self_obj, dude_obj)) then begin
								attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
							end
							else begin
								my_hex := tile_num(self_obj);
								if (Hostile > 0) then begin
									set_global_var(ENEMY_NECROPOLIS, 1);
									attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
								end
								if (global_var(SIGNAL_REWARD) bwand 1) then begin
									if (local_var(5) == 0) then begin
										moving := 1;
										float_msg(self_obj, message_str(SCRIPT_GARRET, 114), 0);
										set_local_var(5, 1);
									end
									else begin
										if (local_var(5) == 1) then begin
											moving := 1;
											if (my_hex != target_hex) then begin
												animate_move_obj_to_tile(self_obj, target_hex, 0);
											end
											else begin
												set_local_var(5, 2);
												use_obj(Fridge_ptr);
											end
										end
										else begin
											if (local_var(5) == 2) then begin
												moving := 1;
												if (tile_distance_objs(self_obj, dude_obj) < 5) then begin
													call reward;
													set_local_var(5, 3);
													use_obj(Fridge_ptr);
												end
											end
											else begin
												if (local_var(5) == 3) then begin
													moving := 1;
													target_hex := local_var(7);
													if (my_hex != target_hex) then begin
														animate_move_obj_to_tile(self_obj, target_hex, 0);
													end
													else begin
														call done;
													end
												end
											end
										end
									end
								end
							end
						end
						else begin
							if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.

								set_global_var(ENEMY_NECROPOLIS, 1);
								set_global_var(GARRET_STATUS, 3);
								if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
									if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
										set_global_var(BERSERKER_REPUTATION, 1);
										set_global_var(CHAMPION_REPUTATION, 0);
									end
									if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
										set_global_var(CHAMPION_REPUTATION, 1);
										set_global_var(BERSERKER_REPUTATION, 0);
									end
									set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
									if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
										set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if ((local_var(8) == 0) and (global_var(SIGNAL_REWARD) bwand 2)) then begin
		set_local_var(8, 1);
		float_msg(self_obj, message_str(SCRIPT_GARRET, 201), 0);
		display_msg(message_str(SCRIPT_GARRET, 202));
		stuff := create_object_sid(PID_SMALL_ENERGY_CELL, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_MICRO_FUSION_CELL, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_BUFFOUT, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_MENTATS, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_STIMPAK, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_STIMPAK, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_FRAG_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_FRAG_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_PLASMA_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_PLASMA_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_PULSE_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_PULSE_GRENADE, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_JHP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_JHP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_JHP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_JHP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_AP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_AP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_AP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
		stuff := create_object_sid(PID_5MM_AP, 0, 0, -1);
		add_obj_to_inven(dude_obj, stuff);
	end
	else begin
		if (moving) then begin
			display_msg(message_str(SCRIPT_GARRET, 200));
		end
		else begin
			if ((game_time_hour >= 700) and (game_time_hour < 1800)) then begin
				call get_reaction;
				if (local_var(4)) then begin
					call garret02a;
				end
				else begin
					set_local_var(4, 1);
					if (local_var(1) >= 2) then begin
						call garret04;
					end
					else begin
						call garret01a;
					end
				end
			end
			else begin
				call garret00b;
			end
		end
	end
end

procedure garretend
begin
end

procedure garretcbt
begin
	Hostile := 1;
end

procedure goodstuff
begin
	CASH := CASH + 100;
	item_caps_adjust(dude_obj, 100);
	call neutstuff;
	call badstuff;
end

procedure neutstuff
begin
	CASH := CASH + 50;
	item_caps_adjust(dude_obj, 50);
	/* has how many? */    if (obj_is_carrying_obj_pid(Fridge_ptr, PID_SHOTGUN)) then begin
		display_msg(message_str(SCRIPT_GARRET, 204));
		Shotgun_ptr := obj_carrying_pid_obj(Fridge_ptr, PID_SHOTGUN);
		rm_obj_from_inven(Fridge_ptr, Shotgun_ptr);
		add_obj_to_inven(dude_obj, Shotgun_ptr);
	end
	else begin
		robbed := 1;
	end
	/* has how many? */    if (obj_is_carrying_obj_pid(Fridge_ptr, PID_SHOTGUN_SHELLS)) then begin
		display_msg(message_str(SCRIPT_GARRET, 205));
		Shells_ptr := obj_carrying_pid_obj(Fridge_ptr, PID_SHOTGUN_SHELLS);
		rm_obj_from_inven(Fridge_ptr, Shells_ptr);
		add_obj_to_inven(dude_obj, Shells_ptr);
	end
	else begin
		robbed := 1;
	end
	/* has how many? */    if (obj_is_carrying_obj_pid(Fridge_ptr, PID_SHOTGUN_SHELLS)) then begin
		Shells_ptr := obj_carrying_pid_obj(Fridge_ptr, PID_SHOTGUN_SHELLS);
		rm_obj_from_inven(Fridge_ptr, Shells_ptr);
		add_obj_to_inven(dude_obj, Shells_ptr);
	end
	else begin
		robbed := 1;
	end
end

procedure badstuff
begin
	CASH := CASH + 50;
	item_caps_adjust(dude_obj, 50);
	flare_count := 0;
	call give_flare;
	call give_flare;
	call give_flare;
	call give_flare;
	cola_count := 0;
	call give_cola;
	call give_cola;
	call give_cola;
	call give_cola;
end

procedure reward
begin
	CASH := 0;
	robbed := 0;
	display_msg(message_str(SCRIPT_GARRET, 203));
	if (local_var(1) >= 3) then begin
		call goodstuff;
	end
	else begin
		if (local_var(1) >= 2) then begin
			call neutstuff;
		end
		else begin
			call badstuff;
		end
	end
	if (flare_count) then begin
		if (flare_count > 1) then begin
			display_msg(message_str(SCRIPT_GARRET, 206));
		end
		else begin
			display_msg(message_str(SCRIPT_GARRET, 207));
		end
	end
	if (cola_count) then begin
		if (cola_count > 1) then begin
			display_msg(message_str(SCRIPT_GARRET, 208));
		end
		else begin
			display_msg(message_str(SCRIPT_GARRET, 209));
		end
	end
	display_msg(CASH + message_str(SCRIPT_GARRET, 210));
	if (robbed) then begin
		float_msg(self_obj, message_str(SCRIPT_GARRET, 121), 0);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_GARRET, 201), 0);
	end
end

procedure done
begin
	moving := 0;
	set_local_var(5, 4);
end

procedure garret00a
begin
	gsay_reply(102, 101);
	giq_option(4, 102, 102, garretend, 50);
	giq_option(4, 102, 103, garret01a, 50);
	giq_option(5, 102, 104, garret02a, 50);
	giq_option(-3, 102, 112, garretend, 50);
end

procedure garret00b
begin
	float_msg(self_obj, message_str(SCRIPT_GARRET, 105), 0);
	call garretend;
end

procedure garret00c
begin
	gsay_reply(102, 109);
	giq_option(3, 102, 110, garret01c, 50);
	giq_option(5, 102, 111, garret00ca, 50);
	giq_option(-3, 102, 112, garret02c, 50);
end

procedure garret00ca
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call garret03c;
	end
	else begin
		call garret02c;
	end
end

procedure garret01a
begin
	if (indlog) then begin
		gsay_message(102, 113, 50);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_GARRET, 113), 0);
	end
	call garretend;
end

procedure garret01c
begin
	gsay_message(102, 115, 50);
	call DownReact;
	call garretend;
end

procedure garret02a
begin
	call DownReact;
	if (indlog) then begin
		gsay_message(102, 116, 50);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_GARRET, 116), 0);
	end
	call garretend;
end

procedure garret02c
begin
	gsay_message(102, 117, 50);
	call garretend;
end

procedure garret03c
begin
	gsay_message(102, 118, 50);
	display_msg(message_str(SCRIPT_GARRET, 119));
	gsay_message(102, 120, 50);
	call garretend;
end

procedure garret04
begin
	start_gdialog(102, self_obj, 4, -1, -1);
	gsay_start;
	indlog := 1;
	call garret00a;
	indlog := 0;
	gsay_end;
	end_dialogue;
end

procedure give_flare
begin
	/* has how many? */    if (obj_is_carrying_obj_pid(Fridge_ptr, PID_FLARE)) then begin
		flare_count := flare_count + 1;
		Flare_ptr := obj_carrying_pid_obj(Fridge_ptr, PID_FLARE);
		rm_obj_from_inven(Fridge_ptr, Flare_ptr);
		add_obj_to_inven(dude_obj, Flare_ptr);
	end
	else begin
		robbed := 1;
	end
end

procedure give_cola
begin
	/* has how many? */    if (obj_is_carrying_obj_pid(Fridge_ptr, PID_NUKA_COLA)) then begin
		cola_count := cola_count + 1;
		Cola_ptr := obj_carrying_pid_obj(Fridge_ptr, PID_NUKA_COLA);
		rm_obj_from_inven(Fridge_ptr, Cola_ptr);
		add_obj_to_inven(dude_obj, Cola_ptr);
	end
	else begin
		robbed := 1;
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
 
procedure destroy_p_proc
begin
 
end
 
procedure damage_p_proc
begin
set_global_var(ENEMY_NECROPOLIS, 1); 
end
