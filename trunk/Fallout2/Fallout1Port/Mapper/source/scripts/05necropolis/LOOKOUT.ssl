/*

	Necropolis - Underground lookout

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_LOOKOUT
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure critter_p_proc;
procedure combat_p_proc;
procedure destroy_p_proc;

procedure spies;
procedure guilt;

variable tmp_hostile;
variable init_teams := 0;
variable rndz;
variable rndx;

procedure start begin
	if (not(init_teams)) then begin
		init_teams := 1;
		set_self_team(TEAM_NECROPOLIS_UNDERGROUND );
		set_self_ai( AI_GHOUL_NORMAL );
	end
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_LOOKOUT, 100));
end

procedure description_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_LOOKOUT, 100));
end
procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure spies
begin
	float_msg(self_obj, message_str(SCRIPT_LOOKOUT, 101), 0);
end

procedure guilt
begin
	if (random(0, 1)) then begin
		float_msg(self_obj, message_str(SCRIPT_LOOKOUT, 200), 0);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_LOOKOUT, 201), 0);
	end
end

procedure talk_p_proc begin
	dude_look_at_self;
	if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
		call guilt;
	end
	else begin
		call spies;
	end
end

procedure combat_p_proc begin
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (local_var(0) == 0) then begin
			if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
				if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 5)) then begin
					set_local_var(0, 1);
					call guilt;
				end
			end
		end
	end
end

procedure destroy_p_proc begin
	inc_inv_good_crit
end
