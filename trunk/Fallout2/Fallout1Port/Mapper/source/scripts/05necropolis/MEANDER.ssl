/*

	??

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_MEANDER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure combat_p_proc;
procedure destroy_p_proc;
procedure timed_event_p_proc;

procedure genericend;
procedure genericcbt;
procedure generic00;
procedure generic01;
procedure generic02;
procedure generic03;

variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable dist;
variable curtime;
variable prevtime;
variable tmp_hostile;
variable SET;
variable MUTANTS;
variable MAXLEASH := 9;
variable DAY;
variable initial :=  0;

variable rndRads;


procedure start begin
	if not(initial) then begin
		initial :=  1;
		if (local_var(0) == 0) then begin
			set_local_var(0, 1);
		end
		set_self_team( TEAM_32 );
	end
	curtime := DAY;
	if (prevtime != curtime) then begin
		noevent := curtime;
		prevtime := curtime;
		self_walk_to_tile( local_var(0) );
	end
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		loopcount := loopcount + 1;
		if (loopcount > 40) then begin
			loopcount := 0;
			if (noevent == 0) then begin
				noevent := 1;
				rndx := 5 + random(1, 10);
				add_timer_event(self_obj, game_ticks(rndx), 0);
			end
		end
	end
end

procedure destroy_p_proc begin
	rm_timer_event(self_obj);
   inc_inv_good_crit
	rm_timer_event(self_obj);
end

procedure talk_p_proc
begin
	dude_look_at_self;
	start_gdialog(84, self_obj, 4, -1, -1);
	gsay_start;
	if (tmp_hostile) then begin
		call generic01;
	end
	else begin
		call generic00;
	end
	gsay_end;
	end_dialogue;
end

procedure timed_event_p_proc
begin
	noevent := curtime;
	rndy := random(1, 6);
	if (rndy > 1) then begin
		dist := 2;
	end
	if (rndy > 5) then begin
		dist := 3;
	end
	rndRads := random(0, 5);
	prev_tile := self_tile;
	new_tile := tile_num_in_direction(prev_tile, rndRads, dist);
	if (tile_distance(local_var(0), new_tile) < MAXLEASH) then begin
		self_walk_to_tile( new_tile );
	end
end

procedure genericend
begin
end

procedure genericcbt
begin
end

procedure generic00
begin
	rndx := random(1, 7);
	if (rndx == 1) then begin
		gsay_message(84, 100, 50);
	end
	if (rndx == 2) then begin
		gsay_message(84, 101, 50);
	end
	if (rndx == 3) then begin
		gsay_message(84, 102, 50);
	end
	if (rndx == 4) then begin
		gsay_message(84, 103, 50);
	end
	if (rndx == 5) then begin
		gsay_message(84, 104, 50);
	end
	if (rndx == 6) then begin
		call generic02;
	end
	if (rndx == 7) then begin
		call generic03;
	end
end

procedure generic01
begin
	rndx := random(1, 4);
	if (rndx == 1) then begin
		gsay_message(84, 105, 50);
	end
	if (rndx == 2) then begin
		gsay_message(84, 106, 50);
	end
	if (rndx == 3) then begin
		gsay_message(84, 107, 50);
	end
	if (rndx == 4) then begin
		gsay_message(84, 108, 50);
	end
end

procedure generic02
begin
	if (SET == 0) then begin
		rndx := random(1, 2);
		if (rndx == 1) then begin
			gsay_message(84, 109, 50);
		end
		if (rndx == 2) then begin
			gsay_message(84, 110, 50);
		end
	end
	else begin
		gsay_message(84, 111, 50);
	end
end

procedure generic03
begin
	if (MUTANTS == 0) then begin
		rndx := random(1, 2);
		if (rndx == 1) then begin
			gsay_message(84, 112, 50);
		end
		if (rndx == 2) then begin
			gsay_message(84, 113, 50);
		end
	end
	else begin
		gsay_message(84, 114, 50);
	end
end

procedure combat_p_proc begin
end
