/*

	Necropolis - Set the ghoul leader

*/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_SET
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure talk_p_proc;
procedure pickup_p_proc;
procedure look_at_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure set00;
procedure set00a;
procedure set00b;
procedure set00_2;
procedure set01;
procedure set01a;
procedure set02;
procedure set02a;
procedure set03;
procedure set04;
procedure set05;
procedure set06;
procedure set07;
procedure set08;
procedure set09;
procedure set09a;
procedure set09_2;
procedure set10;
procedure set10a;
procedure set11;
procedure set12;
procedure set12_2;
procedure set13;
procedure set13_2;
procedure set14;
procedure set15;
procedure set16;
procedure set17;
procedure set17_2;
procedure set18;
procedure set18a;
procedure set19;
procedure set19_2;
procedure set20;
procedure set21;
procedure set21a;
procedure set22;
procedure set23;
procedure set24;
procedure set25;
procedure set25_2;
procedure set26;
procedure set27;
procedure set28;
procedure set29;
procedure set30;
procedure set31;
procedure set32;
procedure set33;
procedure set34;
procedure set34_2;
procedure set35;
procedure set36;
procedure set38;
procedure set39;
procedure set40;
procedure set40_2;
procedure set41;
procedure set42;
procedure set43;
procedure set44;
procedure set42_2;
procedure set45;
procedure set45a;
procedure set46;
procedure set47;
procedure set48;
procedure set49;
procedure set50;
procedure set51;
procedure set52;
procedure set52a;
procedure set53;
procedure set54;
procedure set55;
procedure set56;
procedure set57;
procedure set57_2;
procedure set58;
procedure set59;
procedure set60;
procedure set61;
procedure set62;
procedure set63;
procedure set64;
procedure set65;
procedure set200;
procedure set201;
procedure set202;
procedure set203;
procedure set204;
procedure set205;
procedure set206;
procedure set207;
procedure set208;
procedure set209;
procedure set300;
procedure set301;
procedure set302;
procedure set303;
procedure set304;
procedure set305;
procedure set306;
procedure set307;
procedure set308;
procedure set309;
procedure set310;
procedure set311;
procedure setend;
procedure setcbt;

procedure travel;
procedure settime;

variable tmp_hostile;
variable initial :=  0;
variable chip;
variable setgone;

procedure start begin
	if not(initial) then begin
		initial :=  1;
		set_self_team(TEAM_NECROPOLIS_GANGER);
		set_self_ai(AI_GHOUL_NASTY);
	end
end

procedure timed_event_p_proc begin
	if (fixed_param == 1) then begin
		set_local_var(9, 1);
	end
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(mstr(100));
end

procedure critter_p_proc begin
	if (global_var( GVAR_ENEMY_NECROPOLIS ) and self_can_see_dude) and (local_var(6) == 0) then begin
		dialogue_system_enter;
	end
	else if (tmp_hostile) then begin
		tmp_hostile := 0;
		set_global_var( GVAR_ENEMY_NECROPOLIS, 1 );
		attack(dude_obj);
	end
	else if (local_var(4) == 0 and (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6))) then begin
		dialogue_system_enter;
	end
	else if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
		if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
			dialogue_system_enter;
		end
	end
end

procedure destroy_p_proc begin
	set_global_var( GVAR_SET_DEAD, 1 );
	rm_timer_event(self_obj);
	inc_evil_critter
	rm_timer_event(self_obj);
end

procedure damage_p_proc begin
	tmp_hostile := 1;
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure travel begin
	load_map(MAP_WATRSHD, 1);
end

procedure talk_p_proc begin
	dude_look_at_self;

	get_reaction
	start_gdialog(15, self_obj, 4, 15, 4);
	gsay_start;
	if (global_var( GVAR_ENEMY_NECROPOLIS )) then begin
		tmp_hostile := 1;
	end
	if (tmp_hostile) then begin
		call set49;
	end
	else begin
		if (local_var(4)) then begin
			if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
				call set57;
			end
			else if (global_var( GVAR_MASTER_BLOWN ) and (local_var(7) == 0)) then begin
				call set52;
			end
			else if (day) then begin
				call set207;
			end
			else begin
				if (global_var( GVAR_NECROP_MUTANTS_KILLED ) >= 1) then begin
					if (local_var(5) == 1) then begin
						call set50;
					end
					if (global_var( GVAR_SIGNAL_REWARD ) bwand 1) then begin
						call set42;
					end
					else if (global_var( GVAR_PLAYER_CAPTURED ) == 1) then begin
						call set29;
					end
					else if ((global_var( GVAR_NECROP_MUTANTS_KILLED ) == 2) or (global_var( GVAR_WATERSHED_MUTANTS_LEAVE ) != 0)) then begin
						call set18;
					end
					else begin
						if (local_var(9)) then begin
							call set25;
						end
						else begin
							call set51;
						end
					end
				end
				else begin
					call set51;
				end
			end
		end
		else begin
			add_timer_event(self_obj, game_ticks(600), 1);
			set_local_var(4, 1);
			if ((global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) and (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2)) then begin
				call set57;
			end
			else if (global_var( GVAR_MASTER_BLOWN ) and (local_var(7) == 0)) then begin
				call set52;
			end
			else if ((global_var( GVAR_NECROP_MUTANTS_KILLED ) == 2) or (global_var( GVAR_WATERSHED_MUTANTS_LEAVE ) != 0)) then begin
				call set30;
			end
			else if (global_var( GVAR_VATS_BLOWN ) != 2) then begin
				if (global_var( GVAR_PLAYER_CAPTURED ) == 1) then begin
					call set16;
				end
				else begin
					call set00;
				end
			end
		end
	end
	gsay_end;
	end_dialogue;
end

procedure setend
begin
end

procedure setcbt
begin
	tmp_hostile := 1;
end

procedure settime
begin
	call setcbt;
end

procedure set00
begin
	gsay_reply( SCRIPT_SET, 101 );
	NOption( 102, set00_2, 5 );
	BOption( 103, set00a, 4 );
	BOption( 104, set00b, 4 );
	NOption( 105, set05, -3 );
end

procedure set00_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		UpReact
		call set01;
	end
	else begin
		BigDownReact
		call set02;
	end
end

procedure set01
begin
	gsay_reply( SCRIPT_SET, 106 );
	NOption( 107, set09, 7 );
	NOption( 108, set01a, 4 );
	NOption( 109, set14, 4 );
end

procedure set01a
begin
	gsay_reply( SCRIPT_SET, 110 );
	NOption( 111, set12, 0 );
end

procedure set02
begin
	gsay_reply( SCRIPT_SET, 112 );
	BOption( 113, set03, 5 );
	GOption( 114, set02a, 5 );
	NOption( 115, set01, 0 );
end

procedure set03
begin
	gsay_message( SCRIPT_SET, 116, 51 );
	call setcbt;
end

procedure set05
begin
	gsay_reply( SCRIPT_SET, 121 );
	NOption( 122, set06, -3 );
	NOption( 123, set08, -3 );
end

procedure set06
begin
	set_global_var( GVAR_NECROP_MUTANTS_KILLED, 1 );
	gsay_reply( SCRIPT_SET, 124 );
	NOption( 125, setend, 4 );
	NOption( 126, set07, 4 );
	NOption( 127, setend, -3 );
	NOption( 128, set07, -3 );
end

procedure set07
begin
	gsay_message( SCRIPT_SET, 129, 50 );
	call setend;
end

procedure set08
begin
	gsay_message( SCRIPT_SET, 130, 50 );
	call settime;
end

procedure set09_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call set10;
	end
	else begin
		if (dude_is_male) then begin
			call set03;
		end
		else begin
			call set04;
		end
	end
end

procedure set09
begin
	gsay_reply( SCRIPT_SET, 131 );
	NOption( 132, set09_2, 6 );
	BOption( 133, set09a, 4 );
	NOption( 134, set15, 5 );
end

procedure set10
begin
	gsay_reply( SCRIPT_SET, 135 );
	NOption( 136, set10a, 6 );
	BOption( 137, setcbt, 4 );
end

procedure set10a
begin
	gsay_reply( SCRIPT_SET, 138 );
	NOption( 139, set11, 6 );
end

procedure set11
begin
	gsay_reply( SCRIPT_SET, 140 );
	NOption( 141, set12, 5 );
	NOption( 142, set08, 4 );
end

procedure set12
begin
	gsay_reply( SCRIPT_SET, 143 );
	NOption( 144, set06, 4 );
	BOption( 145, set12_2, 4 );
end

procedure set12_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call set08;
	end
	else begin
		call set03;
	end
end

procedure set13
begin
	gsay_reply( SCRIPT_SET, 146 );
	NOption( 147, set06, 4 );
	BOption( 148, set13_2, 4 );
end

procedure set13_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call set08;
	end
	else begin
		call set03;
	end
end

procedure set14
begin
	gsay_reply( SCRIPT_SET, 149 );
	NOption( 150, set12, 4 );
	NOption( 151, set15, 5 );
end

procedure set15
begin
	gsay_reply( SCRIPT_SET, 152 );
	NOption( 153, set12, 4 );
	NOption( 154, set12_2, 4 );
	BOption( 155, set09a, 4 );
end

procedure set16
begin
	gsay_reply( SCRIPT_SET, 156 );
	NOption( 157, set17, 4 );
	BOption( 158, set03, 4 );
	NOption( 159, set17, -3 );
	BOption( 160, set03, -3 );
end

procedure set17
begin
	gsay_reply( SCRIPT_SET, 161 );
	NOption( 162, set17_2, 7 );
	NOption( 163, set06, 4 );
	BOption( 164, set03, 4 );
	NOption( 159, set06, -3 );
	BOption( 160, set03, -3 );
end

procedure set17_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call set09;
	end
	else begin
		call set03;
	end
end

procedure set18
begin
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 1 );
	gsay_reply( SCRIPT_SET, 165 );
	NOption( 166, setend, 4 );
	BOption( 167, set18a, 4 );
	NOption( 168, setend, -3 );
end

procedure set19_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call set20;
	end
	else begin
		call set23;
	end
end

procedure set19
begin
	gsay_reply( SCRIPT_SET, 169 );
	NOption( 170, set19_2, 5 );
	NOption( 171, setend, 4 );
	NOption( 172, set24, 4 );
end

procedure set20
begin
	gsay_reply( SCRIPT_SET, 173 );
	NOption( 174, set21, 4 );
	NOption( 175, setend, 4 );
end

procedure set21
begin
	gsay_reply( SCRIPT_SET, 176 );
	NOption( 177, set22, 4 );
	NOption( 178, set21a, 4 );
end

procedure set21a
begin
	gsay_message( SCRIPT_SET, 179, 50 );
	call setend;
end

procedure set22
begin
	gsay_reply( SCRIPT_SET, 180 );
	NOption( 181, setend, 5 );
end

procedure set23
begin
	gsay_reply( SCRIPT_SET, 182 );
	NOption( 183, setend, 4 );
	BOption( 184, setcbt, 4 );
end

procedure set24
begin
	gsay_reply( SCRIPT_SET, 185 );
	NOption( 186, setend, 4 );
	BOption( 187, setcbt, 4 );
end

procedure set25
begin
	gsay_reply( SCRIPT_SET, 188 );
	NOption( 189, set25_2, 5 );
	NOption( 190, set28, 4 );
	NOption( 191, set28, -3 );
end

procedure set25_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call set26;
	end
	else begin
		call set27;
	end
end

procedure set26
begin
	set_local_var(5, 1);
	gsay_message( SCRIPT_SET, 192, 50 );
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 1 );
	call setend;
end

procedure set27
begin
	gsay_message( SCRIPT_SET, 193, 51 );
	call setcbt;
end

procedure set28
begin
	gsay_message( SCRIPT_SET, 194, 50 );
	call setend;
end

procedure set29
begin
	gsay_message( SCRIPT_SET, 195, 50 );
	call setcbt;
end

procedure set30
begin
	gsay_reply( SCRIPT_SET, 196 );
	NOption( 197, set31, 5 );
	NOption( 198, set34, 5 );
	NOption( 199, set38, 4 );
	NOption( 200, set40, 4 );
	NOption( 201, set41, -3 );
end

procedure set31
begin
	gsay_reply( SCRIPT_SET, 202 );
	NOption( 203, set32, 5 );
	BOption( 204, setcbt, 5 );
end

procedure set32
begin
	gsay_reply( SCRIPT_SET, 205 );
	BOption( 206, setcbt, 4 );
	NOption( 207, set33, 4 );
end

procedure set33
begin
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 1 );
	gsay_reply( SCRIPT_SET, 208 );
	call setend;
end

procedure set34
begin
	gsay_reply( SCRIPT_SET, 209 );
	NOption( 210, set18, 5 );
	NOption( 211, set34_2, 5 );
end

procedure set34_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call set35;
	end
	else begin
		call set36;
	end
end

procedure set35
begin
	gsay_message( SCRIPT_SET, 212, 50 );
	call setend;
end

procedure set36
begin
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 1 );
	gsay_message( SCRIPT_SET, 213, 50 );
	call setend;
end

procedure set38
begin
	gsay_reply( SCRIPT_SET, 214 );
	NOption( 215, set39, 4 );
	NOption( 216, setend, 4 );
	BOption( 217, setcbt, 4 );
end

procedure set39
begin
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 1 );
	gsay_message( SCRIPT_SET, 218, 50 );
	call setend;
end

procedure set40
begin
	gsay_reply( SCRIPT_SET, 219 );
	NOption( 220, set40_2, 4 );
	BOption( 221, setcbt, 4 );
end

procedure set40_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call set34;
	end
	else begin
		call set48;
	end
end

procedure set41
begin
	gsay_reply( SCRIPT_SET, 222 );
	NOption( 223, set08, -3 );
	BOption( 224, setcbt, -3 );
end

procedure set42
begin
	gsay_reply( SCRIPT_SET, 225 );
	NOption( 226, set42_2, 4 );
	BOption( 227, setcbt, 4 );
	NOption( 228, setend, 4 );
	NOption( 229, setend, -3 );
end

procedure set43
begin
	gsay_reply( SCRIPT_SET, 230 );
	NOption( 231, set44, 7 );
	NOption( 232, set47, 4 );
	BOption( 233, set48, 4 );
end

procedure set44
begin
	gsay_reply( SCRIPT_SET, 234 );
	if (is_success(do_check(dude_obj, STAT_iq, 0))) then begin
		NOption( 235, set46, 13 );
	end
	NOption( 236, setend, 4 );
	NOption( 237, set45, 4 );
end

procedure set42_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
		call set43;
	end
	else begin
		call set48;
	end
end

procedure set45
begin
	gsay_reply( SCRIPT_SET, 238 );
	BOption( 239, setcbt, 4 );
	NOption( 240, setend, 4 );
	BOption( 241, set45a, 4 );
end

procedure set45a
begin
	gsay_message( SCRIPT_SET, 242, 51 );
	call setcbt;
end

procedure set46
begin
	gsay_reply( SCRIPT_SET, 243 );
	NOption( 244, setend, 4 );
	BOption( 245, setcbt, 4 );
end

procedure set47
begin
	gsay_message( SCRIPT_SET, 246, 50 );
	call setend;
end

procedure set48
begin
	gsay_message( SCRIPT_SET, 247, 51 );
	call setcbt;
end

procedure set49
begin
	if (local_var(6) != 1) then begin
		set_local_var(6, 1);
		gsay_message( SCRIPT_SET, 248, 51 );
	end
	call setcbt;
end

procedure set50
begin
	set_local_var(5, 2);
	gsay_reply( SCRIPT_SET, 249 );
	NOption( 250, setend, 5 );
	BOption( 251, setcbt, 5 );
end

procedure set51
begin
	gsay_message( SCRIPT_SET, 252, 50 );
	call setend;
end

procedure set52
begin
	set_local_var(7, 1);
	gsay_reply( SCRIPT_SET, 253 );
	GOption( 254, set53, 4 );
	BOption( 255, set03, 4 );
	GOption( 256, set52a, -3 );
end

procedure set52a
begin
	gsay_reply( SCRIPT_SET, 257 );
	GOption( 258, set53, -3 );
end

procedure set53
begin
	gsay_reply( SCRIPT_SET, 259 );
	NOption( 260, set54, 5 );
	NOption( 261, set56, 4 );
	NOption( 262, setend, 4 );
	NOption( 263, set56, -3 );
	NOption( 264, setend, -3 );
end

procedure set54
begin
	gsay_reply( SCRIPT_SET, 265 );
	NOption( 266, set55, 4 );
	NOption( 267, set56, 4 );
end

procedure set55
begin
	setgone := 1;
	gsay_message( SCRIPT_SET, 268, 50 );
	call setend;
end

procedure set56
begin
	set_global_var( GVAR_SIGNAL_REWARD, global_var( GVAR_SIGNAL_REWARD ) bwor 2 );
	gsay_message( SCRIPT_SET, 269, 50 );
	call setend;
end

procedure set57
begin
	gsay_reply( SCRIPT_SET, 270 );
	/* has how many? */    if (dude_item_count( PID_PUMP_PARTS )) then begin
		NOption( 271, set57_2, 6 );
	end
	BOption( 272, set63, 4 );
	BOption( 273, setcbt, 4 );
	NOption( 274, set64, 4 );
	NOption( 275, set63, -3 );
end

procedure set57_2
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
		call set58;
	end
	else begin
		call set62;
	end
end

procedure set58
begin
	gsay_reply( SCRIPT_SET, 276 );
	NOption( 277, set59, 5 );
	BOption( 278, set60, 4 );
end

procedure set59
begin
	set_global_var( GVAR_NECROP_WATER_PUMP_FIXED, 1 );
	set_global_var( GVAR_HUB_FILLER_30, 1 );
	gsay_reply( SCRIPT_SET, 279 );
	NOption( 280, travel, 4 );
end

procedure set60
begin
	gsay_reply( SCRIPT_SET, 281 );
	NOption( 282, set06, 4 );
	BOption( 283, setcbt, 4 );
end

procedure set61
begin
	gsay_message( SCRIPT_SET, 284, 51 );
	call setcbt;
end

procedure set62
begin
	gsay_reply( SCRIPT_SET, 285 );
	BOption( 286, setcbt, 4 );
end

procedure set63
begin
	gsay_reply( SCRIPT_SET, 287 );
	BOption( 288, setcbt, 4 );
	BOption( 289, setcbt, -3 );
end

procedure set64
begin
	gsay_reply( SCRIPT_SET, 290 );
	BOption( 291, set63, 4 );
	NOption( 292, set65, 4 );
	BOption( 293, setcbt, 4 );
end

procedure set65 begin
	chip := dude_item( PID_WATER_CHIP );
	if (chip != 0) then begin
		rm_obj_from_inven(dude_obj, chip);
		set_global_var( GVAR_NECROP_WATER_CHIP_TAKEN, 0 );
	end
	gsay_message( SCRIPT_SET, 294, 51 );
	BigDownReact
end

procedure set00a
begin
	if (dude_is_male) then begin
		call set03;
	end
	else begin
		call set04;
	end
end

procedure set00b
begin
	BigDownReact
	call set02;
end

procedure set02a
begin
	UpReact
	call set01;
end

procedure set04
begin
	gsay_reply( SCRIPT_SET, 117 );
	BOption( 118, setcbt, 4 );
	BOption( 119, setcbt, 4 );
	BOption( 120, setcbt, -3 );
end

procedure set09a
begin
	if (dude_is_male) then begin
		call set03;
	end
	else begin
		call set04;
	end
end

procedure set18a
begin
	BigDownReact
	call set19;
end

procedure set200
begin
	gsay_message( SCRIPT_SET, 295, 50 );
end

procedure set201
begin
	gsay_message( SCRIPT_SET, 296, 50 );
end

procedure set202
begin
	gsay_message( SCRIPT_SET, 297, 50 );
end

procedure set203
begin
	gsay_message( SCRIPT_SET, 298, 50 );
end

procedure set204
begin
	gsay_message( SCRIPT_SET, 299, 50 );
end

procedure set205
begin
	gsay_message( SCRIPT_SET, 300, 50 );
end

procedure set206
begin
	gsay_message( SCRIPT_SET, 301, 50 );
end

procedure set207
begin
	gsay_message( SCRIPT_SET, 302, 50 );
end

procedure set208
begin
	gsay_message( SCRIPT_SET, 303, 50 );
end

procedure set209
begin
	gsay_message( SCRIPT_SET, 304, 50 );
end

procedure set300
begin
	gsay_message( SCRIPT_SET, 305, 50 );
end

procedure set301
begin
	gsay_message( SCRIPT_SET, 306, 50 );
end

procedure set302
begin
	gsay_message( SCRIPT_SET, 307, 50 );
end

procedure set303
begin
	gsay_message( SCRIPT_SET, 308, 50 );
end

procedure set304
begin
	gsay_message( SCRIPT_SET, 309, 50 );
end

procedure set305
begin
	gsay_message( SCRIPT_SET, 310, 50 );
end

procedure set306
begin
	gsay_message( SCRIPT_SET, 311, 50 );
end

procedure set307
begin
	gsay_message( SCRIPT_SET, 312, 50 );
end

procedure set308
begin
	gsay_message( SCRIPT_SET, 313, 50 );
end

procedure set309
begin
	gsay_message( SCRIPT_SET, 314, 50 );
end

procedure set310
begin
	gsay_message( SCRIPT_SET, 315, 50 );
end

procedure set311
begin
	gsay_message( SCRIPT_SET, 316, 50 );
end
