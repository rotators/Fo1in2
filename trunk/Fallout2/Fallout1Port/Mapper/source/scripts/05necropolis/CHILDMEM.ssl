/*

	Necropolis - CoC member

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_CHILDMEM
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure pre_dialogue;

procedure childend;
procedure childcbt;
procedure child_heal;
procedure child_pois;
procedure child00;
procedure child01;
procedure child02;
procedure child03;
procedure child04;
procedure child04a;
procedure child05;
procedure child05a;
procedure child06;
procedure child07;
procedure child08;
procedure child09;
procedure child09a;
procedure child10;
procedure child11;
procedure child12;
procedure child13;
procedure child14;
procedure child15;
procedure child16;

variable init_teams := 0;
variable tmp_hostile;
variable max_hp;
variable current_hp;
variable cur_pois;
variable hp_injured;
variable cost;
variable pois_cost;
variable cheat;
variable RADCOUNT := 0;

procedure start
begin


	if (not(init_teams)) then begin
		set_self_team(TEAM_CATHEDRAL );
		set_self_ai( AI_BRAINWASHED_CHILDREN );
		init_teams := 1;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			if (local_var(5) == 0) then begin
				call pre_dialogue;
			end
			else begin
				call childend;
			end
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					script_overrides;
					display_msg(message_str(SCRIPT_CHILDMEM, 100));
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						tmp_hostile := 1;
					end
					else begin
						if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
							if (tmp_hostile) then begin
								tmp_hostile := 0;
								attack(dude_obj);
							end
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	max_hp := dude_max_hp;
	current_hp := dude_cur_hp;
	RADCOUNT := dude_rads;
	get_reaction
	start_gdialog(41, self_obj, 4, -1, -1);
	gsay_start;
	call child00;
	gsay_end;
	end_dialogue;
end

procedure pre_dialogue
begin
	max_hp := dude_max_hp;
	current_hp := dude_cur_hp;
	RADCOUNT := dude_rads;
	if (local_var(4)) then begin
		call child16;
	end
	else begin
		if (global_var( GVAR_SUPER_MUTANTS_KILLED ) > 0) then begin
			call child15;
		end
		else begin
			call talk_p_proc;
		end
	end
end

procedure childend
begin
end

procedure childcbt
begin
	tmp_hostile := 1;
end

////////////////////////////////////////////////////////////////////////////////

procedure child_heal begin
	game_time_advance(game_ticks(600 * hp_injured));
	critter_heal(dude_obj, hp_injured);
	set_v13_days_left(-1);
end

procedure child_pois begin
	game_time_advance(game_ticks(1800));
	cur_pois := dude_poison_stat;
	poison(dude_obj, -cur_pois);
	set_v13_days_left(-1);
end

////////////////////////////////////////////////////////////////////////////////

procedure child00
begin
	gsay_reply(41, 101);
	giq_option( 4, SCRIPT_CHILDMEM, 102, child04, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_CHILDMEM, 103, child11, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_CHILDMEM, 104, child01, NEUTRAL_REACTION );
end

procedure child01
begin
	gsay_message(41, 105, 50);
	if (current_hp < max_hp) then begin
		hp_injured := max_hp - current_hp;
		call child_heal;
		call child03;
	end
	else begin
		call child02;
	end
end

procedure child02
begin
	gsay_message(41, 106, 50);
	call childend;
end

procedure child03
begin
	gsay_message(41, 107, 50);
	call childend;
end

procedure child04
begin
	variable LVar0 := 0;
	if (local_var(1) >= 3) then begin
		LVar0 := 5;
		pois_cost := 12;
	end
	else begin
		if (local_var(1) < 2) then begin
			LVar0 := 20;
			pois_cost := 50;
		end
		else begin
			LVar0 := 10;
			pois_cost := 25;
		end
	end
	hp_injured := max_hp - current_hp;
	cost := (hp_injured * LVar0) + pois_cost;
	cheat := 3 * cost / 4;
	if (hp_injured > 0) then begin
		gsay_message(41, 108, 50);
	end
	else begin
		gsay_message(41, 109, 50);
	end
	if (dude_poison_stat != 0) then begin
		gsay_message(41, 110, 50);
	end
	if (RADCOUNT > 50) then begin
		gsay_message(41, 111, 50);
	end
	if ((hp_injured > 0) or (dude_poison_stat != 0)) then begin
		gsay_reply(41, message_str(SCRIPT_CHILDMEM, 113) + cost + message_str(SCRIPT_CHILDMEM, 114));
		giq_option( 3, SCRIPT_CHILDMEM, 115, child04a, NEUTRAL_REACTION );
		giq_option( 3, SCRIPT_CHILDMEM, 116, childend, NEUTRAL_REACTION );
		giq_option( 3, SCRIPT_CHILDMEM, 117, child09, NEUTRAL_REACTION );
		giq_option( 3, SCRIPT_CHILDMEM, message_str(SCRIPT_CHILDMEM, 118) + cheat + message_str(SCRIPT_CHILDMEM, 119), child05, NEUTRAL_REACTION );
	end
end

procedure child04a
begin
	if (cost > dude_caps) then begin
		call child08;
	end
	else begin
		call child06;
	end
end

procedure child05
begin
	gsay_reply(41, 120);
	giq_option( 3, SCRIPT_CHILDMEM, 121, child04a, NEUTRAL_REACTION );
	giq_option( 3, SCRIPT_CHILDMEM, 122, child05a, NEUTRAL_REACTION );
end

procedure child05a
begin
	set_local_var(5, 1);
	call childend;
end

procedure child06
begin
	if (dude_is_male) then begin
		gsay_message(41, 123, 50);
	end
	else begin
		gsay_message(41, 124, 50);
	end
	dude_caps_adjust( -cost );
	gfade_out(1);
	gfade_in(1);
	if (hp_injured > 0) then begin
		call child_heal;
	end
	if (dude_poison_stat != 0) then begin
		call child_pois;
	end
	call child07;
end

procedure child07
begin
	gsay_message(41, 125, 50);
	call childend;
end

procedure child08
begin
	if (cost > dude_caps) then begin
		cost := dude_caps;
	end
	gsay_reply(41, 126);
	if (dude_caps > 0) then begin
		giq_option( 3, SCRIPT_CHILDMEM, 127, child06, NEUTRAL_REACTION );
	end
	giq_option( 3, SCRIPT_CHILDMEM, 128, childend, NEUTRAL_REACTION );
end

procedure child09
begin
	gsay_reply(41, 129);
	if (dude_caps > 0) then begin
		giq_option( 3, SCRIPT_CHILDMEM, 130, child09a, NEUTRAL_REACTION );
	end
	giq_option( 3, SCRIPT_CHILDMEM, 131, childend, NEUTRAL_REACTION );
end

procedure child09a
begin
	if (dude_caps >= cost) then begin
		call child10;
	end
	else begin
		cost := dude_caps;
		call child06;
	end
end

procedure child10
begin
	gsay_message(41, 132, 50);
	call child06;
end

procedure child11
begin
	gsay_reply(41, 133);
	giq_option( 3, SCRIPT_CHILDMEM, 134, childend, NEUTRAL_REACTION );
	giq_option( 3, SCRIPT_CHILDMEM, 135, child12, NEUTRAL_REACTION );
end

procedure child12
begin
	gsay_reply(41, 136);
	giq_option( 3, SCRIPT_CHILDMEM, 137, child14, NEUTRAL_REACTION );
	giq_option( 3, SCRIPT_CHILDMEM, 138, child13, NEUTRAL_REACTION );
end

procedure child13
begin
	gsay_message(41, 139, 50);
	call childend;
end

procedure child14
begin
	gsay_reply(41, 140);
	giq_option( 3, SCRIPT_CHILDMEM, 141, childend, NEUTRAL_REACTION );
end

procedure child15
begin
	float_msg(self_obj, message_str(SCRIPT_CHILDMEM, 142), 7);//    {142}{}{We have no time to talk. We are leaving. This place is dangerous for us.}
	call childend;
end

procedure child16
begin
	float_msg(self_obj, message_str(SCRIPT_CHILDMEM, 143), 7);//    {143}{}{Why are you doing this? We will do you no harm!}
	call childcbt;
end

procedure damage_p_proc begin
	set_local_var(4, 1);
end

procedure destroy_p_proc begin
	inc_good_critter
end
