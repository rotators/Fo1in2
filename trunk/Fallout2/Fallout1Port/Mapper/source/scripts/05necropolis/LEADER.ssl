/*

	Necropolis - Leader

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\MAPNECRO.h"

#define NAME                    SCRIPT_LEADER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure combat_p_proc;
procedure combat_rads_inc;

procedure leader00;
procedure leader02;
procedure leader03;
procedure leader03a;
procedure leader04;
procedure leader04a;
procedure leader04b;
procedure leader05;
procedure leader05a;
procedure leader06;
procedure leader06a;
procedure leader06b;
procedure leader07;
procedure leader08;
procedure leader09;
procedure leader10;
procedure leader10a;
procedure leader11;
procedure leader12;
procedure leader13;
procedure leader14;
procedure leader15;
procedure leader15a;
procedure leader15b;
procedure leader16;
procedure leader17;
procedure leader18;
procedure leader19;
procedure leader19a;
procedure leader19b;
procedure leader20;
procedure leader21;
procedure leader22;
procedure leader23;
procedure leader24;
procedure leader25;
procedure leader26;
procedure leader27;
procedure leader28;
procedure leader29;
procedure leader30;
procedure leader31;
procedure leadercbt;
procedure leaderend;

variable tmp_hostile;
variable init_teams := 0;
variable has_parts;
variable repair_skill;
variable stuff;

procedure start begin
	if (not(init_teams)) then begin
		set_self_team(TEAM_NECROPOLIS_UNDERGROUND );
		set_self_ai( AI_GHOUL_NORMAL );
		init_teams := 1;
	end
end

procedure pickup_p_proc begin
	tmp_hostile := 1;
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_LEADER, 100));
end

procedure description_p_proc begin
	script_overrides;
	display_msg(message_str(SCRIPT_LEADER, 300));
end

procedure destroy_p_proc begin
	inc_inv_good_crit
end

procedure critter_p_proc begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			if (local_var(7) == 0) then begin
				set_local_var(7, 1);
				if (dude_is_armed) then begin
					float_msg(self_obj, message_str(SCRIPT_LEADER, 193), 8);
				end
				else begin
					float_msg(self_obj, message_str(SCRIPT_LEADER, 194), 8);
				end
			end
		end
	end
end

procedure talk_p_proc begin
	dude_look_at_critter;
	get_reaction
	has_parts := dude_item( PID_PUMP_PARTS );
	start_gdialog(81, self_obj, 4, -1, -1);
	gsay_start;
	if (local_var(4)) then begin
		if (local_var(1) < 2) then begin
			call leader30;
		end
		else begin
			if (necropolis_wpump_fixed) then begin
				call leader26;
			end
			else begin
				if (local_var(6) == 1) then begin
					call leader20;
				end
				else begin
					if (global_var( GVAR_NECROP_WATER_CHIP_TAKEN ) == 1) then begin
						call leader29;
					end
					else begin
						if (local_var(5) == 1) then begin
							if (has_parts) then begin
								call leader18;
							end
							else begin
								call leader16;
							end
						end
						else begin
							call leader00;
						end
					end
				end
			end
		end
	end
	else begin
		set_local_var(4, 1);
		call leader00;
	end
	gsay_end;
	end_dialogue;
end

procedure leadercbt
begin
	BigDownReact
	tmp_hostile := 1;
end

procedure leaderend
begin
end

procedure leader00
begin
	gsay_reply(81, 101);
	giq_option( 4, SCRIPT_LEADER, 102, leader04, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 103, leader03, NEUTRAL_REACTION );
	giq_option( -3, SCRIPT_LEADER, 104, leader02, NEUTRAL_REACTION );
end

procedure leader02
begin
	gsay_reply(81, 105);
	giq_option( -3, SCRIPT_LEADER, 106, leaderend, NEUTRAL_REACTION );
end

procedure leader03
begin
	gsay_reply(81, 107);
	giq_option( 4, SCRIPT_LEADER, 108, leader04, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 109, leader03a, BAD_REACTION );
	giq_option( 4, SCRIPT_LEADER, 110, leaderend, NEUTRAL_REACTION );
end

procedure leader03a
begin
	DownReact
	call leader30;
end

procedure leader04
begin
	gsay_reply(81, 111);
	if (global_var( GVAR_SET_DEAD ) != 1) then begin
		giq_option( 4, SCRIPT_LEADER, 112, leader05, NEUTRAL_REACTION );
	end
	else begin
		giq_option( 4, SCRIPT_LEADER, 113, leader23, NEUTRAL_REACTION );
	end
	giq_option( 5, SCRIPT_LEADER, 114, leader04a, NEUTRAL_REACTION );
	giq_option( 5, SCRIPT_LEADER, 115, leader04b, BAD_REACTION );
end

procedure leader04a
begin
	if (global_var( GVAR_SET_DEAD ) != 1) then begin
		call leader06;
	end
	else begin
		call leader07;
	end
end

procedure leader04b
begin
	DownReact
	call leader05;
end

procedure leader05
begin
	gsay_reply(81, 116);
	giq_option( 4, SCRIPT_LEADER, 117, leader05a, BAD_REACTION );
	giq_option( 4, SCRIPT_LEADER, 118, leader06, NEUTRAL_REACTION );
end

procedure leader05a
begin
	DownReact
	call leader06;
end

procedure leader06
begin
	gsay_reply(81, 119);
	giq_option( 4, SCRIPT_LEADER, 120, leader07, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 121, leader06a, BAD_REACTION );
	giq_option( 4, SCRIPT_LEADER, 122, leader08, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 123, leader06b, BAD_REACTION );
end

procedure leader06a
begin
	DownReact
	call leader08;
end

procedure leader06b
begin
	DownReact
	call leader07;
end

procedure leader07
begin
	gsay_reply(81, 124);
	giq_option( 6, SCRIPT_LEADER, 125, leader25, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 126, leader09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 127, leader24, NEUTRAL_REACTION );
end

procedure leader08
begin
	gsay_reply(81, 128);
	giq_option( 4, SCRIPT_LEADER, 129, leaderend, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 130, leader09, NEUTRAL_REACTION );
end

procedure leader09
begin
	gsay_reply(81, 131);
	giq_option( 4, SCRIPT_LEADER, 129, leader10, NEUTRAL_REACTION );
end

procedure leader10
begin
	gsay_reply(81, 132);
	giq_option( 4, SCRIPT_LEADER, 133, leader10a, BAD_REACTION );
	giq_option( 4, SCRIPT_LEADER, 134, leader11, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 135, leader11, NEUTRAL_REACTION );
end

procedure leader10a
begin
	DownReact
	call leader13;
end

procedure leader11
begin
	gsay_reply(81, 136);
	giq_option( 4, SCRIPT_LEADER, 137, leader12, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 138, leader14, NEUTRAL_REACTION );
end

procedure leader12
begin
	gsay_message(81, 139, 50);
	call leadercbt;
end

procedure leader13
begin
	gsay_reply(81, 140);
	giq_option( 4, SCRIPT_LEADER, 141, leader11, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 142, leadercbt, BAD_REACTION );
end

procedure leader14
begin
	gsay_reply(81, 143);
	giq_option( 4, SCRIPT_LEADER, 144, leader15, NEUTRAL_REACTION );
	if (has_parts) then begin
		giq_option( 4, SCRIPT_LEADER, 145, leader21, NEUTRAL_REACTION );
	end
end

procedure leader15
begin
	gsay_reply(81, 146);
	giq_option( 4, SCRIPT_LEADER, 147, leader12, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 148, leader15b, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 149, leader15a, BAD_REACTION );
end

procedure leader15a
begin
	DownReact
	call leader15b;
end

procedure leader15b
begin
	if (global_var( GVAR_NECROP_WATER_PUMP_FIXED ) != 2) then begin
		set_global_var( GVAR_NECROP_WATER_PUMP_FIXED, 1 );
	end
	set_local_var(5, 1);
	gsay_reply(81, 150);
	giq_option( 4, SCRIPT_LEADER, 151, leaderend, NEUTRAL_REACTION );
end

procedure leader16
begin
	gsay_reply(81, 152);
	giq_option( 4, SCRIPT_LEADER, 153, leader17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 154, leader12, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 155, leader22, NEUTRAL_REACTION );
end

procedure leader17
begin
	gsay_message(81, 156, 50);
end

procedure leader18
begin
	gsay_reply(81, 157);
	giq_option( 4, SCRIPT_LEADER, 158, leader19, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 159, leader12, NEUTRAL_REACTION );
end

procedure leader19
begin
	set_local_var(6, 1);
	repair_skill := has_skill(dude_obj, SKILL_REPAIR);
	if (repair_skill < 60) then begin
		call leader19a;
	end
	else begin
		call leader19b;
	end
end

procedure leader19a
begin
	stuff := create_object( PID_DEANS_ELECTRONICS, 0, 0 );
	add_obj_to_inven(dude_obj, stuff);
	stuff := create_object( PID_DEANS_ELECTRONICS, 0, 0 );
	add_obj_to_inven(dude_obj, stuff);
	stuff := create_object( PID_DEANS_ELECTRONICS, 0, 0 );
	add_obj_to_inven(dude_obj, stuff);
	gsay_message(81, 160, 50);
end

procedure leader19b
begin
	gsay_message(81, 161, 50);
end

procedure leader20
begin
	gsay_reply(81, 162);
	giq_option( 4, SCRIPT_LEADER, 163, leader17, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 164, leader12, NEUTRAL_REACTION );
end

procedure leader21
begin
	gsay_reply(81, 165);
	giq_option( 4, SCRIPT_LEADER, 166, leader19, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 167, leader12, NEUTRAL_REACTION );
end

procedure leader22
begin
	gsay_reply(81, 168);
	giq_option( 4, SCRIPT_LEADER, 169, leaderend, NEUTRAL_REACTION );
end

procedure leader23
begin
	gsay_reply(81, 170);
	giq_option( 4, SCRIPT_LEADER, 171, leader07, NEUTRAL_REACTION );
end

procedure leader24
begin
	gsay_reply(81, 172);
	giq_option( 4, SCRIPT_LEADER, 173, leader09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 129, leader10, NEUTRAL_REACTION );
end

procedure leader25
begin
	gsay_reply(81, 174);
	giq_option( 4, SCRIPT_LEADER, 175, leader09, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 176, leader24, NEUTRAL_REACTION );
end

procedure leader26
begin
	gsay_reply(81, 177);
	giq_option( 4, SCRIPT_LEADER, 178, leaderend, NEUTRAL_REACTION );
end

procedure leader27
begin
	gsay_reply(81, 179);
	giq_option( 4, SCRIPT_LEADER, 180, leader28, NEUTRAL_REACTION );
end

procedure leader28
begin
	gsay_reply(81, 181);
	giq_option( 4, SCRIPT_LEADER, 129, leaderend, NEUTRAL_REACTION );
end

procedure leader29
begin
	gsay_reply(81, 182);
	if (local_var(5) == 1) then begin
		giq_option( 4, SCRIPT_LEADER, 183, leader22, NEUTRAL_REACTION );
	end
	giq_option( 4, SCRIPT_LEADER, 184, leader12, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_LEADER, 185, leader31, NEUTRAL_REACTION );
end

procedure leader30
begin
	gsay_message(81, 186, 50);
end

procedure leader31
begin
	gsay_reply(81, 187);
	giq_option( 4, SCRIPT_LEADER, 189, leader15, NEUTRAL_REACTION );
	if (has_parts) then begin
		giq_option( 4, SCRIPT_LEADER, 145, leader21, NEUTRAL_REACTION );
	end
end

procedure combat_p_proc begin
end
