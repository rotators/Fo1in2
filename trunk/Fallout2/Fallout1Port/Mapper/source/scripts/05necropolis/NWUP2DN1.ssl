import variable Manhole_Pointer_Top;
import variable Use_Manhole_Top;
import variable Manhole_Pointer_Middle;
import variable Use_Manhole_Middle;
import variable Manhole_Pointer_Bottom;
import variable Use_Manhole_Bottom;

#include "..\headers\define.h"

#define NAME                    SCRIPT_NWUP2DN1

#include "..\headers\command.h"
#include "..\headers\MAPNECRO.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure timed_event_p_proc;

procedure move_elevation;

#define EVENT_USE    (1)

variable Cover_Ptr;
variable cover_state;

procedure start begin
	/*if ((anim_busy(dude_obj) != 0) or (anim_busy(dude_obj) == 0)) then begin
	end*/
end

procedure use_p_proc begin
	Cover_Ptr:=tile_contains_pid_obj(self_tile,self_elevation,PID_SEWER_COVER);

   // Can't use the manhole if the cover is still closed!
	check_manhole
end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_USE) then begin
      script_overrides;
      move_to(dude_obj, 19943, 0);
   end
end

procedure move_elevation begin
	script_overrides;
	add_timer_event(self_obj, 2, EVENT_USE);
	Use_Manhole_Top := 1;
end




// Why the hell is this so big??
/*import variable Manhole_Pointer_Top;
import variable Use_Manhole_Top;
import variable Manhole_Pointer_Middle;
import variable Use_Manhole_Middle;
import variable Manhole_Pointer_Bottom;
import variable Use_Manhole_Bottom;

#include "..\headers\define.h"

procedure start;
procedure use_top;
procedure use_middle;
procedure use_bottom;


procedure start
begin
	if (script_action == 6) then begin//use_p_proc - Use, Activate, or Manipulate the Object or Item
		if ((anim_busy(dude_obj) != 0) or (anim_busy(dude_obj) == 0)) then begin
			script_overrides;
			move_to(dude_obj, 19943, 0);
		end
	end
end

procedure use_top
begin
	if ((anim_busy(dude_obj) != 0) or (anim_busy(dude_obj) == 0)) then begin
		script_overrides;
		if (self_pid == PID_SEWER_COVER) then begin
			if (Use_Manhole_Top) then begin
				Use_Manhole_Top := 0;
				animate_stand_obj(self_obj);
			end
			else begin
				Use_Manhole_Top := 1;
				add_timer_event(self_obj, 7, 1);
				animate_stand_reverse_obj(self_obj);
			end
		end
		else begin
			if (Use_Manhole_Top) then begin
				add_timer_event(self_obj, 7, 1);
			end
			else begin
				Use_Manhole_Top := 1;
				animate_stand_reverse_obj(Manhole_Pointer_Top);
				add_timer_event(self_obj, 7, 1);
			end
		end
	end
end

procedure use_middle
begin
	if ((anim_busy(dude_obj) != 0) or (anim_busy(dude_obj) == 0)) then begin
		script_overrides;
		if (self_pid == PID_SEWER_COVER) then begin
			if (Use_Manhole_Middle) then begin
				Use_Manhole_Middle := 0;
				animate_stand_obj(self_obj);
			end
			else begin
				Use_Manhole_Middle := 1;
				add_timer_event(self_obj, 7, 1);
				animate_stand_reverse_obj(self_obj);
			end
		end
		else begin
			if (Use_Manhole_Middle) then begin
				add_timer_event(self_obj, 7, 1);
			end
			else begin
				Use_Manhole_Middle := 1;
				animate_stand_reverse_obj(Manhole_Pointer_Middle);
				add_timer_event(self_obj, 7, 1);
			end
		end
	end
end

procedure use_bottom
begin
	if ((anim_busy(dude_obj) != 0) or (anim_busy(dude_obj) == 0)) then begin
		script_overrides;
		if (self_pid == PID_SEWER_COVER) then begin
			if (Use_Manhole_Bottom) then begin
				Use_Manhole_Bottom := 0;
				animate_stand_obj(self_obj);
			end
			else begin
				Use_Manhole_Bottom := 1;
				add_timer_event(self_obj, 7, 1);
				animate_stand_reverse_obj(self_obj);
			end
		end
		else begin
			if (Use_Manhole_Bottom) then begin
				add_timer_event(self_obj, 7, 1);
			end
			else begin
				Use_Manhole_Bottom := 1;
				animate_stand_reverse_obj(Manhole_Pointer_Bottom);
				add_timer_event(self_obj, 7, 1);
			end
		end
	end
end

*/
