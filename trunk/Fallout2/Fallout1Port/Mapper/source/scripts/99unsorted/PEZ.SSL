#include "..\headers\define.h"

procedure start;
procedure talk_p_proc;//    script_action == 11
procedure pez00;
procedure pez01;
procedure pez02;
procedure pez03;
procedure pez04;
procedure pez05;
procedure pezdone;
procedure pezend;
procedure timeforwhat;

variable my_tile;
variable knowstart;
variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable critter_tile;
variable HEREBEFORE;
variable PICK;
variable init_teams := 0;

import variable is_crypt;
import variable is_fool;
import variable broken_gen;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable reactionamt := 50;
variable reaction_level := 2;
variable got_reaction;
variable badguy;
variable exit_line;


procedure start
begin
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//display_msg("PEZ.INT - Contact Sduibek if you see this message.");
//display_msg("PEZ.INT - Contact Sduibek if you see this message.");
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (init_teams == 0) then begin
/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 4);
		init_teams := 1;
	end
	if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
		call timeforwhat;
	end
	else begin
		if (knowstart == 0) then begin
			my_tile := tile_num(self_obj);
			knowstart := 1;
		end
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
			script_overrides;
			display_msg(message_str(409, 100));
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					loopcount := loopcount + 1;
					if (loopcount > 40) then begin
						loopcount := 0;
						if (noevent == 0) then begin
							noevent := 1;
							rndx := 5 + random(1, 10);
							add_timer_event(self_obj, game_ticks(rndx), 0);
						end
					end
				end
				else begin
					if (script_action == 18) then begin
						rm_timer_event(self_obj);
						rm_timer_event(self_obj);
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if (broken_gen == 1) then begin
		call pez00;
	end
	else begin
		if (global_var(QUEST_BONEYARD_7_GANG_WAR)) then begin
			call pez01;
		end
		else begin
			if (is_crypt == 1) then begin
				call pez02;
			end
			else begin
				if (is_fool == 1) then begin
					call pez03;
				end
				else begin
					call pez04;
				end
			end
		end
	end
end

procedure pez00
begin
	PICK := random(1, 4);
	if (PICK == 1) then begin
		set_global_var(ANIMAL_FRIEND_RADSCORPS, 1);
	end
	if (PICK == 1) then begin
		float_msg(self_obj, message_str(409, 101), 4);
	end
	else begin
		if (PICK == 2) then begin
			float_msg(self_obj, message_str(409, 102), 4);
		end
		else begin
			if (PICK == 3) then begin
				float_msg(self_obj, message_str(409, 103), 4);
			end
			else begin
				if (PICK == 4) then begin
					float_msg(self_obj, message_str(409, 104), 4);
				end
			end
		end
	end
end

procedure pez01
begin
	PICK := random(1, 5);
	if (PICK == 1) then begin
		set_global_var(GANG_1_GVAR, 1);
	end
	if (PICK == 1) then begin
		float_msg(self_obj, message_str(409, 105), 4);
	end
	else begin
		if (PICK == 2) then begin
			float_msg(self_obj, message_str(409, 106), 4);
		end
		else begin
			if (PICK == 3) then begin
				float_msg(self_obj, message_str(409, 107), 4);
			end
			else begin
				if (PICK == 4) then begin
					float_msg(self_obj, message_str(409, 108), 4);
				end
				else begin
					if (PICK == 5) then begin
						float_msg(self_obj, message_str(409, 109), 4);
					end
				end
			end
		end
	end
end

procedure pez02
begin
	PICK := random(1, 4);
	if (PICK == 1) then begin
		float_msg(self_obj, message_str(409, 110), 4);
	end
	else begin
		if (PICK == 2) then begin
			float_msg(self_obj, message_str(409, 111), 4);
		end
		else begin
			if (PICK == 3) then begin
				float_msg(self_obj, message_str(409, 112), 4);
			end
			else begin
				if (PICK == 4) then begin
					float_msg(self_obj, message_str(409, 113), 4);
				end
			end
		end
	end
end

procedure pez03
begin
	PICK := random(1, 5);
	if (PICK == 1) then begin
		float_msg(self_obj, message_str(409, 114), 4);
	end
	else begin
		if (PICK == 2) then begin
			float_msg(self_obj, message_str(409, 115), 4);
		end
		else begin
			if (PICK == 3) then begin
				float_msg(self_obj, message_str(409, 116), 4);
			end
			else begin
				if (PICK == 4) then begin
					float_msg(self_obj, message_str(409, 117), 4);
				end
				else begin
					if (PICK == 5) then begin
						float_msg(self_obj, message_str(409, 118), 4);
					end
				end
			end
		end
	end
end

procedure pez04
begin
	PICK := random(1, 7);
	if (PICK == 3) then begin
		set_global_var(DOGMEAT_SOMETHING_0, 1);
	end
	if (PICK == 1) then begin
		float_msg(self_obj, message_str(409, 119), 4);
	end
	else begin
		if (PICK == 2) then begin
			float_msg(self_obj, message_str(409, 120), 4);
		end
		else begin
			if (PICK == 3) then begin
				float_msg(self_obj, message_str(409, 121), 4);
			end
			else begin
				if (PICK == 4) then begin
					float_msg(self_obj, message_str(409, 122), 4);
				end
				else begin
					if (PICK == 5) then begin
						float_msg(self_obj, message_str(409, 123), 4);
					end
					else begin
						if (PICK == 6) then begin
							call pez05;
						end
						else begin
							if (PICK == 7) then begin
								float_msg(self_obj, message_str(409, 124), 4);
							end
						end
					end
				end
			end
		end
	end
end

procedure pez05
begin
	PICK := random(1, 10);
	if (PICK < 3) then begin
		float_msg(self_obj, message_str(409, 125), 4);
	end
	else begin
		float_msg(self_obj, message_str(409, 126), 4);
	end
end

procedure pezdone
begin
	sayOption(message_str(409, 127), pezend);
	sayOption("", pezend);
end

procedure pezend
begin
end

procedure timeforwhat
begin
	noevent := 0;
	rndy := random(1, 6);
	if (rndy > 1) then begin
		dist := 2;
	end
	if (rndy > 5) then begin
		dist := 3;
	end
	rndz := random(0, 5);
	prev_tile := tile_num(self_obj);
	new_tile := tile_num_in_direction(prev_tile, rndz, dist);
	animate_move_obj_to_tile(self_obj, new_tile, 0);
end

procedure get_reaction
begin
	if (not(got_reaction)) then begin
		got_reaction := 1;
		reactionamt := reactionamt + ((get_critter_stat(dude_obj, 3) - 5) * 5);
		if (badguy) then begin
			reactionamt := reactionamt - global_var(PLAYER_REPUTATION_GENERAL);
		end
		else begin
			reactionamt := reactionamt + global_var(PLAYER_REPUTATION_GENERAL);
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			reactionamt := reactionamt - 30;
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1)) then begin
			reactionamt := reactionamt + 20;
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1)) then begin
			reactionamt := reactionamt - 20;
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (reactionamt < 24) then begin
		reaction_level := 1;
	end
	else begin
		if (reactionamt < 74) then begin
			reaction_level := 2;
		end
		else begin
			reaction_level := 3;
		end
	end
end

procedure LevelToReact
begin
	if (reaction_level == 1) then begin
		reactionamt := random(1, 24);
	end
	else begin
		if (reaction_level == 2) then begin
			reactionamt := random(25, 74);
		end
		else begin
			reactionamt := random(75, 100);
		end
	end
end

procedure UpReact
begin
	reactionamt := reactionamt + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	reactionamt := reactionamt - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	reaction_level := 1;
	reactionamt := 1;
end

procedure TopReact
begin
	reactionamt := 100;
	reaction_level := 3;
end

procedure BigUpReact
begin
	reactionamt := reactionamt + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	reactionamt := reactionamt - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	reaction_level := reaction_level + 1;
	if (reaction_level > 3) then begin
		reaction_level := 3;
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	reaction_level := reaction_level - 1;
	if (reaction_level < 1) then begin
		reaction_level := 1;
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		exit_line := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		exit_line := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		exit_line := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		exit_line := "See ya.";
	end
	if (LVar0 == 5) then begin
		exit_line := "Thanks.";
	end
	if (LVar0 == 6) then begin
		exit_line := "Okay, bye.";
	end
end

