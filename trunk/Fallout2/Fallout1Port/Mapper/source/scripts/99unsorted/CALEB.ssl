#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure look_at_p_proc;//    script_action == 21
procedure talk_p_proc;//    script_action == 11
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure DialogWeapon;
procedure DialogExit;
procedure Caleb;
procedure CalebExit;
procedure Caleb1;
procedure Caleb2;
procedure Caleb3;
procedure Caleb4;
procedure Caleb5;
procedure Caleb6;
procedure Caleb7;
procedure Caleb8;
procedure Caleb9;
procedure Caleb10;
procedure Caleb11;
procedure Caleb12;
procedure Caleb13;
procedure Dumb;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
procedure items_held;
variable RightHand := 0;
variable LeftHand := 0;
variable PIDright := 0;
variable PIDleft := 0;
variable SubtypeWEP := 0;

variable Only_Once := 1;
variable Hostile;
variable DisplayMessage := 100;
variable exit_line;

procedure Start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		if (not(metarule(22, 0)) and (obj_is_carrying_obj_pid(self_obj, 41) == 0)) then begin
			item_caps_adjust(self_obj, random(10, 100));
		end
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 89);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 29);
		if (local_var(7) == 0) then begin
			set_map_var(1, map_var(1) + 1);
			set_local_var(7, 1);
			set_global_var(ADYTUM_CALEB_SOMETHING_0, 1);
		end
	end
	if (script_action == 21) then begin
		call look_at_p_proc;
	end
	else begin
		if (script_action == 11) then begin
			call talk_p_proc;
		end
		else begin
			if (script_action == 12) then begin
				call critter_p_proc;
			end
			else begin
				if (script_action == 14) then begin
					call damage_p_proc;
				end
				else begin
					if (script_action == 18) then begin
						call destroy_p_proc;
					end
					else begin
						if (script_action == 4) then begin
							call pickup_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure items_held
begin
	SubtypeWEP := 0;
	if critter_inven_obj(dude_obj, 1) then begin
		RightHand := critter_inven_obj(dude_obj, 1);
		PIDright := obj_pid(RightHand);
		if obj_item_subtype(RightHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		RightHand := 0;
		PIDright := 0;
	end
	if critter_inven_obj(dude_obj, 2) then begin
		LeftHand := critter_inven_obj(dude_obj, 2);
		PIDleft := obj_pid(LeftHand);
		if obj_item_subtype(LeftHand) == 3 then begin
			SubtypeWEP := 1;
		end
	end
	else begin
		LeftHand := 0;
		PIDleft := 0;
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(4) == 1) then begin
		display_msg(message_str(SCRIPT_CALEB, 100));
	end
	else begin
		display_msg(message_str(SCRIPT_CALEB, 101));
	end
	script_overrides;
end

procedure talk_p_proc
begin
	call items_held;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if ((global_var(ENEMY_ADYTUM) == 1) or (global_var(DUDE_ENEMY_REGULATORS) == 1)) then begin
		float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 2);
	end
	else begin
		if ((local_var(4) == 1) and (get_critter_stat(dude_obj, 4) < 4)) then begin
			float_msg(self_obj, message_str(SCRIPT_CALEB, 127), 0);
		end
		else begin
			if (global_var(QUEST_BONEYARD_7_GANG_WAR) == 2) then begin
				float_msg(self_obj, message_str(SCRIPT_CALEB, 147), 0);
			end
			else begin
				call get_reaction;
				start_gdialog(255, self_obj, -1, -1, -1);
				gsay_start;
				if (PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) then begin
					call DialogWeapon;
				end
				else begin
					if (local_var(4) == 0) then begin
						if (local_var(1) < 2) then begin
							DisplayMessage := 102;
						end
						else begin
							DisplayMessage := 103;
						end
						call Caleb;
					end
					else begin
						if (global_var(QUEST_BONEYARD_7_GANG_WAR) == 0) then begin
							if (local_var(1) < 2) then begin
								DisplayMessage := 122;
							end
							if (get_critter_stat(dude_obj, 34) == 0) then begin
								DisplayMessage := 123;
							end
							else begin
								DisplayMessage := 124;
							end
							call Caleb;
						end
						else begin
							DisplayMessage := 141;
							call Caleb11;
						end
					end
				end
				gsay_end;
				end_dialogue;
			end
		end
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj)) then begin
		if ((global_var(ENEMY_ADYTUM) == 1) or (global_var(DUDE_ENEMY_REGULATORS) == 1)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_REGULATORS, 1);//  ENEMY_REGULATOR == 1
	end
end

procedure destroy_p_proc
begin
	set_map_var(1, map_var(1) - 1);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(DUDE_ENEMY_REGULATORS, 1);//  ENEMY_REGULATOR == 1
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	if (map_var(1) == 0) then begin
		terminate_combat;
	end
end

procedure pickup_p_proc
begin
	set_global_var(DUDE_ENEMY_REGULATORS, 1);//  ENEMY_REGULATOR == 1
end

procedure DialogWeapon
begin
	gsay_message(255, 125, 50);
end

procedure DialogExit
begin
end

procedure Caleb
begin
	gsay_reply(255, DisplayMessage);
	giq_option(4, 255, 105, Caleb1, 50);
	giq_option(4, 255, 106, Caleb2, 50);
	giq_option(4, 255, 107, Caleb5, 50);
	if (local_var(5) == 1) then begin
		giq_option(4, 255, 108, Caleb6, 50);
	end
	if (local_var(6) == 1) then begin
		giq_option(4, 255, 109, Caleb7, 50);
	end
	if (global_var(QUEST_BONEYARD_7_GANG_WAR) == 0) then begin
		giq_option(4, 255, 110, Caleb8, 50);
	end
	giq_option(4, 255, 111, CalebExit, 50);
	giq_option(-3, 255, 126, Dumb, 50);
end

procedure Dumb
begin
	set_local_var(4, 1);
	gsay_message(255, 127, 50);
end

procedure CalebExit
begin
	if (local_var(1) < 2) then begin
		gsay_message(255, 120, 50);
	end
	else begin
		gsay_message(255, 121, 50);
	end
end

procedure Caleb1
begin
	set_local_var(4, 1);
	if (local_var(1) < 2) then begin
		DisplayMessage := 116;
	end
	else begin
		set_local_var(5, 1);
		DisplayMessage := 117;
	end
	call Caleb;
end

procedure Caleb2
begin
	gsay_reply(255, 112);
	giq_option(4, 255, 113, Caleb3, 50);
	giq_option(4, 255, 114, Caleb4, 50);
	giq_option(4, 255, 115, CalebExit, 50);
end

procedure Caleb3
begin
	DisplayMessage := 128;
	call Caleb;
end

procedure Caleb4
begin
	DisplayMessage := 129;
	call Caleb;
end

procedure Caleb5
begin
	gsay_message(255, 118, 50);
	set_local_var(6, 1);
	DisplayMessage := 119;
	call Caleb;
end

procedure Caleb6
begin
	gsay_message(255, 130, 50);
	DisplayMessage := 131;
	call Caleb;
end

procedure Caleb7
begin
	DisplayMessage := 132;
	call Caleb;
end

procedure Caleb8
begin
	gsay_reply(255, 133);
	giq_option(4, 255, 134, Caleb10, 50);
	giq_option(4, 255, 135, Caleb9, 50);
	giq_option(4, 255, 136, DialogExit, 50);
end

procedure Caleb9
begin
	DisplayMessage := 137;
	call Caleb;
end

procedure Caleb10
begin
	gsay_reply(255, 138);
	giq_option(4, 255, 139, Caleb9, 50);
	giq_option(4, 255, 140, DialogExit, 50);
end

procedure Caleb11
begin
	gsay_reply(255, DisplayMessage);
	giq_option(4, 255, 140, Caleb12, 50);
	giq_option(4, 255, 141, Caleb13, 50);
	giq_option(4, 255, 142, DialogExit, 50);
end

procedure Caleb12
begin
	DisplayMessage := 145;
	call Caleb11;
end

procedure Caleb13
begin
	DisplayMessage := 146;
	call Caleb11;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

