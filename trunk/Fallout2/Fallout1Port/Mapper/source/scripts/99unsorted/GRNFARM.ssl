#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure timed_event_p_proc;//    script_action == 22
procedure damage_p_proc;//    script_action == 14
procedure combat;

procedure Farmer00;
procedure Farmer01;

variable hostile;
variable Only_Once := 1;
variable Sleeping;
variable home_tile;
variable sleep_tile;
variable in_timed_event;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;
variable exit_line;



procedure start
begin
	
	
	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait( self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, TEAM_HUB_FARMER );
		critter_add_trait( self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_HUB_PEASANTS );
		home_tile := 22939;
		sleep_tile := 27725;
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile and obj_can_see_obj(self_obj, dude_obj)) then begin
		hostile := 0;
		attack(dude_obj);
	end
	if ((game_time_hour >= 600) and (game_time_hour < 1800)) then begin
		if (Sleeping == 1) then begin
			reg_anim_func(2, self_obj);
			Sleeping := 0;
			if ((tile_num(self_obj) != home_tile) and ((game_time_hour - 600) > 10)) then begin
				move_to(self_obj, home_tile, elevation(self_obj));
			end
		end
		else begin
			if ((tile_distance(home_tile, tile_num(self_obj)) > 8) and not(anim_busy(self_obj))) then begin
				animate_move_obj_to_tile(self_obj, home_tile, 0);
			end
			else begin
				if (not(in_timed_event)) then begin
					in_timed_event := 1;
					add_timer_event(self_obj, game_ticks(random(20, 30)), 1);
				end
			end
		end
	end
	else begin
		if (Sleeping == 0) then begin
			reg_anim_func(2, self_obj);
			Sleeping := 1;
			if ((tile_num(self_obj) != sleep_tile) and ((game_time_hour - 1800) > 10) or ((600 - game_time_hour) > 0)) then begin
				move_to(self_obj, sleep_tile, elevation(self_obj));
			end
		end
		else begin
			if ((tile_num(self_obj) != sleep_tile) and not(anim_busy(self_obj))) then begin
				animate_move_obj_to_tile(self_obj, sleep_tile, 0);
			end
		end
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	get_reaction
	if ((game_time_hour >= 600) and (game_time_hour < 1800)) then begin
		call Farmer00;
	end
	else begin
		call Farmer01;
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	inc_good_critter		
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_HGENFARM, 100));
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		in_timed_event := 0;
		if ((game_time_hour >= 600) and (game_time_hour < 1800)) then begin
			animate_move_obj_to_tile(self_obj, tile_num_in_direction(home_tile, random(0, 5), random(1, 8)), 0);
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_HUB, 1);
	end
end

procedure Farmer00
begin
	variable LVar0 := 0;
	if (global_var(DOGMEAT_HIRELING_STATUS) == 1) then begin
		LVar0 := random(101, 109);
		if (LVar0 == 108) then begin
			LVar0 := 109;
		end
		float_msg(self_obj, message_str(SCRIPT_HGENFARM, LVar0), 3);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_HGENFARM, random(101, 108)), 3);
	end
end

procedure Farmer01
begin
	float_msg(self_obj, message_str(SCRIPT_HGENFARM, random(110, 114)), 3);
end



