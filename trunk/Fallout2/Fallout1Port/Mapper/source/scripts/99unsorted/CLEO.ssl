#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure Cleo00;
procedure Cleo01;
procedure Cleo02;
procedure Cleo03;
procedure Cleo04;
procedure Cleo05;
procedure Cleo06;
procedure Cleo07;
procedure Cleo08;
procedure Cleo09;
procedure Cleo10;
procedure Cleo11;
procedure Cleo12;
procedure Cleo13;
procedure Cleo14;
procedure Cleo15;
procedure Cleo16;
procedure Cleo17;
procedure Cleo18;
procedure Cleo19;
procedure Cleo20;
procedure Cleo21;
procedure Cleo22;
procedure CleoEnd;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 39);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 52);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (map_var(1) == 1) then begin
		call Cleo01;
	end
	else begin
		if (global_var(STEAL_NECKLACE) != 2) then begin
			start_gdialog(560, self_obj, 4, -1, -1);
			gsay_start;
			call Cleo02;
			gsay_end;
			end_dialogue;
		end
		else begin
			start_gdialog(560, self_obj, 4, -1, -1);
			gsay_start;
			call Cleo03;
			gsay_end;
			end_dialogue;
		end
	end
end

procedure destroy_p_proc
begin
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_CLEO, 100));
end

procedure Cleo00
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		float_msg(self_obj, message_str(SCRIPT_CLEO, 101), 2);
	end
	else begin
		float_msg(self_obj, message_str(SCRIPT_CLEO, 102), 2);
	end
	call combat;
end

procedure Cleo01
begin
	float_msg(self_obj, message_str(SCRIPT_CLEO, 103), 2);
end

procedure Cleo02
begin
	gsay_reply(560, 104);
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 106, Cleo05, 50);
	end
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 105, Cleo04, 50);
	end
	giq_option(4, 560, 107, Cleo06, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 108, Cleo07, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 109, Cleo08, 50);
	end
	giq_option(4, 560, 110, Cleo09, 50);
	giq_option(-3, 560, 111, Cleo10, 50);
end

procedure Cleo03
begin
	gsay_reply(560, 112);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 113, Cleo11, 50);
	end
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 114, Cleo05, 50);
	end
	giq_option(4, 560, 115, Cleo12, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 116, Cleo13, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 117, Cleo14, 50);
	end
	giq_option(4, 560, 119, Cleo09, 50);
	giq_option(-3, 560, 120, Cleo10, 50);
end

procedure Cleo04
begin
	gsay_reply(560, 121);
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 122, Cleo05, 50);
	end
	giq_option(4, 560, 123, Cleo06, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 124, Cleo07, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 125, Cleo08, 50);
	end
	giq_option(4, 560, 126, Cleo09, 50);
	giq_option(-3, 560, 127, Cleo10, 50);
end

procedure Cleo05
begin
	gsay_reply(560, 128);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 129, Cleo04, 50);
	end
	giq_option(4, 560, 131, Cleo06, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 132, Cleo07, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 133, Cleo08, 50);
	end
	giq_option(4, 560, 134, Cleo09, 50);
	giq_option(-3, 560, 135, Cleo10, 50);
end

procedure Cleo06
begin
	gsay_reply(560, 136);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 137, Cleo04, 50);
	end
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 138, Cleo05, 50);
	end
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 139, Cleo07, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 140, Cleo08, 50);
	end
	giq_option(4, 560, 141, Cleo09, 50);
	giq_option(-3, 560, 142, Cleo10, 50);
end

procedure Cleo07
begin
	gsay_reply(560, 143);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 144, Cleo04, 50);
	end
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 145, Cleo05, 50);
	end
	giq_option(4, 560, 146, Cleo06, 50);
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 147, Cleo08, 50);
	end
	giq_option(4, 560, 148, Cleo09, 50);
	giq_option(-3, 560, 149, Cleo10, 50);
end

procedure Cleo08
begin
	gsay_reply(560, 150);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 151, Cleo04, 50);
	end
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 152, Cleo05, 50);
	end
	giq_option(4, 560, 153, Cleo06, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 154, Cleo07, 50);
	end
	giq_option(4, 560, 155, Cleo09, 50);
	giq_option(-3, 560, 156, Cleo10, 50);
end

procedure Cleo09
begin
	gsay_message(560, 157, 50);
end

procedure Cleo10
begin
	gsay_message(560, 158, 50);
end

procedure Cleo11
begin
	gsay_reply(560, 159);
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 160, Cleo05, 50);
	end
	giq_option(4, 560, 161, Cleo12, 50);
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 162, Cleo13, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 163, Cleo14, 50);
	end
	giq_option(4, 560, 165, Cleo09, 50);
	giq_option(-3, 560, 166, Cleo10, 50);
end

procedure Cleo12
begin
	gsay_reply(560, 167);
	if (global_var(LOXLEY_KNOWN) == 1) then begin
		giq_option(4, 560, 168, Cleo11, 50);
	end
	if (map_var(2) == 1) then begin
		giq_option(4, 560, 169, Cleo05, 50);
	end
	if (global_var(DECKER_KNOWN) == 1) then begin
		giq_option(4, 560, 170, Cleo13, 50);
	end
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(4, 560, 171, Cleo14, 50);
	end
	giq_option(4, 560, 173, Cleo09, 50);
	giq_option(-3, 560, 174, Cleo10, 50);
end

procedure Cleo13
begin
	gsay_message(560, 175, 50);
end

procedure Cleo14
begin
	set_global_var(DECKER_KNOWN, 1);
	gsay_reply(560, 176);
	giq_option(4, 560, 177, Cleo15, 50);
	giq_option(4, 560, 178, Cleo16, 50);
	giq_option(4, 560, 179, Cleo17, 50);
	giq_option(4, 560, 180, Cleo18, 50);
end

procedure Cleo15
begin
	gsay_message(560, 181, 50);
end

procedure Cleo16
begin
	gsay_message(560, 182, 50);
end

procedure Cleo17
begin
	gsay_reply(560, 183);
	giq_option(4, 560, 184, Cleo20, 50);
	giq_option(4, 560, 185, Cleo20, 50);
	giq_option(4, 560, 186, Cleo21, 50);
	giq_option(4, 560, 187, Cleo22, 50);
end

procedure Cleo18
begin
	gsay_message(560, 188, 50);
end

procedure Cleo19
begin
	gsay_message(560, 189, 50);
end

procedure Cleo20
begin
	gsay_message(560, 190, 50);
end

procedure Cleo21
begin
	gsay_message(560, 191, 50);
end

procedure Cleo22
begin
	gsay_message(560, 192, 50);
end

procedure CleoEnd
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end



