#include "..\headers\define.h"
#include "..\headers\command.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == critter_proc
procedure destroy_p_proc;//    script_action == destroy_proc
procedure look_at_p_proc;//    script_action == look_at_proc
procedure pickup_p_proc;//    script_action == pickup_proc
procedure talk_p_proc;//    script_action == talk_proc
procedure timed_event_p_proc;//    script_action == timed_event_proc

procedure ScSupMut0;
procedure ScSupMut1;
procedure ScSupMut2;
procedure ScSupMut3;

procedure combat;
procedure goto_follmap;

variable tmp_herebefore;
variable tmp_hostile;
variable initial :=  0;
variable in_timed_event;
variable weaponPtr;



procedure start
begin


	if not(initial) then begin
		initial :=  1;
		set_self_team(TEAM_NECROPOLIS_MUTANT );
		set_self_ai( AI_SUPER_MUTANT_NORMAL );
		self_rotate( random(0, 5) );
		if (local_var(1) == 0) then begin
			set_local_var(1, 1);
			weaponPtr := create_object( PID_MINIGUN, 0, 0 );
			add_obj_to_inven(self_obj, weaponPtr);
			wield_obj_critter(self_obj, weaponPtr);
			add_obj_to_inven(self_obj, create_object( PID_5MM_JHP, 0, 0 ));
		end
	end
	if (script_action == critter_proc) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == destroy_proc) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == look_at_proc) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == pickup_proc) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == talk_proc) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
					else begin
						if (script_action == timed_event_proc) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
							call timed_event_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var( GVAR_ENEMY_FOLL_INVADERS )) then begin
		tmp_hostile := 1;
	end
	if (tmp_hostile and self_can_see_dude) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (not(in_timed_event)) then begin
			in_timed_event := 1;
			add_timer_event(self_obj, game_ticks(random(6, 10)), random(1, 3));
		end
		if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
			if (local_var(0) == 0) then begin
				dialogue_system_enter;
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if (source_obj == dude_obj) then begin
		set_global_var( GVAR_ENEMY_FOLL_INVADERS, 1 );
	end
	inc_evil_critter
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_SCSUPMUT, 100));
end

procedure pickup_p_proc
begin
	tmp_hostile := 1;
end

procedure talk_p_proc
begin
	script_overrides;
	dude_look_at_self;
	if (local_var(0)) then begin
		call ScSupMut3;
	end
	else begin
		set_local_var(0, 1);
		start_gdialog(277, self_obj, 4, -1, -1);
		gsay_start;
		call ScSupMut0;
		gsay_end;
		end_dialogue;
	end
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		self_rotate( random(0, 5) );
	end
	else begin
		self_walk_to_tile( tile_num_in_direction(self_tile, random(0, 5), random(1, 3)) );
	end
	in_timed_event := 0;
end

procedure ScSupMut0
begin
	gsay_reply(277, 101);
	giq_option( -3, SCRIPT_SCSUPMUT, 102, combat, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SCSUPMUT, 103, goto_follmap, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SCSUPMUT, 104, ScSupMut1, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SCSUPMUT, 105, combat, NEUTRAL_REACTION );
end

procedure ScSupMut1
begin
	gsay_reply(277, 106);
	giq_option( 4, SCRIPT_SCSUPMUT, 107, goto_follmap, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SCSUPMUT, 108, ScSupMut2, NEUTRAL_REACTION );
	giq_option( 4, SCRIPT_SCSUPMUT, 109, combat, NEUTRAL_REACTION );
end

procedure ScSupMut2
begin
	gsay_message(277, 110, 50);
end

procedure ScSupMut3
begin
	float_msg(self_obj, message_str(SCRIPT_SCSUPMUT, 111), 0);
end

procedure combat
begin
	tmp_hostile := 1;
end

procedure goto_follmap
begin
	load_map("lafollwr.map", 10);
end
