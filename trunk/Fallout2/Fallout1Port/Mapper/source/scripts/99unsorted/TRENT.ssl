#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure use_obj_on_p_proc;//    script_action == 7
procedure talk_p_proc;//    script_action == 11
procedure Trent00;
procedure Trent01;
procedure Trent02;
procedure Trent03;
procedure Trent04;
procedure Trent05;
procedure Trent06;
procedure Trent07;
procedure Trent08;
procedure Trent09;
procedure Trent10;
procedure Trent11;
procedure Trent12;
procedure Trent13;
procedure Trent14;
procedure Trent15;
procedure Trent16;
procedure Trent17;
procedure Trent18;
procedure Trent19;
procedure Trent20;
procedure Trent21;
procedure Trent22;
procedure Trent23;
procedure Trent24;
procedure flee_dude;
procedure give_money;

variable calm;
variable initial :=  0;
variable known;
variable scared;
variable close2dude;
variable dest_tile;
variable direction;
variable prev_dist;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (not(initial) and metarule(14, 0)) then begin
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 35);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 2);
		initial :=  1;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 7) then begin//<-- use_obj_on_p_proc
							call use_obj_on_p_proc;
						end
						else begin
							if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
								call talk_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (scared and (tile_distance_objs(self_obj, dude_obj) < 60)) then begin
		call flee_dude;
	end
	else begin
		if (not(close2dude)) then begin
			if (tile_distance_objs(dude_obj, self_obj) <= 2) then begin
				close2dude := 1;
			end
			else begin
				direction := rotation_to_tile(tile_num(dude_obj) % 200, tile_num(dude_obj) / 200);
				dest_tile := tile_num_in_direction(tile_num(dude_obj), direction, 1);
				animate_move_obj_to_tile(self_obj, dest_tile, 1);
				if ((random(1, 18) == 1) and not(calm)) then begin
					float_msg(self_obj, message_str(SCRIPT_TRENT, 141), 0);
				end
			end
		end
		else begin
			if (not(scared)) then begin
				if (random(1, 4) == 1) then begin
					anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(dude_obj)));
				end
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		scared := 1;
	end
	script_overrides;
	call flee_dude;
end

procedure destroy_p_proc
begin
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	set_global_var(TRENT_STATUS, global_var(TRENT_STATUS) bwor 8);
end

procedure pickup_p_proc
begin
	scared := 1;
end

procedure use_obj_on_p_proc
begin
	variable LVar0 := 0;
	if ((obj_pid(obj_being_used_with) == 81) or (obj_pid(obj_being_used_with) == 103) or (obj_pid(obj_being_used_with) == 126)) then begin
		LVar0 := obj_being_used_with;
		rm_obj_from_inven(source_obj, obj_being_used_with);
		destroy_object(LVar0);
		/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, 41) == 100) then begin
			if (scared) then begin
				call Trent21;
			end
			else begin
				call Trent22;
			end
		end
		else begin
			if (scared) then begin
				call Trent23;
			end
			else begin
				call Trent24;
			end
		end
		calm := 1;
		scared := 0;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	if ((scared == 1) or (global_var(PLAYER_REPUTATION_GENERAL) < -20)) then begin
		call Trent00;
	end
	else begin
		start_gdialog(703, self_obj, 4, -1, -1);
		gsay_start;
		call get_reaction;
		if (calm) then begin
			call Trent16;
		end
		else begin
			if ((global_var(TRENT_STATUS) bwand 1) != 0) then begin
				call Trent02;
			end
			else begin
				call Trent01;
			end
		end
		gsay_end;
		end_dialogue;
	end
end

procedure Trent00
begin
	float_msg(self_obj, message_str(SCRIPT_TRENT, 100), 0);
end

procedure Trent01
begin
	set_global_var(TRENT_STATUS, global_var(TRENT_STATUS) bwor 1);
	gsay_reply(703, 101);
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(7, 703, 102, Trent03, 50);
	end
	giq_option(4, 703, 103, Trent04, 50);
	giq_option(4, 703, 104, Trent03, 50);
	giq_option(4, 703, 105, Trent05, 51);
	if ((global_var(QUEST_VAULT13_4_WATERCHIP) == 0) and (obj_is_carrying_obj_pid(dude_obj, 55) == 0)) then begin
		giq_option(4, 703, 106, Trent06, 50);
	end
	if (global_var(KILL_DEATHCLAW) == 1) then begin
		giq_option(4, 703, 107, Trent07, 50);
	end
	giq_option(-3, 703, 108, Trent08, 51);
end

procedure Trent02
begin
	gsay_reply(703, 109);
	giq_option(4, 703, 103, Trent04, 50);
	giq_option(4, 703, 104, Trent03, 50);
end

procedure Trent03
begin
	gsay_reply(703, 111);
	giq_option(4, 703, 112, Trent11, 50);
	giq_option(4, 703, 113, Trent12, 50);
	giq_option(4, 703, 114, Trent11, 50);
	giq_option(4, 703, 115, Trent13, 50);
end

procedure Trent04
begin
	gsay_reply(703, 116);
	giq_option(4, 703, 117, Trent11, 50);
	giq_option(4, 703, 118, Trent14, 50);
	if (global_var(KILL_DEATHCLAW) == 1) then begin
		giq_option(4, 703, 119, Trent07, 50);
	end
	giq_option(4, 703, 120, Trent15, 50);
end

procedure Trent05
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	calm := 0;
	scared := 1;
	gsay_message(703, 121, 51);
	/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, 18)) then begin
		LVar0 := obj_carrying_pid_obj(self_obj, PID_DESERT_EAGLE);
		rm_obj_from_inven(self_obj, LVar0);
		add_obj_to_inven(dude_obj, LVar0);
	end
	/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, 31)) then begin
		LVar0 := obj_carrying_pid_obj(self_obj, PID_44_MAGNUM_JHP);
		rm_obj_from_inven(self_obj, LVar0);
		add_obj_to_inven(dude_obj, LVar0);
	end
	/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, 111)) then begin
		LVar0 := obj_carrying_pid_obj(self_obj, PID_44_FMJ_MAGNUM);
		rm_obj_from_inven(self_obj, LVar0);
		add_obj_to_inven(dude_obj, LVar0);
	end
	/* has how many? */    if (obj_is_carrying_obj_pid(self_obj, 4)) then begin
		LVar0 := obj_carrying_pid_obj(self_obj, PID_KNIFE);
		rm_obj_from_inven(self_obj, LVar0);
		add_obj_to_inven(dude_obj, LVar0);
	end
end

procedure Trent06
begin
	gsay_message(703, 122, 50);
end

procedure Trent07
begin
	scared := 1;
	gsay_message(703, 123, 50);
end

procedure Trent08
begin
	gsay_message(703, 124, 51);
end

procedure Trent09
begin
	gsay_message(703, 125, 50);
end

procedure Trent10
begin
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		gsay_message(703, 142, 50);
	end
	else begin
		gsay_message(703, 143, 50);
	end
end

procedure Trent11
begin
	gsay_message(703, 127, 50);
end

procedure Trent12
begin
	gsay_message(703, 128, 50);
end

procedure Trent13
begin
	gsay_message(703, 129, 50);
end

procedure Trent14
begin
	gsay_message(703, 130, 50);
end

procedure Trent15
begin
	gsay_message(703, 131, 50);
end

procedure Trent16
begin
	gsay_reply(703, 132);
	if (global_var(MISSING_CARAVAN) == 1) then begin
		giq_option(7, 703, 102, Trent17, 50);
	end
	giq_option(4, 703, 103, Trent18, 50);
	giq_option(4, 703, 105, Trent05, 51);
	if ((global_var(QUEST_VAULT13_4_WATERCHIP) == 0) and (obj_is_carrying_obj_pid(dude_obj, 55) == 0)) then begin
		giq_option(4, 703, 106, Trent19, 50);
	end
	if (global_var(KILL_DEATHCLAW) == 1) then begin
		giq_option(4, 703, 107, Trent20, 50);
	end
	giq_option(-3, 703, 108, Trent10, 50);
end

procedure Trent17
begin
	gsay_message(703, 133, 50);
end

procedure Trent18
begin
	gsay_message(703, 134, 50);
end

procedure Trent19
begin
	gsay_message(703, 135, 50);
end

procedure Trent20
begin
	gsay_message(703, 136, 50);
end

procedure Trent21
begin
	float_msg(self_obj, message_str(SCRIPT_TRENT, 137), 3);
	call give_money;
end

procedure Trent22
begin
	float_msg(self_obj, message_str(SCRIPT_TRENT, 138), 3);
	call give_money;
end

procedure Trent23
begin
	float_msg(self_obj, message_str(SCRIPT_TRENT, 138), 3);
	call give_money;
end

procedure Trent24
begin
	float_msg(self_obj, message_str(SCRIPT_TRENT, 139), 3);
	call give_money;
end

procedure flee_dude
begin
	direction := 0;
	prev_dist := 0;
	while(direction < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), direction, 3)) > prev_dist) then begin
			dest_tile := tile_num_in_direction(tile_num(self_obj), direction, 3);
			prev_dist := tile_distance(tile_num(dude_obj), dest_tile);
		end
		direction := direction + 1;
	end
	animate_move_obj_to_tile(self_obj, dest_tile, 1);
end

procedure give_money
begin
	variable LVar0 := 0;
	LVar0 := item_caps_total(self_obj);
	if (LVar0) then begin
		item_caps_adjust(self_obj, -1 * LVar0);
		item_caps_adjust(dude_obj, LVar0);
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

