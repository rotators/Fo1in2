#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure talk_p_proc;//    script_action == 11
procedure Jason01;
procedure Jason02;
procedure Jason03;
procedure Jason04;
procedure Jason05;
procedure Jason06;
procedure Jason07;
procedure Jason08;
procedure Jason09;
procedure Jason10;
procedure Jason11;
procedure Jason12;
procedure Jason13;
procedure Jason14;
procedure Jason15;
procedure Jason16;
procedure Jason17;
procedure Jason18;
procedure Jason19;
procedure Jason20;
procedure Jason21;
procedure Jason22;
procedure Jason23;
procedure follow_player;

variable following;
variable initial :=  0;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, 17) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, 17); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 2) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, 2); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 1) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, 1); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 74) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, 74); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 113) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, 113); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 49);
		initial :=  1;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (following) then begin
		call follow_player;
	end
end

procedure destroy_p_proc
begin
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	if (not(local_var(1))) then begin
		display_msg(message_str(382, 101));
	end
	else begin
		display_msg(message_str(382, 100));
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(382, self_obj, 4, -1, -1);
	gsay_start;
	if (cur_map_index == 45) then begin //  L.A. BONEYARD - RIPPERS
		if (following) then begin
			call Jason23;
		end
		else begin
			call Jason19;
		end
	end
	if (local_var(0)) then begin
		call Jason18;
	end
	else begin
		if (local_var(1)) then begin
			call Jason16;
		end
		else begin
			call Jason01;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Jason01
begin
	gsay_reply(382, 102);
	giq_option(4, 382, 103, Jason05, 50);
	giq_option(4, 382, 104, Jason13, 50);
	giq_option(4, 382, 105, Jason08, 50);
	giq_option(4, 382, 106, Jason07, 50);
	giq_option(-3, 382, 107, Jason02, 50);
end

procedure Jason02
begin
	gsay_message(382, 108, 50);
end

procedure Jason03
begin
	gsay_message(382, 109, 50);
	gsay_message(382, 110, 50);
end

procedure Jason04
begin
	gsay_message(382, 111, 50);
	gsay_message(382, 112, 50);
end

procedure Jason05
begin
	gsay_reply(382, 113);
	giq_option(4, 382, 114, Jason06, 50);
	giq_option(4, 382, 115, Jason14, 50);
end

procedure Jason06
begin
	gsay_reply(382, 116);
	giq_option(4, 382, 117, Jason07, 50);
	giq_option(4, 382, 118, Jason08, 50);
	giq_option(6, 382, 119, Jason15, 50);
end

procedure Jason07
begin
	gsay_reply(382, 120);
	giq_option(4, 382, 121, Jason12, 50);
	giq_option(4, 382, 122, Jason08, 50);
end

procedure Jason08
begin
	gsay_reply(382, 123);
	giq_option(4, 382, 124, Jason12, 50);
end

procedure Jason09
begin
	gsay_reply(382, 125);
	giq_option(4, 382, 126, Jason10, 50);
	giq_option(4, 382, 127, Jason11, 50);
end

procedure Jason10
begin
	gsay_message(382, 128, 50);
end

procedure Jason11
begin
	gsay_message(382, 129, 50);
end

procedure Jason12
begin
	gsay_message(382, 130, 50);
end

procedure Jason13
begin
	gsay_message(382, 131, 50);
	set_local_var(0, 1);
end

procedure Jason14
begin
	gsay_message(382, 132, 50);
	call Jason10;
end

procedure Jason15
begin
	gsay_message(382, 133, 50);
	call Jason11;
end

procedure Jason16
begin
	gsay_reply(382, 134);
	giq_option(4, 382, 135, Jason08, 50);
	giq_option(4, 382, 136, Jason17, 50);
end

procedure Jason17
begin
	gsay_message(382, 137, 50);
end

procedure Jason18
begin
	gsay_message(382, 138, 50);
end

procedure Jason19
begin
	gsay_reply(382, 139);
	giq_option(-3, 382, 140, Jason20, 50);
	giq_option(4, 382, 141, Jason20, 50);
	giq_option(4, 382, 142, Jason21, 50);
	giq_option(4, 382, 143, Jason22, 50);
end

procedure Jason20
begin
	gsay_message(382, 144, 50);
	critter_add_trait(self_obj, 1, 6, 0);
	following := 1;
end

procedure Jason21
begin
	gsay_message(382, 145, 50);
end

procedure Jason22
begin
	gsay_reply(382, 146);
	giq_option(4, 382, 147, Jason20, 50);
	giq_option(4, 382, 148, Jason21, 50);
end

procedure Jason23
begin
	gsay_message(382, 149, 50);
end

procedure follow_player
begin
	if (tile_distance_objs(self_obj, dude_obj) > 7) then begin
		animate_move_obj_to_tile(self_obj, tile_num(dude_obj), 1);
	end
	else begin
		if (tile_distance_objs(self_obj, dude_obj) > 3) then begin
			animate_move_obj_to_tile(self_obj, tile_num(dude_obj), 0);
		end
		else begin
			animate_move_obj_to_tile(self_obj, tile_num(self_obj), 0);
		end
	end
end



