#include "..\headers\define.h"

procedure start;
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure talk_p_proc;//    script_action == 11
procedure dumar00;
procedure dumar01;
procedure dumar02;
procedure dumar03;
procedure dumar04;
procedure dumar05;
procedure dumar06;
procedure dumar07;
procedure dumarend;

variable rndx;
variable HEREBEFORE;
variable mad;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.

	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
		if (mad == 1) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
	else begin
		if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
			script_overrides;
			display_msg(100);
		end
		else begin
			if (script_action == 3) then begin//DETAILED ON-CLICK DESCRIPTION (Binoculars icon) - description_p_proc
				script_overrides;
				display_msg(100);
			end
			else begin
				if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
					call damage_p_proc;
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(-1, self_obj, 4, -1, -1);
	gsay_start;
	if (HEREBEFORE) then begin
		call dumar05;
	end
	else begin
		HEREBEFORE := 1;
		call dumar00;
	end
	gsay_end;
	end_dialogue;
end

procedure dumar00
begin
	sayReply(0, message_str(SCRIPT_DUMAR, 101));
	if (-get_critter_stat(dude_obj, STAT_iq) >= -3) then begin
		sayOption(message_str(SCRIPT_DUMAR, 102), dumar04);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 6) then begin
		sayOption(message_str(SCRIPT_DUMAR, 103), dumar03);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_DUMAR, 104), dumar06);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_DUMAR, 105), dumar07);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_DUMAR, 105), dumar00);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 5) then begin
		sayOption(message_str(SCRIPT_DUMAR, 107), dumar05);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 6) then begin
		sayOption(message_str(SCRIPT_DUMAR, 108), dumar02);
	end
end

procedure dumar01
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 109));
	call dumarend;
end

procedure dumar02
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 110));
	call dumarend;
end

procedure dumar03
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 111));
	call dumarend;
end

procedure dumar04
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 112));
	call dumarend;
end

procedure dumar05
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 113));
	call dumarend;
end

procedure dumar06
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 114));
	mad := 1;
	call dumarend;
end

procedure dumar07
begin
	sayMessage(0, message_str(SCRIPT_DUMAR, 115));
	call dumarend;
end

procedure dumarend
begin
end


procedure destroy_p_proc
begin
 
end
 
 
procedure damage_p_proc
begin
 display_msg(message_str(SCRIPT_DUMAR, 116));
end
