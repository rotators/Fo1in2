#include "..\headers\define.h"

procedure start;
procedure description_p_proc;//    script_action == description_proc
procedure use_p_proc;//    script_action == use_proc
procedure pickup_p_proc;//    script_action == pickup_proc
procedure use_skill_on_p_proc;//    script_action == use_skill_on_proc
procedure secret;

import variable J_Door_Ptr;

variable Door_Test;


procedure start begin
end

procedure description_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_BOOKCASE, 200));
end

procedure use_p_proc
begin
	script_overrides;
	if ((local_var(0) == 1) or (Door_Test == 1)) then begin
		display_msg(message_str(SCRIPT_BOOKCASE, 104));
		use_obj(J_Door_Ptr);
	end
	else begin
		display_msg(message_str(SCRIPT_BOOKCASE, 101));
	end
end

procedure pickup_p_proc
begin
	script_overrides;
end

procedure use_skill_on_p_proc
begin
	if ((local_var(0) == 0) and (Door_Test == 0)) then begin
		if (action_being_used == SKILL_LOCKPICK) then begin//-- LOCKPICK
			script_overrides;
			if (is_success(roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0))) then begin
				set_local_var(0, 1);
				Door_Test := 1;
				display_msg(message_str(SCRIPT_BOOKCASE, 102));
			end
			else begin
				display_msg(message_str(SCRIPT_BOOKCASE, 105));
			end
		end
		else begin
			if (action_being_used == SKILL_TRAPS) then begin//-- TRAPS//-- TRAPS
				script_overrides;
				if (is_success(roll_vs_skill(dude_obj, SKILL_TRAPS, 0))) then begin
					set_local_var(0, 1);
					Door_Test := 1;
					display_msg(message_str(SCRIPT_BOOKCASE, 102));
				end
				else begin
					display_msg(message_str(SCRIPT_BOOKCASE, 105));
				end
			end
			else begin
				display_msg(message_str(SCRIPT_BOOKCASE, 103));
			end
		end
	end
	else begin
		display_msg(message_str(SCRIPT_BOOKCASE, 103));
	end
end

procedure secret
begin
	set_local_var(0, 1);
	display_msg(message_str(SCRIPT_BOOKCASE, 102));
end
