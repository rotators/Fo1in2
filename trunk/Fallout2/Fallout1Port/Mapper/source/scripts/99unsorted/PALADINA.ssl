#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure timed_event_p_proc;//    script_action == 22

procedure PaladinARandom;
procedure PaladinABackground;

variable Only_Once := 1;
variable hostile;



procedure start
begin
	
	
	if Only_Once then begin
		Only_Once := 0;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 44);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 65);
		add_timer_event(self_obj, game_ticks(300), 1);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
					call timed_event_p_proc;
				end
				else begin
					if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
						call critter_p_proc;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							call destroy_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure PaladinARandom
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	if (not(LVar0)) then begin
		LVar0 := random(1, 9);
	end
	if (LVar0 > 10) then begin
		LVar0 := 1;
	end
	LVar1 := message_str(SCRIPT_PALADINA, 101);
	if (LVar0 == 2) then begin
		LVar1 := message_str(SCRIPT_PALADINA, 102);
	end
	else begin
		if (LVar0 == 3) then begin
			LVar1 := message_str(SCRIPT_PALADINA, 103);
		end
		else begin
			if (LVar0 == 4) then begin
				LVar1 := message_str(SCRIPT_PALADINA, 104) + proto_data(obj_pid(dude_obj), 1) + message_str(SCRIPT_PALADINA, 105);
			end
			else begin
				if (LVar0 == 5) then begin
					LVar1 := message_str(SCRIPT_PALADINA, 106);
				end
				else begin
					if (LVar0 == 6) then begin
						LVar1 := message_str(SCRIPT_PALADINA, 107);
					end
					else begin
						if (LVar0 == 7) then begin
							LVar1 := message_str(SCRIPT_PALADINA, 108);
						end
						else begin
							if (LVar0 == 8) then begin
								LVar1 := message_str(SCRIPT_PALADINA, 109);
							end
							else begin
								if (LVar0 == 9) then begin
									LVar1 := message_str(SCRIPT_PALADINA, 110);
								end
								else begin
									LVar0 := 1;
								end
							end
						end
					end
				end
			end
		end
	end
	LVar0 := LVar0 + 1;
	float_msg(self_obj, LVar1, 0);
end

procedure PaladinABackground
begin
	variable LVar0 := 0;
	add_timer_event(self_obj, game_ticks(300), 1);
	if (random(0, 1)) then begin
		LVar0 := message_str(SCRIPT_PALADINA, 112);
	end
	else begin
		LVar0 := message_str(SCRIPT_PALADINA, 113);
	end
	float_msg(self_obj, LVar0, 0);
end

procedure critter_p_proc
begin
	if (global_var(ENEMY_BROTHERHOOD)) then begin
		hostile := 1;
	end
	if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
		hostile := 0;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		set_global_var(ENEMY_BROTHERHOOD, 1);
		hostile := 0;
		attack(dude_obj);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	call PaladinARandom;
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);

	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(ENEMY_BROTHERHOOD, 1);
	end
	inc_good_critter		
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_PALADINA, 100));
end

procedure timed_event_p_proc
begin
	call PaladinABackground;
end
