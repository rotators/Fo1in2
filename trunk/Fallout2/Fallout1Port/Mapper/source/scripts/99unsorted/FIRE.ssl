#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure map_update_p_proc;//    script_action == 23
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11

procedure Fire00;
procedure Fire01;
procedure Fire02;
procedure Fire03;
procedure Fire04;
procedure Fire05;
procedure Fire06;
procedure Fire07;
procedure Fire08;
procedure Fire09;
procedure Fire10;
procedure Fire11;
procedure Fire12;
procedure Fire13;
procedure Fire14;
procedure Fire15;
procedure Fire16;
procedure Fire17;
procedure Fire18;
procedure Fire19;
procedure Fire20;
procedure Fire21;
procedure FireCombat;
procedure FireEnd;

procedure follow_player;
procedure show_true_name;
procedure show_false_name;

variable hostile;
variable initial :=  0;
variable prev_tile := 7000;
variable dest_tile := 7000;
variable name;

procedure timed_event_p_proc;//    script_action == 22




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, 17) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, 17); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 2) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, 2); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 1) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, 1); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 74) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, 74); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 113) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, 113); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 23) then begin//map_update_p_proc -- called every dozen seconds or so, & additionally on certain events (exit dialog, end combat, load map, etc)
					call map_update_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (obj_can_see_obj(self_obj, dude_obj) and (global_var(BLADES_LEFT) < 41)) then begin
		hostile := 1;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	set_global_var(BLADES_LEFT, global_var(BLADES_LEFT) - 1);
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(BLADES_HELP, 0);
	end
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	if ((global_var(QUEST_BONEYARD_1_ME_BLADE) == 2) or (get_critter_stat(dude_obj, 6) > 6)) then begin
		call show_true_name;
	end
	else begin
		if (get_critter_stat(dude_obj, 6) < 4) then begin
			call show_false_name;
		end
		else begin
			if (get_critter_stat(dude_obj, 4) < 5) then begin
				call show_false_name;
			end
			else begin
				if (random(0, 1)) then begin
					call show_false_name;
				end
				else begin
					call show_true_name;
				end
			end
		end
	end
end

procedure map_update_p_proc
begin
	if not(initial) then begin
/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 27);
		if (cur_map_index == 44) then begin //  L.A. BONEYARD - BLADES
/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 47);
		end
		else begin
			if (cur_map_index == 17) or (cur_map_index == 18) then begin //  CATHEDRAL - ENTRANCE AND ANY LEVELS
				party_add(self_obj);
				if (global_var(BLADES_HELP) == 1) then begin
					if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 0);    end//  MAKE VISIBLE
/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 0);
					add_timer_event(self_obj, game_ticks(1), 1);
				end
				else begin
					if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
				end
			end
			else begin
				if ((cur_map_index != 17) and (cur_map_index != 18)) then begin
					party_remove(self_obj);
				end
			end
		end
		initial :=  1;
	end
	if ((elevation(self_obj) != elevation(dude_obj)) and (global_var(BLADES_HELP) == 1)) then begin
		move_to(self_obj, tile_num_in_direction(tile_num(dude_obj), random(4, 5), 1), elevation(dude_obj));
	end
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(280, self_obj, 4, -1, -1);
	gsay_start;
	set_local_var(4, 1);
	if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
		call Fire18;
	end
	else begin
		if (global_var(QUEST_BONEYARD_1_ME_BLADE) == 2) then begin
			call Fire21;
		end
		else begin
			if (global_var(QUEST_BONEYARD_1_ME_BLADE) == 1) then begin
				if (global_var(BLADES_HELP) == 1) then begin
					call Fire19;
				end
				else begin
					call Fire20;
				end
			end
			else begin
				call Fire00;
			end
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Fire00
begin
	gsay_reply(280, 111);
	giq_option(-3, 280, 112, Fire01, 50);
	giq_option(4, 280, 113, Fire07, 50);
	giq_option(6, 280, 114, Fire11, 50);
	giq_option(5, 280, 115, FireCombat, 50);
	giq_option(4, 280, 116, FireEnd, 50);
	giq_option(6, 280, 117, Fire17, 50);
end

procedure Fire01
begin
	gsay_reply(280, 118);
	giq_option(-3, 280, 119, Fire02, 50);
	giq_option(-3, 280, 120, Fire05, 50);
	giq_option(-3, 280, 121, Fire06, 50);
end

procedure Fire02
begin
	gsay_reply(280, 122);
	giq_option(-3, 280, 123, Fire03, 50);
	giq_option(-3, 280, 124, Fire04, 50);
end

procedure Fire03
begin
	gsay_message(280, 125, 50);
end

procedure Fire04
begin
	gsay_message(280, 126, 50);
	call FireCombat;
end

procedure Fire05
begin
	gsay_message(280, 127, 50);
	call FireCombat;
end

procedure Fire06
begin
	gsay_message(280, 128, 50);
end

procedure Fire07
begin
	gsay_reply(280, 129);
	giq_option(4, 280, 130, FireEnd, 50);
	giq_option(4, 280, 131, Fire08, 50);
	giq_option(5, 280, 132, Fire09, 50);
	giq_option(7, 280, 133, Fire10, 50);
end

procedure Fire08
begin
	gsay_message(280, 134, 50);
	call FireCombat;
end

procedure Fire09
begin
	gsay_reply(280, 135);
	giq_option(5, 280, 136, FireEnd, 50);
	giq_option(5, 280, 137, Fire08, 50);
end

procedure Fire10
begin
	gsay_message(280, 138, 50);
end

procedure Fire11
begin
	gsay_reply(280, 139);
	giq_option(6, 280, 140, Fire12, 50);
	giq_option(6, 280, 141, Fire15, 50);
	giq_option(6, 280, 142, Fire16, 50);
end

procedure Fire12
begin
	gsay_reply(280, 143);
	giq_option(6, 280, 144, Fire13, 50);
	giq_option(6, 280, 145, Fire14, 50);
end

procedure Fire13
begin
	gsay_message(280, 146, 50);
end

procedure Fire14
begin
	gsay_message(280, 147, 50);
	call FireCombat;
end

procedure Fire15
begin
	gsay_message(280, 148, 50);
end

procedure Fire16
begin
	gsay_message(280, 149, 50);
	call FireCombat;
end

procedure Fire17
begin
	gsay_message(280, 150, 50);
	call FireCombat;
end

procedure Fire18
begin
	gsay_message(280, 151, 50);
	add_timer_event(self_obj, game_ticks(10), 2);
end

procedure Fire19
begin
	gsay_message(280, 152, 50);
end

procedure Fire20
begin
	gsay_message(280, 153, 50);
end

procedure Fire21
begin
	gsay_message(280, 154, 50);
end

procedure FireCombat
begin
	hostile := 1;
end

procedure FireEnd
begin
end

procedure follow_player
begin
	variable LVar0 := 0;
	prev_tile := dest_tile;
	LVar0 := (has_trait(1, dude_obj, 10) + random(4, 5)) % 6;
	dest_tile := tile_num_in_direction(tile_num(dude_obj), LVar0, random(2, 3));
	if (tile_distance(prev_tile, tile_num(dude_obj)) > tile_distance(dest_tile, tile_num(dude_obj))) then begin
		if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
			animate_move_obj_to_tile(self_obj, dest_tile, 1 bwor 16);
		end
		else begin
			animate_move_obj_to_tile(self_obj, dest_tile, 0 bwor 16);
		end
	end
	else begin
		if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
			animate_move_obj_to_tile(self_obj, dest_tile, 1);
		end
		else begin
			animate_move_obj_to_tile(self_obj, dest_tile, 0);
		end
	end
	if (tile_distance_objs(self_obj, dude_obj) > 3) then begin
		add_timer_event(self_obj, game_ticks(1), 1);
	end
	else begin
		add_timer_event(self_obj, game_ticks(random(2, 5)), 1);
	end
end

procedure show_true_name
begin
	script_overrides;
	if (local_var(4)) then begin
		display_msg(message_str(280, 100));
	end
	else begin
		display_msg(message_str(280, 103));
	end
end

procedure show_false_name
begin
	script_overrides;
	display_msg(message_str(280, random(104, 110)));
end

procedure timed_event_p_proc
begin
	if (fixed_param == 1) then begin
		call follow_player;
	end
	else begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			hostile := 1;
		end
	end
end



