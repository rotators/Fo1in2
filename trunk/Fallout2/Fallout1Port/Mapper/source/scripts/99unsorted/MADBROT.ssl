#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure talk_p_proc;//    script_action == 11
procedure combat;
procedure do_action;
procedure timetomove;

import variable table_ptr;

variable Hostile;
variable init := 0;
variable maxleash := 10;
variable noevent;
variable loopcount;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable new_tile;



procedure start
begin
	
	
	if (not(init)) then begin
		if (local_var(3) == 0) then begin
			set_local_var(3, tile_num(self_obj));
			set_local_var(1, 1);
		end
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 32);
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, 64);
		init := 1;
	end
	else begin
		if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
			call timetomove;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					Hostile := 1;
				end
				else begin
					if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
						call do_action;
					end
					else begin
						if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
							rm_timer_event(self_obj);

							if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
								if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
									set_global_var(BERSERKER_REPUTATION, 1);
									set_global_var(CHAMPION_REPUTATION, 0);
								end
								if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
									set_global_var(CHAMPION_REPUTATION, 1);
									set_global_var(BERSERKER_REPUTATION, 0);
								end
								set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
								if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
									set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
								end
							end
							rm_timer_event(self_obj);
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	dude_look_at_critter;
end

procedure combat
begin
	Hostile := 1;
end

procedure do_action
begin
	if (global_var(ENEMY_BROTHERHOOD)) then begin
		Hostile := 1;
	end
	if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
		Hostile := 0;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		set_global_var(ENEMY_BROTHERHOOD, 1);
		Hostile := 0;
		attack(dude_obj);
	end
	else begin
		if (local_var(1)) then begin
			if (random(1, 20) < 2) then begin
				if (random(1, 10) < 2) then begin
					use_obj(table_ptr);
				end
				else begin
					call timetomove;
				end
			end
		end
	end
end

procedure timetomove
begin
	noevent := 0;
	set_local_var(4, tile_num(self_obj));
	new_tile := tile_num_in_direction(local_var(4), random(0, 5), 2);
	if (tile_distance(local_var(3), new_tile) < maxleash) then begin
		animate_move_obj_to_tile(self_obj, new_tile, 0);
	end
end
