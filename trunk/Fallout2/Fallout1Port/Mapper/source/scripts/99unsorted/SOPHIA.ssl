#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure combat;
procedure critter_p_proc;//		script_action == 12
procedure pickup_p_proc;//		script_action == 4
procedure talk_p_proc;//		script_action == 11
procedure destroy_p_proc;//		script_action == 18
procedure look_at_p_proc;//		script_action == 21
procedure goto00;
procedure goto01;
procedure goto02;
procedure goto03;
procedure goto04;
procedure goto05;
procedure goto06;
procedure goto07;
procedure goto08;
procedure goto09;
procedure goto10;
procedure goto11;
procedure goto12;
procedure goto13;
procedure goto14;
procedure goto15;
procedure goto16;
procedure goto16b;
procedure goto17;
procedure goto18;
procedure goto19;
procedure goto20;
procedure goto20b;
procedure goto21;
procedure anger;
procedure gotoend;
procedure gotostory;
procedure grenades;
procedure grenadesGive;
procedure grenadesGiveLowInt;
procedure grenadesFail;

variable hostile;
variable item;
variable Pick;
variable Only_Once := 1;
variable message;
variable LVar0 := 0;
variable ch := 0;
variable exit_line;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;


procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if Only_Once then begin
		Only_Once := 0;
		/* TEAM_NUM */	critter_add_trait(self_obj, 1, 6, 44);
		/* AI_PACKET */	critter_add_trait(self_obj, 1, 5, 63);
	end
	if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
		call look_at_p_proc;
	end
	else begin
		if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
			call pickup_p_proc;
		end
		else begin
			if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
				call talk_p_proc;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
				end
			end
		end
	end
end

procedure combat
begin
	hostile := 1;
end

procedure critter_p_proc
begin
	if (global_var(ENEMY_BROTHERHOOD)) then begin
		hostile := 1;
	end
	if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
		hostile := 0;
	end
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		set_global_var(ENEMY_BROTHERHOOD, 1);
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
end

procedure pickup_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		hostile := 1;
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	start_gdialog(319, self_obj, 4, -1, -1);
	gsay_start;
	if global_var(MICHAEL_SOPHIA_GRENADES) == 1 then begin
		call grenades;
	end
	else begin
	if (local_var(4)) then begin
		if (local_var(1) < 2) then begin
			call goto20;
		end
		else begin
			call goto16;
		end
	end
	else begin
		set_local_var(4, 1);
		if (map_var(0) == 1) then begin
			call goto14;
		end
		else begin
			call goto00;
		end
	end
	end
	gsay_end;
	end_dialogue;
end

procedure destroy_p_proc
begin
	set_global_var(ENEMY_BROTHERHOOD, 1);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;	variable item2 := 0;	variable armor := 0;	variable item1PID := 0;	variable item2PID := 0;	variable armorPID := 0;	variable drophex := 0;	if global_var(DEBUG_MODE_MESSAGES_ON) then begin	debug_msg("Weapon Drop BEGINS");	end
		if (critter_inven_obj(self_obj, 1) > 0) then begin	item1 := critter_inven_obj(self_obj, 1);	end		if (critter_inven_obj(self_obj, 2) > 0) then begin	item2 := critter_inven_obj(self_obj, 2);	end		if (critter_inven_obj(self_obj, 0) > 0) then begin	armor := critter_inven_obj(self_obj, 0);	end		if item1 then begin	item1PID := obj_pid(item1);	end		if item2 then begin	item2PID := obj_pid(item2);	end		if armor then begin	armorPID := obj_pid(armor);	end		drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:	Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);	move_to(item1, drophex, elevation(self_obj));	end	end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);	move_to(item2, drophex, elevation(self_obj));	end	end		if global_var(DEBUG_MODE_MESSAGES_ON) then begin	debug_msg("Weapon Drop ENDS");	end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj == dude_obj then begin
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
	rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_SOPHIA, 100));
end

procedure goto00
begin
	gsay_reply(319, 301);
	giq_option(-3, 319, 302, goto01, 50);
	giq_option(4, 319, 303, goto02, 50);
	giq_option(4, 319, 304, goto03, 50);
	giq_option(4, 319, 305, goto02, 50);
	giq_option(4, 319, 306, anger, 51);
end

procedure goto01
begin
	gsay_message(319, 307, 51);
end

procedure goto02
begin
	gsay_reply(319, 308);
	if (global_var(NECROP_WATER_CHIP_TAKEN) != 1) then begin
		giq_option(4, 319, 309, goto04, 50);
	end
	giq_option(4, 319, 310, goto05, 50);
	giq_option(4, 319, 311, goto06, 50);
	giq_option(4, 319, 312, gotoend, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 319, 313, anger, 51);
	end
end

procedure goto03
begin
	gsay_reply(319, 314);
	giq_option(4, 319, 315, gotoend, 50);
	giq_option(4, 319, 316, goto07, 50);
end

procedure goto04
begin
	gsay_reply(319, 317);
	giq_option(4, 319, 318, goto07, 50);
	giq_option(4, 319, 319, goto06, 50);
	giq_option(4, 319, 320, anger, 51);
	giq_option(4, 319, 321, gotoend, 50);
end

procedure goto05
begin
	gsay_reply(319, 322);
	giq_option(4, 319, 323, gotoend, 50);
	giq_option(4, 319, 324, goto08, 50);
	giq_option(4, 319, 325, goto09, 50);
end

procedure goto06
begin
	gsay_reply(319, 326);
	giq_option(4, 319, 327, goto11, 50);
	giq_option(4, 319, 328, goto11, 50);
	if (local_var(6) != 1) then begin
		giq_option(4, 319, 329, goto12, 50);
	end
	giq_option(4, 319, 330, goto07, 50);
end

procedure goto07
begin
	gsay_reply(319, 331);
	if (local_var(6) != 1) then begin
		giq_option(4, 319, 332, goto12, 50);
	end
	giq_option(4, 319, 333, goto09, 50);
	if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
		giq_option(4, 319, 334, goto01, 51);
	end
	giq_option(4, 319, 335, goto05, 50);
end

procedure goto08
begin
	gsay_message(319, 336, 50);
end

procedure goto09
begin
	gsay_reply(319, 337);
	if (local_var(6) != 1) then begin
		giq_option(4, 319, 338, goto12, 49);
	end
	giq_option(4, 319, 339, DownReact, 51);
	giq_option(4, 319, 341, goto01, 51);
	giq_option(4, 319, 342, goto10, 50);
end

procedure goto10
begin
	gsay_message(319, 343, 50);
end

procedure goto11
begin
	gsay_reply(319, 344);
	giq_option(4, 319, 345, gotoend, 50);
	giq_option(4, 319, 346, goto13, 50);
	giq_option(4, 319, 347, DownReact, 51);
end

procedure goto12
begin
	set_local_var(6, 1);
	LVar0 := create_object_sid(PID_HOLODISK, 0, 0, SCRIPT_SOPDISK);
	add_obj_to_inven(dude_obj, LVar0);
	gsay_reply(319, 348);
	giq_option(4, 319, 349, gotoend, 50);
	giq_option(4, 319, 350, DownReact, 51);
end

procedure goto13
begin
	gsay_reply(319, 351);
	if (local_var(6) != 1) then begin
		giq_option(4, 319, 352, goto12, 49);
	end
	giq_option(4, 319, 349, gotoend, 50);
	giq_option(4, 319, 353, anger, 51);
end

procedure goto14
begin
	gsay_reply(319, 301);
	giq_option(-3, 319, 302, goto01, 50);
	giq_option(4, 319, 303, goto02, 50);
	giq_option(4, 319, 330, goto15, 50);
	giq_option(4, 319, 306, anger, 51);
end

procedure goto15
begin
	gsay_reply(319, 359);
	giq_option(4, 319, 360, goto07, 50);
	giq_option(4, 319, 361, anger, 51);
	giq_option(4, 319, 362, DownReact, 51);
end

procedure goto16
begin
	gsay_reply(319, 364);
	giq_option(4, 319, 365, goto17, 50);
	giq_option(4, 319, 366, goto16b, 50);
	giq_option(4, 319, 367, gotoend, 50);
	giq_option(-3, 319, 302, goto01, 50);
end

procedure goto16b
begin
	if (local_var(6) != 1) then begin
		call goto12;
	end
	else begin
		call goto18;
	end
end

procedure goto17
begin
	gsay_reply(319, 368);
	giq_option(4, 319, 369, gotoend, 50);
	giq_option(4, 319, 316, goto07, 50);
end

procedure goto18
begin
	gsay_reply(319, 374);
	giq_option(4, 319, 369, gotoend, 50);
	giq_option(4, 319, 350, DownReact, 51);
end

procedure goto19
begin
	gsay_reply(319, 374);
	giq_option(4, 319, 369, gotoend, 50);
	giq_option(4, 319, 350, DownReact, 51);
end

procedure goto20
begin
	gsay_reply(319, 377);
	giq_option(4, 319, 378, gotoend, 50);
	giq_option(4, 319, 379, goto20b, 49);
	giq_option(-3, 319, 302, goto01, 50);
end

procedure goto20b
begin
	if (is_success(roll_vs_skill(dude_obj, 14, -10))) then begin
		call goto21;
	end
	else begin
		call goto01;
	end
end

procedure goto21
begin
	call UpReact;
	gsay_reply(319, 380);
	giq_option(4, 319, 381, goto17, 50);
	giq_option(4, 319, 382, goto16b, 50);
	giq_option(4, 319, 383, gotoend, 50);
end

procedure grenades
begin
	gsay_reply(319, 201);
	if (obj_is_carrying_obj_pid(dude_obj, 27) >= 3) then begin
		giq_option(4, 319, 202, grenadesGive, 50);
		giq_option(-3, 319, 205, grenadesGiveLowInt, 50);
	end
	giq_option(5, 319, 203, gotoend, 50);
	giq_option(4, 319, 204, grenadesFail, 50);
end

procedure grenadesGive
begin
	LVar0 := obj_carrying_pid_obj(dude_obj, PID_PULSE_GRENADE);
	rm_obj_from_inven(dude_obj, LVar0);
	add_obj_to_inven(self_obj, LVar0);
	LVar0 := obj_carrying_pid_obj(dude_obj, PID_PULSE_GRENADE);
	rm_obj_from_inven(dude_obj, LVar0);
	add_obj_to_inven(self_obj, LVar0);
	LVar0 := obj_carrying_pid_obj(dude_obj, PID_PULSE_GRENADE);
	rm_obj_from_inven(dude_obj, LVar0);
	add_obj_to_inven(self_obj, LVar0);
	call UpReact;
	gsay_message(319, 206, 50);
	//if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
	ch := get_critter_stat(dude_obj, 3) > 5;
	if ch and is_success(do_check(dude_obj, 3, 0)) then begin
		//quest ok + bonus
		gsay_message(319, 208, 49);
		set_global_var(MICHAEL_SOPHIA_GRENADES, 4);
	end
	else begin
		//quest ok
		set_global_var(MICHAEL_SOPHIA_GRENADES, 3);
	end
end

procedure grenadesGiveLowInt
begin
	call UpReact;
	gsay_reply(319, 207);
	set_global_var(MICHAEL_SOPHIA_GRENADES, 3); //quest ok
	item := create_object_sid(PID_PULSE_GRENADE, 0, 0, -1);
	rm_obj_from_inven(dude_obj, item);
	rm_obj_from_inven(dude_obj, item);
	rm_obj_from_inven(dude_obj, item);
end

procedure grenadesFail
begin
	call DownReact;
	gsay_reply(319, 115);
	set_global_var(MICHAEL_SOPHIA_GRENADES, 2); //quest fail
end

procedure anger
begin
	call DownReact;
	call goto01;
end

procedure gotoend
begin
end

procedure gotostory
begin
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

