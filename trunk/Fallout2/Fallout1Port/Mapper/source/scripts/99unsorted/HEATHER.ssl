#include "..\headers\define.h"

procedure start;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure look_at_p_proc;//    script_action == 21
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11

procedure heather0;
procedure heather0a;
procedure heather0b;
procedure heather1;
procedure heather1a;
procedure heather2;
procedure heather3;
procedure heather3a;
procedure heather3b;
procedure heather3c;
procedure heather4;
procedure heather5;
procedure heather5a;
procedure heather6;
procedure heather7;
procedure heather8;
procedure heather9;
procedure heather10;
procedure heather11;
procedure heather12;
procedure heather13;
procedure heather14;
procedure heather15;
procedure heather16;
procedure heather17;
procedure heather18;
procedure heather19;
procedure heather20;
procedure heather21;
procedure heather22;
procedure heather22a;
procedure heather23;
procedure heather24;
procedure heather25;
procedure heather26;
procedure heather27;
procedure heather28;
procedure HeatherEnd;
procedure combat;

variable hostile;
variable initial :=  0;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
	if self_obj != 0 then begin
		set_global_var(IS_HEATHER_ALIVE, 1);
	end
	else begin
		set_global_var(IS_HEATHER_ALIVE, 0);
	end
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		critter_add_trait(self_obj, 1, 6, 20); // TEAM_NUM
		critter_add_trait(self_obj, 1, 5, 69); // AI_PACKET
		initial :=  1;
	end
	if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
		call critter_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			call destroy_p_proc;
		end
		else begin
			if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
				call look_at_p_proc;
			end
			else begin
				if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
					call pickup_p_proc;
				end
				else begin
					if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
						call talk_p_proc;
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (global_var(QUEST_BONEYARD_3_BOMBFOLL) == 2) then begin
		kill_critter(self_obj, 57);
	end
	else begin
		if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
			hostile := 0;
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure destroy_p_proc
begin
	set_global_var(IS_HEATHER_ALIVE, 0);
	set_global_var(QUEST_BONEYARD_4_FIND_SPY, 2);

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(SCRIPT_HEATHER, 100));
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure talk_p_proc
begin
	script_overrides;
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if ((game_time_hour >= 700) and (game_time_hour < 1800)) then begin
		start_gdialog(266, self_obj, 4, -1, -1);
		gsay_start;
		call heather0;
		gsay_end;
		end_dialogue;
	end
	else begin
		call heather28;
	end
end

procedure heather0
begin
	gsay_reply(266, 101);
	giq_option(-3, 266, 102, combat, 50);
	giq_option(-3, 266, 103, HeatherEnd, 50);
	giq_option(4, 266, 104, heather0a, 50);
	giq_option(4, 266, 105, combat, 50);
	giq_option(6, 266, 106, heather0b, 50);
end

procedure heather0a
begin
	if (local_var(1) < 2) then begin
		call heather19;
	end
	else begin
		call heather1;
	end
end

procedure heather0b
begin
	if (local_var(1) < 2) then begin
		call heather27;
	end
	else begin
		call heather21;
	end
end

procedure heather1
begin
	gsay_reply(266, 107);
	if (get_critter_stat(dude_obj, 34) == 0) then begin
		giq_option(4, 266, 108, heather2, 50);
	end
	if (global_var(QUEST_BONEYARD_4_FIND_SPY) == 1) then begin
		giq_option(4, 266, 109, heather1a, 50);
	end
	giq_option(4, 266, 110, heather19, 50);
	giq_option(4, 266, 111, heather20, 50);
end

procedure heather1a
begin
	call BigDownReact;
	call heather3;
end

procedure heather2
begin
	gsay_message(266, 112, 50);
end

procedure heather3
begin
	gsay_reply(266, 113);
	giq_option(5, 266, 114, heather3a, 50);
	giq_option(4, 266, 115, heather3b, 50);
	giq_option(4, 266, 116, heather3c, 50);
	giq_option(4, 266, 117, HeatherEnd, 50);
end

procedure heather3a
begin
	call DownReact;
	call heather4;
end

procedure heather3b
begin
	call UpReact;
	call heather10;
end

procedure heather3c
begin
	call BigDownReact;
	call heather8;
end

procedure heather4
begin
	gsay_reply(266, 118);
	giq_option(5, 266, 119, heather5, 50);
	giq_option(6, 266, 120, heather10, 50);
	giq_option(7, 266, 121, heather17, 50);
end

procedure heather5
begin
	gsay_reply(266, 122);
	giq_option(5, 266, 123, heather5a, 50);
	giq_option(5, 266, 124, heather7, 50);
	giq_option(6, 266, 125, heather9, 50);
end

procedure heather5a
begin
	call BigUpReact;
	call heather6;
end

procedure heather6
begin
	gsay_message(266, 126, 50);
end

procedure heather7
begin
	gsay_reply(266, 127);
	giq_option(4, 266, 128, heather6, 50);
	giq_option(4, 266, 129, heather8, 50);
end

procedure heather8
begin
	gsay_message(266, 130, 50);
	call combat;
end

procedure heather9
begin
	gsay_reply(266, 131);
	giq_option(4, 266, 132, heather6, 50);
	giq_option(4, 266, 133, heather8, 50);
end

procedure heather10
begin
	gsay_reply(266, 134);
	giq_option(4, 266, 135, heather11, 50);
	giq_option(5, 266, 136, heather12, 50);
	giq_option(4, 266, 137, HeatherEnd, 50);
end

procedure heather11
begin
	gsay_reply(266, 138);
	giq_option(4, 266, 139, HeatherEnd, 50);
end

procedure heather12
begin
	gsay_reply(266, 140);
	giq_option(4, 266, 141, heather6, 50);
	giq_option(4, 266, 142, heather13, 50);
	giq_option(4, 266, 143, HeatherEnd, 50);
end

procedure heather13
begin
	gsay_reply(266, 144);
	giq_option(4, 266, 145, heather14, 50);
	giq_option(4, 266, 146, heather15, 50);
	giq_option(4, 266, 147, heather16, 50);
end

procedure heather14
begin
	gsay_reply(266, 148);
	giq_option(4, 266, 149, heather6, 50);
	giq_option(4, 266, 150, heather8, 50);
end

procedure heather15
begin
	gsay_reply(266, 151);
	giq_option(4, 266, 152, heather8, 50);
	giq_option(4, 266, 153, combat, 50);
end

procedure heather16
begin
	gsay_message(266, 154, 50);
end

procedure heather17
begin
	gsay_reply(266, 155);
	giq_option(4, 266, 156, heather8, 50);
	giq_option(4, 266, 157, heather18, 50);
end

procedure heather18
begin
	gsay_reply(266, 158);
	giq_option(4, 266, 159, heather8, 50);
	giq_option(4, 266, 160, heather6, 50);
end

procedure heather19
begin
	gsay_message(266, 161, 50);
end

procedure heather20
begin
	gsay_message(266, 162, 50);
end

procedure heather21
begin
	gsay_reply(266, 163);
	giq_option(6, 266, 164, heather22, 50);
	giq_option(6, 266, 165, heather26, 50);
	giq_option(6, 266, 166, heather25, 50);
end

procedure heather22
begin
	gsay_reply(266, 167);
	giq_option(6, 266, 168, heather22a, 50);
	giq_option(6, 266, 169, heather25, 50);
end

procedure heather22a
begin
	variable LVar0 := 0;
	if (item_caps_total(dude_obj) >= 300) then begin
		item_caps_adjust(dude_obj, -300);
		call heather23;
	end
	else begin
		call heather24;
	end
end

procedure heather23
begin
	gsay_message(266, 170, 50);
end

procedure heather24
begin
	gsay_message(266, 171, 50);
	call combat;
end

procedure heather25
begin
	gsay_message(266, 172, 50);
end

procedure heather26
begin
	gsay_reply(266, 173);
	giq_option(6, 266, 174, heather22a, 50);
	giq_option(6, 266, 175, heather25, 50);
end

procedure heather27
begin
	gsay_message(266, 176, 50);
end

procedure heather28
begin
	float_msg(self_obj, message_str(SCRIPT_HEATHER, 177), 0);
end

procedure HeatherEnd
begin
end

procedure combat
begin
	hostile := 1;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

