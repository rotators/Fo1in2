#include "..\headers\define.h"

procedure start;
procedure talk_p_proc;//    script_action == 11
procedure timeforwhat;
procedure destroy_p_proc;
procedure critter_p_proc;

procedure genericend;
procedure genericcbt;

variable Hostile;
variable init_teams := 0;
variable noevent;
variable loopcount;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable time;
variable maxsight;
variable maxleash := 9;
variable new_tile;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, STAT_max_hp) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (not(init_teams)) then begin
		init_teams := 1;
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 34);
		if (local_var(2) == 0) then begin
			set_local_var(2, tile_num(self_obj));
		end
	end
	if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
		call timeforwhat;
	end
	else begin
		if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
			call talk_p_proc;
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				Hostile := 1;
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					call critter_p_proc;
				end
				else begin
					if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
						call destroy_p_proc;
					end
					else begin
						if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
							display_msg(message_str(SCRIPT_MUTANT2, 100));
						end
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(13, self_obj, 4, -1, -1);
	gsay_start;
	set_local_var(0, 1);
	if (get_critter_stat(dude_obj, STAT_gender) == 0) then begin
		gsay_message(13, 101, 50);
	end
	else begin
		gsay_message(13, 102, 50);
	end
	gsay_end;
	end_dialogue;
end

procedure timeforwhat
begin
	noevent := 0;
	rndy := random(1, 6);
	if (rndy > 1) then begin
		dist := 2;
	end
	if (rndy > 5) then begin
		dist := 3;
	end
	rndz := random(0, 5);
	set_local_var(3, tile_num(self_obj));
	new_tile := tile_num_in_direction(local_var(3), rndz, dist);
	if (tile_distance(local_var(2), new_tile) < maxleash) then begin
		animate_move_obj_to_tile(self_obj, new_tile, 0);
	end
end

procedure genericend
begin
end

procedure genericcbt
begin
end

procedure destroy_p_proc
begin
	set_global_var(SUPER_MUTANTS_KILLED, (global_var(SUPER_MUTANTS_KILLED) + 1));
	rm_timer_event(self_obj);

	if source_obj == dude_obj then begin
		set_global_var(NUM_BAD_MONSTERS_KILLED, global_var(NUM_BAD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A BAD GUY. INCREASE BadGuysKilled COUNTER
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) % 6) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, global_var(PLAYER_REPUTATION_GENERAL) + 1);
		end
	end
	rm_timer_event(self_obj);
end

procedure critter_p_proc
begin
	if (global_var(NECROPOLIS_WAS_INVADED) == 0) then begin
		if (metarule(22, 0) == 0) then begin    set_obj_visibility(self_obj, 1);    end//  MAKE INVISIBLE
	end
	else begin
		maxsight := get_critter_stat(self_obj, STAT_pe);
		time := game_time_hour;
		if ((time > 2300) or (time < 600)) then begin
			maxsight := 4;
		end
		if ((tile_distance_objs(self_obj, dude_obj) <= maxsight) and obj_can_see_obj(self_obj, dude_obj)) then begin
			if ((Hostile > 0) or (local_var(0) > 0)) then begin
				Hostile := 0;
				attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
			end
			else begin
				call talk_p_proc;
			end
		end
		loopcount := loopcount + 1;
		if (loopcount > 40) then begin
			loopcount := 0;
			if (noevent == 0) then begin
				noevent := 1;
				rndx := 5 + random(1, 10);
				add_timer_event(self_obj, game_ticks(rndx), 0);
			end
		end
	end
end
