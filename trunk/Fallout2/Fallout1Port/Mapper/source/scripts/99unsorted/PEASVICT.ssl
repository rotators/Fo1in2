#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure damage_p_proc;//    script_action == 14
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure talk_p_proc;//    script_action == 11
procedure flee_dude;

variable initial :=  0;
variable dude_enemy;
variable cap_count;



procedure start
begin
	
	
	if (not(initial) and metarule(14, 0)) then begin
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET, global_var(MYST_STRANGER_ITEM));
		critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 2);
		initial :=  1;
		float_msg(self_obj, message_str(SCRIPT_PHIL, random(128, 129)), 0);
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 14) then begin//<-- damage_p_proc - has this Critter or Object been shot, hit with TNT, punched, etc.
				call damage_p_proc;
			end
			else begin
				if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
					call destroy_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	dude_enemy := global_var(RND_ENC_PEASANTS_HOSTILE);
	if ((dude_enemy >= 3) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
		call flee_dude;
	end
	else begin
		if ((global_var(WATER_THIEF_2) <= 0) and (dude_enemy < 3) and (global_var(RND_ENC_RAIDERS_KILLED) > 0)) then begin
			terminate_combat;
			if (not(global_var(RND_ENC_PEASANTS_INIT)) and (obj_pid(self_obj) != PID_DOG)) then begin
				cap_count := random(80, 120);
				if (random(0, 1)) then begin
					float_msg(self_obj, message_str(SCRIPT_PHIL, 130) + cap_count + message_str(SCRIPT_PHIL, 131), 0);
				end
				else begin
					float_msg(self_obj, message_str(SCRIPT_PHIL, 132) + cap_count + message_str(SCRIPT_PHIL, 133), 0);
				end
				item_caps_adjust(dude_obj, cap_count);
				set_global_var(RND_ENC_PEASANTS_INIT, 1);
			end
		end
	end
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		dude_enemy := global_var(RND_ENC_PEASANTS_HOSTILE);
		dude_enemy := dude_enemy + 1;
		set_global_var(RND_ENC_PEASANTS_HOSTILE, dude_enemy);
	end
end

procedure destroy_p_proc begin
	inc_good_critter
	inc_childkiller
end

procedure pickup_p_proc begin
	dude_enemy := global_var(RND_ENC_PEASANTS_HOSTILE);
	dude_enemy := dude_enemy + 1;
	set_global_var(RND_ENC_PEASANTS_HOSTILE, dude_enemy);
end

procedure talk_p_proc
begin
	dude_look_at_critter;
	dude_enemy := global_var(RND_ENC_PEASANTS_HOSTILE);
	if (obj_pid(self_obj) != PID_DOG) then begin
		if (dude_enemy >= 3) then begin
			float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), 0);
		end
		else begin
			float_msg(self_obj, message_str(SCRIPT_PHIL, 127), 0);
		end
	end
end

procedure flee_dude
begin
	variable LVar0 := 0;
	variable LVar1 := 0;
	variable LVar2 := 0;
	while(LVar1 < 5) do begin
		if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
			LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
			LVar2 := tile_distance(tile_num(dude_obj), LVar0);
		end
		LVar1 := LVar1 + 1;
	end
	animate_move_obj_to_tile(self_obj, LVar0, 1);
end
