#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure talk_p_proc;//    script_action == 11
procedure PalGuard01;
procedure PalGuard02;

variable line;
variable Only_Once;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, PID_BAG) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BACKPACK) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, PID_BROWN_BAG) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_COMBAT_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_METAL_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_ARMOR); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, PID_LEATHER_JACKET); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, PID_PURPLE_ROBE); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if (Only_Once == 0) then begin
		Only_Once := 1;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 44);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 65);
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
			rm_timer_event(self_obj);

			if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
				if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
					set_global_var(BERSERKER_REPUTATION, 1);
					set_global_var(CHAMPION_REPUTATION, 0);
				end
				if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
					set_global_var(CHAMPION_REPUTATION, 1);
					set_global_var(BERSERKER_REPUTATION, 0);
				end
				set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
				if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
					set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
				end
			end
			rm_timer_event(self_obj);
		end
		else begin
			if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
				script_overrides;
				display_msg(message_str(SCRIPT_PALGUARD, 100));
			end
			else begin
				if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
					attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	call get_reaction;
	if (local_var(1) < 2) then begin
		call PalGuard01;
	end
	else begin
		call PalGuard02;
	end
end

procedure PalGuard01
begin
	if (not(line)) then begin
		line := random(1, 9);
	end
	else begin
		line := line + 1;
	end
	if (line > 9) then begin
		line := 1;
	end
	if (line == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_PALGUARD, 101), 2);
	end
	else begin
		if (line == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_PALGUARD, 102), 2);
		end
		else begin
			if (line == 3) then begin
				float_msg(self_obj, message_str(SCRIPT_PALGUARD, 103), 2);
			end
			else begin
				if (line == 4) then begin
					float_msg(self_obj, message_str(SCRIPT_PALGUARD, 104), 2);
				end
				else begin
					if (line == 5) then begin
						float_msg(self_obj, message_str(SCRIPT_PALGUARD, 105), 2);
					end
					else begin
						if (line == 6) then begin
							if (get_critter_stat(dude_obj, 34) == 1) then begin
								float_msg(self_obj, message_str(SCRIPT_PALGUARD, 106), 2);
							end
							else begin
								line := line + 1;
							end
						end
						else begin
							if (line == 7) then begin
								if (global_var(QUEST_BROHOOD_1_JOIN_THEM) == 2) then begin
									float_msg(self_obj, message_str(SCRIPT_PALGUARD, 107), 2);
								end
								else begin
									line := line + 1;
								end
							end
							else begin
								if (line == 8) then begin
									if (global_var(QUEST_BROHOOD_1_JOIN_THEM) < 2) then begin
										float_msg(self_obj, message_str(SCRIPT_PALGUARD, 108), 2);
									end
									else begin
										line := line + 1;
									end
								end
								else begin
									if (line == 9) then begin
										if (global_var(QUEST_BROHOOD_1_JOIN_THEM) < 2) then begin
											float_msg(self_obj, message_str(SCRIPT_PALGUARD, 109), 2);
										end
										else begin
											line := 1;
											float_msg(self_obj, message_str(SCRIPT_PALGUARD, 110), 2);
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure PalGuard02
begin
	if (not(line)) then begin
		line := random(1, 10);
	end
	else begin
		line := line + 1;
	end
	if (line > 10) then begin
		line := 1;
	end
	if (line == 1) then begin
		float_msg(self_obj, message_str(SCRIPT_PALGUARD, 111), 2);
	end
	else begin
		if (line == 2) then begin
			float_msg(self_obj, message_str(SCRIPT_PALGUARD, 112), 2);
		end
		else begin
			if (line == 3) then begin
				float_msg(self_obj, message_str(SCRIPT_PALGUARD, 113), 2);
			end
			else begin
				if (line == 4) then begin
					float_msg(self_obj, message_str(SCRIPT_PALGUARD, 114), 2);
				end
				else begin
					if (line == 5) then begin
						float_msg(self_obj, message_str(SCRIPT_PALGUARD, 115), 2);
					end
					else begin
						if (line == 7) then begin
							if (global_var(QUEST_BROHOOD_1_JOIN_THEM) == 2) then begin
								float_msg(self_obj, message_str(SCRIPT_PALGUARD, 116), 2);
							end
							else begin
								float_msg(self_obj, message_str(SCRIPT_PALGUARD, 117), 2);
							end
						end
						else begin
							if (line == 7) then begin
								if (global_var(QUEST_BROHOOD_1_JOIN_THEM) == 2) then begin
									float_msg(self_obj, message_str(SCRIPT_PALGUARD, 118), 2);
								end
								else begin
									float_msg(self_obj, message_str(SCRIPT_PALGUARD, 119), 2);
								end
							end
						end
					end
				end
			end
		end
	end
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end



