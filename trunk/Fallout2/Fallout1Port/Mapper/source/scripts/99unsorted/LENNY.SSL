#include "..\headers\define.h"

procedure start;
procedure talk_p_proc;//    script_action == 11
procedure Lenny00;
procedure Lenny01;
procedure Lenny02;
procedure Lenny03;
procedure Lenny04;
procedure Lenny04a;
procedure Lenny04b;
procedure Lenny05;
procedure Lenny06;
procedure Lenny06a;
procedure Lenny07;
procedure Lenny08;
procedure Lenny09;
procedure Lenny10;
procedure Lenny11;
procedure Lenny12;
procedure Lenny13;
procedure Lenny14;
procedure Lenny15;
procedure Lenny16;
procedure Lenny17;
procedure Lenny18;
procedure Lenny19;
procedure LennyEnd;
procedure LennyCombat;

variable known;
variable hostile;
variable Only_Once := 1;

import variable know_fools;
import variable know_crypts;
import variable know_power;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable reactionamt := 50;
variable reaction_level := 2;
variable got_reaction;
variable badguy;
variable exit_line;


procedure start
begin
	if Only_Once then begin
		Only_Once := 0;
critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM, 4);
	end
	if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
		call talk_p_proc;
	end
	else begin
		if ((script_action == 21) or (script_action == 3)) then begin// 21 is look_at, 3 is description (Binoculars)   //NEED TO FIX THIS, DUPLICATE DESCRIPTIONS IS BULLSHIT. --Sduibek
			script_overrides;
			if (known) then begin
				display_msg(message_str(SCRIPT_LENNY, 100));
			end
			else begin
				display_msg(message_str(SCRIPT_LENNY, 101));
			end
		end
		else begin
			if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
				attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
			end
			else begin
				if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
					if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
						hostile := 0;
						attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
					end
				end
			end
		end
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(406, self_obj, 4, -1, -1);
	gsay_start;
	if (reaction_level < 2) then begin
		call Lenny14;
	end
	else begin
		if (known) then begin
			call Lenny09;
		end
		else begin
			call Lenny01;
		end
	end
	gsay_end;
	end_dialogue;
end

procedure Lenny00
begin
	known := 1;
	sayReply(0, message_str(SCRIPT_LENNY, 104));
	if (get_critter_stat(dude_obj, STAT_iq) >= 0) then begin
		sayOption(message_str(SCRIPT_LENNY, 103), LennyCombat);
	end
end

procedure Lenny01
begin
	sayReply(0, message_str(SCRIPT_LENNY, 105));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 106), Lenny15);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 107), Lenny03);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 108), Lenny02);
	end
end

procedure Lenny02
begin
	sayReply(0, message_str(SCRIPT_LENNY, 109));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 107), Lenny03);
	end
	sayOption("", Lenny03);
end

procedure Lenny03
begin
	sayReply(0, message_str(SCRIPT_LENNY, 110));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 111), Lenny08);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 112), Lenny04);
	end
end

procedure Lenny04
begin
	sayReply(0, message_str(SCRIPT_LENNY, 113));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 114), Lenny04a);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 115), Lenny04b);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 116), Lenny06);
	end
end

procedure Lenny04a
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
		call Lenny05;
	end
	else begin
		call Lenny06;
	end
end

procedure Lenny04b
begin
	if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
		call Lenny07;
	end
	else begin
		call Lenny06;
	end
end

procedure Lenny05
begin
	sayReply(0, message_str(SCRIPT_LENNY, 117));
	if (get_critter_stat(dude_obj, STAT_iq) >= 0) then begin
		sayOption(message_str(SCRIPT_LENNY, 118), LennyEnd);
	end
	sayOption("", LennyEnd);
end

procedure Lenny06
begin
	sayReply(0, message_str(SCRIPT_LENNY, 119));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 120), Lenny06a);
	end
	sayOption("", Lenny06a);
end

procedure Lenny06a
begin
	reaction_level := 1;
	call LevelToReact;
end

procedure Lenny07
begin
	sayReply(0, message_str(SCRIPT_LENNY, 121));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 122), LennyEnd);
	end
	sayOption("", LennyEnd);
end

procedure Lenny08
begin
	sayReply(0, message_str(SCRIPT_LENNY, 123));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 122), LennyEnd);
	end
	sayOption("", LennyEnd);
end

procedure Lenny09
begin
	sayReply(0, message_str(SCRIPT_LENNY, 124));
	if (know_fools) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 125), Lenny10);
		end
	end
	if (know_crypts) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 126), Lenny11);
		end
	end
	if (know_power) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 127), Lenny12);
		end
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 128), LennyEnd);
	end
	sayOption("", LennyEnd);
end

procedure Lenny10
begin
	sayReply(0, message_str(SCRIPT_LENNY, 129));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 130), LennyEnd);
	end
	if (know_crypts) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 126), Lenny11);
		end
	end
	if (know_power) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 127), Lenny12);
		end
	end
	sayOption("", LennyEnd);
end

procedure Lenny11
begin
	sayReply(0, message_str(SCRIPT_LENNY, 131));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 130), LennyEnd);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 132), Lenny13);
	end
	if (know_fools) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 125), Lenny10);
		end
	end
	if (know_power) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 127), Lenny12);
		end
	end
end

procedure Lenny12
begin
	sayReply(0, message_str(SCRIPT_LENNY, 133));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 130), LennyEnd);
	end
	if (know_fools) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 125), Lenny10);
		end
	end
	if (know_crypts) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 126), Lenny11);
		end
	end
	sayOption("", LennyEnd);
end

procedure Lenny13
begin
	sayReply(0, message_str(SCRIPT_LENNY, 134));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 130), LennyEnd);
	end
	if (know_fools) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 125), Lenny10);
		end
	end
	if (know_crypts) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 126), Lenny11);
		end
	end
	if (know_power) then begin
		if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
			sayOption(message_str(SCRIPT_LENNY, 127), Lenny12);
		end
	end
	sayOption("", LennyEnd);
end

procedure Lenny14
begin
	sayReply(0, message_str(SCRIPT_LENNY, 135));
	if (get_critter_stat(dude_obj, STAT_iq) >= 0) then begin
		sayOption(message_str(SCRIPT_LENNY, 103), LennyEnd);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 0) then begin
		sayOption("", LennyEnd);
	end
	sayOption("", LennyEnd);
end

procedure Lenny15
begin
	sayReply(0, message_str(SCRIPT_LENNY, 136));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 137), Lenny16);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 138), Lenny17);
	end
end

procedure Lenny16
begin
	sayReply(0, message_str(SCRIPT_LENNY, 139));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 140), Lenny03);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 141), Lenny18);
	end
end

procedure Lenny17
begin
	sayReply(0, message_str(SCRIPT_LENNY, 142));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 130), LennyEnd);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 143), Lenny03);
	end
end

procedure Lenny18
begin
	sayReply(0, message_str(SCRIPT_LENNY, 144));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 145), Lenny03);
	end
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 146), Lenny19);
	end
end

procedure Lenny19
begin
	sayReply(0, message_str(SCRIPT_LENNY, 147));
	if (get_critter_stat(dude_obj, STAT_iq) >= 4) then begin
		sayOption(message_str(SCRIPT_LENNY, 103), LennyCombat);
	end
	sayOption("", LennyCombat);
end

procedure LennyEnd
begin
end

procedure LennyCombat
begin
	hostile := 1;
end

procedure get_reaction
begin
	if (not(got_reaction)) then begin
		got_reaction := 1;
		reactionamt := reactionamt + ((get_critter_stat(dude_obj, STAT_ch) - 5) * 5);
		if (badguy) then begin
			reactionamt := reactionamt - global_var(PLAYER_REPUTATION_GENERAL);
		end
		else begin
			reactionamt := reactionamt + global_var(PLAYER_REPUTATION_GENERAL);
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			reactionamt := reactionamt - 30;
		end
		if ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1)) then begin
			reactionamt := reactionamt + 20;
		end
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1)) then begin
			reactionamt := reactionamt - 20;
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (reactionamt < 24) then begin
		reaction_level := 1;
	end
	else begin
		if (reactionamt < 74) then begin
			reaction_level := 2;
		end
		else begin
			reaction_level := 3;
		end
	end
end

procedure LevelToReact
begin
	if (reaction_level == 1) then begin
		reactionamt := random(1, 24);
	end
	else begin
		if (reaction_level == 2) then begin
			reactionamt := random(25, 74);
		end
		else begin
			reactionamt := random(75, 100);
		end
	end
end

procedure UpReact
begin
	reactionamt := reactionamt + 10;
	call ReactToLevel;
end

procedure DownReact
begin
	reactionamt := reactionamt - 10;
	call ReactToLevel;
end

procedure BottomReact
begin
	reaction_level := 1;
	reactionamt := 1;
end

procedure TopReact
begin
	reactionamt := 100;
	reaction_level := 3;
end

procedure BigUpReact
begin
	reactionamt := reactionamt + 25;
	call ReactToLevel;
end

procedure BigDownReact
begin
	reactionamt := reactionamt - 25;
	call ReactToLevel;
end

procedure UpReactLevel
begin
	reaction_level := reaction_level + 1;
	if (reaction_level > 3) then begin
		reaction_level := 3;
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	reaction_level := reaction_level - 1;
	if (reaction_level < 1) then begin
		reaction_level := 1;
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	variable LVar0 := 0;
	LVar0 := random(1, 6);
	if (LVar0 == 1) then begin
		exit_line := "Thanks, bye.";
	end
	if (LVar0 == 2) then begin
		exit_line := "Okay, thanks.";
	end
	if (LVar0 == 3) then begin
		exit_line := "Hmm. Bye.";
	end
	if (LVar0 == 4) then begin
		exit_line := "See ya.";
	end
	if (LVar0 == 5) then begin
		exit_line := "Thanks.";
	end
	if (LVar0 == 6) then begin
		exit_line := "Okay, bye.";
	end
end
