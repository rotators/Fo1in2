#include "..\headers\define.h"

procedure start;
procedure destroy_p_proc;

procedure weapon_check;
procedure prepare_for_combat;
procedure do_combat;// timed event
procedure recover_from_combat;

import variable Student_ptr;

variable initial :=  0;
variable armed;
variable v;
variable x;
variable student_armed;
variable instructor_armed;
variable st_manuver0;
variable st_manuver1;
variable st_manuver2;
variable in_manuver0;
variable in_manuver1;
variable in_manuver2;
variable outcome;
variable sequence;
variable atk;
variable who;
variable fall;



procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, 17) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, 17); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 2) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, 2); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 1) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, 1); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 74) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, 74); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 113) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, 113); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initial) then begin
		initial :=  1;
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 30);
		/* AI_PACKET */  critter_add_trait(self_obj, 1, 5, 62);
		call prepare_for_combat;
	end
	if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
		call destroy_p_proc;
	end
	else begin
		if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
			call do_combat;
		end
		else begin
			if ((script_action == 12) and (v != 1)) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
				v := 1;
				add_timer_event(self_obj, game_ticks(5), 0);
			end
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	rm_timer_event(self_obj);
end

procedure weapon_check
begin
	if ((obj_item_subtype(critter_inven_obj(Student_ptr, 1)) == 3) or (obj_item_subtype(critter_inven_obj(Student_ptr, 2)) == 3)) then begin
		armed := 1;
	end
	else begin
		armed := 0;
	end
end

procedure prepare_for_combat
begin
	if (student_armed) then begin
		st_manuver0 := 41;
		st_manuver1 := 42;
		st_manuver2 := 40;
	end
	else begin
		st_manuver0 := 16;
		st_manuver1 := 17;
		st_manuver2 := 13;
	end
	if (instructor_armed) then begin
		in_manuver0 := 41;
		in_manuver1 := 42;
		in_manuver2 := 40;
	end
	else begin
		in_manuver0 := 16;
		in_manuver1 := 17;
		in_manuver2 := 13;
	end
end

procedure do_combat
begin
	if (fall > 0) then begin
		call recover_from_combat;
	end
	else begin
		atk := random(0, 1);
		if (atk) then begin
			atk := 3;
		end
		x := random(1, 6);
		if (who == 0) then begin
			if (x < 3) then begin
				outcome := 0;
			end
			else begin
				if (x < 5) then begin
					outcome := 1;
				end
				else begin
					outcome := 2;
				end
			end
		end
		else begin
			if (x < 4) then begin
				outcome := 0;
			end
			else begin
				if (x < 6) then begin
					outcome := 1;
				end
				else begin
					outcome := 2;
				end
			end
		end
		sequence := atk + outcome;
		reg_anim_func(2, self_obj);
		reg_anim_func(2, Student_ptr);
		reg_anim_func(1, 1);
		if (who == 0) then begin
			if (sequence == 0) then begin
				reg_anim_animate(Student_ptr, st_manuver0, -1);
				reg_anim_animate(self_obj, in_manuver2, 4);
			end
			else begin
				if (sequence == 1) then begin
					reg_anim_animate(Student_ptr, st_manuver0, -1);
					reg_anim_animate(self_obj, 14, 4);
				end
				else begin
					if (sequence == 2) then begin
						fall := 1;
						reg_anim_animate(Student_ptr, st_manuver0, -1);
						reg_anim_animate(self_obj, 20, 4);
					end
					else begin
						if (sequence == 3) then begin
							reg_anim_animate(Student_ptr, st_manuver1, -1);
							reg_anim_animate(self_obj, in_manuver2, 6);
						end
						else begin
							if (sequence == 4) then begin
								reg_anim_animate(Student_ptr, st_manuver1, -1);
								reg_anim_animate(self_obj, 14, 6);
							end
							else begin
								if (sequence == 5) then begin
									fall := 1;
									reg_anim_animate(Student_ptr, st_manuver1, -1);
									reg_anim_animate(self_obj, 20, 6);
								end
							end
						end
					end
				end
			end
		end
		else begin
			if (sequence == 0) then begin
				reg_anim_animate(self_obj, in_manuver0, -1);
				reg_anim_animate(Student_ptr, st_manuver2, 4);
			end
			else begin
				if (sequence == 1) then begin
					reg_anim_animate(self_obj, in_manuver0, -1);
					reg_anim_animate(Student_ptr, 14, 4);
				end
				else begin
					if (sequence == 2) then begin
						fall := 2;
						reg_anim_animate(self_obj, in_manuver0, -1);
						reg_anim_animate(Student_ptr, 20, 4);
					end
					else begin
						if (sequence == 3) then begin
							reg_anim_animate(self_obj, in_manuver1, -1);
							reg_anim_animate(Student_ptr, st_manuver2, 6);
						end
						else begin
							if (sequence == 4) then begin
								reg_anim_animate(self_obj, in_manuver1, -1);
								reg_anim_animate(Student_ptr, 14, 6);
							end
							else begin
								if (sequence == 5) then begin
									fall := 2;
									reg_anim_animate(self_obj, in_manuver1, -1);
									reg_anim_animate(Student_ptr, 20, 6);
								end
							end
						end
					end
				end
			end
		end
		reg_anim_func(3, 0);
		who := 1 - who;
		add_timer_event(self_obj, game_ticks(2), 0);
	end
end

procedure recover_from_combat
begin
	reg_anim_func(2, self_obj);
	reg_anim_func(2, Student_ptr);
	reg_anim_func(1, 1);
	if (fall == 1) then begin
		reg_anim_animate(Student_ptr, 0, -1);
		reg_anim_animate(self_obj, 37, -1);
	end
	else begin
		reg_anim_animate(self_obj, 0, -1);
		reg_anim_animate(Student_ptr, 37, -1);
	end
	reg_anim_func(3, 0);
	fall := 0;
	v := 0;
end

