#include "..\headers\define.h"

procedure start;    variable SrcObj := 0;    variable SrcIsParty := 0;
procedure critter_p_proc;//    script_action == 12
procedure destroy_p_proc;//    script_action == 18
procedure pickup_p_proc;//    script_action == 4
procedure look_at_p_proc;//    script_action == 21
procedure talk_p_proc;//    script_action == 11
procedure timed_event_p_proc;//    script_action == 22
procedure Gretch00;
procedure Gretch00a;
procedure Gretch00b;
procedure Gretch01;
procedure Gretch01a;
procedure Gretch02;
procedure Gretch02a;
procedure Gretch03;
procedure Gretch03a;
procedure Gretch04;
procedure Gretch05;
procedure Gretch05a;
procedure Gretch06;
procedure Gretch07;
procedure Gretch08;
procedure Gretch09;
procedure Gretch10;
procedure GretchEnd;
procedure GretchCombat;

variable hostile;
variable initialized := 0;
variable warned_about_messing;

import variable Gretch_call;
import variable messing_with_Morbid_stuff;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

procedure damage_p_proc;//    script_action == 14




procedure start
begin
	if local_var(12) != 1 then begin// Fallout Fixt lvar12 - this code block heals critter to full HP one time (first time player enters the map) to make sure they always start with full HP.
		if (map_first_run) then begin// Fallout Fixt lvar12 - first visit to map?
			if metarule(22, 0) == 0 then begin// Fallout Fixt lvar12 - Not currently loading a save?
				if get_critter_stat(self_obj, 7) > 0 then begin critter_heal(self_obj, 999); end//    if obj_is_carrying_obj_pid(self_obj, 46) > 0 then begin display_msg("S-bag " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 90) > 0 then begin display_msg("Pack " + proto_data(obj_pid(self_obj), 1)); end  if obj_is_carrying_obj_pid(self_obj, 93) > 0 then begin display_msg("M-bag " + proto_data(obj_pid(self_obj), 1)); end
				if global_var(ARMOR_EQUIP_MOD) then begin if critter_inven_obj(self_obj, 0) <= 0 then begin// Equip held armor if not currently wearing any.
					variable A; if obj_carrying_pid_obj(self_obj, 17) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR..."); A := obj_carrying_pid_obj(self_obj, 17); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 2) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR..."); A := obj_carrying_pid_obj(self_obj, 2); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 1) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR..."); A := obj_carrying_pid_obj(self_obj, 1); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 74) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET..."); A := obj_carrying_pid_obj(self_obj, 74); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end else begin if obj_carrying_pid_obj(self_obj, 113) then begin debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES..."); A := obj_carrying_pid_obj(self_obj, 113); rm_obj_from_inven(self_obj, A); add_obj_to_inven(self_obj, A); wield_obj_critter(self_obj, A); end end end end end end end
				set_local_var(12, 1);
			end
		end
	end
	if not(initialized) then begin
		/* TEAM_NUM */  critter_add_trait(self_obj, 1, 6, 19);
		initialized := 1;
	end
	else begin
		if (script_action == 12) then begin//<-- critter_p_proc - (can also be "Critter_Action") - do they see you, should they wander, should they attack you, etc..
			call critter_p_proc;
		end
		else begin
			if (script_action == 18) then begin//destroy_p_proc - Object or Critter has been killed or otherwise eradicated. Fall down go boom.
				call destroy_p_proc;
			end
			else begin
				if (script_action == 21) then begin//MOUSE-OVER DESCRIPTION -- look_at_p_proc - (usually brief length. hovered mouse over object, haven't clicked on it.)
					call look_at_p_proc;
				end
				else begin
					if (script_action == 4) then begin//<---caught stealing! (pickup_p_proc)
						call pickup_p_proc;
					end
					else begin
						if (script_action == 11) then begin//<--- talk_p_proc (Face icon), can also call "do_dialogue" or "do_dialog"
							call talk_p_proc;
						end
						else begin
							if (script_action == 22) then begin//<-- timed_event_p_proc -- called by ADD_TIMER_EVENT commands. "fixed_param==#" in this procedure is the number of the event in question (i.e. Add_Timer_Event dude,5,1 would be fixed_param 1) -- can also be "timeforwhat"
								call timed_event_p_proc;
							end
						end
					end
				end
			end
		end
	end
end

procedure critter_p_proc
begin
	if (hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
		hostile := 0;
		attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
	end
	else begin
		if (messing_with_Morbid_stuff) then begin
			if ((tile_distance_objs(self_obj, dude_obj) < 12) and (elevation(self_obj) == elevation(dude_obj))) then begin
				if (warned_about_messing) then begin
					hostile := 1;
				end
				else begin
					warned_about_messing := 1;
					float_msg(self_obj, message_str(103, 141), 2);
				end
			end
			messing_with_Morbid_stuff := 0;
		end
		if (Gretch_call) then begin
			Gretch_call := 0;
			hostile := 1;
		end
	end
	if (global_var(IS_MORBID_TEAM_HOSTILE) == 1) then begin
		if (obj_can_see_obj(self_obj, dude_obj)) then begin
			attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
		end
	end
end

procedure destroy_p_proc
begin
	rm_timer_event(self_obj);
//
//BEGIN WEAPON DROP MOD CODE
//--original code and mod by:--
// Josan12 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=18843) and 
// MIB88 (http://www.nma-fallout.com/forum/profile.php?mode=viewprofile&u=4464)
//
	if global_var(WEAPONDROP_MOD_STATUS) and not(global_var(FIXT_BUGFIXES_ONLY)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2)) then begin// only run if Weapon Drop is enabled, AND Fixes Only is disabled, AND actually holding something
		variable item1 := 0;  variable item2 := 0;  variable armor := 0;  variable item1PID := 0;  variable item2PID := 0;  variable armorPID := 0;  variable drophex := 0;  if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop BEGINS");  end
		if (critter_inven_obj(self_obj, 1) > 0) then begin  item1 := critter_inven_obj(self_obj, 1);  end    if (critter_inven_obj(self_obj, 2) > 0) then begin  item2 := critter_inven_obj(self_obj, 2);  end    if (critter_inven_obj(self_obj, 0) > 0) then begin  armor := critter_inven_obj(self_obj, 0);  end    if item1 then begin  item1PID := obj_pid(item1);  end    if item2 then begin  item2PID := obj_pid(item2);  end    if armor then begin  armorPID := obj_pid(armor);  end    drophex := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(WEAPONDROP_MOD_MINIMUM), global_var(WEAPONDROP_MOD_MAXIMUM)));
		if (item1PID != 19) and (item1PID != 21) and (item1PID != 79) and (item1PID != 205) and (item1PID != 234) and (item1PID != 235) and (item1PID != 244) and (item2PID != 19) and (item2PID != 21) and (item2PID != 79) and (item2PID != 205) and (item2PID != 234) and (item2PID != 235) and (item2PID != 244) then begin//Don't drop if:  Rock (19), Brass Knuckles (21), Flare (79), Lit Flare (205), Spiked Knuckles (234), Power Fist (235), or Gold Nugget (244)
			if (item1 > 0) then begin if (obj_item_subtype(item1) == 3) then begin
			rm_obj_from_inven(self_obj, item1);  move_to(item1, drophex, elevation(self_obj));  end  end
			if (item2 > 0) then begin if (obj_item_subtype(item2) == 3) then begin
			rm_obj_from_inven(self_obj, item2);  move_to(item2, drophex, elevation(self_obj));  end  end    if global_var(DEBUG_MODE_MESSAGES_ON) then begin  debug_msg("Weapon Drop ENDS");  end
		end
	end
//END WEAPON DROP MOD CODE
//
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(IS_MORBID_TEAM_HOSTILE, 1);
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_global_var(BERSERKER_REPUTATION, 1);
			set_global_var(CHAMPION_REPUTATION, 0);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_global_var(CHAMPION_REPUTATION, 1);
			set_global_var(BERSERKER_REPUTATION, 0);
		end
		set_global_var(NUM_GOOD_MONSTERS_KILLED, global_var(NUM_GOOD_MONSTERS_KILLED) + 1);// THIS MONSTER WAS A GOOD GUY. INCREASE GoodGuysKilled COUNTER
		if ((global_var(NUM_GOOD_MONSTERS_KILLED) % 2) == 0) then begin
			set_global_var(PLAYER_REPUTATION_GENERAL, (global_var(PLAYER_REPUTATION_GENERAL) - 1));
		end
	end
	rm_timer_event(self_obj);
end

procedure pickup_p_proc
begin
	hostile := 1;
end

procedure look_at_p_proc
begin
	script_overrides;
	if (local_var(0) == 0) then begin
		display_msg(message_str(103, 100));
	end
	else begin
		display_msg(message_str(103, 101));
	end
end

procedure talk_p_proc
begin
	anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
	start_gdialog(103, self_obj, 4, -1, -1);
	gsay_start;
	if (local_var(0) == 1) then begin
		call Gretch01;
	end
	else begin
		call Gretch00;
	end
	gsay_end;
	end_dialogue;
end

procedure timed_event_p_proc
begin
end

procedure Gretch00
begin
	gsay_reply(103, 102);
	giq_option(-3, 103, 103, Gretch07, 50);
	giq_option(4, 103, 104, Gretch00a, 50);
	giq_option(4, 103, 105, Gretch00b, 51);
	giq_option(4, 103, 106, Gretch02, 50);
	giq_option(4, 103, 107, GretchEnd, 50);
end

procedure Gretch00a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch04;
	end
	else begin
		call Gretch02;
	end
end

procedure Gretch00b
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch02;
	end
	else begin
		call Gretch08;
	end
end

procedure Gretch01
begin
	gsay_reply(103, 108);
	giq_option(4, 103, 109, Gretch02, 50);
	giq_option(4, 103, 110, Gretch01a, 50);
	giq_option(4, 103, 111, GretchEnd, 50);
	giq_option(-3, 103, 103, Gretch07, 50);
end

procedure Gretch01a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch05;
	end
	else begin
		call Gretch02;
	end
end

procedure Gretch02
begin
	gsay_reply(103, 112);
	giq_option(4, 103, 113, Gretch04, 50);
	giq_option(4, 103, 114, Gretch03, 50);
	giq_option(4, 103, 115, Gretch02a, 50);
end

procedure Gretch02a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch03;
	end
	else begin
		call Gretch07;
	end
end

procedure Gretch03
begin
	gsay_reply(103, 116);
	giq_option(4, 103, 117, Gretch04, 50);
	giq_option(4, 103, 118, Gretch03a, 50);
	giq_option(4, 103, 119, GretchEnd, 50);
end

procedure Gretch03a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch05;
	end
	else begin
		call Gretch04;
	end
end

procedure Gretch04
begin
	gsay_reply(103, 120);
	giq_option(4, 103, 121, Gretch06, 50);
	giq_option(4, 103, 122, Gretch05, 50);
	giq_option(4, 103, 123, GretchEnd, 50);
end

procedure Gretch05
begin
	set_global_var(GRETCH_PRIMECUTS, 1);
	gsay_reply(103, 124);
	giq_option(4, 103, 125, Gretch05a, 50);
	giq_option(4, 103, 126, GretchCombat, 51);
	giq_option(4, 103, 127, GretchEnd, 50);
end

procedure Gretch05a
begin
	if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
		call Gretch09;
	end
	else begin
		call Gretch06;
	end
end

procedure Gretch06
begin
	set_global_var(GRETCH_PRIMECUTS, 1);
	gsay_reply(103, 128);
	giq_option(4, 103, 129, GretchEnd, 50);
	giq_option(4, 103, 130, Gretch09, 50);
	giq_option(4, 103, 131, Gretch07, 50);
end

procedure Gretch07
begin
	gsay_reply(103, 132);
	giq_option(4, 103, 133, GretchEnd, 50);
	giq_option(4, 103, 134, Gretch04, 50);
	giq_option(4, 103, 135, Gretch08, 51);
	giq_option(-3, 103, 136, Gretch10, 50);
end

procedure Gretch08
begin
	gsay_message(103, 137, 51);
end

procedure Gretch09
begin
	gsay_reply(103, 138);
	giq_option(4, 103, 139, GretchEnd, 50);
	giq_option(4, 103, 126, GretchCombat, 51);
end

procedure Gretch10
begin
	gsay_message(103, 140, 50);
end

procedure GretchEnd
begin
end

procedure GretchCombat
begin
	hostile := 1;
end

procedure get_reaction
begin
	if (local_var(2) == 0) then begin
		set_local_var(0, 50);
		set_local_var(1, 2);
		set_local_var(2, 1);
		set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
		set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
		if (has_trait(0, dude_obj, 39)) then begin
			if (global_var(PLAYER_REPUTATION_GENERAL) > 0) then begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		else begin
			if (local_var(3) == 1) then begin
				set_local_var(0, local_var(0) - global_var(PLAYER_REPUTATION_GENERAL));
			end
			else begin
				set_local_var(0, local_var(0) + global_var(PLAYER_REPUTATION_GENERAL));
			end
		end
		if (global_var(CHILDKILLER_REPUTATION) >= global_var(CHILDKILLER_NUM_KILLS)) then begin
			set_local_var(0, local_var(0) - 30);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_BAD_MONSTERS_KILLED) > (3 * global_var(NUM_GOOD_MONSTERS_KILLED))) or (global_var(CHAMPION_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) + 20);
		end
		if (((global_var(NUM_BAD_MONSTERS_KILLED) + global_var(NUM_GOOD_MONSTERS_KILLED)) >= 25) and ((global_var(NUM_GOOD_MONSTERS_KILLED) > (2 * global_var(NUM_BAD_MONSTERS_KILLED))) or (global_var(BERSERKER_REPUTATION) == 1))) then begin
			set_local_var(0, local_var(0) - 20);
		end
		call ReactToLevel;
	end
end

procedure ReactToLevel
begin
	if (local_var(0) <= 25) then begin
		set_local_var(1, 1);
	end
	else begin
		if (local_var(0) <= 75) then begin
			set_local_var(1, 2);
		end
		else begin
			set_local_var(1, 3);
		end
	end
end

procedure LevelToReact
begin
	if (local_var(1) == 1) then begin
		set_local_var(0, random(1, 25));
	end
	else begin
		if (local_var(1) == 2) then begin
			set_local_var(0, random(26, 75));
		end
		else begin
			set_local_var(0, random(76, 100));
		end
	end
end

procedure UpReact
begin
	set_local_var(0, local_var(0) + 10);
	call ReactToLevel;
end

procedure DownReact
begin
	set_local_var(0, local_var(0) - 10);
	call ReactToLevel;
end

procedure BottomReact
begin
	set_local_var(1, 1);
	set_local_var(0, 1);
end

procedure TopReact
begin
	set_local_var(0, 100);
	set_local_var(1, 3);
end

procedure BigUpReact
begin
	set_local_var(0, local_var(0) + 25);
	call ReactToLevel;
end

procedure BigDownReact
begin
	set_local_var(0, local_var(0) - 25);
	call ReactToLevel;
end

procedure UpReactLevel
begin
	set_local_var(1, local_var(1) + 1);
	if (local_var(1) > 3) then begin
		set_local_var(1, 3);
	end
	call LevelToReact;
end

procedure DownReactLevel
begin
	set_local_var(1, local_var(1) - 1);
	if (local_var(1) < 1) then begin
		set_local_var(1, 1);
	end
	call LevelToReact;
end

procedure Goodbyes
begin
	exit_line := message_str(634, random(100, 105));
end

procedure damage_p_proc
begin
	if source_obj > 0 then begin  SrcObj := 0;  SrcIsParty := 0;  SrcObj := obj_pid(source_obj);  if party_member_obj(SrcObj) then begin  SrcIsParty := 1;  end  end    if (source_obj == dude_obj) or (SrcIsParty == 1) then begin
		set_global_var(IS_MORBID_TEAM_HOSTILE, 1);
	end
end



