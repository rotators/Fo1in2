#
# ReDefine configuration
#

# [ReDefine]
#
# HeadersDir = <path>
# ScriptsDir = <path>
#
[ReDefine]
HeadersDir = ../../Fallout2/Fallout1Port/Mapper/source/scripts/HEADERS
ScriptsDir = ../../Fallout2/Fallout1Port/Mapper/source/scripts

# [Defines]
# Assigns names to defines types
#
# <type> = <path> <prefix> (group)
#
#   type     name for given value type
#   path     path to file containing interesting defines (relative to [ReDefine]->ScriptsDir)
#   prefix   required prefix for interesting defines
#   group    optional; allows to group multiple types under single name
#
[Defines]
AI = AIPACKET.H AI
ANIM = ANIMCOMD.H ANIM
AREA = MAPS.H AREA
CRITTER_PID = CRITRPID.H PID ANY_PID
DMG = define.h DMG
FID = ARTFID.H FID
ITEM_PID = ITEMPID.H PID ANY_PID
MAP = MAPS.H MAP
OBJECT = define.h OBJECT
PCSTAT = define.h PCSTAT
PERK = define.h PERK
SCENERY_PID = SCENEPID.H PID ANY_PID
SID = scripts.h SCRIPT
SKILL = define.h SKILL
STAT = define.h STAT
TEAM = TEAMS.H TEAM
TRAIT_TYPE = COMMAND.H TRAIT
TRAIT = define.h TRAIT

# [Defines:TYPE]
# Creates program-specific defines
#
# <value> = <name>
#

# Do not complain or change SID 0/-1
[Defines:SID]
0 = 0
-1 = -1

# [VariableAssign]
# Replace all occurences of variable_name := NUMBER
#
# <name> = <type>
#
#   name   variable name
#   type   name for given value type
#
[VariableAssign]
Critter_script = SID
Critter_type = CRITTER_PID

# [VariableEquals]
# Replace all occurences of variable_name == NUMBER
#
# <name> = <type>
#
#   name   variable name
#   type   name for given value type
#
[VariableEquals]
Critter_script = SID
Critter_type = CRITTER_PID
cur_map_index = MAP

# [VariableNotEquals]
# Replace all occurences of variable_name != NUMBER
#
# <name> = <type>
#
#   name   variable name
#   type   name for given value type
#
[VariableNotEquals]
Critter_script = SID
Critter_type = CRITTER_PID
cur_map_index = MAP

# [VariableLower]
# Replace all occurences of variable_name < NUMBER
#
# <name> = <type>
#
#   name   variable name
#   type   name for given value type
#
[VariableLower]
cur_map_index = MAP

# [VariableGreater]
# Replace all occurences of variable_name > NUMBER
#
# <name> = <type>
#
#   name   variable name
#   type   name for given value type
#
[VariableGreater]
cur_map_index = MAP

# [VariableGuess]
#
# VariableGuess = <types list>
#
[VariableGuess]
VariableGuess = SCENERY_PID

# [Function]
# Replaces all occurences of function_name(..., NUMBER, ...)
#
# <name> = <types list>
#
#   name         function name
#   types list   aguments types; if given argument shouldn't be checked/changed, use ? or ??? virtual types
#
[Function]
art_change_fid_num = ? FID
create_object = ANY_PID ? ?
create_object_sid  = ANY_PID ? ? SID
critter_add_trait = ? TRAIT_TYPE ?dynamic? ?dynamic?
critter_skill_level = ? SKILL
critter_dmg = ? ? DMG
critter_mod_skill = ? SKILL ?
get_critter_stat = ? STAT
get_pc_stat = PCSTAT
has_skill = ? SKILL
has_trait = TRAIT_TYPE ? ?dynamic?
kill_critter = ? ANIM
kill_critter_type = CRITTER_PID ?
load_map = MAP ?
message_str = SID ?
obj_carrying_pid_obj = ? ITEM_PID
obj_is_carrying_obj_pid = ? ITEM_PID
roll_vs_skill = ? SKILL ?
using_skill = ? SKILL

# [FunctionEquals]
# Replaces all occurences of function_name(...) == NUMBER
#
# <name> = <type>
#
#   name         function name
#   type   name for given value type
#
[FunctionEquals]
obj_pid = ANY_PID

# [FunctionNotEquals]
# Replaces all occurences of function_name(...) != NUMBER
#
# <name> = <type>
#
#   name         function name
#   type   name for given value type
#
[FunctionNotEquals]
obj_pid = ANY_PID

# [Raw]
# Replaces all occurences of raw text
#
# <from> = <to>
#
#   from   text to search
#   to     replacement
#
[Raw]
SKILL_CONVERSANT = SKILL_SPEECH
STAT_max_hit_points = STAT_max_hp

[Script]
# create_object_sid(...,-1) -> create_object(...)
CreateObjectSid:Minimize = RunAfter IfFunction:create_object_sid IfArgumentValue:3,-1 DoNameSet:create_object DoArgumentsResize:3

# critter_add_trait() mess
CritterAddTrait:Perk = RunBefore IfFunction:critter_add_trait IfArgumentIs:1,TRAIT_PERK DoArgumentSetType:2,PERK
CritterAddTrait:Object = RunBefore IfFunction:critter_add_trait IfArgumentIs:1,TRAIT_OBJECT DoArgumentSetType:2,OBJECT
CritterAddTrait:Trait = RunBefore IfFunction:critter_add_trait IfArgumentIs:1,TRAIT_TRAIT DoArgumentSetType:2,TRAIT
CritterAddTrait:AI = RunBefore IfFunction:critter_add_trait IfArgumentIs:1,TRAIT_OBJECT IfArgumentIs:2,OBJECT_AI_PACKET DoArgumentSetType:3,AI
CritterAddTrait:Team = RunBefore IfFunction:critter_add_trait IfArgumentIs:1,TRAIT_OBJECT IfArgumentIs:2,OBJECT_TEAM_NUM DoArgumentSetType:3,TEAM

# has_trait() mess
HasTrait:Perk = RunBefore IfFunction:has_trait IfArgumentIs:0,TRAIT_PERK DoArgumentSetType:2,PERK
HasTrait:Object = RunBefore IfFunction:has_trait IfArgumentIs:0,TRAIT_OBJECT DoArgumentSetType:2,OBJECT
HasTrait:Trait = RunBefore IfFunction:has_trait IfArgumentIs:0,TRAIT_TRAIT DoArgumentSetType:2,TRAIT

# dude_is_male/dude_is_female
DudeIsMale = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,dude_obj IfArgumentIs:1,STAT_gender IfOperatorName:Equals IfOperatorValue:0 DoVariable:dude_is_male DoOperatorClear
DudeIsFemale:EQ = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,dude_obj IfArgumentIs:1,STAT_gender IfOperatorName:Equals IfOperatorValue:1 DoVariable:dude_is_female DoOperatorClear
DudeIsFemale:GT = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,dude_obj IfArgumentIs:1,STAT_gender IfOperatorName:Greater IfOperatorValue:0 DoVariable:dude_is_female DoOperatorClear
DudeIsFemale:NE = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,dude_obj IfArgumentIs:1,STAT_gender IfOperatorName:NotEquals IfOperatorValue:0 DoVariable:dude_is_female DoOperatorClear
DudeIsX = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,dude_obj IfArgumentIs:1,STAT_gender IfOperator IfNotEdited DoLogCurrentLine # detect missing

# self_is_male/self_is_female
SelfIsMale = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,self_obj IfArgumentIs:1,STAT_gender IfOperatorName:Equals IfOperatorValue:0 DoVariable:self_is_male DoOperatorClear
SelfIsFemale = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,self_obj IfArgumentIs:1,STAT_gender IfOperatorName:Equals IfOperatorValue:1 DoVariable:self_is_female DoOperatorClear
SelfIsX = RunAfter IfFunction:get_critter_stat IfArgumentValue:0,self_obj IfArgumentIs:1,STAT_gender IfOperator IfNotEdited DoLogCurrentLine # detect missing
