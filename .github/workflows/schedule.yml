name: Schedule

on:
 schedule:
 - cron: 0 4 * * *
 push:
  paths:
  - '.github/workflows/schedule.yml'
  - '.github/workflows/scripts/compile-ssl.sh'
  - '.github/workflows/scripts/ddraw.sh'
  - '.github/workflows/scripts/ddraw.merge.awk'
  - '.github/workflows/scripts/format-ssl.sh'
  - '.github/workflows/scripts/news.sh'
 workflow_dispatch:
  inputs:
   push:
    description: 'Push results [true/false]'
    default:     'false'
    required:    true
   full:
    description: 'Force running minor tasks [true/false]'
    default:     'false'
    required:    true

defaults:
 run:
  shell: bash

env:
 GHA_SCRIPTS: ".github/workflows/scripts"
 DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:

 # forked/cloned repositories should use own copy if they want automagic commits
 # feel free to open issue in main repository if you need help/advice tweaking this workflow in your fork
 Maintenance:
  if: github.repository == 'rotators/Fo1in2'
  runs-on: windows-latest
  env:
   MOD_DIR:            "Fallout2/Fallout1in2"
  steps:

### Activity check
### uses GitHub API to check last non-automagic commit in repository
### if it's older than a week, all other steps are skipped

  - name: Activity check
    run:  |
          :
          # old check, requires already cloned repository; left for reference
          # timestamp=$(git log --all --invert-grep --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" --date=unix --format=%ad -1)

          curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/commits | jq -r '[.[] | select(.author.login != "${{ secrets.ANTALASKAYA_LOGIN }}")][0]' > $HOME/commit.json

          date="$(jq -r '.commit.author.date' $HOME/commit.json)"
          timestamp=$(date --utc -d "$date" +%s)
          author="$(jq -r '.commit.author.name' $HOME/commit.json)"
          url="$(jq -r '.html_url' $HOME/commit.json)"
          days=$(( ( $(date --utc +%s) - $timestamp ) / 86400 ))
          rm -f $HOME/commit.json

          echo "Repository activity : $timestamp $author $url"

          alive=0

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
             echo "[WARNING] Ignoring activity limits : workflow triggered manually"
             alive=1
          else
             #if [ $days -gt 2 ]; then
             #   echo "[WARNING] Repository activity : ${days}d ago"
             #fi

             if [ $days -lt 2 ]; then
                echo Repository active : ${days}d
                alive=1
             else
                echo "[WARNING] Repository not updated : event<${{ github.event_name }}> not allowed to modify stale repository"
             fi
          fi

          if [ $alive -eq 1 ]; then
             echo GHA_REPO_ALIVE=true >> $GITHUB_ENV
          fi

### Preparations
### clones all interesting repositories used by tasks
### restores/creates cache used by tasks

  - name: Clone sfall-develop
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  git clone --branch=develop https://github.com/phobos2077/sfall.git $HOME/sfall-develop

  - name: Clone sfall-rotators
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  git clone --branch=rotators https://github.com/rotators/sfall.git $HOME/sfall-rotators

  - name: Clone sfall-asm
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  git clone --branch=master https://github.com/ghost2238/sfall-asm.git $HOME/sfall-asm

  - name: Clone ScanMsg
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  git clone --branch=master https://github.com/wipe2238/ScanMsg.git $HOME/ScanMsg

  - name: Clone FO1@2
    if:   env.GHA_REPO_ALIVE == 'true'
    uses: actions/checkout@v2
    with:
     token: ${{ secrets.ANTALASKAYA_TOKEN }}
     fetch-depth: 0

  - name: Preparations
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          echo "::group::Get tags"
          git fetch origin +refs/tags/*:refs/tags/*
          echo ::endgroup::

          echo "::group::Get old SHA"
          git --no-pager log --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" > $HOME/git.log
          set +e
          OLD_SFALL_ROTATORS=$(grep --max-count=1 "\- sfall-rotators" $HOME/git.log | awk -F @ '{print $2}' | tr -d ')')
          OLD_SCANMSG=$(grep --max-count=1 "\- ScanMsg" $HOME/git.log | awk -F @ '{print $2}' | tr -d ')')
          OLD_ARTIFACTS=$(grep --max-count=1 "\- ModdersPack" $HOME/git.log | awk -F @ '{print $2}' | tr -d ')')
          set -e
          echo "sfall-rotators $OLD_SFALL_ROTATORS"
          echo "ScanMsg        $OLD_SCANMSG"
          echo "ModdersPack    $OLD_ARTIFACTS"
          rm -f $HOME/git.log
          echo ::endgroup::

          echo "::group::Get new SHA"
          NEW_SFALL_ROTATORS=$(git -C $HOME/sfall-rotators --no-pager log --pretty=format:%H -1 sfall)
          NEW_SCANMSG=$(git -C $HOME/ScanMsg --no-pager log --pretty=format:%H -1 ScanMsg README.md LICENSE.md)
          NEW_ARTIFACTS=$(git -C $HOME/sfall-develop --no-pager log --pretty=format:%H -1 artifacts)
          echo "sfall-rotators $NEW_SFALL_ROTATORS"
          echo "ScanMsg        $NEW_SCANMSG"
          echo "ModdersPack    $NEW_ARTIFACTS"
          echo ::endgroup::

          set_dxsdk_dir=0

          echo "sfall-rotators..."
          if [ "$OLD_SFALL_ROTATORS" != "$NEW_SFALL_ROTATORS" ]; then
             echo "sfall-rotators... $OLD_SFALL_ROTATORS -> $NEW_SFALL_ROTATORS"
             echo GHA_TASK_SFALL_ROTATORS=true >> $GITHUB_ENV
             set_dxsdk_dir=1
          fi

          if [ "$OLD_SCANMSG" != "$NEW_SCANMSG" ]; then
             echo "ScanMsg... $OLD_SCANMSG -> $NEW_SCANMSG"
             echo GHA_TASK_SCANMSG=true >> $GITHUB_ENV
          fi

          if [ $set_dxsdk_dir -eq 1 ]; then
             echo DXSDK_DIR=$HOME/cache-dx/ >> $GITHUB_ENV
          fi

          echo "ModdersPack..."
          if [ "$OLD_ARTIFACTS" != "$NEW_ARTIFACTS" ]; then
             echo "ModdersPack... $OLD_ARTIFACTS -> $NEW_ARTIFACTS"
             echo GHA_TASK_SFALL_ARTIFACTS=true >> $GITHUB_ENV
          fi

          echo MSBUILD_EXE="$("/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)" >> $GITHUB_ENV

          # simplifies checking/displaying which event triggered workflow (especially dispatches)
          event="${{ github.event_name }}"
          if [ "$event" == "workflow_dispatch" ]; then
               if [ "${{ github.event.inputs.push }}" == "true" ]; then
                  event="${event}:push"
               fi
          fi
          echo GHA_EVENT=$event >> $GITHUB_ENV
          echo "GitHub event... $event"

  - name: Cache (DirectX)
    if:   env.DXSDK_DIR != ''
    id:   cache-dx
    uses: actions/cache@v2.1.4
    with:
     path: ~/cache-dx
     key:  cache-sfall-dx

  - name: Cache create (DirectX)
    if:   env.DXSDK_DIR != '' && steps.cache-dx.outputs.cache-hit != 'true'
    run:  |
          :
          echo ::group::DX2010
          curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
          7z x _DX2010_.exe DXSDK/Include -o_DX2010_
          7z x _DX2010_.exe DXSDK/Lib/x86 -o_DX2010_
          mv _DX2010_/DXSDK $DXSDK_DIR
          echo ::endgroup::

          echo ::group::DX2007
          curl -L https://download.microsoft.com/download/3/3/f/33f1af6e-c61b-4f14-a0de-3e9096ed4b3a/DXSDK_Aug2007.exe -o _DX2007_.exe
          7z x _DX2007_.exe -o_DX2007_
          7z x _DX2007_/DXSDK_Aug2007.exe Lib/x86 -o_DX2007_
          cp _DX2007_/Lib/x86/dinput.lib $DXSDK_DIR/Lib/x86
          echo ::endgroup::

          # clean & check
          rm -fR _DX*_ _DX*_.exe
          git status

          #ls -Ra $HOME/cache-dx
          du -hd0 $HOME/cache-dx

### Major tasks
### always generates commit (if needed)

  # updates customized version of sfall (rotators branch, ReleaseXP configuration)
  - name: sfall-rotators update
    if:   env.GHA_TASK_SFALL_ROTATORS == 'true'
    run:  |
          :
          echo "@echo off" > $HOME/sfall-rotators/sfall/PostBuild.cmd
          sed -ri 's!(0x[0]*501|_WIN32_WINNT_WINXP)!0x0600!' $HOME/sfall-rotators/sfall/stdafx.h
          ok=1
          "$MSBUILD_EXE" $HOME/sfall-rotators/sfall/ddraw.sln -p:Configuration=ReleaseXP -p:Platform=Win32 -p:PlatformToolset=v140_xp || ok=0
          if [ $ok -eq 1 ] && [ -f "$HOME/sfall-rotators/sfall/ReleaseXP/ddraw.dll" ]; then
             cp "$HOME/sfall-rotators/sfall/ReleaseXP/ddraw.dll" $MOD_DIR/ddraw.rotators.dll
          fi
          SFALL_ROTATORS_COMMIT=$(git -C $HOME/sfall-rotators log --pretty=format:%H -1 sfall)
          SFALL_ROTATORS_VERSION=$($GHA_SCRIPTS/ddraw.sh get-dll-version --dll=$MOD_DIR/ddraw.rotators.dll)
          echo "sfall-rotators (v${SFALL_ROTATORS_VERSION}, ${SFALL_ROTATORS_COMMIT})"
          ls -sh $MOD_DIR/ddraw.rotators.dll

          git diff --quiet || (git add --update && echo "- sfall-rotators update (v${SFALL_ROTATORS_VERSION}, rotators/sfall@${SFALL_ROTATORS_COMMIT})" >> $HOME/gha.commit)

  # updates .msg files scanner
  - name: ScanMsg update
    if:   env.GHA_TASK_SCANMSG == 'true'
    run:  |
          :
          ok=1
          "$MSBUILD_EXE" $HOME/ScanMsg/ScanMsg.sln -p:Configuration=Release -p:Platform="Any CPU" -target:ScanMsg || ok=0
          if [ $ok -eq  1 ] && [ -f "$HOME/ScanMsg/ScanMsg/Build/Framework/Release/ScanMsg.exe" ]; then
             cp "$HOME/ScanMsg/ScanMsg/Build/Framework/Release/ScanMsg.exe" Tools/ScanMsg/ScanMsg.exe
             cp "$HOME/ScanMsg/ScanMsg/Build/Framework/Release/ScanMsg.msg" Tools/ScanMsg/ScanMsg.msg
             cp "$HOME/ScanMsg/README.md" Tools/ScanMsg/README.md
             cp "$HOME/ScanMsg/LICENSE.md" Tools/ScanMsg/LICENSE.md
          fi
          SCANMSG_COMMIT=$(git -C $HOME/ScanMsg log --pretty=format:%H -1 ScanMsg README.md LICENSE.md)
          SCANMSG_VERSION=$($GHA_SCRIPTS/ddraw.sh get-dll-version --dll=Tools/ScanMsg/ScanMsg.exe)
          echo "ScanMsg (v${SCANMSG_VERSION}, ${SCANMSG_COMMIT})"
          ls -sh Tools/ScanMsg/ScanMsg.exe

          git diff --quiet || (git add --update && echo "- ScanMsg update (v${SCANMSG_VERSION}, wipe2238/ScanMsg@${SCANMSG_COMMIT})" >> $HOME/gha.commit)

  # updates sfall artifacts
  - name: ModdersPack update
    if:   env.GHA_TASK_SFALL_ARTIFACTS == 'true'
    run:  |
          :
          rm -fR Tools/ModdersPack
          cp -r $HOME/sfall-develop/artifacts Tools/ModdersPack

          if [[ -n $(git status --short --untracked-files=all Tools/ModdersPack) ]]; then
             git add Tools/ModdersPack
             SFALL_ARTIFACTS_COMMIT=$(git -C $HOME/sfall-develop log --pretty=format:%H -1 artifacts)
             echo "- ModdersPack update (phobos2077/sfall@${SFALL_ARTIFACTS_COMMIT})" >> $HOME/gha.commit
          fi

  # updates scripts sources to Rotators standards
  - name: ReDefine run
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          scripts=$(grep "^ScriptsDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')
          headers=$(grep "^HeadersDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')

          Tools/ReDefine/ReDefine.exe --config Tools/ReDefine/ReDefine.cfg --scripts $scripts --headers $headers >/dev/null

          grep "^Changed " ReDefine.log || true
          rm ReDefine*.log
          git diff --quiet || (git add --update && echo "- ReDefine run" >> $HOME/gha.commit)

          echo "MOD_SCRIPTS_DIR=$scripts" >> $GITHUB_ENV
          echo "MOD_HEADERS_DIR=$headers" >> $GITHUB_ENV

  # updates unsafe scripting header
  - name: Voodoo regeneration
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          SFASM=$HOME/sfall-asm
          SFASM_EXE=$SFASM/bin/Release/sfall-asm.exe
          HEADER="$MOD_HEADERS_DIR/voodoo.h"

          echo ::group::sfall-asm
          "$MSBUILD_EXE" $SFASM/sfall-asm.sln -p:Configuration=Release 2>&1
          echo ::endgroup::

          $SFASM_EXE $SFASM/patches/fo1in2/ --malloc --update-file=$HEADER -strict

          echo ::group::voodoo.h
          cat $HEADER
          echo ::endgroup::

          unix2dos -q $HEADER
          git diff --quiet || (git add --update && echo "- Voodoo regeneration" >> $HOME/gha.commit)

  # updates scripts sources to be consistent
  - name: Scripts formatting
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          $GHA_SCRIPTS/format-ssl.sh
          $GHA_SCRIPTS/format-ssl.sh --scripts-dir=$MOD_DIR/mods/

          git diff --quiet || (git add --update && echo "- Scripts formatting" >> $HOME/gha.commit)

  # updates scripts bytecode
  - name: Scripts recompilation
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          $GHA_SCRIPTS/compile-ssl.sh --bytecode --optimization=1
          $GHA_SCRIPTS/compile-ssl.sh --scripts-dir=$MOD_DIR/mods/ --bytecode --bytecode-dir=? --optimization=1

          git diff --quiet || (git add --update && echo "- Scripts recompilation" >> $HOME/gha.commit)

### Validation
### checks if any of major tasks wants to generate commit
### prepares commit message header

  - name: Validation
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  |
          :
          echo ::group::git status
          git status 2>&1
          echo ::endgroup::

          # allow full run; forces minor tasks to run even if major tasks does not generate commit
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.full }}" == "true" ]; then
             echo "# Minor tasks forced to run" >> $HOME/gha.commit
          fi

          if [ -f "$HOME/gha.commit" ]; then
             sed -i '1s!^!Progress every day\n!' $HOME/gha.commit
             dos2unix $HOME/gha.commit
             echo GHA_COMMIT=true >> $GITHUB_ENV
             cat $HOME/gha.commit
          fi

### Minor tasks
### runs only if at least one of major tasks wants to generate commit, or triggered manually with "full" switch enabled

  # update ddraw.ini comment with sfall version
  # update ddraw.ini setting with mod version
  # synch ddraw.ini with sfall changes
  # update all config files to use dos line endings
  - name: Configuration refresh
    if:   env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:  |
          :
          dos2unix $MOD_DIR/ddraw.fo1in2.ini
          gawk -f $GHA_SCRIPTS/ddraw.merge.awk -v override_file=$MOD_DIR/ddraw.fo1in2.ini -v adornments=none Tools/ModdersPack/ddraw.ini > $MOD_DIR/ddraw.ini
          $GHA_SCRIPTS/ddraw.sh set-dll-version --ini=$MOD_DIR/ddraw.ini --dll=$MOD_DIR/ddraw.dll
          $GHA_SCRIPTS/ddraw.sh set --ini=$MOD_DIR/ddraw.ini --cfg=Misc --key=VersionString --val="$($GHA_SCRIPTS/version.sh game --bump)"

          grep "^;v" $MOD_DIR/ddraw.ini
          $GHA_SCRIPTS/ddraw.sh get --ini=$MOD_DIR/ddraw.ini --cfg=Misc --key=VersionString --fmt='"["in_section"]\\n"in_key[1]" = "in_key[2]'

          ### workaround for ddraw.merge hiccup
          # extract PatchFileN settings except PatchFile0 (includes commented values)
          egrep '^;?PatchFile[1-9][0-9]?' $MOD_DIR/ddraw.ini > gha.ddraw.merge.PatchFileN
          # remove PatchFileN settings except PatchFile0 (includes commented values)
          sed -ri '/^;?PatchFile[1-9][0-9]?/d'  $MOD_DIR/ddraw.ini
          # append extracted PatchFileN settings after PatchFile0
          sed -ri '/^PatchFile0=.+$/r gha.ddraw.merge.PatchFileN' $MOD_DIR/ddraw.ini

          ### hint users where translation file really is
          sed -ri 's/sfall\\Translations\.ini/config\\Translations.ini/g' $MOD_DIR/ddraw.ini

          # cleanup
          sed -ri 'N;/^\n$/D;P;D;' $MOD_DIR/ddraw.ini
          rm -f gha.*

          unix2dos -q $MOD_DIR/*.cfg $MOD_DIR/*.ini $MOD_DIR/config/*.cfg $MOD_DIR/config/*.ini || true
          git diff --quiet || (git add --update && echo "- Configuration refresh" >> $HOME/gha.commit)

  # update news list
  - name: News update
    if:   env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:  |
          $GHA_SCRIPTS/news.sh $GITHUB_REPOSITORY NEWS.md [Aa]dded [Cc]hanged [Ff]ixed [Rr]emoved [Tt]weaked
          git diff --quiet || (git add --update && echo "- News update" >> $HOME/gha.commit)

### Push
### generates and displays commit
### pushes generated commit to repository; available only for following events (any other triggers are for testing purposes):
### - schedule
### - workflow_dispatch:push

  - name: Push
    if:   env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:  |
          :
          echo ::group::git commit
          dos2unix $HOME/gha.commit
          sed -i '/^#/d' $HOME/gha.commit
          git config --global user.name  "${{ secrets.ANTALASKAYA_NAME }}"
          git config --global user.email "${{ secrets.ANTALASKAYA_EMAIL }}"
          git commit --file="$HOME/gha.commit" 2>&1
          rm -f $HOME/gha.commit
          echo ::endgroup::

          echo ::group::git log
          git log -p -n 1 2>&1
          echo ::endgroup::

          if [ "$GHA_EVENT" == "schedule" ] || [ "$GHA_EVENT" == "workflow_dispatch:push" ]; then
             echo ::group::git push
             git push 2>&1
             echo ::endgroup::
          else
             echo "[WARNING] Repository not updated : event<$GHA_EVENT> not allowed to modify repository"
          fi
    continue-on-error: true

### Cleanup

  - name: Post Clone sfall-develop
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  rm -fR $HOME/sfall-develop

  - name: Post Clone sfall-rotators
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  rm -fR $HOME/sfall-rotators

  - name: Post Clone sfall-asm
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  rm -fR $HOME/sfall-asm

  - name: Post Clone ScanMsg
    if:   env.GHA_REPO_ALIVE == 'true'
    run:  rm -fR $HOME/ScanMsg
