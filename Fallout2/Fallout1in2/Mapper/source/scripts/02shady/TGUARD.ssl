/*

   Shady Sands, generic guard

*/

/* Include Files */
#include "define.h"
#include "maps/shadyw.h"
#include "shadysands.h"

#define NAME                    SCRIPT_TGUARD
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SHADYSANDS)

#include "command.h"
#include "modreact.h"

procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure guard00;
procedure guard01;
procedure guard02;
procedure guard03;
procedure guard04;
procedure guard05;
procedure guard06;
procedure guard06a;
procedure guard07a;
procedure guard07_1;
procedure guard07;
procedure guard08;
procedure guard09;
procedure guard10;
procedure guard11;
procedure guard12;
procedure guard13;
procedure guardend;
procedure guardDownReact;

procedure set_sleep_tile;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable tmp_hostile;
variable initial := 0;
variable round_counter;
variable Warned_Tile;

#define LVAR_Here_Before         (4)
#define LVAR_Invasion            (6)
#define LVAR_Sleeping            (9)
#define LVAR_Home_Tile           (10)

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_SHADY_SANDS);
      set_self_ai(AI_GUARD);
      if (local_var(LVAR_Home_Tile) == 0) then begin
         set_local_var(LVAR_Home_Tile, self_tile);
      end
      home_tile := local_var(LVAR_Home_Tile);
   end
end

procedure map_enter_p_proc begin
   if shady_invaded then begin
      invasion_kill_critter;
   end
end

procedure combat_p_proc begin
   if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      round_counter := round_counter + 1;
   end
   if (round_counter > 3) then begin
      if not(global_var(GVAR_ENEMY_SHADY_SANDS)) then begin
         set_global_var(GVAR_ENEMY_SHADY_SANDS, 1);
         dec_general_rep(5);
      end
   end
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if global_var(GVAR_ENEMY_SHADY_SANDS) then begin
         tmp_hostile := 1;
      end
      else if (dude_is_armed) then begin
         if (map_var(MVAR_WARNED) == 0) then begin
            call guard11;
         end
      end
   end

   if (local_var(7) == 1) then begin
      if (tile_distance(self_tile, dude_tile) < tile_distance(self_tile, Warned_Tile)) then begin
         tmp_hostile := 1;
      end
   end
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_SHADY_SANDS, 1);
   end
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   if CUR_MAP_SHADYW then begin
      set_tma_data_generic(TMA_MSG_SHADYW);
   end
   else begin
      set_tma_data_generic(TMA_MSG_SHADYE);
   end

   get_reaction
   if (local_var(9) == 1) then begin
      float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), FLOAT_MSG_NORMAL);
   end
   else begin
      if global_var(GVAR_ENEMY_SHADY_SANDS) then begin
         set_local_var(LVAR_Here_Before, 1);
         call guard00;
      end
      else if tandi_is_kidnapped then begin
         set_local_var(LVAR_Here_Before, 1);
         call guard01;
      end
      else if (get_tandi_returned and (local_var(8) == 0)) then begin
         set_local_var(LVAR_Here_Before, 1);
         call guard02;
      end
      else if not(is_tandi_alive) then begin
         set_local_var(LVAR_Here_Before, 1);
         call guard03;
      end
      else if (local_var(LVAR_Here_Before) == 1) then begin
         if bad_critter_reaction then begin
            call guard13;
         end
         else begin
            call guard12;
         end
      end
      else begin
         set_local_var(LVAR_Here_Before, 1);
         if bad_critter_reaction then begin
            call guard10;
         end
         else begin
            start_dialog_at_node(guard04);
         end
      end
   end
end

procedure timed_event_p_proc begin
   if (dude_is_armed and self_can_see_dude) then begin
      tmp_hostile := 1;
   end
   else if (dude_is_armed) then begin
      // Repeat if dude is still armed, but guard can't see him right now
      flush_add_timer_event(self_obj, game_ticks(10), 1);
   end
   else begin
      set_map_var(MVAR_WARNED, 0);
   end
end

procedure guard00 begin
   float_msg(self_obj, mstr(101), FLOAT_MSG_LIGHT_RED);
   Warned_Tile := dude_tile;
   set_local_var(7, 1);
end

procedure guard01 begin
   float_msg(self_obj, mstr(102), FLOAT_MSG_YELLOW);
end

procedure guard02 begin
   float_msg(self_obj, mstr(103), FLOAT_MSG_YELLOW);
   set_local_var(8, 1);
   TopReact
end

procedure guard03 begin
   float_msg(self_obj, mstr(104), FLOAT_MSG_YELLOW);
end

procedure guard04 begin
   Reply(105);
   NOption(106, guard05, 4);
   NOption(107, guard07, 5);
   NLowOption(108, guard05);
end

procedure guard05 begin
   Reply(109);
   NOption(110, guard06, 4);
   NLowOption(111, guardend);
end

procedure guard06 begin
   Reply(112);
   NOption(114, guard06a, 4);
   NOption(113, guardend, 4);
end

procedure guard07 begin
   Reply(115);
   NOption(126, guard07_1, 1);
end

procedure guard08 begin
   Reply(118);
   NOption(120, guardDownReact, 4);
   NOption(119, guardend, 4);
end

procedure guardDownReact begin
   DownReact
end

procedure guard09 begin
   Reply(121);
   Goodbyes;
   NOption(exit_line, guardend, 4);
end

procedure guard10 begin
   float_msg(self_obj, mstr(122), FLOAT_MSG_LIGHT_RED);
end

procedure guard11 begin
   float_msg(self_obj, mstr(123), FLOAT_MSG_LIGHT_RED);
   add_timer_event(self_obj, game_ticks(10), 1);
   set_map_var(MVAR_WARNED, 1);
end

procedure guard12 begin
   float_msg(self_obj, mstr(124), FLOAT_MSG_YELLOW);
end

procedure guard13 begin
   float_msg(self_obj, mstr(125), FLOAT_MSG_LIGHT_RED);
end

procedure guard06a begin
   tmp_hostile := 1;
   BottomReact
end

procedure guard07a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call guard09;
   end
   else begin
      call guard08;
   end
end

procedure guard07_1 begin
   Reply(116);
   NOption(117, guard07a, 5);
end

procedure guardend begin
end

procedure set_sleep_tile begin
   if (home_tile == 15283) then
      sleep_tile := 14685;
   else if (home_tile == 15886) then
      sleep_tile := 14479;
   else if (home_tile == 15881) then
      sleep_tile := 15479;

   wake_time := random(610, 650);
   sleep_time := random(2110, 2150);
end
