/*

   Dogmeat - Party Member, Junktown

*/

#include "define.h"
#include "maps/junkcsno.h"

#include "sfall/main.h"

#define NAME                                 SCRIPT_DOGMEAT

#include "command.h"
#include "modreact.h"

#undef  set_default_party_follow
#define set_default_party_follow             set_follow_close

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure push_p_proc;

procedure dog_joins_dude;
procedure dog_remove_party;
procedure dog_join_party;
procedure dog_end;
procedure dog00;

procedure Node998;
procedure Node999;

variable tmp_hostile;
variable IdenOnce;

#define LVAR_Herebefore                   (4)
#define LVAR_WAITING                      (10)
#define LVAR_FOLLOW_DISTANCE              (11)
#define LVAR_TEAM                         (12)

#define dog_mstr(x)             			   message_str(SCRIPT_ALLDOGS, x)
#define dog_float(x)                      float_msg(self_obj, dog_mstr(x), FLOAT_MSG_NORMAL)

#define dogmeat_joins_party               party_add_self;                              \
                                          add_timer_event(self_obj, game_ticks(1), 2); \
                                          set_self_team(TEAM_PLAYER)
#define dude_has_free_slot_for_dogmeat    fo1in2_party_limit_disabled or ((dude_at_max_party_size == false) and (Dog_In_Party == false))

#define EVENT_FLOAT_JOIN                  (2)
#define EVENT_FLOAT_INJURED               (3)

procedure Node998 begin
end
procedure Node999 begin
end

procedure start begin
end

procedure push_p_proc begin
   if (Dog_In_Party) then begin
      float_msg(self_obj, mstr(random(117, 120)), FLOAT_MSG_NORMAL);
   end
   else begin
      script_overrides;
      if not(global_var(GVAR_DOGMEAT_HIRELING_STATUS)) then begin
         float_msg(self_obj, dog_mstr(103), FLOAT_MSG_NORMAL);
      end
   end
end

procedure critter_p_proc begin
   if not(global_var(GVAR_DOGMEAT_HIRELING_STATUS)) then begin
      if (local_var(LVAR_Herebefore) == 0) then begin
         if (self_can_see_dude) then begin
            if dude_armor then begin
               variable JacketCheck;
               JacketCheck := dude_armor;
               if (obj_pid(JacketCheck) == PID_LEATHER_JACKET) then begin
                  set_local_var(LVAR_Herebefore, 1);
                  display_msg(dog_mstr(115));
                  call dog_joins_dude;
               end
            end

         end
      end
   end

   if Dog_In_Party then begin
      // Dogmeat has a custom following routine (always stay close, no matter what)
      if (tile_distance_objs(self_obj, dude_obj) >= 3) then begin
         if (anim_busy(self_obj) == 0) then begin
            dest_tile := tile_num_in_direction(tile_num_in_direction(dude_tile, dude_rotation_to_self, 1), random(0, 5), random(0, 2));
            self_run_to_tile_force(dest_tile);
         end
      end
      else begin
         variable LVar0 := 0;
         LVar0 := random(1, 500);
         if (LVar0 == 100) then begin
            if (anim_busy(self_obj) == 0) then begin
               self_walk_to_tile(tile_num_in_direction(dude_tile, random(0, 5), 2));
            end
         end
         if (LVar0 == 400) then begin
            if (anim_busy(self_obj) == 0) then begin
               self_walk_to_tile(tile_num_in_direction(dude_tile, random(0, 5), 1));
            end
         end
      end
   end
   else if (local_var(LVAR_Herebefore) == 0) then begin
      if (CUR_MAP_JUNKCSNO) then begin
         if (map_var(MVAR_Phil_approaches)) then begin
            if (map_var(MVAR_dog_is_angry)) then begin
               add_timer_event(self_obj, game_ticks(6), 1);
            end
            set_map_var(MVAR_Phil_approaches, 0);
         end
      end
   end
end

procedure destroy_p_proc begin
   set_global_var(GVAR_DOGMEAT_HIRELING_STATUS, 0);

   if obj_in_party(source_obj) then begin
      if (CUR_MAP_JUNKCSNO) then begin
         set_global_var(GVAR_DOGMEAT_SOMETHING_0, 2);
         set_global_var(GVAR_DOGMEAT_SOMETHING_1, 2);

         give_xp_msg(EXP_GET_RID_OF_DOGMEAT, dog_mstr(116));

         set_map_var(MVAR_dog_is_angry, 0);
         set_map_var(MVAR_growling, 0);
      end
   end
end

procedure look_at_p_proc begin
   script_overrides;
   if global_var(GVAR_DOGMEAT_HIRELING_STATUS) != 0 then begin
      if IdenOnce != 1 then begin
         display_msg(mstr(100));
         IdenOnce := 1;
      end
      else
         display_msg(mstr(110));
   end
   else
      display_msg(mstr(101));
end

procedure map_enter_p_proc begin
   if (fo1in2_red_dogmeat_enabled and self_fid != FID_MARDOG) then
      art_change_fid_num(self_obj, FID_MARDOG);
   else if (not(fo1in2_red_dogmeat_enabled) and self_fid == FID_MARDOG) then
      art_change_fid_num(self_obj, FID_MADDOG);

   if Dog_In_Party then begin
      set_self_team(TEAM_PLAYER);
   end
   else begin
      set_self_team(TEAM_RAIDERS);
   end

   if ((CUR_MAP_JUNKCSNO) and (global_var(GVAR_DOGMEAT_HIRELING_STATUS) == 0) and (local_var(LVAR_Herebefore) == 0)) then begin
      set_map_var(MVAR_dog_is_angry, 1);
   end
   add_timer_event(self_obj, random(25, 40), EVENT_FLOAT_INJURED);
end

procedure pickup_p_proc begin
   script_overrides;
end

procedure talk_p_proc begin
   if Dog_In_Party then
      self_look_at_dude;
   dude_look_at_self;

   if dog_is_prisoner then begin
      set_dog_prisoner(false);
      dogmeat_joins_party;
   end
   else if (local_var(LVAR_Herebefore) == 1) then begin// + "and (dude_iq > 3))" previously. --Sduibek
      start_dialog_at_node(dog00);
   end
   else begin
      float_msg(self_obj, mstr(102), FLOAT_MSG_NORMAL);
   end
   if (Katja_ptr != 0) then begin
      float_msg(Katja_ptr, message_str(SCRIPT_KATJA, 175), FLOAT_MSG_PURPLE);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_FLOAT_JOIN) then begin
      dog_float(random(122, 123));
   end if (fixed_param == EVENT_FLOAT_INJURED) then begin
      if not(combat_is_initialized) and self_visible then begin
         if (Dog_ptr != 0) then begin
            if (Is_Crippled(self_obj)) then
               dog_float(random(3500, 3501));
            /*else if (self_rads) then
               dog_float(random(3500, 3501));
            else if (get_poison(self_obj)) then
               dog_float(random(3500, 3501));*/
         end
      end
      add_timer_event(self_obj, random(50, 80), EVENT_FLOAT_INJURED);
   end
   else begin
      float_msg(self_obj, dog_mstr(103), FLOAT_MSG_NORMAL);
      if (CUR_MAP_JUNKCSNO) then begin
         set_map_var(MVAR_growling, 1);
         set_map_var(MVAR_smartass_2, 1);
      end
   end
end

procedure use_obj_on_p_proc begin
   variable item;
   item := obj_pid(obj_being_used_with);

   if ((item == PID_MEAT_ON_A_STICK) or (item == PID_IGUANA_ON_A_STICK)) then begin
      if (not(global_var(GVAR_DOGMEAT_HIRELING_STATUS)) and (local_var(LVAR_Herebefore) == 0)) then begin
         set_local_var(LVAR_Herebefore, 1);
         display_msg(dog_mstr(104));
         call dog_joins_dude;
      end
      else begin
         critter_heal(self_obj, 5);
      end
   end
end

procedure dog_joins_dude begin
   give_xp_msg(EXP_DOGMEAT_JOINS_PARTY, dog_mstr(114));

   set_global_var(GVAR_DOGMEAT_HIRELING_STATUS, 1);
   set_local_var(LVAR_Herebefore, 1);
   set_global_var(GVAR_DOGMEAT_SOMETHING_1, 2);
   set_global_var(GVAR_DOGMEAT_SOMETHING_0, 2);

   dogmeat_joins_party;

   set_self_team(TEAM_PLAYER);
   if (CUR_MAP_JUNKCSNO) then begin
      set_map_var(MVAR_dog_is_angry, 0);
   end
end

procedure dog_remove_party begin
   set_global_var(GVAR_DOGMEAT_HIRELING_STATUS, 0);
   set_party_waiting;
end

procedure dog_join_party begin
   if dude_has_free_slot_for_dogmeat then begin
      set_global_var(GVAR_DOGMEAT_HIRELING_STATUS, 1);
      dogmeat_joins_party;
   end
   else begin
      Reply(2500);
      NOption(2510, Node999, 004);
   end
end

procedure dog_end begin
   //float_msg(self_obj, dog_mstr(102), FLOAT_MSG_GREEN);
end

procedure dog00 begin
   Reply(random(117, 120));
   if (global_var(GVAR_DOGMEAT_HIRELING_STATUS) == 0) then begin
      GOption(dog_mstr(118), dog_join_party, 004);
      GLowOption(dog_mstr(300), dog_join_party);
   end
   else begin
      NOption(dog_mstr(119), dog_remove_party, 004);
      NLowOption(dog_mstr(301), dog_remove_party);
   end
   GOption(dog_mstr(120), dog_end, 004);
   GLowOption(dog_mstr(304), dog_end);
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_STEAL) then begin
      script_overrides;
      display_msg(gen_mstr(211));
      script_overrides;
   end
end
