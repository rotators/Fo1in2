/*

   Junktown - Phil, standing at the house near Dogmeat.

*/

/* Include Files */
#include "define.h"
#include "maps/junkcsno.h"

#define NAME		SCRIPT_PHIL
#define TOWN_REP_VAR	(GVAR_TOWN_REP_JUNKTOWN)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure run_away;
procedure go_forward;
procedure Phil00;
procedure Phil01;
procedure Phil02;
procedure Phil03;
procedure Phil04;
procedure Phil05;
procedure Phil06;
procedure Phil07;
procedure Phil08;
procedure Phil09;
procedure PhilEnd;

#define LVAR_Herebefore	(4)

variable tmp_hostile;
variable home_tile := 28684;

procedure start begin
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   if (map_var(MVAR_growling) == 1) then begin
      call run_away;
   end
   if (map_var(MVAR_smartass_1) == 1) then begin
      add_timer_event(self_obj, game_ticks(2), 2);
      set_map_var(6, 0);
   end
   if (map_var(MVAR_dog_is_angry) == 0) then begin
      self_walk_to_tile(home_tile);
   end
   if REP_ENEMY_JUNKTOWN_CITIZENS then begin
      if (self_can_see_dude) then begin
         attack(dude_obj);
      end
   end
end

procedure destroy_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_DUDE_ENEMY_JUNK_CITIZEN, 1);
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
   inc_good_critter
end

procedure damage_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 1) then begin
      display_msg(mstr(101));
   end
   else begin
      display_msg(mstr(100));
   end
end

procedure map_enter_p_proc begin
   set_self_team(TEAM_JUNKTOWNER);
   if (map_var(MVAR_dog_is_angry) == 1) then begin
      add_timer_event(self_obj, game_ticks(10), 1);
   end
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   set_tma_data_generic(TMA_MSG_JUNKCSNO);
   
   if (global_var(GVAR_DOGMEAT_HIRELING_STATUS)) then begin
      call Phil01;
   end
   else if (not(map_var(MVAR_dog_is_angry))) then begin
      call Phil09;
   end
   else if (dude_is_armed) then begin
      call Phil00;
   end
   else if (local_var(LVAR_Herebefore) == 0) then begin
      start_dialog_at_node(Phil02);
   end
   else begin
      call Phil08;
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 2) then begin
      float_msg(self_obj, mstr(102), FLOAT_MSG_NORMAL);
   end
   else if (map_var(MVAR_dog_is_angry)) then begin
      call go_forward;
   end
end

procedure run_away begin
   self_run_to_tile(31096);
   set_map_var(MVAR_growling, 0);
   add_timer_event(self_obj, game_ticks(random(10, 30)), 1);
end

procedure go_forward begin
   set_map_var(MVAR_Phil_approaches, 1);
   self_walk_to_tile(30889);
end

procedure Phil00 begin
   float_msg(self_obj, mstr(103), FLOAT_MSG_NORMAL);
end

procedure Phil01 begin
   float_msg(self_obj, mstr(104), FLOAT_MSG_NORMAL);
end

procedure Phil02 begin
   variable LVar0 := 0;
   set_local_var(LVAR_Herebefore, 1);

   LVar0 := mstr(105 + dude_is_female);

   Reply(LVar0 + mstr(107));
   NOption(108, Phil04, 4);
   NOption(109, PhilEnd, 4);
   NOption(110, Phil05, 6);
   NLowOption(111, Phil03);
end

procedure Phil03 begin
   NMessage(112);
end

procedure Phil04 begin
   Reply(113);
   NOption(114, PhilEnd, 4);
   NOption(115, Phil05, 4);
end

procedure Phil05 begin
   Reply(116);
   NOption(117, PhilEnd, 4);
   NOption(118, Phil06, 5);
   NOption(119, Phil07, 6);
end

procedure Phil06 begin
   NMessage(120);
   Reply(121);
   NOption(122, Phil07, 7);
   giq_option(4, SCRIPT_MODREACT, exit_line, PhilEnd, NEUTRAL_REACTION);
end

procedure Phil07 begin
   NMessage(123);
   Reply(124);
   NOption(125, PhilEnd, 4);
end

procedure Phil08 begin
   float_msg(self_obj, mstr(126), FLOAT_MSG_NORMAL);
end

procedure Phil09 begin
   float_msg(self_obj, mstr(127), FLOAT_MSG_NORMAL);
end

procedure PhilEnd begin
end
