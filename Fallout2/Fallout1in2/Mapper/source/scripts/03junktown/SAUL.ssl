/*

   Junktown - Saul, the boxer

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_SAUL
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure damage_p_proc;

procedure Saul06;
procedure Saul07;
procedure Saul08;
procedure Saul08a;
procedure Saul09;
procedure Saul10;
procedure Saul11;
procedure Saul12;
procedure Saul13;
procedure Saul14;
procedure Saul15;
procedure Saul16;
procedure Saul17;
procedure Saul18;
procedure Saul18a;
procedure Saul19;
procedure Saul20;
procedure Saul21;
procedure Saul22;
procedure Saul23;
procedure Saul24;
procedure SaulEnd;

procedure SaulBoxing;
procedure SaulCombat;
procedure create_challenger;

procedure Saul_UpReact;

import variable challenger_ptr;
import variable fight;
import variable Saul_loses;
import variable Saul_wins;
import variable removal_ptr

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable tmp_hostile;
variable round_counter;
variable sleeping_disabled;
variable challenger_hits;
variable Saul_hits;
variable whose_turn;

#define LVAR_Sleeping                     (4)

procedure start begin

end

procedure combat_p_proc begin
   if ((fixed_param == COMBAT_SUBTYPE_TURN) and self_can_see_dude) then begin
      round_counter := round_counter + 1;
   end
   if (round_counter > 3) then begin
      if (global_var(GVAR_ENEMY_JUNKTOWN) == 0) then begin
         set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
         set_global_var(GVAR_PLAYER_REPUTATION, check_general_rep - 5);
      end
   end
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
         if (fight) then begin
            fight := 0;
            Saul_hits := 0;
            challenger_hits := 0;
            self_rotate(1);
            if (dude_can_see_self) then begin
               gfade_out(1);
               call create_challenger;
               gfade_in(1);
            end
            else begin
               call create_challenger;
            end
            add_timer_event(self_obj, game_ticks(1), 1);
         end
      end
      if (sleeping_disabled == 0) then begin
         sleeping
      end
   end

   if (global_var(GVAR_DUDE_ENEMY_JUNK_BOXER) == 1) then begin
      if (self_can_see_dude) then begin
         attack(dude_obj);
      end
   end
end

procedure description_p_proc begin
   if (is_success(do_check(dude_obj, STAT_pe, dude_awareness))) then begin
      script_overrides;
      display_msg(mstr(102));
   end
end

procedure destroy_p_proc begin
   set_global_var(GVAR_SAUL_STATUS, 3);
   rm_timer_event(self_obj);

   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
      set_global_var(GVAR_DUDE_ENEMY_JUNK_BOXER, 1);
   end
   inc_good_critter
   rm_timer_event(self_obj);
end

procedure look_at_p_proc begin
   script_overrides;
   if (not(global_var(GVAR_SAUL_STATUS))) then begin
      display_msg(mstr(101));
   end
   else begin
      display_msg(mstr(100));
   end
end

procedure map_enter_p_proc begin
   variable LVar0 := 0;

   if junktown_invaded then begin
      LVar0 := create_object(PID_SPIKED_KNUCKLES, 0, 0);
      add_obj_to_inven(self_obj, LVar0);
      kill_critter(self_obj, ANIM_fall_back_sf);
   end

   sleeping_disabled := 0;
   sleep_time := 2000;
   wake_time := 700;

   if (CUR_MAP_JUNKCSNO) then begin //  JUNKTOWN - CASINO, GIZMO, SKUM PITT, BOXING, DOGMEAT
      sleep_tile := 7000;
      if ((GAME_TIME_IN_DAYS % 3) == 0) then begin
         home_tile := 15094;
      end
      else begin
         home_tile := 16892;
      end
   end

   if (global_var(GVAR_SAUL_STATUS) == 3) then begin
      destroy_object(self_obj);
   end

   move_to(self_obj, home_tile, 0);
   set_self_team(TEAM_15);
end

procedure map_update_p_proc begin
   if (not(combat_is_initialized)) then begin

      if ((GAME_TIME_IN_DAYS % 3) == 0) then begin
         home_tile := 15094;
      end
      else begin
         home_tile := 16892;
      end

      move_to(self_obj, home_tile, 0);

      if (local_var(8) == 1) then begin
         set_local_var(8, 0);
         reg_anim_animate(self_obj, ANIM_stand, 0);
      end

      sleeping
   end
end

procedure talk_p_proc begin
   set_tma_data_generic(TMA_MSG_JUNKCSNO);

   dude_look_at_self;
   get_reaction
   if (local_var(4)) then begin
      float_msg(self_obj, message_str(SCRIPT_GENVAULT, 166), FLOAT_MSG_NORMAL);
   end
   else if (critter_state(self_obj) bwand 1) then begin
      display_msg(mstr(115));
   end
   else if (global_var(GVAR_ENEMY_JUNKTOWN)) then begin
      float_msg(self_obj, message_str(SCRIPT_ENEMY, 104), FLOAT_MSG_RED);
   end
   else begin
      if (dude_is_armed) then begin
         call Saul06;
      end
      else begin
         if (global_var(GVAR_SAUL_STATUS)) then begin
            start_dialog_at_node(Saul23);
         end
         else begin
            start_dialog_at_node(Saul07);
         end
      end
   end

   if (not(global_var(GVAR_TRISH_STATUS) bwand 32) and (global_var(GVAR_TRISH_STATUS) bwand 8) and (global_var(GVAR_TRISH_STATUS) bwand 16)) then begin
      set_global_var(GVAR_TRISH_STATUS, global_var(GVAR_TRISH_STATUS) + 32);
      set_global_var(GVAR_PLAYER_REPUTATION, check_general_rep + 2);
      give_xp_msg(EXP_TRISH_SAUL_RELATIONSHIP, message_str(SCRIPT_TRISH, 173));
   end
end

procedure timed_event_p_proc begin
   if (challenger_ptr != 0) then begin

      if (fixed_param == 1) then begin
         if (obj_pid(challenger_ptr) == PID_RADSCORPION) then begin
            if (random(0, 4) == 0) then begin
               whose_turn := 1;
            end
            else begin
               whose_turn := 0;
            end
         end
         else begin
            if (random(0, 2)) then begin
               whose_turn := 1;
            end
            else begin
               whose_turn := 0;
            end
         end
         call SaulBoxing;
      end

      else if (fixed_param == 2) then begin
         Saul_wins := 1;
      end

      else if (fixed_param == 3) then begin
         Saul_loses := 1;
         set_local_var(8, 1);
      end
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
end

procedure create_challenger begin
   challenger_ptr := random(0, 4);

   if (challenger_ptr == 4) then begin
      challenger_ptr := create_object_sid(PID_GREATER_MOLE_RAT, 0, 0, SCRIPT_JBOXER);
   end
   else if (challenger_ptr == 3) then begin
      challenger_ptr := create_object_sid(PID_RADSCORPION, 0, 0, SCRIPT_JBOXER);
   end
   else if (challenger_ptr == 2) then begin
      challenger_ptr := create_object_sid(PID_TOWNSWOMAN_METAL, 0, 0, SCRIPT_JBOXER);
   end
   else if (challenger_ptr == 1) then begin
      challenger_ptr := create_object_sid(PID_TOWNSMAN_LEATHER, 0, 0, SCRIPT_JBOXER);
   end
   else if (challenger_ptr == 0) then begin
      challenger_ptr := create_object_sid(PID_MALE_GUARD_METAL_BLACK, 0, 0, SCRIPT_JBOXER);
   end

   critter_attempt_placement(challenger_ptr, tile_num_in_direction(self_tile, 1, 1), 0);
   obj_rotate(challenger_ptr, 4);
end

procedure Saul06 begin
   float_msg(self_obj, mstr(104), FLOAT_MSG_RED);
end

procedure Saul07 begin
   set_global_var(GVAR_SAUL_STATUS, 1);
   if (local_var(1) == 1) then begin
      Reply(105);
   end
   else begin
      Reply(106);
   end
   NOption(107, Saul08, 4);
   BOption(108, Saul08a, 4);
   NOption(mstr(109) + dude_name + mstr(110), Saul09, 4);
end

procedure Saul08 begin
   Reply(111);
   BOption(112, Saul08a, 4);
   NOption(113, Saul11, 4);
   NOption(103, SaulEnd, 4);
end

procedure Saul08a begin
   if (local_var(1) == 0) then
      set_local_var(1, 1);

   call Saul09;
end

procedure Saul09 begin
   if (local_var(1) == 1) then begin
      Reply(128);
   end
   else begin
      Reply(129);
   end
   if (local_var(1) == 1) then begin
      NOption(130, Saul10, 4);
      BOption(188, SaulCombat, 4);
   end
   NOption(131, Saul10, 4);
   if (local_var(1) == 3) then begin
      NOption(135, Saul11, 4);
   end
   NOption(132, SaulEnd, 4);
end

procedure Saul10 begin
   if (local_var(1) == 1) then begin
      Reply(133);
   end
   else begin
      Reply(134);
   end
   NOption(135, Saul11, 4);
   GOption(136, Saul12, 4);
   NOption(132, SaulEnd, 4);
end

procedure Saul11 begin
   Reply(137);
   GOption(136, Saul12, 4);
   if (not(local_var(5))) then begin
      NOption(138, Saul13, 4);
   end
   if (not(local_var(6))) then begin
      NOption(139, Saul14, 4);
   end
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul12 begin
   UpReact
   if (local_var(1) == 1) then begin
      Reply(140);
   end
   else begin
      Reply(141);
      GOption(142, Saul15, 5);
   end
   NOption(143, Saul13, 4);
   NOption(144, Saul14, 4);
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul13 begin
   set_local_var(5, 1);
   Reply(145);
   NOption(146, Saul19, 4);
   NOption(147, Saul14, 4);
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul14 begin
   set_local_var(6, 1);
   Reply(148);
   if (not(local_var(5))) then begin
      NOption(149, Saul13, 4);
   end
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul15 begin
   set_local_var(7, 1);
   Reply(150);
   NOption(151, Saul17, 4);
   NOption(152, Saul18, 4);
   if (dude_iq >= 6) then begin
      GOption(153, Saul16, 6);
   end
   else begin
      Goodbyes;
      NOption(exit_line, SaulEnd, 4);
   end
   NOption(154, Saul24, 6);
end

procedure Saul16 begin
   UpReact
   Reply(155);
   NOption(156, Saul18, 4);
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul17 begin
   set_global_var(GVAR_SAUL_STATUS, 2);
   Reply(157);
   NOption(158, Saul18, 4);
   if ((global_var(GVAR_TRISH_STATUS) bwand 1) or (global_var(GVAR_TRISH_STATUS) bwand 4) and not(global_var(GVAR_TRISH_STATUS) bwand 64)) then begin
      NOption(159, Saul20, 5);
   end
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul18 begin
   if (local_var(1) < 2) then begin
      Reply(160);
   end
   else begin
      Reply(161);
   end
   if (not(local_var(5))) then begin
      NOption(162, Saul13, 4);
   end
   if (not(local_var(6))) then begin
      NOption(163, Saul14, 4);
   end
   BOption(164, Saul18a, 4);
   NOption(165, SaulEnd, 4);
end

procedure Saul18a begin
   set_local_var(1, 1);
   LevelToReact
   call Saul09;
end

procedure Saul19 begin
   Reply(166);
   NOption(168, Saul18, 4);
   if (dude_iq >= 6) then begin
      GOption(167, Saul_UpReact, 6);
   end
   else begin
      Goodbyes;
      NOption(169, SaulEnd, 4);
   end
end

procedure Saul20 begin
   set_global_var(GVAR_SAUL_STATUS, 2);
   if (local_var(1) == 1) then begin
      Reply(169);
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
         Reply(mstr(170) + mstr(171));
         if ((global_var(GVAR_TRISH_STATUS) bwand 2) or (global_var(GVAR_TRISH_STATUS) bwand 8)) then begin
            if (dude_iq >= 6) then begin
               GOption(172, Saul21, 6);
            end
            else begin
               NOption(173, Saul22, 4);
            end
         end
      end
      else begin
         Reply(mstr(170));
      end
   end
   NOption(174, Saul18, 4);
   NOption(175, SaulEnd, 4);
end

procedure Saul21 begin
   UpReact
   if (not(global_var(GVAR_TRISH_STATUS) bwand 16)) then begin
      set_global_var(GVAR_TRISH_STATUS, global_var(GVAR_TRISH_STATUS) + 16);
   end
   GMessage(176);
end

procedure Saul22 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call Saul21;
   end
   else begin
      Reply(177);
      NOption(178, Saul18, 4);
      NOption(179, SaulEnd, 4);
   end
end

procedure Saul23 begin
   if (local_var(1) < 2) then begin
      Reply(180);
   end
   else begin
      Reply(181);
   end
   BOption(182, Saul08a, 4);
   if ((global_var(GVAR_TRISH_STATUS) bwand 1) or (global_var(GVAR_TRISH_STATUS) bwand 4) and ((global_var(GVAR_TRISH_STATUS) bwand 2) or (global_var(GVAR_TRISH_STATUS) bwand 8)) and not(global_var(GVAR_TRISH_STATUS) bwand 16) and not(global_var(GVAR_TRISH_STATUS) bwand 64)) then begin
      NOption(183, Saul20, 4);
   end
   if (not(local_var(5))) then begin
      NOption(184, Saul13, 4);
   end
   Goodbyes;
   NOption(exit_line, SaulEnd, 4);
end

procedure Saul24 begin
   Reply(185);
   NOption(186, SaulEnd, 4);
   NOption(187, Saul18, 4);
end

procedure SaulBoxing begin
   reg_anim_clear(self_obj);
   reg_anim_clear(challenger_ptr);

   if (whose_turn == 1) then begin
      reg_anim_begin();
      reg_anim_animate(self_obj, ANIM_throw_punch, -1);
      if (is_success(roll_vs_skill(self_obj, SKILL_UNARMED_COMBAT, 0))) then begin
         if (challenger_hits >= (get_endurance(challenger_ptr) * 2)) then begin
            reg_anim_animate(challenger_ptr, ANIM_fall_back, 4);
            reg_anim_animate(challenger_ptr, ANIM_fall_back_sf, -1);
            add_timer_event(self_obj, game_ticks(2), 2);
         end
         else begin
            reg_anim_animate(challenger_ptr, ANIM_hit_from_front, 4);
            challenger_hits := challenger_hits + 1;
            add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
         end
      end
      else begin
         reg_anim_animate(challenger_ptr, ANIM_dodge_anim, 4);
         add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
      end
      reg_anim_end();
   end

   else begin
      reg_anim_begin();
      reg_anim_animate(challenger_ptr, ANIM_throw_punch, -1);
      if (is_success(roll_vs_skill(challenger_ptr, SKILL_UNARMED_COMBAT, 0))) then begin
         if (Saul_hits >= (self_endurance * 2)) then begin
            reg_anim_animate(self_obj, ANIM_fall_back, 4);
            reg_anim_animate(self_obj, ANIM_fall_back_sf, -1);
            add_timer_event(self_obj, game_ticks(2), 3);
         end
         else begin
            reg_anim_animate(self_obj, ANIM_hit_from_front, 4);
            Saul_hits := Saul_hits + 1;
            add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
         end
      end
      else begin
         reg_anim_animate(self_obj, ANIM_dodge_anim, 4);
         add_timer_event(self_obj, game_ticks(random(1, 2)), 1);
      end
      reg_anim_end();
   end

end

procedure SaulCombat begin
   tmp_hostile := 1;
end

procedure SaulEnd begin
end

procedure Saul_UpReact begin
   set_local_var(0, local_var(0) + 10);
   ReactToLevel
end
