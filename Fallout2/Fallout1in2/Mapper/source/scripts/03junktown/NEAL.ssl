/*

   Junktown - Neal, the bartender

*/

/* Include Files */
#include "define.h"
#include "junktown.h"
#include "maps/junkcsno.h"

#define NAME                    SCRIPT_NEAL
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure description_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;

procedure Neal01;
procedure Neal02;
procedure Neal03;
procedure Neal04;
procedure Neal05;
procedure Neal06;
procedure Neal07;
procedure Neal08;
procedure Neal09;
procedure Neal10;
procedure Neal11;
procedure NealEnd;

procedure NealKickOut;
procedure NealCola;
procedure NealBeer;
procedure NealBooze;

import variable messing_with_SkumDoor;
import variable Neal_closing_door;
import variable Neal_ptr;
import variable Skul_target;
import variable SkumDoor_ptr;
import variable Trish_ptr;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

variable annoyed;
variable tmp_hostile;
variable initial := 0;
variable item;
variable moving_disabled;
variable sfx_name;
variable sleeping_disabled;
variable flag149;
variable change_team;
variable sleep_float;
variable sleep_return_float;
variable kick_out;

#define LVAR_Herebefore                   (4)
#define LVAR_Sleeping                     (9)

#define EVENT_SHOOT                    (4)
#define EVENT_TARGET_DEAD              (10)
#define EVENT_SLEEP                    (11)
#define EVENT_KICKED_OUT               (12)
#define EVENT_RETURN_SLEEP             (13)

#define kicked_out_hex                 (22483)

#define urn_thief_reaction             float_msg(self_obj, mstr(133), FLOAT_MSG_RED);  \
                                       tmp_hostile := 1;                               \
                                       set_local_var(10, 1)

procedure start begin
   if not(initial) then begin
      initial := 1;
      Neal_ptr := self_obj;
      night_person := 1;
      wake_time := 1300;
      sleep_time := 410;
      home_tile := 19477;
      sleep_tile := 17876;
      change_team := 0;
      if ((global_var(GVAR_AMBUSH_SKULLZ) == 1) and (map_var(MVAR_Skulz_left) == 4)) then begin
         set_team(Neal_ptr, TEAM_PLAYER);
         change_team := 1;
      end
      else
         set_self_team(TEAM_JUNKTOWNER);
      set_self_ai(AI_JUNKTOWN_GUARD);
   end
end

procedure critter_p_proc begin
   if ((map_var(MVAR_Skulz_left) == 0) and (change_team == 1)) then begin
      set_team(Neal_ptr, TEAM_JUNKTOWNER);
      change_team := 0;
   end

   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end

   if (sleeping_disabled == 0) then begin
      sleeping
   end

   if ((game_time_hour > wake_time) or (game_time_hour < sleep_time) and (moving_disabled == 0)) then begin
      if (map_var(MVAR_SKUM_NOISY) > 0) then
         set_map_var(MVAR_SKUM_NOISY, 0);
         sleep_return_float := 0;

      if (self_tile != home_tile) then
         self_walk_to_tile(home_tile);
      else if (self_cur_rot != 2) then
         self_rotate(2);
   end

   // Dude stealing his urn:
   if ((map_var(MVAR_caught_stealing_urn) == 1) and (local_var(10) == 0) and (local_var(9) == 0) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
      urn_thief_reaction;
   end

   if (self_item_count(PID_URN)) then begin
      destroy_object(self_item(PID_URN));
   end

   if (messing_with_SkumDoor == 1) then begin
      reg_anim_clear(self_obj);
      messing_with_SkumDoor := 2;
      moving_disabled := 1;
      sleeping_disabled := 1;
      if (SkumDoor_ptr == 0) then begin
         annoyed := 1;
      end
      if (annoyed) then begin
         float_msg(self_obj, mstr(149), FLOAT_MSG_RED);
         Neal_closing_door := 0;
         if (SkumDoor_ptr != 0) then begin
            use_obj(SkumDoor_ptr);
         end
         else begin
            messing_with_SkumDoor := 3;
         end
      end
      else begin
         float_msg(self_obj, mstr(148), FLOAT_MSG_RED);
         Neal_closing_door := 1;
         if (SkumDoor_ptr != 0) then begin
            use_obj(SkumDoor_ptr);
         end
         else begin
            messing_with_SkumDoor := 3;
         end
      end
   end
   else if (messing_with_SkumDoor == 3) then begin
      messing_with_SkumDoor := 0;
      sleeping_disabled := 0;
      moving_disabled := 0;
      if (annoyed) then begin
         annoyed := 0;
         tmp_hostile := 1;
      end
      else begin
         float_msg(self_obj, mstr(147), FLOAT_MSG_RED);
         annoyed := 1;
      end
   end

   if (SkumDoor_ptr != 0) then begin
      if ((game_time_hour == 409) and obj_is_open(SkumDoor_ptr)) then begin
         moving_disabled := 1;
         sleeping_disabled := 1;
         Neal_closing_door := 1;
         use_obj(SkumDoor_ptr);
      end
      if ((game_time_hour == 1400) and not(obj_is_open(SkumDoor_ptr))) then begin
         moving_disabled := 1;
         sleeping_disabled := 1;
         Neal_closing_door := 0;
         use_obj(SkumDoor_ptr);
      end
   end

   if (global_var(GVAR_DUDE_ENEMY_JUNK_CITIZEN) == 1) then begin
      if (self_can_see_dude) then begin
         attack(dude_obj);
      end
   end

   if ((map_var(MVAR_bar_fight) == 1) and (flag149 == 0)) then begin
      float_msg(self_obj, mstr(149), FLOAT_MSG_LIGHT_RED);
      flag149 := 1;
   end

   // Sleep floaters ZZZZ:
   /*
   if (self_tile == sleep_tile and sleep_float == 0) then begin
      sleep_float := 1;
      add_timer_event(self_obj, game_ticks(random(5, 15)), EVENT_SLEEP);
   end
   */

   // Player made too much noise in the Skum Pitt at night:
   if (map_var(MVAR_SKUM_NOISY) == 1) then begin
      if (self_tile != sleep_tile) then begin
         if (self_can_see_dude or tile_distance(self_tile, dude_tile) < 7) then begin
            set_map_var(MVAR_SKUM_NOISY, 2);
            reg_anim_clear(self_obj);
            call NealKickOut;
         end
         else if ((self_tile == check_noise_hex) and (sleep_return_float == 0)) then begin
            sleep_return_float := 1;
            add_timer_event(self_obj, game_ticks(10), EVENT_RETURN_SLEEP);
         end
      end
   end
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_DUDE_ENEMY_JUNK_CITIZEN, 1);
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
end

procedure destroy_p_proc begin
   Neal_ptr := 0;
   set_global_var(GVAR_IS_NEAL_DEAD, 1);
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_DUDE_ENEMY_JUNK_CITIZEN, 1);
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 1) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

procedure pickup_p_proc begin
   float_msg(self_obj, mstr(103), FLOAT_MSG_RED);
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   set_tma_data_generic(TMA_MSG_JUNKCSNO);

   dude_look_at_self;
   //if (self_tile == home_tile) then begin
      if ((game_time_hour >= 1300) and (game_time_hour < 1600)) then begin
         float_msg(self_obj, mstr(104), FLOAT_MSG_NORMAL);
      end
      else begin
         if (self_item_count(PID_URN)) then begin
            float_msg(self_obj, mstr(143), FLOAT_MSG_BLUE);
            set_local_var(11, 1);
            set_global_var(GVAR_URN_STOLEN, 2);
         end
         else begin
            if ((game_time_hour >= 410) and (game_time_hour <= 1300)) then begin
               //float_msg(self_obj, mstr(105), FLOAT_MSG_NORMAL);
               call NealKickOut;
            end
            else begin
               start_dialog_at_node(Neal01);
               if (local_var(LVAR_Herebefore) == 0) then begin
                  if (Skul_target != 0) then begin
                     if (tile_distance_objs(self_obj, Skul_target) < 12) then begin
                        rm_timer_event(Skul_target);
                        add_timer_event(Skul_target, game_ticks(3), 2);
                        set_local_var(LVAR_Herebefore, 1);
                     end
                  end
               end
            end
         end
      end
      if (item) then begin
         add_obj_to_inven(dude_obj, item);
         item := 0;
         float_msg(self_obj, mstr(132), FLOAT_MSG_GREEN);
      end
   //end
end

procedure timed_event_p_proc begin
variable Sound2;

   if (fixed_param == EVENT_RETURN_SLEEP) and (self_tile == check_noise_hex) then begin
      float_msg(self_obj, mstr(203), FLOAT_MSG_NORMAL);
      self_walk_to_tile(sleep_tile);
      set_map_var(MVAR_SKUM_NOISY, 0);
   end
   else if (fixed_param == EVENT_KICKED_OUT) then begin
      gfade_out(ONE_GAME_SECOND);
         move_to(self_obj, sleep_tile, 0);
         reg_anim_clear(self_obj);

         move_to(dude_obj, kicked_out_hex, 0);
         attempt_place_party(kicked_out_hex, 0)
         dude_rotate(2);

         if (SkumDoor_ptr != 0) then begin
            obj_close(SkumDoor_ptr);
            obj_lock(SkumDoor_ptr);
         end
      gfade_in(ONE_GAME_SECOND);
      kick_out := 2;
      sleep_return_float := 0;
      set_map_var(MVAR_SKUM_NOISY, 0);
   end
   else if (fixed_param == EVENT_SLEEP and kick_out == 0) then begin
      if ((self_tile == sleep_tile) and (map_var(MVAR_SKUM_NOISY) == 0)) then begin
         //float_msg(self_obj, mstr(105), FLOAT_MSG_NORMAL);
         sleep_float := 0;
      end
   end
   else if (fixed_param == 1) then begin
      float_msg(Trish_ptr, message_str(SCRIPT_TRISH, 150), FLOAT_MSG_BLUE);
      if ((global_var(GVAR_TRISH_STATUS) bwand 2) == 0) then begin
         set_global_var(GVAR_TRISH_STATUS, global_var(GVAR_TRISH_STATUS) + 2);
      end
      moving_disabled := 1;
      reg_anim_clear(self_obj);
      reg_anim_begin();
      reg_anim_obj_move_to_tile(self_obj, home_tile, -1);
      reg_anim_end();

      set_quest_join_skullz_active;
      add_timer_event(self_obj, 5, 2);
   end
   else if (fixed_param == 2) then begin
      if (self_tile != home_tile) then begin
         self_walk_to_tile(home_tile);
         add_timer_event(self_obj, 5, 2);
      end
      else begin
         if (self_cur_rot != 3) then begin
            self_rotate(3);
            add_timer_event(self_obj, 5, 2);
         end
         else begin
            if (self_item_count(PID_14MM_PISTOL) == 0) then begin
               item := create_object(PID_14MM_PISTOL, 0, 0);
               add_obj_to_inven(self_obj, item);
               item := 0;
            end
            wield_obj_critter(self_obj, self_item(PID_14MM_PISTOL));
            add_timer_event(self_obj, 5, 3);
         end
      end
   end
   else if (fixed_param == 3) then begin
      reg_anim_clear(self_obj);
      reg_anim_begin();
      reg_anim_animate(self_obj, ANIM_point, -1);
      reg_anim_animate(self_obj, ANIM_fire_single, -1);
      sfx_name := sfx_build_weapon_name(1, self_item(PID_14MM_PISTOL), 0, Skul_target);
      reg_anim_play_sfx(self_obj, sfx_name, 0);
      reg_anim_animate(self_obj, ANIM_unpoint, -1);
      reg_anim_end();
      add_timer_event(self_obj, 5, EVENT_SHOOT);
   end
   else if (fixed_param == EVENT_SHOOT) then begin
      // vanilla Fo1:
      //critter_dmg( Skul_target, random(50, 75), DMG_normal_dam );

      // Fo1in2:
      if not(fo1in2_destroy_armor_disabled) then
         rm_obj_from_inven(Skul_target, get_armor(Skul_target));

      game_ui_disable;
      Sound2 := sfx_build_char_name(Skul_target, ANIM_big_hole, snd_die);
      reg_anim_clear(Skul_target);
      reg_anim_begin();
         reg_anim_animate(Skul_target, ANIM_big_hole, -1);
         reg_anim_play_sfx(Skul_target, Sound2, 0);
      reg_anim_end();
      add_timer_event(self_obj, 23, EVENT_TARGET_DEAD);

      // vanilla Fo1:
      float_msg(self_obj, mstr(146), FLOAT_MSG_RED);
      moving_disabled := 0;
   end
   else if (fixed_param == EVENT_TARGET_DEAD) then begin
      kill_critter(Skul_target, ANIM_big_hole);
      game_ui_enable;
   end
   else if (fixed_param == 5) then begin
      float_msg(self_obj, mstr(147), FLOAT_MSG_RED);
   end
   else if (fixed_param == 6) then begin
      annoyed := 0;
      sleeping_disabled := 0;
   end
   else if (fixed_param == 6) then begin
      tmp_hostile := 1;
   end
   else if (fixed_param == 8) then begin
      moving_disabled := 0;
      sleeping_disabled := 0;
   end
end

procedure use_obj_on_p_proc begin
   if (obj_pid(obj_being_used_with) == PID_URN) then begin
      rm_obj_from_inven(source_obj, obj_being_used_with);
      add_obj_to_inven(self_obj, obj_being_used_with);
      dialogue_system_enter;
   end
end

procedure NealKickOut begin
   self_look_at_dude;
   if (dude_item_count(PID_URN)) then begin
      set_map_var(MVAR_caught_stealing_urn, 1);
      urn_thief_reaction;
   end
   else begin
      if (kick_out == 0) then begin
         kick_out := 1;
         float_msg(self_obj, mstr(200), FLOAT_MSG_RED);
         add_timer_event(self_obj, game_ticks(1), EVENT_KICKED_OUT);
      end
      else if (kick_out == 2) then begin
         float_msg(self_obj, mstr(149), FLOAT_MSG_RED);
         tmp_hostile := 1;
      end
   end
end

procedure Neal01 begin
   Reply(106);
   NOption(107, Neal02, 4);
   NOption(108, Neal03, 4);
   NOption(mstr(109) + dude_name + mstr(110), Neal04, 4);
   if (global_var(GVAR_URN_STOLEN) == 0) then begin
      NOption(125, Neal09, 4);
   end
   else begin
      if (global_var(GVAR_URN_STOLEN) == 1) then begin
         NOption(142, Neal09, 4);
      end
   end
   NLowOption(111, NealEnd);
   Goodbyes;
   if (dude_item_count(PID_URN)) then begin
      GOption(144, Neal11, 4);
   end
   NOption(exit_line, NealEnd, 4);
end

procedure Neal02 begin
   Reply(112);
   NOption(113, NealCola, 1);
   NOption(114, NealBeer, 1);
   NOption(115, NealBooze, 1);
   Goodbyes;
   NOption(exit_line, NealEnd, 1);
end

procedure Neal03 begin
   Reply(116);
   if (not(local_var(5))) then begin
      NOption(117, Neal06, 4);
   end
   if ((global_var(GVAR_TYCHO_HIRELING_STATUS) == 0) and not(local_var(6)) and (tile_distance_objs(self_obj, Tycho_ptr) < 12)) then begin
      NOption(118, Neal07, 4);
   end
   if (not(local_var(8))) then begin
      if ((global_var(GVAR_BUST_SKULZ) != 2) and quest_join_skullz_active) then begin
         NOption(119, Neal08, 4);
      end
   end
   Goodbyes;
   NOption(exit_line, NealEnd, 1);
end

procedure Neal04 begin
   Reply(120);
   NOption(121, Neal02, 4);
   NOption(122, Neal03, 4);
   NOption(123, NealEnd, 4);
end

procedure Neal05 begin
   NMessage(124);
end

procedure Neal06 begin
   set_local_var(5, 1);
   Reply(126);
   NOption(127, Neal02, 4);
   NOption(128, Neal10, 4);
end

procedure Neal07 begin
   set_local_var(6, 1);
   Reply(129);
   NOption(130, Neal03, 4);
   Goodbyes;
   NOption(exit_line, NealEnd, 1);
end

procedure Neal08 begin
   set_local_var(8, 1);
   Reply(131);
   NOption(130, Neal03, 4);
   Goodbyes;
   NOption(exit_line, NealEnd, 1);
end

procedure Neal09 begin
   if (global_var(GVAR_URN_STOLEN) == 1) then begin
      Reply(145);
   end
   else begin
      Reply(134);
   end
   NOption(138, Neal10, 4);
end

procedure Neal10 begin
   Reply(135);
   NOption(139, Neal02, 4);
   NOption(136, Neal03, 4);
   NOption(137, NealEnd, 4);
end

procedure Neal11 begin
   GMessage(143);
   set_local_var(11, 1);
   set_global_var(GVAR_URN_STOLEN, 2);
   item := dude_item(PID_URN);
   set_global_var(GVAR_PLAYER_REPUTATION, check_general_rep + 2);
   rm_obj_from_inven(dude_obj, item);
   add_obj_to_inven(self_obj, item);
end

procedure NealEnd begin
end

procedure NealCola begin
   if (local_var(11) == 0) then begin
      if (dude_caps >= 3) then begin
         dude_caps_adjust(-3);
         item := create_object(PID_NUKA_COLA, 0, 0);
      end
      else begin
         float_msg(self_obj, mstr(140), FLOAT_MSG_NORMAL);
      end
   end
   else begin
      item := create_object(PID_NUKA_COLA, 0, 0);
   end
end

procedure NealBeer begin
   if (local_var(11) == 0) then begin
      if (dude_caps >= 5) then begin
         dude_caps_adjust(-5);
         item := create_object(PID_BEER, 0, 0);
      end
      else begin
         float_msg(self_obj, mstr(140), FLOAT_MSG_NORMAL);
      end
   end
   else begin
      item := create_object(PID_BEER, 0, 0);
   end
end

procedure NealBooze begin
   if (local_var(11) == 0) then begin
      if (dude_caps >= 20) then begin
         dude_caps_adjust(-20);
         item := create_object(PID_BOOZE, 0, 0);
      end
      else begin
         float_msg(self_obj, mstr(140), FLOAT_MSG_NORMAL);
      end
   end
   else begin
      item := create_object(PID_BOOZE, 0, 0);
   end
end
