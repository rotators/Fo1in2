/*

   Junktown - Raider

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_JTRAIDER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure combat_p_proc;

procedure Raider0;
procedure Raider1;
procedure Raider2;
procedure Raider3;
procedure Raider4;
procedure Raider5;
procedure Raider6;
procedure Raider7;
procedure Raider8;
procedure Raider9;
procedure Raider10;
procedure Raider10a;
procedure Raider11;
procedure Raider12;
procedure Raider13;
procedure Raider14;
procedure Raider14a;
procedure Raider15;
procedure Raider16;
procedure Raider17;
procedure Raider17a;
procedure Raider17b;
procedure Raider18;
procedure Raider19;
procedure Raider20;
procedure Raider21;
procedure Raider22;
procedure Raider22a;
procedure Raider23;
procedure Raider24;
procedure Raider24a;
procedure Raider25;
procedure Raider26;
procedure Raider27;
procedure Raider27a;
procedure Raider28;
procedure Raider29;
procedure Raider29a;
procedure Raider30;
procedure Raider30a;
procedure Raider31;
procedure Raider32;
procedure Raider33;
procedure Raider34;
procedure Raiderend;

procedure RaiderCombat;
procedure RaiderSnap;
procedure safe;

import variable JTRaider_ptr;
import variable Sinthia_ptr;
import variable award;

variable tmp_hostile;//from old version of script
variable known;//from old version of script
variable pissed;//from old version of script
variable sfx_name;
variable Sinthia_is_safe;
variable shoot_Sinthia;
variable will_negotiate;//from old version of script
variable initial := 0;
variable line184flag;//from old version of script

procedure start
begin


   if (initial == 0) then begin
      initial := 1;
      JTRaider_ptr := self_obj;
      set_self_team(TEAM_JUNKTOWN_RAIDER);
      set_self_ai(AI_GENERIC_RAIDER);
      set_self_team(TEAM_15);
   end
end

procedure critter_p_proc
begin
   if ((tile_distance_objs(self_obj, dude_obj) < 8) and (local_var(8) == 0) and (has_skill(dude_obj, SKILL_SNEAK) >= 50)) then begin
      set_local_var(8, 1);
      display_msg(mstr(184));
   end
   else begin
      if (map_var(1) == 0) then begin
         if ((local_var(5) == 2) and self_can_see_dude) then begin
            set_local_var(5, 1);
            set_local_var(6, 1);
            attack(dude_obj);
         end
         else begin
            if ((local_var(6) == 1) and (tile_distance_objs(dude_obj, self_obj) < 4)) then begin
               if (not(dude_is_sneaking)) then begin
                  set_local_var(5, 2);
               end
            end
            else begin
               if (self_can_see_dude and (local_var(4) == 0) and (dude_is_sneaking == 0)) then begin
                  dialogue_system_enter;
               end
            end
         end
      end
      else begin
         if (map_var(1) == 1) then begin
            if (local_var(9) == 0) then begin
               rm_timer_event(Sinthia_ptr);
               add_timer_event(Sinthia_ptr, game_ticks(2), 2);

               reg_anim_clear(self_obj);
               reg_anim_begin();
               reg_anim_animate(self_obj, ANIM_fall_front, -1);
               reg_anim_animate(self_obj, ANIM_fall_front_sf, -1);
               reg_anim_end();
               set_local_var(9, 1);
            end
         end
      end
   end
end

procedure damage_p_proc
begin
   if (source_obj == dude_obj) then begin
      if (dude_is_sneaking and (map_var(1) == 0) and (local_var(9) == 0)) then begin
         if (is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0))) then begin
            script_overrides;
            display_msg(mstr(183));
            critter_injure(self_obj, DAM_KNOCKED_DOWN);//    DAM_KNOCKED_DOWN       2     <-- DOES NOT WORK!!!
            critter_injure(self_obj, DAM_KNOCKED_OUT);//    DAM_KNOCKED_OUT      1    <-- DOES NOT WORK!!!
            set_map_var(1, 1);
            add_timer_event(self_obj, game_ticks(10), 3);
            terminate_combat;
         end
         else begin
            set_local_var(5, 2);
         end
      end
      else begin
         set_local_var(5, 2);
      end
   end
end

procedure destroy_p_proc
begin
   rm_timer_event(self_obj);

   if ((source_obj == dude_obj) or (party_member_obj(obj_pid(source_obj)) != 0)) then begin
      set_map_var(1, 2);
   end
   set_global_var(GVAR_SAVE_SINTHIA, 2);
   set_map_var(3, 3);
   if (map_var(0) != 2) then begin
      award := 400;
   end
   inc_evil_critter
   rm_timer_event(self_obj);
end

procedure look_at_p_proc
begin
   script_overrides;
   display_msg(mstr(100));
end

procedure map_enter_p_proc
begin
   JTRaider_ptr := self_obj;
   if (not(is_loading_game)) then begin
      if (global_var(GVAR_SAVE_SINTHIA) == 2) then begin
         JTRaider_ptr := 0;
         destroy_object(self_obj);
      end
      else begin
         if (map_var(1) == 1) then begin
            set_map_var(1, 0);
            set_local_var(5, 2);
            set_local_var(6, 1);
            set_local_var(7, 0);
            if (critter_state(self_obj) == CRITTER_IS_PRONE) then begin
               reg_anim_clear(self_obj);
               reg_anim_begin();
               reg_anim_animate(self_obj, ANIM_back_to_standing, -1);
               reg_anim_end();
            end
         end
      end
   end
end

procedure pickup_p_proc
begin
   set_local_var(5, 2);
   set_local_var(6, 1);
   set_local_var(7, 0);
end

procedure talk_p_proc
begin
   dude_look_at_self;
   get_reaction
   if (local_var(5) != 0) then begin
      call Raider34;
   end
   else begin
      if ((global_var(GVAR_SAVE_SINTHIA) == 1) and (map_var(1) == 0)) then begin
         start_gdialog(337, self_obj, 4, -1, -1);
         gsay_start;
         if (local_var(4) == 0) then begin
            call Raider0;
         end
         else begin
            if (map_var(3) == 1) then begin
               if (local_var(1) < 2) then begin
                  call Raider17;
               end
               else begin
                  call Raider9;
               end
               set_map_var(3, 2);
            end
            else begin
               if (local_var(7) == 1) then begin
                  call Raider21;
               end
               else begin
                  call Raider31;
               end
            end
         end
         gsay_end;
         end_dialogue;
      end
      else begin
         display_msg(mstr(178));
      end
   end
   if (shoot_Sinthia) then begin
      game_ui_disable;

      reg_anim_clear(self_obj);
      reg_anim_begin();
      reg_anim_animate(self_obj, ANIM_point, -1);
      reg_anim_animate(self_obj, ANIM_fire_single, -1);
      sfx_name := sfx_build_weapon_name(1, self_item(PID_10MM_PISTOL), 0, Sinthia_ptr);
      reg_anim_play_sfx(self_obj, sfx_name, 0);
      reg_anim_animate(self_obj, ANIM_unpoint, -1);
      reg_anim_end();

      shoot_Sinthia := 0;
      add_timer_event(self_obj, 5, 2);
   end
   if (Sinthia_is_safe == 1) then begin
      set_map_var(3, 3);
      set_global_var(GVAR_SAVE_SINTHIA, 2);
      gfade_out(1);
      gfade_in(1);
      destroy_object(self_obj);
   end
end

procedure timed_event_p_proc
begin
   if (fixed_param == 1) then begin
      game_ui_enable;
      set_local_var(5, 2);
   end
   else begin
      if (fixed_param == 2) then begin
         critter_dmg(Sinthia_ptr, 75, DMG_normal_dam);
         add_timer_event(self_obj, game_ticks(5), 1);
      end
      else begin
         if (fixed_param == 3) then begin
            set_map_var(1, 0);
            set_local_var(5, 2);
            set_local_var(6, 1);
            set_local_var(7, 0);
            if (critter_state(self_obj) == CRITTER_IS_PRONE) then begin
               reg_anim_clear(self_obj);
               reg_anim_begin();
               reg_anim_animate(self_obj, ANIM_back_to_standing, -1);
               reg_anim_end();
            end
         end
      end
   end
end

procedure combat_p_proc
begin
   if ((map_var(1) == 1) and (map_var(3) > 0) and (map_var(3) < 3) and (tile_distance_objs(self_obj, dude_obj) < 4)) then begin
      script_overrides;
      terminate_combat;
   end
end

procedure Raider0
begin
   set_local_var(4, 1);
   Reply(101);
   NLowOption(102, Raider1);
   NOption(103, Raider2, 4);
   NOption(104, Raider8, 4);
   NOption(105, Raider4, 7);
end

procedure Raider1
begin
   NMessage(106);
   call RaiderSnap;
end

procedure Raider2
begin
   Reply(107);
   NOption(108, Raider3, 4);
end

procedure Raider3
begin
   DownReact
   BMessage(109);
   set_local_var(6, 1);
end

procedure Raider4
begin
   Reply(110);
   NOption(111, Raider5, 7);
   NOption(112, Raider7, 7);
end

procedure Raider5
begin
   Reply(113);
   GOption(114, Raider6, 7);
end

procedure Raider6
begin
   UpReact
   set_local_var(6, 1);
   GMessage(115);
end

procedure Raider7
begin
   BMessage(116);
   set_local_var(6, 1);
end

procedure Raider8
begin
   if (dude_is_male) then begin
      BMessage(119);
   end
   else begin
      BMessage(120);
   end
   call RaiderSnap;
end

procedure Raider9
begin
   Reply(121);
   NOption(122, Raider10, 4);
   NOption(123, Raider14, 7);
end

procedure Raider10
begin
   Reply(124);
   NOption(125, Raider11, 4);
   NOption(126, Raider10a, 4);
end

procedure Raider10a
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      set_local_var(7, 1);
      call Raider12;
   end
   else begin
      call Raider13;
   end
end

procedure Raider11
begin
   Reply(127);
   BOption(128, RaiderCombat, 4);
end

procedure Raider12
begin
   NMessage(129);
end

procedure Raider13
begin
   NMessage(130);
end

procedure Raider14
begin
   Reply(131);
   NOption(132, Raider14a, 7);
end

procedure Raider14a
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
      set_local_var(7, 1);
      call Raider16;
   end
   else begin
      call Raider15;
   end
end

procedure Raider15
begin
   NMessage(133);
end

procedure Raider16
begin
   if (dude_is_male) then begin
      NMessage(136);
   end
   else begin
      NMessage(137);
   end
end

procedure Raider17
begin
   Reply(138);
   NOption(139, Raider17a, 4);
   NOption(140, Raider18, 6);
   NOption(141, Raider17b, 8);
end

procedure Raider17a
begin
   set_local_var(7, 0);
end

procedure Raider17b
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      set_local_var(7, 1);
      call Raider20;
   end
   else begin
      call Raider19;
   end
end

procedure Raider18
begin
   BMessage(142);
   call RaiderSnap;
end

procedure Raider19
begin
   BMessage(143);
   set_local_var(7, 0);
end

procedure Raider20
begin
   UpReact
   GMessage(144);
end

procedure Raider21
begin
   Reply(145);
   NOption(146, Raider22, 4);
end

procedure Raider22
begin
   Reply(147);
   NOption(148, Raider23, 4);
   NOption(149, Raider24, 4);
   NOption(150, Raider22a, 5);
   NOption(151, Raider27, 6);
end

procedure Raider22a
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call Raider26;
   end
   else begin
      call Raider23;
   end
end

procedure Raider23
begin
   BMessage(152);
   call RaiderSnap;
end

procedure Raider24
begin
   Reply(153);
   NOption(154, Raider24a, 4);
   NOption(155, Raider25, 4);
end

procedure Raider24a
begin
   if (dude_caps >= 100) then begin
      dude_caps_adjust(-100);
      call safe;
   end
   else begin
      call Raider23;
   end
end

procedure Raider25
begin
   BMessage(156);
   call RaiderSnap;
end

procedure Raider26
begin
   GMessage(157);
   call safe;
end

procedure Raider27
begin
   Reply(158);
   NOption(159, Raider28, 5);
   NOption(160, Raider27a, 5);
end

procedure Raider27a
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call Raider29;
   end
   else begin
      call Raider28;
   end
end

procedure Raider28
begin
   BMessage(161);
   call RaiderSnap;
end

procedure Raider29
begin
   Reply(162);
   NOption(163, Raider29a, 5);
   NOption(164, Raider30, 5);
end

procedure Raider29a
begin
   if (dude_caps >= 100) then begin
      dude_caps_adjust(-100);
      call safe;
   end
   else begin
      call Raider23;
   end
end

procedure Raider30
begin
   Reply(165);
   NOption(166, Raider23, 5);
   NOption(167, Raider30a, 5);
end

procedure Raider30a
begin
   if (dude_caps >= 200) then begin
      dude_caps_adjust(-200);
      call safe;
   end
   else begin
      call Raider23;
   end
end

procedure Raider31
begin
   Reply(168);
   NOption(169, Raider32, 4);
   if (dude_is_male) then begin
      BOption(172, Raider33, 6);
   end
   else begin
      BOption(173, Raider33, 6);
   end
end

procedure Raider32
begin
   BMessage(174);
   call RaiderSnap;
end

procedure Raider33
begin
   BMessage(175);
   call RaiderCombat;
end

procedure Raider34
begin
   float_msg(self_obj, mstr(176), FLOAT_MSG_RED);
   call RaiderSnap;
end

procedure Raiderend
begin
end

procedure RaiderCombat
begin
   set_local_var(5, 2);
end

procedure RaiderSnap
begin
   shoot_Sinthia := 1;
end

procedure safe
begin
   award := 1000;
   set_local_var(6, 0);
   Sinthia_is_safe := 1;
   if not(is_loading_game) then set_self_invisible;
end
