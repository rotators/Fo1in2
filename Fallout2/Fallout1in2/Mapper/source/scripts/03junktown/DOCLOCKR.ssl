/*

   Junktown - Doc Morbid's Locker

*/
#include "define.h"

#define NAME                    SCRIPT_DOCLOCKR

#include "command.h"

procedure start;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure look_at_p_proc;
procedure use_p_proc;

procedure set_off_trap;

import variable messing_with_Morbid_stuff;
import variable removal_ptr;

variable SkillCheck;

#define LVAR_TrapTampering    (0)
#define LVAR_TrapFound        (1)
#define LVAR_TrapDisarmed     (2)

procedure start begin
end

procedure look_at_p_proc begin
   set_map_var(4, self_obj);
end

procedure use_p_proc begin
   messing_with_Morbid_stuff := 1;
   if (source_obj == dude_obj) then begin
      if (obj_is_locked(self_obj)) then begin
         script_overrides;
         display_msg(mstr(100));
      end
      else begin
         if (local_var(LVAR_TrapDisarmed) == 0) then begin
            script_overrides;

            if (local_var(LVAR_TrapFound) == 0) then begin

               SkillCheck := roll_vs_skill(source_obj, SKILL_TRAPS, 0);
               if (is_success(SkillCheck)) then begin
                  reg_anim_clear(source_obj);
                  SkillCheck := roll_vs_skill(source_obj, SKILL_TRAPS, 0);
                  if (is_success(SkillCheck)) then begin
                     set_local_var(LVAR_TrapFound, 1);
                     set_local_var(LVAR_TrapDisarmed, 1);
                     display_msg(mstr(101));
                  end
                  else begin
                     if (is_critical(SkillCheck) and (local_var(LVAR_TrapDisarmed) == 0)) then begin
                        set_local_var(LVAR_TrapFound, 1);
                        set_local_var(LVAR_TrapDisarmed, 1);
                        display_msg(mstr(103));
                        call set_off_trap;
                     end
                     else begin
                        set_local_var(LVAR_TrapFound, 1);
                        display_msg(mstr(102));
                     end
                  end
               end

               else begin
                  call set_off_trap;
               end
            end
            else begin
               call set_off_trap;
            end

         end
      end
   end
   else if (source_obj == Katja_ptr) then begin
      set_local_var(LVAR_TrapFound, 1);
      set_local_var(LVAR_TrapDisarmed, 1);
      obj_unlock(self_obj);
   end
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);
   
   messing_with_Morbid_stuff := 1;
   if (item == PID_LOCKPICKS or item == PID_EXP_LOCKPICK_SET) then begin
      if (obj_is_locked(self_obj)) then begin
         script_overrides;
         
         if (item == PID_EXP_LOCKPICK_SET) then
            SkillCheck := roll_vs_skill(source_obj, SKILL_LOCKPICK, -30);
         else
            SkillCheck := roll_vs_skill(source_obj, SKILL_LOCKPICK, -40);
            
         if (is_success(SkillCheck)) then begin
            obj_unlock(self_obj);
            display_msg(mstr(107));
         end
         else begin

            if (is_critical(SkillCheck)) then begin
               jam_lock(self_obj);
               set_local_var(LVAR_TrapTampering, local_var(LVAR_TrapTampering) + 1);
               if ((local_var(LVAR_TrapTampering) >= 3) and (local_var(LVAR_TrapDisarmed) == 0)) then begin
                  display_msg(mstr(106));
                  call set_off_trap;
               end
               else begin
                  display_msg(mstr(110));
               end
            end
            else begin
               set_local_var(LVAR_TrapTampering, local_var(LVAR_TrapTampering) + 1);
               if ((local_var(LVAR_TrapTampering) >= 3) and (local_var(LVAR_TrapDisarmed) == 0)) then begin
                  display_msg(mstr(106));
                  call set_off_trap;
               end
               else begin
                  display_msg(mstr(108));
               end
            end

         end
      end
      else begin
         display_msg(mstr(109));
      end
   end
end

procedure use_skill_on_p_proc begin
   messing_with_Morbid_stuff := 1;
   if (action_being_used == SKILL_LOCKPICK) then begin
      if (obj_is_locked(self_obj)) then begin
         script_overrides;
         SkillCheck := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -60);
         if (is_success(SkillCheck)) then begin
            obj_unlock(self_obj);
            display_msg(mstr(107));
         end
         else if (is_critical(SkillCheck)) then begin
            jam_lock(self_obj);
            display_msg(mstr(110));
         end
         else begin
            display_msg(mstr(108));
            set_local_var(LVAR_TrapTampering, local_var(LVAR_TrapTampering) + 1);
            if ((local_var(LVAR_TrapTampering) >= 3) and (local_var(LVAR_TrapDisarmed) == 0)) then begin
               display_msg(mstr(106));
               call set_off_trap;
            end
         end
      end
      else begin
         display_msg(mstr(109));
      end
   end
   else begin
      if (action_being_used == SKILL_TRAPS) then begin
         if (local_var(LVAR_TrapFound) == 0) then begin
            SkillCheck := roll_vs_skill(source_obj, SKILL_TRAPS, 0);
            if (is_success(SkillCheck)) then begin
               if (is_critical(SkillCheck)) then begin
                  script_overrides;
                  display_msg(mstr(101));
                  set_local_var(LVAR_TrapFound, 1);
                  set_local_var(LVAR_TrapDisarmed, 1);
               end
               else begin
                  script_overrides;
                  display_msg(mstr(111));
                  set_local_var(LVAR_TrapFound, 1);
               end
            end
            else begin
               if (is_critical(SkillCheck)) then begin
                  display_msg(mstr(106));
                  call set_off_trap;
               end
            end
         end
         else begin
            if (local_var(LVAR_TrapDisarmed) == 0) then begin
               script_overrides;
               SkillCheck := roll_vs_skill(source_obj, SKILL_TRAPS, 0);
               if (is_success(SkillCheck)) then begin
                  display_msg(mstr(104));
                  set_local_var(LVAR_TrapDisarmed, 1);
               end
               else if (is_critical(SkillCheck)) then begin
                  display_msg(mstr(106));
                  call set_off_trap;
               end
               else begin
                  display_msg(mstr(105));
               end
            end
         end
      end
   end
end

procedure set_off_trap begin
   if (local_var(LVAR_TrapDisarmed) == 0) then begin
      //variable Damage := 0;
      //Damage := random(2, 7) + random(2, 7) + random(2, 7) + random(2, 7) + random(2, 7) + (difficulty_level * random(5, 10));
      //play_sfx("WHN1XXX1");
      //critter_dmg( dude_obj, Damage, DMG_explosion );
      explosion(self_tile, self_elevation, random(6, 36));
      destroy_object(self_obj);
   end
end
