/*

   Junktown - Killians door (entrance)

*/

/* Include Files */
#include "define.h"
#include "maps/junkkill.h"

#define NAME                    SCRIPT_KILDOOR1

#include "command.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;

#define LVAR_Locked                     (0)

import variable removal_ptr;

variable test;

procedure start begin
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
      destroy_object(self_obj);
   end
   else begin
      display_msg(message_str(SCRIPT_DOOR, 193));
   end
end

procedure map_enter_p_proc begin
   if not(junktown_invaded) and is_killian_alive then begin
      if ((game_time_hour >= 1900) or (game_time_hour < 700)) then begin
         obj_close(self_obj);
         obj_lock(self_obj);
      end
      else begin
         obj_unlock(self_obj);
      end
      obj_close(self_obj);
      set_local_var(LVAR_Locked, 0);
   end
   else begin
      obj_unlock(self_obj);
      obj_close(self_obj);
   end
end

procedure map_update_p_proc begin
   if not(junktown_invaded) and is_killian_alive  then begin
      if ((game_time_hour >= 1900) or (game_time_hour < 700) and (local_var(LVAR_Locked) == 0)) then begin
         obj_close(self_obj);
         obj_lock(self_obj);
      end
      else begin
         obj_unlock(self_obj);
      end
   end
end

procedure use_p_proc begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      display_msg(mstr(100));
   end
   else if not(junktown_invaded) and is_killian_alive then begin
      if ((game_time_hour >= 1900) or (game_time_hour < 700)) then begin
         set_map_var(8, 1);
      end
   end
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);

   if (item == PID_LOCKPICKS or item == PID_EXP_LOCKPICK_SET) then begin
      script_overrides;
      set_map_var(8, 1);
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(104));
      end
      else begin
         test := roll_vs_skill(source_obj, SKILL_LOCKPICK, 0);
         if (is_success(test)) then begin
            display_msg(mstr(101));
            obj_unlock(self_obj);
            set_local_var(LVAR_Locked, 1);
         end
         else if (is_critical(test)) then begin
            display_msg(mstr(103));
            jam_lock(self_obj);
         end
         else begin
            display_msg(mstr(102));
         end
      end
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      script_overrides;
      set_map_var(8, 1);
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(104));
      end
      else begin
         test := roll_vs_skill(source_obj, SKILL_LOCKPICK, -20);
         if (is_success(test)) then begin
            display_msg(mstr(101));
            obj_unlock(self_obj);
            set_local_var(LVAR_Locked, 1);
         end
         else if (is_critical(test)) then begin
            display_msg(mstr(103));
            jam_lock(self_obj);
         end
         else begin
            display_msg(mstr(102));
         end
      end
   end
end

procedure description_p_proc begin
   if (local_var(LVAR_Locked) == 0) then begin
      display_msg(message_str(SCRIPT_DOOR, 104));
   end
end
