#include "define.h"
#include "vault13.h"

#define NAME                    SCRIPT_GENVAULT
#define TOWN_REP_VAR            (GVAR_TOWN_REP_V13)

#include "command.h"
#include "modreact.h"

procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure push_p_proc;

procedure Vault00;
procedure Vault00a;
procedure Vault00b;
procedure Vault00c;
procedure Vault01;
procedure Vault02;
procedure Vault03;
procedure Vault04;
procedure Vault05;
procedure Vault06;
procedure Vault07;
procedure Vault08;
procedure Vault09;
procedure Vault10;
procedure Vault11;

procedure get_rations;
procedure set_ration_tile;
procedure set_sleep_tile;

variable night_person;

#define sleep_time         random(1900, 1930)
#define wake_time          sleep_time - 1300
variable home_tile;
variable sleep_tile;

variable gword1;
variable gword2;
variable PICK;
variable tmp_hostile;
variable sleeping_disabled;
variable ration_tile;

import variable recipient;
import variable WtrGrd_ptr;
import variable getting_ration;

#define LVAR_Sleeping                     (6)

procedure push_p_proc begin
end

procedure start begin
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (local_var(7) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
         call flee_dude;
      end
      if (global_var(GVAR_QUEST_VAULT13_4_WATERCHIP) == 0) then begin
         if (local_var(5) == 0) then begin
            if ((self_elevation == elevation(WtrGrd_ptr)) and (self_elevation == dude_elevation)) then begin
               if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
                  call get_rations;
               end
            end
         end
      end
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(7, 1);
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_VAULT_13_HOSTILE, 1);
   end
   inc_good_critter
end

procedure map_enter_p_proc begin
   if (v13_invaded) then begin
      invasion_kill_critter_V13;
   end

   if (local_var(4) == 0) then begin
      set_local_var(4, self_tile);
   end
   home_tile := local_var(4);
   set_self_team(TEAM_VAULT13);
   call set_ration_tile;
   call set_sleep_tile;
end

procedure map_update_p_proc begin
   if (not(combat_is_initialized)) then begin
      if (not(day)) then begin
         sleeping_disabled := 0;
         set_local_var(5, 0);
      end
      if (sleeping_disabled == 0) then begin
         sleeping
      end
   end
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   dude_look_at_self;

   get_reaction

   if (local_var(6)) then begin
      if (random(0, 1)) then begin
         float_msg(self_obj, mstr(166), FLOAT_MSG_NORMAL);
      end
      else begin
         display_msg(mstr(167));
      end
   end
   else if (local_var(7) or global_var(GVAR_VAULT_13_HOSTILE)) then begin
      call Vault00;
   end
   else if ((global_var(GVAR_QUEST_VAULT13_4_WATERCHIP) != 0) and (global_var(GVAR_QUEST_VAULT13_4_WATERCHIP) != 1)) then begin
      call Vault01;
   end
   else if dude_is_armed then begin
      call Vault02;
   end
   else if (get_water_days_left < 80) then begin
      call Vault00b;
   end
   else if (get_water_days_left < 40) then begin
      call Vault00c;
   end
   else begin
      call Vault00a;
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      self_walk_to_tile(tile_num_in_direction(tile_num(WtrGrd_ptr), 2, 1));
      add_timer_event(self_obj, game_ticks(3), 2);
   end
   else if (fixed_param == 2) then begin
      getting_ration := 1;
      if (random(0, 1)) then begin
         float_msg(self_obj, mstr(165), FLOAT_MSG_NORMAL);
      end
      add_timer_event(self_obj, game_ticks(3), 3);
   end
   else if (fixed_param == 3) then begin
      recipient := 0;
      self_walk_to_tile(home_tile);
   end
end

procedure Vault00 begin
   float_msg(self_obj, mstr(random(101, 104)), FLOAT_MSG_NORMAL);
end

procedure Vault00a begin
   if good_critter_reaction then begin
      call Vault03;
   end
   else if neutral_critter_reaction then begin
      call Vault06;
   end
   else begin
      call Vault09;
   end
end

procedure Vault00b begin
   if good_critter_reaction then begin
      call Vault04;
   end
   else if neutral_critter_reaction then begin
      call Vault07;
   end
   else begin
      call Vault10;
   end
end

procedure Vault00c begin
   if good_critter_reaction then begin
      call Vault05;
   end
   else if neutral_critter_reaction then begin
      call Vault08;
   end
   else begin
      call Vault11;
   end
end

procedure Vault01 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(109), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(110), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(111), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 4) then begin
      if (dude_is_male) then begin
         float_msg(self_obj, mstr(112), FLOAT_MSG_NORMAL);
      end
      else begin
         float_msg(self_obj, mstr(113), FLOAT_MSG_NORMAL);
      end
   end
   else if (PICK == 5) then begin
      if (dude_is_male) then begin
         float_msg(self_obj, mstr(114), FLOAT_MSG_NORMAL);
      end
      else begin
         float_msg(self_obj, mstr(115), FLOAT_MSG_NORMAL);
      end
   end
end

procedure Vault02 begin
   DownReact
   float_msg(self_obj, mstr(random(116, 119)), FLOAT_MSG_NORMAL);
end

procedure Vault03 begin
   PICK := random(1, 4);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(120), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(121), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(122), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(123) + dude_name + mstr(124), FLOAT_MSG_NORMAL);
   end
end

procedure Vault04 begin
   float_msg(self_obj, mstr(random(125, 128)), FLOAT_MSG_NORMAL);
end

procedure Vault05 begin
   float_msg(self_obj, mstr(random(129, 133)), FLOAT_MSG_NORMAL);
end

procedure Vault06 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(134), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(135) + dude_name + mstr(136), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(137), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(138), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 5) then begin
      float_msg(self_obj, mstr(139), FLOAT_MSG_NORMAL);
   end
end

procedure Vault07 begin
   float_msg(self_obj, mstr(random(140, 144)), FLOAT_MSG_NORMAL);
end

procedure Vault08 begin
   float_msg(self_obj, mstr(random(145, 149)), FLOAT_MSG_NORMAL);
end

procedure Vault09 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(150) + dude_name + mstr(151), FLOAT_MSG_NORMAL);
   end
   else if (PICK >= 4) then begin
      display_msg(mstr(150 + PICK));
   end
   else begin
      float_msg(self_obj, mstr(150 + PICK), FLOAT_MSG_NORMAL);
   end
end

procedure Vault10 begin
   PICK := random(1, 5);
   if (PICK == 5) then begin
      display_msg(mstr(160));
   end
   else begin
      float_msg(self_obj, mstr(155 + PICK), FLOAT_MSG_NORMAL);
   end
end

procedure Vault11 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(161), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(162), FLOAT_MSG_NORMAL);
   end
   else if (PICK == 3) then begin
      display_msg(mstr(163));
   end
   else if (PICK == 4) then begin
      display_msg(mstr(164));
   end
end

procedure get_rations begin
   sleeping_disabled := 1;
   if (self_tile != ration_tile) then begin
      if not(random(0, 9)) then begin
         if (random(0, 1)) then begin
            self_walk_to_tile(ration_tile);
         end
         else begin
            self_run_to_tile(ration_tile);
         end
      end
      else begin
         rm_timer_event(self_obj);
      end
   end
   else begin
      if (not(recipient)) then begin
         recipient := self_obj;
         add_timer_event(self_obj, game_ticks(3), 1);
         set_local_var(5, 1);
         sleeping_disabled := 0;
      end
   end
end

procedure set_ration_tile begin
   if (self_elevation == 0) then begin
      ration_tile := tile_num_in_direction(14704, random(0, 5), random(1, 2));
   end
   else if (self_elevation == 1) then begin
      ration_tile := tile_num_in_direction(21895, random(0, 5), random(1, 2));
   end
   else if (self_elevation == 2) then begin
      variable newtile := 0;
      newtile := random(1, 4);
      if newtile == 1 then begin
         newtile := 22717;
      end
      else if newtile == 2 then begin
         newtile := 22513;
      end
      else if newtile == 3 then begin
         newtile := 23114;
      end
      else begin
         newtile := 22910;
      end
      ration_tile := tile_num_in_direction(newtile, random(0, 5), random(1, 2));// was 22513
   end
end

procedure set_sleep_tile begin
   if (self_elevation == 0) then begin
      sleep_tile := 7000;
   end
   else if (self_elevation == 1) then begin
      sleep_tile := home_tile;
   end
   else if (self_elevation == 2) then begin
      sleep_tile := 7000;
   end
end
