#include "define.h"

#define NAME                    SCRIPT_SECDOOR

#include "command.h"

procedure start;
import variable armory_access;
import variable Officer_ptr;
import variable SecDoor_ptr;

procedure description_p_proc;
procedure map_enter_p_proc;
procedure use_obj_on_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;

procedure dude_use_door;
procedure give_exps;
procedure Officer_use_door;

variable test;

procedure start begin
end

procedure description_p_proc begin
   if (local_var(0) == 0) then begin
      display_msg(message_str(SCRIPT_DOOR, 104));
   end
end

procedure dude_use_door begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      display_msg(mstr(100));
   end
end

procedure Officer_use_door begin
   if obj_is_open(self_obj) then begin
      obj_close(self_obj);
      obj_lock(self_obj);
   end
   else begin
      obj_unlock(self_obj);
      obj_open(self_obj);
   end
end

procedure map_enter_p_proc begin
   SecDoor_ptr := self_obj;

   if not(is_loading_game) then begin
      if obj_is_open(self_obj) then
         obj_close(self_obj);
   end
end

procedure use_p_proc begin
   if source_obj == dude_obj then begin
      call dude_use_door;
   end
   else if (source_obj == Officer_ptr) then begin
      call Officer_use_door;
   end
end

procedure use_obj_on_p_proc begin
   variable Item := obj_pid(obj_being_used_with);
   
   if (Item == PID_ELECTRONIC_LOCKPICKS or Item == PID_ELEC_LOCKPICK_MKII) then begin
      script_overrides;
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(101));
      end
      else begin
         test := roll_vs_skill(source_obj, SKILL_LOCKPICK, 0);
         if (is_success(test)) then begin
            display_msg(mstr(102));
            obj_unlock(self_obj);
            call give_exps;
         end
         else begin
            if (is_critical(test)) then begin
               jam_lock(self_obj);
               display_msg(mstr(104));
            end
            else begin
               display_msg(mstr(103));
            end
         end
      end
      if (tile_distance_objs(Officer_ptr, dude_obj) < 4) then begin
         if (not(armory_access)) then begin
            armory_access := 2;
            set_map_var(1, armory_access);
         end
      end
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      script_overrides;
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(101));
      end
      else begin
         test := roll_vs_skill(source_obj, SKILL_LOCKPICK, -20);
         if (is_success(test)) then begin
            display_msg(mstr(102));
            obj_unlock(self_obj);
            call give_exps;
         end
         else begin
            if (is_critical(test)) then begin
               jam_lock(self_obj);
               display_msg(mstr(104));
            end
            else begin
               display_msg(mstr(103));
            end
         end
      end
      if (tile_distance_objs(Officer_ptr, dude_obj) < 4) then begin
         if (not(armory_access)) then begin
            armory_access := 2;
            set_map_var(1, armory_access);
         end
      end
   end
end

procedure give_exps begin
   if (local_var(0) == 0) then begin
      give_xp_msg(EXP_LOCKPICK_NORMAL, mstr(106));
      set_local_var(0, 1);
   end
end
