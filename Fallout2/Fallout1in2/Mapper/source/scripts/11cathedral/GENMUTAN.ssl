/*

   Generic Super Mutant

   Also checks for Nightkins and Stealth Boys -- they will actually use them!

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_GENMUTAN
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "command.h"
#include "modreact.h"
#include "sfall/main.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure do_dialogue;

procedure pre_dialogue;
procedure mutan00;
procedure mutan01;
procedure mutan02;
procedure mutan03;
procedure mutan03a;
procedure mutan04;
procedure mutan05;
procedure mutan05a;
procedure mutan05b;
procedure mutan06;
procedure mutan07;
procedure mutan08;
procedure mutan08a;
procedure mutan08b;
procedure mutan09;
procedure mutan10;
procedure mutan11;
procedure mutan11a;
procedure mutan12;
procedure mutan13;
procedure mutan13a;
procedure mutan13b;
procedure mutan14;
procedure mutan15;
procedure mutanend;
procedure mutancbt;

#define LVAR_Herebefore      (4)
#define LVAR_Staff_Mutant    (6)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

import variable signal_mutants;

/* Local variables which do not need to be saved between map changes. */

variable tmp_hostile;
variable Only_Once := 1;
variable Weapons;
variable again;
variable rndx;
variable RobesCheck;

procedure start begin
   if Only_Once then begin

      // Are we in the Cathedral vault?
      //if (cur_map_index == MAP_MSTRLR12 or cur_map_index == MAP_MSTRLR34) then
      // set_self_team(TEAM_MASTER_LAIR);
      //else
         set_self_team(TEAM_NECROPOLIS_MUTANT);

      set_self_ai(AI_SUPER_MUTANT_AGGRESSIVE);
      Only_Once := 0;
   end
end

procedure map_enter_p_proc begin
   if (map_first_run) then begin
      spawn_stealth_boy

      if (self_tile == 25885 or self_tile == 26677) then
         set_local_var(LVAR_Staff_Mutant, 1);
   end
end

procedure map_exit_p_proc begin
   // This was in MASTER2.ssl map script
   if CUR_MAP_MSTRLR34 then begin
      if (self_pid == PID_SUPER_NIGHTKIN) and (local_var(LVAR_Staff_Mutant) == 0) then
         destroy_object(self_obj);
   end
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (signal_mutants == 1) then begin
         signal_mutants := 0;
         call mutancbt;
      end
      else begin
         if (self_can_see_dude) then begin

            if (dude_is_armed) then begin
               if (Weapons == 0) then begin
                  Weapons := 1;
                  if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
                     dialogue_system_enter;
                  end
               end
            end

            coc_disguise_check;
            if (not(DISGUISED) and (again == 0)) then begin
               if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
                  again := 1;
                  dialogue_system_enter;
               end
            end

         end
      end
   end
end

procedure combat_p_proc begin
   activate_stealth_boy
end

procedure talk_p_proc begin
   set_tma_data(tma_source_generic, TMA_MSG_MBASE, -1, -1, 997, 999);
   call pre_dialogue;
end

procedure do_dialogue begin
   set_local_var(3, 1);
   get_reaction

   if (Weapons == 1) then begin
      start_dialog_at_node(mutan01);
   end
   else if (local_var(LVAR_Herebefore)) then begin
      start_dialog_at_node(mutan13);
   end
   else begin
      set_local_var(LVAR_Herebefore, 1);
      start_dialog_at_node(mutan05);
   end
end

procedure pre_dialogue begin
   dude_look_at_self;
   coc_disguise_check;

   if (DISGUISED) then
      call do_dialogue;
   else
      call mutan00;
end

procedure mutan00 begin
   rndx := random(1, 8);
   if (rndx <= 2) then
      float_msg(self_obj, mstr(100), FLOAT_MSG_RED);
   else if (rndx <= 4) then
      float_msg(self_obj, mstr(101), FLOAT_MSG_RED);
   else if (rndx <= 6) then
      float_msg(self_obj, mstr(102), FLOAT_MSG_RED);
   else
      float_msg(self_obj, mstr(103), FLOAT_MSG_RED);
   call mutancbt;
end

procedure mutan01 begin
   if (dude_is_male) then
      Reply(104);
   else
      Reply(105);
   BOption(107, mutan02, 4);
   NOption(108, mutan03, 6);
   NOption(109, mutan04, 9);
   BLowOption(106, mutan02);
end

procedure mutan02 begin
   BMessage(110);
   call mutancbt;
end

procedure mutan03 begin
   Reply(111);
   NOption(112, mutan03a, 6);
   BOption(113, mutancbt, 6);
end

procedure mutan03a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call mutan04;
   end
   else begin
      call mutan02;
   end
end

procedure mutan04 begin
   NMessage(114);
   set_local_var(5, 1);
end

procedure mutan05 begin
   if (dude_is_male) then
      Reply(115);
   else
      Reply(116);
   NOption(118, mutan05a, 4);
   NOption(119, mutan05b, 6);
   NLowOption(106, mutan06);
end

procedure mutan05a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call mutan08;
   end
   else begin
      call mutan07;
   end
end

procedure mutan05b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call mutan10;
   end
   else begin
      call mutan11;
   end
end

procedure mutan06 begin
   NMessage(120);
   set_local_var(5, 1);
end

procedure mutan07 begin
   BMessage(121);
   call mutancbt;
end

procedure mutan08 begin
   Reply(122);
   NOption(123, mutan08a, 4);
   if (has_rep_berserker) then
      BOption(124, mutancbt, 4);
   NOption(125, mutan08b, 7);
end

procedure mutan08a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call mutan04;
   end
   else begin
      call mutan07;
   end
end

procedure mutan08b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
      call mutan04;
   end
   else begin
      call mutan09;
   end
end

procedure mutan09 begin
   BMessage(126);
   call mutancbt;
end

procedure mutan10 begin
   NMessage(127);
   set_local_var(5, 1);
end

procedure mutan11 begin
   Reply(128);
   NOption(129, mutan11a, 6);
   BOption(130, mutancbt, 6);
end

procedure mutan11a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call mutan12;
   end
   else begin
      call mutan09;
   end
end

procedure mutan12 begin
   NMessage(131);
   set_local_var(5, 1);
end

procedure mutan13 begin
   Reply(132);
   BOption(134, mutancbt, 4);
   NOption(135, mutan13a, 4);
   NOption(136, mutan13b, 6);
   BLowOption(133, mutan14);
end

procedure mutan13a begin
   if (is_success(do_check(dude_obj, STAT_lu, 0))) then begin
      call mutan12;
   end
   else begin
      call mutan09;
   end
end

procedure mutan13b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
      call mutan10;
   end
   else begin
      call mutan11;
   end
end

procedure mutan14 begin
   BMessage(137);
   call mutancbt;
end

procedure mutan15 begin
   rndx := random(1, 3);
   if (rndx == 1) then
      NMessage(138);
   else if (rndx == 2) then
      NMessage(139);
   else if (rndx == 3) then
      NMessage(140);
end

procedure mutanend begin
end

procedure mutancbt begin
   tmp_hostile := 1;
end

procedure damage_p_proc begin
   if (global_var(GVAR_MUTANTS_ENEMY_UNSURE) == 0) then begin
      set_global_var(GVAR_MUTANTS_ENEMY_UNSURE, 1);
   end
end

procedure destroy_p_proc begin
   inc_evil_critter
end
