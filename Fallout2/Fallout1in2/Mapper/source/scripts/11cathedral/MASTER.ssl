/*

   Cathedral - BEHOLD, THE MASTER!

         JOIN!
            DIE!
      JOIN!
                  DIE!

*/

/* Include Files */
#include "define.h"
#include "maps/mstrlr34.h"

#define NAME                    SCRIPT_MASTER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure look_at_p_proc;
procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure damage_p_proc;
procedure combat_p_proc;
procedure critter_p_proc;
procedure use_skill_on_p_proc;

procedure gameover;
procedure giveme;

procedure master00;
procedure master01;
procedure master02;
procedure master03;
procedure master04;
procedure master05;
procedure master06;
procedure master06_1;
procedure master07;
procedure master08;
procedure master08_1;
procedure master09;
procedure master10;
procedure master11;
procedure master11_1;
procedure master12;
procedure master13;
procedure master14;
procedure master16;
procedure master17;
procedure master17_1;
procedure master18;
procedure master19;
procedure master20;
procedure master21;
procedure master21_1;
procedure master22;
procedure master23;
procedure master24;
procedure master25;
procedure master26;
procedure master27;
procedure master28;
procedure master29;
procedure master30;
procedure master31;
procedure master32;
procedure master33;
procedure master34;
procedure master35;
procedure master36;
procedure master37;
procedure master38;
procedure master38_1;
procedure master38_2;
procedure master39;
procedure master40;
procedure master41;
procedure master42;
procedure master43;
procedure master44;
procedure master45;
procedure master46;
procedure master47;
procedure master200;
procedure master201;
procedure master202;
procedure master203;
procedure mastercbt;
procedure masterend;

#define LVAR_Herebefore            (4)
#define LVAR_Remain_Hostile        (5)

#define EVENT_COUNTDOWN_MASTER         (11)

variable MALE;
variable tmp_hostile;
variable DISARM;
variable Only_Once := 1;
variable LIEUTENANTS;
variable everyother := 1;
variable wimpyother := 1;
variable so_long;

import variable Master_Has_Armed;
import variable Master_Ptr;

variable leave;

procedure start begin
   reg_anim_clear(self_obj);
   reg_anim_begin();
   reg_anim_animate(self_obj, ANIM_stand, -1);
   reg_anim_end();

   Master_Ptr := self_obj;

   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_MASTER_LAIR);
      set_self_ai(AI_MASTER);
   end
end

procedure timed_event_p_proc begin
   debug("master timer go!");
   if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 2) then begin
      set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 3);
      dialogue_system_enter;
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      set_local_var(LVAR_Remain_Hostile, 1);
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else if (local_var(LVAR_Remain_Hostile)) then begin
      if (self_can_see_dude) then begin
         tmp_hostile := 1;
      end
   end
   if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 2) then begin
      if (tile_distance_objs(self_obj, dude_obj) > 10) then begin
         set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 3);
         dialogue_system_enter;
      end
   end
   else if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 1) then begin
      // Nothing happens
   end
   else begin
      if (leave != 1) then begin
         if (tile_distance_objs(self_obj, dude_obj) < 10) and (Master_Has_Armed != 1) then begin
            dialogue_system_enter;
         end
      end
   end
end

procedure gameover begin
   so_long := 1;
end

procedure giveme begin
   if (global_var(GVAR_VREEDISK_HOLODISK_USED) == 1) or (global_var(GVAR_VREE_DISK_TRACKER) == 2) or (global_var(GVAR_VREE_GIVEN_DUDE_AUTOPSY) > 0) then begin// USED_DISK, DISK_REBUILT, DISK_GIVEN
      set_global_var(GVAR_VREE_GIVEN_DUDE_AUTOPSY, 2);
      call master14;
   end
   else begin
      call master13;
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Remain_Hostile, 1);
      set_local_var(6, 1);
      tmp_hostile := 1;
      if not(combat_is_initialized) then begin
         attack(source_obj);
      end
   end
end

procedure combat_p_proc begin
   if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      variable Item := 0;
      if (everyother == 1) then begin
         everyother := 0;
         if (combat_difficulty == 0) then begin
            if (wimpyother == 1) then begin
               wimpyother := 0;
               set_map_var(MVAR_CALLED, 1);
            end
            else begin
               wimpyother := 1;
            end
         end
         else begin
            set_map_var(MVAR_CALLED, 1);
         end
      end
      else begin
         everyother := 1;
      end
      if (self_item_count(PID_MICRO_FUSION_CELL) <= 2) then begin// MFC ammo
         Item := create_object(PID_MICRO_FUSION_CELL, 0, 0);
         add_mult_objs_to_inven(self_obj, Item, 2);
      end
   end
end

procedure destroy_p_proc begin
   set_global_var(GVAR_PREVENT_REVULSION_DAMAGE, 2);
   set_master_killed;
   set_global_var(GVAR_QUEST_VAULT13_2_MASTER, 2);

   inc_inv_evil_crit

   if not(military_base_destroyed) then begin
      set_global_var(GVAR_VATS_STATUS, 1);
   end

   if (global_var(GVAR_COUNTDOWN_TO_DESTRUCTION) == 0) then begin
      set_global_var(GVAR_COUNTDOWN_TO_DESTRUCTION, (game_time / 10));
      add_timer_event(dude_obj, 0, EVENT_COUNTDOWN_MASTER); // tracks to give countdown timer updates every 5 seconds instead of calls to map_update (which is unreliable)
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_STEAL) then begin
      script_overrides;
      display_msg(gen_mstr(225));
   end
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, 1100, 1101);

   if not(master_killed) then begin
      dude_look_at_self;
      if not(global_var(GVAR_MASTER_ATTACKS)) then begin
         if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 2) then begin
            set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 3);
         end
         get_reaction
         start_gdialog(51, self_obj, 4, 6, BACKGROUND_MASTER);
         gsay_start;
         MALE := dude_is_male;
         if (local_var(LVAR_Remain_Hostile)) then begin
            call master203;
         end
         else begin
            if (local_var(LVAR_Herebefore)) then begin
               if (global_var(GVAR_BOMB_DISARMED)) then begin
                  call master46;
               end
               else begin
                  if (is_success(do_check(dude_obj, STAT_ch, -1))) then begin
                     call master43;
                  end
                  else begin
                     call master44;
                  end
               end
            end
            else begin
               set_local_var(LVAR_Herebefore, 1);
               call master00;
            end
         end
         gsay_end;
         end_dialogue;

         if (so_long) then begin
            play_gmovie(DIPEDV_MOVIE);
            play_gmovie(OVERRUN_MOVIE);
            signal_end_game;
         end

      end
   end
end

procedure master00 begin
   Reply(101);
   NOption(102, master01, 4);
   NOption(103, master04, 6);
   BOption(104, master203, 4);//<-- Combat trigger [mastercbt]
   NOption(105, master38, 5);
   NLowOption(106, master42);
end

procedure master01 begin
   Reply(107);
   NOption(108, master02, 4);
   NOption(109, gameover, 4);
end

procedure master02 begin
   Reply(110);
   BOption(111, master03, 4);
   NOption(112, gameover, 4);
end

// Combat trigger [mastercbt]
procedure master03 begin
   BMessage(113);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master04 begin
   Reply(114);
   NOption(115, master36, 6);
   NOption(116, master05, 5);
end

procedure master05 begin
   Reply(117);
   NOption(118, master06, 4);
end

procedure master06 begin
   Reply(119);
   NOption(120, master06_1, 6);
   BOption(121, master27, 4);
end

procedure master06_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call master07;
   end
   else begin
      call master35;
   end
end

procedure master07 begin
   Reply(122);
   NOption(123, master08, 7);
   BOption(124, master33, 6);
   NOption(125, master31, 5);
end

procedure master08 begin
   Reply(126);
   NOption(127, master08_1, 5);
   GOption(128, master01, 4);
   BOption(129, master203, 4);//<-- Combat trigger [mastercbt]
end

procedure master08_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
      call master09;
   end
   else begin
      call master30;
   end
end

procedure master09 begin
   Reply(130);
   BOption(131, master203, 5);// <-- Combat trigger [mastercbt]
   NOption(132, master10, 6);
   if (global_var(GVAR_VREEDISK_HOLODISK_USED) == 1) or (global_var(GVAR_VREE_DISK_TRACKER) == 2) or (global_var(GVAR_VREE_GIVEN_DUDE_AUTOPSY) > 0) then begin// USED_DISK, DISK_REBUILT, DISK_GIVEN
      NOption(133, master11, 7);
   end
end

procedure master10 begin
   BMessage(134);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master11 begin
   Reply(135);
   NOption(136, master11_1, 6);
   NOption(137, master20, 6);
   NOption(138, master28, 4);
end

procedure master11_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call master12;
   end
   else begin
      call master29;
   end
end

procedure master12 begin
   Reply(139);
   NOption(140, giveme, 6);
   NOption(141, master26, 5);
   NOption(142, master20, 6);
end

procedure master13 begin
   BMessage(143);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master14 begin
   game_time_advance(game_ticks(180));
   Reply(145);
   NOption(146, master16, 5);
   NOption(147, master17, 5);
end

procedure master16 begin
   BMessage(148);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master17 begin
   Reply(149);
   NOption(150, master17_1, 6);
   NOption(151, master18, 6);
end

procedure master17_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call master19;
   end
   else begin
      call master16;
   end
end

procedure master18 begin
   BMessage(152);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master19 begin
   NMessage(153);
   set_global_var(GVAR_PREVENT_REVULSION_DAMAGE, 2);
   Master_Has_Armed := 1;
   if (global_var(GVAR_COUNTDOWN_TO_DESTRUCTION) == 0) then begin
      set_global_var(GVAR_COUNTDOWN_TO_DESTRUCTION, (game_time / 10));
      add_timer_event(dude_obj, 0, 11);// tracks to give countdown timer updates every 5 seconds instead of calls to map_update (which is unreliable)
      set_master_killed;
      if military_base_destroyed then begin
         set_global_var(GVAR_VATS_STATUS, 1);
      end
      set_global_var(GVAR_QUEST_VAULT13_2_MASTER, 2);
   end
   set_global_var(GVAR_PREVENT_REVULSION_DAMAGE, 2);
end

procedure master20 begin
   NMessage(154);
   call master21;
end

procedure master21 begin
   Reply(155);
   NOption(156, master25, 6);
   NOption(157, master21_1, 6);
   NOption(158, master24, 6);
end

procedure master21_1 begin
   if (global_var(GVAR_LIEUTENANTS_DEAD) == 1) then begin
      call master22;
   end
   else begin
      call master23;
   end
end

procedure master22 begin
   BMessage(159);
   call mastercbt;
end

procedure master23 begin
   BMessage(160);
   call mastercbt;
end

procedure master24 begin
   BMessage(161);
   call mastercbt;
end

procedure master25 begin
   Reply(162);
   NOption(163, master17, 6);
   NOption(164, master16, 6);
end

procedure master26 begin
   Reply(165);
   BOption(166, master203, 4);//<-- Combat trigger [mastercbt]
   GOption(167, master01, 4);
end

procedure master27 begin
   Reply(168);
   BOption(169, master203, 4);//<-- Combat trigger [mastercbt]
   NOption(170, master01, 4);
end

procedure master28 begin
   BMessage(171);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master29 begin
   BMessage(172);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master30 begin
   Reply(173);
   BOption(174, master203, 4);//<-- Combat trigger [mastercbt]
   NOption(175, master01, 4);
end

procedure master31 begin
   Reply(176);
   NOption(177, master32, 5);
   BOption(178, master203, 5);//<-- Combat trigger [mastercbt]
end

procedure master32 begin
   Reply(179);
   BOption(180, master203, 5);//<-- Combat trigger [mastercbt]
   GOption(181, master01, 5);
end

procedure master33 begin
   Reply(182);
   NOption(183, master34, 4);
end

procedure master34 begin
   Reply(184);
   NOption(185, master01, 4);
   BOption(186, master203, 4);//<-- Combat trigger [mastercbt]
end

procedure master35 begin
   Reply(187);
   NOption(188, master01, 4);
   BOption(189, master203, 4);//<-- Combat trigger [mastercbt]
   NOption(190, master33, 5);
end

procedure master36 begin
   Reply(191);
   NOption(192, master06, 5);
   BOption(193, master37, 5);
end

procedure master37 begin
   BMessage(194);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master38 begin
   Reply(195);
   BOption(197, master203, 5);// <-- Combat trigger [mastercbt]
   if ((global_var(GVAR_QUEST_BROHOOD_1_JOIN_THEM) == 1) or (global_var(GVAR_QUEST_BROHOOD_1_JOIN_THEM) == 2)) then begin
      NOption(198, master38_2, 5);
   end
end

procedure master38_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call master41;
   end
   else begin
      call master40;
   end
end

procedure master38_2 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call master39;
   end
   else begin
      call master40;
   end
end

procedure master39 begin
   leave := 1;
   NMessage(199);
   call masterend;
end

procedure master40 begin
   BMessage(200);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master41 begin
   NMessage(201);
   call masterend;
end

procedure master42 begin
//
// STUPID CHARACTER, only response's reply.
//
   BMessage(202);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master43 begin
   BMessage(203);
   call mastercbt;
end

procedure master44 begin
   Reply(204);
   NOption(300, masterend, 4);
   NOption(205, master01, 4);
   BOption(206, master05, 4);
end

procedure master45 begin
   BMessage(207);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master46 begin
   Reply(208);
   NOption(209, master47, 4);
   BOption(210, master203, 4);//<-- Combat trigger [mastercbt]
end

procedure master47 begin
   BMessage(211);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure master200 begin
   NMessage(212);
end

procedure master201 begin
   NMessage(213);
end

procedure master202 begin
   NMessage(214);
end

procedure master203 begin
   BMessage(215);
   set_global_var(GVAR_MASTER_ATTACKS, 1);
   call mastercbt;
end

procedure mastercbt begin
   tmp_hostile := 1;
end

procedure masterend begin
end
