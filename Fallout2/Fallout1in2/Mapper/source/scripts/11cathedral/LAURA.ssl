/*

   Cathedral - Laura, the FoA spy

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_LAURA
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;

import variable Laura_Ptr;
import variable Red_Door_Ptr;

variable rndu;
variable MALE;
variable tmp_hostile;
variable ILLEGAL;
variable ILLEGALBEFORE;
variable TRESPASS;
variable CRIME;

procedure lauracbt;
procedure laura01;
procedure laura01a;
procedure laura02;
procedure laura03;
procedure laura04;
procedure laura09;
procedure laura10;
procedure laura11;
procedure laura14;
procedure laura15;
procedure laura16;
procedure laura16a;
procedure laura21;
procedure laura22;
procedure laura23;
procedure laura23_1;
procedure laura24;
procedure laura25;
procedure laura26;
procedure laura27;
procedure laura28;
procedure laura29;
procedure laura30;
procedure laura31;
procedure laura32;
procedure laura32a;
procedure laura33;
procedure laura34;
procedure laura35;
procedure laura36;
procedure laura37;
procedure laura38;
procedure laura39;
procedure laura40;
procedure laura41;
procedure laura42;
procedure laura43;
procedure laura44;
procedure laura45;
procedure laura46;
procedure laura46_1;
procedure laura47;
procedure laura48;
procedure laura49;
procedure laura50;
procedure laura51;
procedure laura52;
procedure laura53;
procedure laura54;
procedure laura55;
procedure laura56;
procedure laura57;
procedure laura57_01;
procedure laura58;
procedure laura59;
procedure laura60;
procedure laura61;
procedure laura62;
procedure laura63;
procedure laura64;
procedure laura65;
procedure laura67;
procedure laura68;
procedure laura69;
procedure laura70;
procedure laura71;
procedure laura72;
procedure laura73;
procedure laura74;
procedure laura75;
procedure laura76;
procedure laura77;
procedure laura78;
procedure laura79;
procedure lauraxx;
procedure laurax;
procedure laurax1;
procedure laurax2;
procedure laurax3;
procedure laurax4;
procedure laurax5;
procedure laurax6;
procedure laurax7;
procedure laurax8;
procedure laura67a;
procedure laura68a;
procedure laura69a;
procedure laura70a;
procedure laura71a;
procedure laura72a;
procedure laura73a;
procedure laura74a;
procedure laura75a;
procedure laura76a;
procedure laura77a;
procedure laura78a;
procedure laura79a;
procedure laura80;
procedure laura80a;
procedure laura81;
procedure laura81a;
procedure laura82;
procedure laura82a;
procedure laura83;
procedure laura83a;
procedure laura84;
procedure laura84a;
procedure laura85;
procedure laura85a;
procedure laura86;
procedure laura86a;
procedure laura87;
procedure laura87a;
procedure laura88;
procedure laura88a;
procedure lauraend;

procedure Node1000;

#define LVAR_Move_Secret_Door    (4)
#define LVAR_Move_Private        (5)

variable asked_questions := 0;

procedure start begin
end

procedure map_enter_p_proc begin
   if is_laura_escaping or is_laura_escaped then begin
      set_laura_escaped;
      destroy_object(self_obj);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   Laura_Ptr := self_obj;

   // Laura shows the door to the Master's Lair.
   if (local_var(LVAR_Move_Secret_Door) == 1) then begin
      set_local_var(LVAR_Move_Secret_Door, 2);
      set_local_var(9, 1);
      self_walk_to_tile(14089);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 2) and (self_tile != 14089)) then begin
      self_walk_to_tile(14089);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 2) and (self_tile == 14089)) then begin
      set_local_var(LVAR_Move_Secret_Door, 3);
      obj_unlock(Red_Door_Ptr);
      use_obj(Red_Door_Ptr);
      self_walk_to_tile(12495);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 3) and (self_tile != 12495)) then begin
      self_walk_to_tile(12495);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 3) and (self_tile == 12495)) then begin
      set_local_var(LVAR_Move_Secret_Door, 4);
      self_walk_to_tile(12302);
   end
   else if (local_var(LVAR_Move_Secret_Door) == 4) then begin
      float_msg(self_obj, gen_mstr(178), FLOAT_MSG_YELLOW);
      set_local_var(LVAR_Move_Secret_Door, 5);
      set_local_var(9, 2);

      debug("Laura will escape now!");
      set_laura_escaping;
   end
   else if (local_var(LVAR_Move_Secret_Door) == 5) then begin
      set_local_var(LVAR_Move_Secret_Door, 6);
      self_walk_to_tile(15099);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 6) and (self_tile != 15099)) then begin
      self_walk_to_tile(15099);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 6) and (self_tile == 15099)) then begin
      set_local_var(LVAR_Move_Secret_Door, 7);
      self_walk_to_tile(23301);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 7) and (self_tile != 23301)) then begin
      self_walk_to_tile(23301);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 7) and (self_tile == 23301)) then begin
      set_local_var(LVAR_Move_Secret_Door, 8);
      self_walk_to_tile(27106);
   end
   /*else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile != 27106)) then begin
      self_walk_to_tile(27106);
   end
   else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile == 27106)) then begin
      set_local_var(LVAR_Move_Secret_Door, 9);
      if not(is_loading_game) then set_self_invisible;
   end*/
   else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile != 26105)) then begin
      self_walk_to_tile(26105);
   end

   // Laura has escaped:
   else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile == 26105)) then begin
      set_local_var(LVAR_Move_Secret_Door, 9);
      if not(is_loading_game) then begin
         play_sfx("SODOORSF");
         set_laura_escaped;
         set_self_invisible;
      end
   end

   // Laura moves to another room, so player can speak to here in private:
   else if (local_var(LVAR_Move_Private) == 1) then begin
      set_local_var(LVAR_Move_Private, 2);
      self_walk_to_tile(22090);
   end
   else if ((local_var(LVAR_Move_Private) == 2) and (self_tile != 22090)) then begin
      self_walk_to_tile(22090);
   end
   else if ((local_var(LVAR_Move_Private) == 2) and (self_tile == 22090)) then begin
      set_local_var(LVAR_Move_Private, 3);
   end

   // Laura is in the private room or at the backdoor. Dude can talk to her again:
   else if (local_var(9) == 1) then begin
      if ((self_tile == 22090) or (self_tile == 12495)) then begin
         set_local_var(9, 0);
      end
   end

   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure timed_event_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, 345, 345);

   get_reaction
   if (local_var(9) == 1) then begin
      float_msg(self_obj, gen_mstr(177), FLOAT_MSG_YELLOW);
   end
   else begin
      if (local_var(9) == 2) then begin
         float_msg(self_obj, gen_mstr(179), FLOAT_MSG_YELLOW);
      end
      else begin
         start_gdialog(48, self_obj, 4, 3, 8);
         gsay_start;
         MALE := dude_is_male;
         if (ILLEGAL) then begin
            if (ILLEGALBEFORE) then begin
               call laura63;
            end
            else begin
               ILLEGALBEFORE := 1;
               if (CRIME == TRESPASS) then begin
                  call laura65;
               end
               if (CRIME > TRESPASS) then begin
                  call laura64;
               end
            end
         end
         else begin
            if (local_var(6)) then begin
               if (local_var(7) == 1) then begin
                  call laura61;
               end
               else if (local_var(8) == 1) then begin
                  call laura21;
               end
               else begin
                  call laura16;
               end
            end
            else begin
               set_local_var(6, 1);
               call laura01;
            end
         end
         gsay_end;
         end_dialogue;
      end
   end
end

procedure destroy_p_proc begin
   if (global_var(GVAR_IS_LAURA_ALIVE) < 3) then
      set_global_var(GVAR_IS_LAURA_ALIVE, 0);

   inc_good_critter
end

procedure lauracbt begin
   tmp_hostile := 1;
end

procedure laura01 begin
   if (MALE) then begin
      Reply(102);
   end
   else begin
      Reply(104);
   end
   if (global_var(GVAR_SHADOW_PASSWORD) == 1) then begin
      NOption(105, laura02, 4);
   end
   NOption(106, laura14, 5);
   BOption(107, laura15, 4);
   NLowOption(108, laura01a);
end

procedure laura01a begin
   NMessage(110);
   call laurax;
end

procedure laura02 begin
   Reply(112);
   if (global_var(GVAR_SHADOW_PASSWORD) == 1) then begin
      NOption(113, laura03, 4);
   end
   NOption(114, laura10, 4);
end

procedure laura03 begin
   Reply(116);
   if (global_var(GVAR_SHADOW_PASSWORD) == 1) then begin
      NOption(117, laura04, 4);
   end
   NOption(118, laura09, 4);
end

procedure laura04 begin
   NMessage(120);
   set_local_var(7, 1);
   call laurax1;
end

procedure laura09 begin
   Reply(122);
   call laurax;
end

procedure laura10 begin
   Reply(124);
   NOption(125, laura03, 4);
   NOption(126, laura11, 4);
end

procedure laura11 begin
   DownReact
   NMessage(128);
   call laurax;
end

procedure laura14 begin
   NMessage(130);
   call laurax;
end

procedure laura15 begin
   DownReact
   NMessage(132);
   call laurax;
end

procedure laura16 begin
   if (local_var(1) > 1) then begin
      Reply(134);
   end
   else begin
      Reply(136);
   end
   if (global_var(GVAR_SHADOW_PASSWORD) == 1) then begin
      NOption(137, laura02, 4);
   end
   NOption(138, laura14, 4);
   NOption(139, laurax, 4);
   NLowOption(140, laura16a);
end

procedure laura16a begin
   NMessage(142);
   call laurax;
end

procedure laura21 begin
   NMessage(144);
   NOption(145, laura22, 4);
end

procedure laura22 begin
   NMessage(147);
   call laura23;
end

procedure laura23 begin
   NOption(148, laura24, 5);
   NOption(149, laura33, 4);
   NOption(150, laura23_1, 4);
   if (MALE) then begin
      NOption(151, laura60, 4);
   end

   // Tell Laura to GTFO now.
   if (asked_questions > 2) then
      NOption(499, Node1000, 004);

   NOption(152, laura59, 4);
end

procedure laura23_1 begin
   asked_questions := asked_questions + 1;

   if (global_var(GVAR_COC_STATUS) == 0) then begin
      call laura51;
   end
   if (global_var(GVAR_COC_STATUS) == 1) then begin
      call laura38;
   end
   if (global_var(GVAR_COC_STATUS) == 2) then begin
      call laura46;
   end
end

procedure laura24 begin
   asked_questions := asked_questions + 1;

   Reply(154);
   NOption(155, laura25, 4);
end

procedure laura25 begin
   Reply(157);
   NOption(158, laura26, 4);
   NOption(159, laura28, 4);
end

procedure laura26 begin
   Reply(161);
   NOption(162, laura27, 4);
   NOption(163, laura31, 4);
end

procedure laura27 begin
   Reply(165);
   NOption(166, laura28, 4);
end

procedure laura28 begin
   Reply(168);
   NOption(169, laura29, 4);
   NOption(170, laura30, 4);
end

procedure laura29 begin
   Reply(172);
   call laurax4;
end

procedure laura30 begin
   rndu := random(1, 2);
   if (rndu == 1) then begin
      Reply(174);
   end
   if (rndu == 2) then begin
      Reply(176);
   end
   call laura23;
end

procedure laura31 begin
   Reply(178);
   BOption(179, laura32a, 4);
   NOption(180, laura30, 4);
end

procedure laura32 begin
   Reply(182);
   BOption(183, laurax2, 4);
   NOption(184, laurax8, 4);
   NOption(185, laura30, 4);
end

procedure laura32a begin
   DownReact
   call laura32;
end

procedure laura33 begin
   asked_questions := asked_questions + 1;

   Reply(187);
   NOption(188, laura34, 4);
   NOption(189, laura35, 4);
end

procedure laura34 begin
   Reply(191);
   NOption(192, laura36, 6);
   NOption(193, laura36, 4);
end

procedure laura35 begin
   Reply(195);
   NOption(196, laura36, 6);
   NOption(197, laura36, 4);
end

procedure laura36 begin
   Reply(199);
   NOption(200, laura37, 4);
end

procedure laura37 begin
   Reply(202);
   NOption(203, laura28, 4);
   NOption(204, laura27, 4);
end

procedure laura38 begin
   Reply(206);
   NOption(207, laura39, 4);
   NOption(208, laura43, 4);
end

procedure laura39 begin
   Reply(210);
   NOption(211, laura40, 4);
   NOption(212, laura42, 4);
end

procedure laura40 begin
   Reply(214);
   NOption(215, laura30, 4);
   NOption(216, laura41, 4);
end

procedure laura41 begin
   NMessage(218);
   call laurax6;
end

procedure laura42 begin
   Reply(220);
   NOption(221, laura30, 4);
   NOption(222, laura41, 4);
end

procedure laura43 begin
   Reply(224);
   NOption(225, laura44, 4);
   NOption(226, laura45, 4);
end

procedure laura44 begin
   Reply(228);
   NOption(229, laura42, 4);
   NOption(230, laura45, 4);
end

procedure laura45 begin
   Reply(232);
   NOption(233, laura37, 4);
   NOption(234, laura30, 4);
   NOption(235, laura41, 4);
end

procedure laura46 begin
   Reply(237);
   NOption(238, laura46_1, 4);
end

procedure laura46_1 begin
   if boneyard_invaded then begin
      call laura46;
   end
   if hub_invaded then begin
      call laura49;
   end
end

procedure laura47
begin
   Reply(240);
   NOption(241, laura48, 4);
   NOption(242, laura45, 4);
end

procedure laura48
begin
   Reply(244);
   NOption(245, laura45, 4);
end

procedure laura49
begin
   Reply(247);
   NOption(248, laura50, 4);
   NOption(249, laura45, 4);
end

procedure laura50
begin
   Reply(251);
   NOption(252, laura45, 4);
end

procedure laura51
begin
   Reply(254);
   NOption(255, laura52, 4);
   NOption(256, laura55, 4);
   NOption(257, laura57, 4);
end

procedure laura52
begin
   Reply(259);
   NOption(260, laura53, 4);
   NOption(261, laura55, 4);
end

procedure laura53
begin
   Reply(263);
   NOption(264, laura54, 4);
   NOption(265, laura30, 4);
end

procedure laura54
begin
   Reply(267);
   call laura23;
end

procedure laura55
begin
   Reply(269);
   NOption(270, laura33, 4);
   NOption(271, laura56, 4);
end

procedure laura56
begin
   Reply(273);
   call laura23;
end

procedure laura57
begin
   Reply(275);
   NOption(276, laura57_01, 4);
   NOption(277, laura56, 4);
   NOption(278, laura55, 4);
end

procedure laura57_01
begin
   DownReact
   if (local_var(1) > 1) then begin
      call laura58;
   end
   else begin
      call laura32;
   end
end

procedure laura58
begin
   Reply(280);
   NOption(281, laura32, 6);
   NOption(282, laura23, 4);
end

procedure laura59
begin
   Reply(284);
   call laurax7;
end

procedure laura60
begin
   Reply(286);
   call laura23;
end

procedure laura61 begin
   if (local_var(1) > 1) then begin
      Reply(288);
   end
   else begin
      Reply(290);
   end
   NOption(291, laura30, 4);
   NOption(292, laura41, 4);
end

procedure laura62 begin
   DownReact
   NMessage(294);
end

procedure laura63 begin
   DownReact
   Reply(296);
   NOption(297, laurax2, 4);
   NOption(298, laurax5, 4);
end

procedure laura64
begin
   DownReact
   NMessage(300);
end

procedure laura65
begin
   DownReact
   Reply(302);
   NOption(303, laurax2, 4);
   NOption(304, laurax5, 4);
end

procedure laura67
begin
   NMessage(306);
end

procedure laura68
begin
   NMessage(309);
end

procedure laura69
begin
   NMessage(311);
end

procedure laura70
begin
   NMessage(313);
end

procedure laura71
begin
   NMessage(315);
end

procedure laura72
begin
   NMessage(317);
end

procedure laura73
begin
   NMessage(319);
end

procedure laura74
begin
   NMessage(321);
end

procedure laura75
begin
   NMessage(323);
end

procedure laura76
begin
   NMessage(325);
end

procedure laura77
begin
   NMessage(327);
end

procedure laura78
begin
   NMessage(329);
end

procedure laura79
begin
   NMessage(331);
end

procedure lauraxx
begin
end

procedure laurax
begin
end

procedure laurax1 begin
   set_local_var(8, 1);
   set_local_var(LVAR_Move_Private, 1);
   set_local_var(9, 1);
end

procedure laurax2
begin
   add_timer_event(self_obj, 5, 1);
end

procedure laurax3
begin
end

procedure laurax4 begin
   set_local_var(LVAR_Move_Secret_Door, 1);
   set_local_var(9, 1);
end

procedure laurax5 begin
   gfade_out(1);
   gfade_in(1);
end

procedure laurax6 begin
   set_local_var(LVAR_Move_Private, 1);
   set_local_var(9, 1);
end

procedure laurax7
begin
end

procedure laurax8
begin
end

procedure laura67a
begin
   NMessage(308);
end

procedure laura68a
begin
   NMessage(310);
end

procedure laura69a
begin
   NMessage(312);
end

procedure laura70a
begin
   NMessage(314);
end

procedure laura71a
begin
   NMessage(316);
end

procedure laura72a
begin
   NMessage(318);
end

procedure laura73a
begin
   NMessage(320);
end

procedure laura74a
begin
   NMessage(322);
end

procedure laura75a
begin
   NMessage(324);
end

procedure laura76a
begin
   NMessage(326);
end

procedure laura77a
begin
   NMessage(328);
end

procedure laura78a
begin
   NMessage(330);
end

procedure laura79a
begin
   NMessage(332);
end

procedure laura80
begin
   NMessage(333);
end

procedure laura80a
begin
   NMessage(334);
end

procedure laura81
begin
   NMessage(335);
end

procedure laura81a
begin
   NMessage(336);
end

procedure laura82
begin
   NMessage(337);
end

procedure laura82a
begin
   NMessage(338);
end

procedure laura83
begin
   NMessage(339);
end

procedure laura83a
begin
   NMessage(340);
end

procedure laura84
begin
   NMessage(341);
end

procedure laura84a
begin
   NMessage(342);
end

procedure laura85
begin
   NMessage(343);
end

procedure laura85a
begin
   NMessage(344);
end

procedure laura86
begin
   NMessage(345);
end

procedure laura86a
begin
   NMessage(346);
end

procedure laura87
begin
   NMessage(347);
end

procedure laura87a
begin
   NMessage(348);
end

procedure laura88
begin
   NMessage(349);
end

procedure laura88a
begin
   NMessage(350);
end

procedure lauraend
begin
end

procedure Node1000 begin
   NMessage(284);
   set_laura_escaping;
   set_local_var(LVAR_Move_Secret_Door, 7);
end
