/*

   Cathedral - Guards in the nuclear room

*/

/* Include Files */
#include "define.h"
#include "maps/mstrlr34.h"

#define NAME                    SCRIPT_GENSARG
#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure pre_dialogue;

procedure NukeGuard00;
procedure NukeGuard01;
procedure NukeGuard02;
procedure NukeGuard03;
procedure NukeGuard03a;
procedure NukeGuard04;
procedure NukeGuard05;
procedure NukeGuard05a;
procedure NukeGuard05b;
procedure NukeGuard06;
procedure NukeGuard07;
procedure NukeGuard08;
procedure NukeGuard08a;
procedure NukeGuard08b;
procedure NukeGuard09;
procedure NukeGuard10;
procedure NukeGuard11;
procedure NukeGuard11a;
procedure NukeGuard12;
procedure NukeGuard13;
procedure NukeGuard13a;
procedure NukeGuard13b;
procedure NukeGuard14;
procedure NukeGuard15;
procedure NukeGuard21;
procedure NukeGuard22;
procedure NukeGuard23;
procedure NukeGuard23a;
procedure NukeGuard24;
procedure NukeGuard24a;
procedure NukeGuard25;
procedure NukeGuard26;
procedure NukeGuardend;
procedure NukeGuardcbt;

variable tmp_hostile;
variable Only_Once := 1;
variable again;
variable Weapons;
variable rndx;

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_NECROPOLIS_MUTANT);
      set_self_ai(AI_SUPER_MUTANT_AGGRESSIVE);
   end

   // Was added by Fixt
   if fixt_enabled then begin
      if (local_var(6) == 0) then begin
         variable HasItem := 0;
         variable item := 0;
         set_local_var(6, 1);
         item := create_object(PID_SMALL_ENERGY_CELL, 0, 0);
         add_mult_objs_to_inven(self_obj, item, 1);
         item := create_object(PID_MICRO_FUSION_CELL, 0, 0);
         add_mult_objs_to_inven(self_obj, item, 1);
         item := create_object(PID_RADIO, 0, 0);
         add_mult_objs_to_inven(self_obj, item, 1);
         item := create_object(PID_BOTTLE_CAPS, 0, 0);
         add_mult_objs_to_inven(self_obj, item, (random(1, 6) * (dude_luck - 1)));
         HasItem := self_item(PID_GATLING_LASER);

         if (HasItem) then begin
            item := create_object(PID_POWER_FIST, 0, 0);
            add_mult_objs_to_inven(self_obj, item, 1);
         end
         else begin
            item := create_object(PID_TURBO_PLASMA_RIFLE, 0, 0);
            add_mult_objs_to_inven(self_obj, item, 1);
            wield_obj_critter(self_obj, item);
         end
         set_local_var(6, 1);
      end
   end
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(200));
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (map_var(MVAR_TOUCHING)) then begin
         tmp_hostile := 1;
      end
      else begin

         if (dude_is_armed) then begin
            if (Weapons == 0) then begin
               Weapons := 1;
               if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
                  dialogue_system_enter;
               end
            end
         end

         coc_disguise_check;
         if (not(DISGUISED) and (again == 0)) then begin
            if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
               again := 1;
               dialogue_system_enter;
            end
         end
      end
   end
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure damage_p_proc begin
   if (global_var(GVAR_MUTANTS_ENEMY_UNSURE) == 0) then begin
      set_global_var(GVAR_MUTANTS_ENEMY_UNSURE, 1);
   end
end

procedure destroy_p_proc begin
   inc_inv_evil_crit
end

procedure talk_p_proc begin
   set_tma_data(tma_source_generic, TMA_MSG_MBASE, -1, -1, 997, 999);

   call pre_dialogue;

   dude_look_at_self;
   set_local_var(3, 1);
   get_reaction

   if (Weapons == 1) then begin
      start_dialog_at_node(NukeGuard01);
   end
   else if (local_var(4)) then begin
      start_dialog_at_node(NukeGuard13);
   end
   else begin
      set_local_var(4, 1);
      start_dialog_at_node(NukeGuard05);
   end
end

procedure pre_dialogue begin
   dude_look_at_self;
   coc_disguise_check;
   if (DISGUISED) then
      call talk_p_proc;
   else
      call NukeGuard00;
end

procedure NukeGuard00 begin
   rndx := random(1, 4);
   if (rndx == 1) then
      float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 100), FLOAT_MSG_RED);
   else if (rndx == 2) then
      float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 101), FLOAT_MSG_RED);
   else if (rndx == 3) then
      float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 102), FLOAT_MSG_RED);
   else if (rndx == 4) then
      float_msg(self_obj, message_str(SCRIPT_GENMUTAN, 103), FLOAT_MSG_RED);
   call NukeGuardcbt;
end

procedure NukeGuard01 begin
   if (dude_is_male) then
      Reply(107);
   else
      Reply(108);

   BOption(110, NukeGuard02, 4);
   NOption(111, NukeGuard03, 6);
   NOption(112, NukeGuard04, 9);
   BLowOption(109, NukeGuard02);
end

procedure NukeGuard02 begin
   BMessage(113);
   call NukeGuardcbt;
end

procedure NukeGuard03 begin
   Reply(114);
   NOption(115, NukeGuard03a, 6);
   BOption(116, NukeGuardcbt, 6);
end

procedure NukeGuard03a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call NukeGuard04;
   end
   else begin
      call NukeGuard02;
   end
end

procedure NukeGuard04 begin
   NMessage(117);
   set_local_var(5, 1);
end

procedure NukeGuard05 begin
   if (dude_is_male) then
      Reply(118);
   else
      Reply(119);

   NOption(121, NukeGuard05a, 4);
   NOption(122, NukeGuard05b, 6);
   NOption(201, NukeGuard21, 6);
   NLowOption(109, NukeGuard06);
end

procedure NukeGuard05a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call NukeGuard08;
   end
   else begin
      call NukeGuard07;
   end
end

procedure NukeGuard05b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call NukeGuard10;
   end
   else begin
      call NukeGuard11;
   end
end

procedure NukeGuard06 begin
   NMessage(123);
   set_local_var(5, 1);
end

procedure NukeGuard07 begin
   BMessage(124);
   call NukeGuardcbt;
end

procedure NukeGuard08 begin
   Reply(125);
   NOption(126, NukeGuard08a, 4);
   if (has_rep_berserker) then
      BOption(127, NukeGuardcbt, 4);
   NOption(128, NukeGuard08b, 7);
end

procedure NukeGuard08a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call NukeGuard04;
   end
   else begin
      call NukeGuard07;
   end
end

procedure NukeGuard08b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
      call NukeGuard04;
   end
   else begin
      call NukeGuard09;
   end
end

procedure NukeGuard09 begin
   BMessage(129);
   call NukeGuardcbt;
end

procedure NukeGuard10 begin
   NMessage(130);
   set_local_var(5, 1);
end

procedure NukeGuard11 begin
   Reply(131);
   NOption(132, NukeGuard11a, 6);
   BOption(133, NukeGuardcbt, 6);
end

procedure NukeGuard11a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call NukeGuard12;
   end
   else begin
      call NukeGuard09;
   end
end

procedure NukeGuard12 begin
   NMessage(134);
   set_local_var(5, 1);
end

procedure NukeGuard13 begin
   Reply(135);
   BOption(137, NukeGuardcbt, 4);
   NOption(138, NukeGuard13a, 4);
   NOption(139, NukeGuard13b, 6);
   NOption(201, NukeGuard21, 6);
   BLowOption(136, NukeGuard14);
end

procedure NukeGuard13a begin
   if (is_success(do_check(dude_obj, STAT_lu, 0))) then begin
      call NukeGuard12;
   end
   else begin
      call NukeGuard09;
   end
end

procedure NukeGuard13b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 20))) then begin
      call NukeGuard10;
   end
   else begin
      call NukeGuard11;
   end
end

procedure NukeGuard14 begin
   BMessage(140);
   call NukeGuardcbt;
end

procedure NukeGuard15 begin
   rndx := random(1, 2);
   if (rndx == 1) then
      NMessage(141);
   else if (rndx == 2) then
      NMessage(142);
end

procedure NukeGuard21 begin
   Reply(202);
   NOption(203, NukeGuard22, 6);
   NOption(204, NukeGuard23, 6);
end

procedure NukeGuard22 begin
   NMessage(205);
end

procedure NukeGuard23 begin
   Reply(206);
   NOption(207, NukeGuard22, 6);
   NOption(208, NukeGuard23a, 6);
end

procedure NukeGuard23a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
      call NukeGuard24;
   end
   else begin
      call NukeGuard26;
   end
end

procedure NukeGuard24 begin
   Reply(209);
   NOption(210, NukeGuard22, 6);
   NOption(211, NukeGuard24a, 7);
end

procedure NukeGuard24a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
      call NukeGuard25;
   end
   else begin
      call NukeGuard26;
   end
end

procedure NukeGuard25 begin
   Reply(212);
   NOption(213, NukeGuard22, 6);
end

procedure NukeGuard26 begin
   BMessage(214);
   call NukeGuardcbt;
end

procedure NukeGuardend begin
end

procedure NukeGuardcbt begin
   tmp_hostile := 1;
end
