/*

   Generic Merc

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_GENMERCA
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "command.h"
#include "modreact.h"
#include "updatmap.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure GenMercA00;
procedure GenMercA01;
procedure GenMercA02;
procedure GenMercA03;
procedure GenMercA04;
procedure GenMercAEnd;

#define LVAR_Destination   (4)
#define LVAR_PartySize     (5)

#define PARTY_FULL   (1)

variable scared;
variable tmp_hostile;
variable initial := 0;
variable name_index;
variable job_index;
variable index;
variable move;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_SHADY_SANDS);
      set_self_ai(AI_MERCHANT);

      tmp_hostile := 0;
      set_global_var(GVAR_MERCS_RANDOM_ENC_unsure, global_var(GVAR_MERCS_RANDOM_ENC_unsure) + 1);
   end
end

procedure map_enter_p_proc begin
   if map_first_run then begin
      index := random(0, 3);
      if (boneyard_invaded and (index == 0)) then begin
         index := random(1, 3);
      end
      if (necropolis_invaded and (index == 3)) then begin
         index := random(1, 2);
      end
      set_local_var(LVAR_Destination, index);
   end

   name_index := 105 + local_var(LVAR_Destination);
   job_index := 109 + local_var(LVAR_Destination);
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure, 1);
   end
   inc_good_critter
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
   set_global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure, 1);
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (has_rep_berserker) then begin
      set_global_var(GVAR_BERSERKER_REPUTATION, 1);
      set_global_var(GVAR_CHAMPION_REPUTATION, 0);
   end
   if (scared) then begin
      float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_RED);
   end
   else begin
      start_dialog_at_node(GenMercA00);
   end

   if (move) then begin
      move := 0;
      if (local_var(LVAR_Destination) == 0) then begin
         //load_map(MAP_LAADYTUM, 1);
         advance_time_travel_to_boneyard;
      end
      else if (local_var(LVAR_Destination) == 1) then begin
         //load_map(MAP_JUNKENT, 1);
         advance_time_travel_to_junktown;
      end
      else if (local_var(LVAR_Destination) == 2) then begin
         //load_map(MAP_HUBENT, 1);
         advance_time_travel_to_hub;
      end
      else if (local_var(LVAR_Destination) == 3) then begin
         //load_map(MAP_HOTEL, 1);
         advance_time_travel_to_necropolis;
      end
   end

end

procedure GenMercA00 begin
   gsay_reply(SCRIPT_GENMERCA, 100);
   giq_option(4, SCRIPT_GENMERCA, 101, GenMercA01, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GENMERCA, 102, GenMercA02, NEUTRAL_REACTION);

   if (has_rep_berserker) then
      giq_option(4, SCRIPT_GENMERCA, 103, GenMercA03, BAD_REACTION);

   giq_option(-3, SCRIPT_GENMERCA, 104, GenMercAEnd, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_MODREACT, 103, GenMercAEnd, NEUTRAL_REACTION);
end

procedure GenMercA01 begin
   gsay_reply(SCRIPT_GENMERCA, name_index);
   giq_option(4, SCRIPT_GENMERCA, 102, GenMercA02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_MODREACT, 100, GenMercAEnd, NEUTRAL_REACTION);
end

procedure GenMercA02 begin
   gsay_reply(SCRIPT_GENMERCA, job_index);

   if not(car_in_any_encounter) then
      giq_option(4, SCRIPT_GENMERCA, 114, GenMercA04, NEUTRAL_REACTION);

   giq_option(4, SCRIPT_MODREACT, 100, GenMercAEnd, NEUTRAL_REACTION);
end

procedure GenMercA03 begin
   scared := 1;
   gsay_message(SCRIPT_GENMERCA, 113, BAD_REACTION);
end

procedure GenMercA04 begin
   if (has_rep_berserker or has_rep_childkiller or (check_general_rep < -20)) then begin
      gsay_message(SCRIPT_GENMERCA, 117, BAD_REACTION);
   end
   else begin
      if (local_var(LVAR_PartySize) == 0) and (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
         move := 1;
         gsay_message(SCRIPT_GENMERCA, 115, NEUTRAL_REACTION);
      end
      else begin
         set_local_var(LVAR_PartySize, PARTY_FULL);
         gsay_message(SCRIPT_GENMERCA, 116, NEUTRAL_REACTION);
      end
   end
end

procedure GenMercAEnd begin
end
