#include "define.h"

#define NAME                    SCRIPT_VCONCOMP

#include "command.h"

procedure start;
procedure damage_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;

procedure VConComp00;
procedure VConComp01;
procedure VConComp01a;
procedure VConComp02;
procedure VConComp02a;
procedure VConComp03;
procedure VConComp04;
procedure VConComp05;
procedure VConComp06;
procedure VConComp07;
procedure VConComp08;
procedure VConComp09;
procedure VConComp10;
procedure VConComp11;
procedure VConComp12;
procedure VConComp12a;
procedure VConComp13;
procedure VConComp13a;
procedure VConComp14;
procedure VConComp15;
procedure VConComp16;
procedure VConComp17;
procedure VConComp17a;
procedure VConComp17b;
procedure VConComp18;
procedure VConComp18a;
procedure VConComp19;
procedure VConComp19a;
procedure VConComp20;
procedure VConComp21;
procedure VConComp22;
procedure VConComp23;
procedure VConComp24;
procedure VConComp25;
procedure VConComp26;
procedure VConComp27;
procedure VConComp28;
procedure VConComp29;
procedure VConComp30;
procedure VConComp31;
procedure VConComp32;
procedure VConComp33;// added by Sduibek
procedure VConComp34;// added by Sduibek
procedure VConComp35;// added by Sduibek
procedure VConComp36;// added by Sduibek
procedure VConComp37;// added by Sduibek
procedure VConCompEnd;
procedure VatsGoBoom_SETVARS;// added by Sduibek
procedure Update_Invasion;

#define set_days_left(gvar)         days := (global_var(gvar) - (GAME_TIME_IN_DAYS)) / 2; \
                                    if (days > 0) then set_global_var(gvar, days)

variable days;

procedure start begin
end

procedure damage_p_proc begin
   if not(vats_destruction_started) then begin
      set_global_var(GVAR_VATS_COUNTDOWN, ((game_time / 10) + 120));
      call VatsGoBoom_SETVARS;
      call Update_Invasion;
      display_msg(mstr(179));
   end
   else begin
      display_msg(mstr(189));
   end
end

procedure VatsGoBoom_SETVARS begin
   add_timer_event(dude_obj, 0, 12); // tracks to give countdown timer updates every 5 seconds instead of calls to map_update (which is unreliable)
   inc_general_rep(5);
   set_vats_destruction; // "VATS_BLOWN"
   set_global_var(GVAR_QUEST_VAULT13_3_KILL_VATS, 2); // "DESTROY_MASTER_4"
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(200));
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (global_var(GVAR_VATS_COUNTDOWN) == 0) then begin
      if (local_var(0) == 1) and not(local_var(2)) then
         start_dialog_at_node(VConComp01);
      else
         start_dialog_at_node(VConComp00);
   end
end

procedure use_p_proc begin
   script_overrides;
   if (local_var(0) == 0) then
      display_msg(mstr(177));
   else
      dialogue_system_enter;
end

procedure use_obj_on_p_proc begin
   if (obj_pid(obj_being_used_with) == PID_SECURITY_CARD) then begin
      if (local_var(0) == 0) then begin
         script_overrides;
         display_msg(mstr(180));
         set_local_var(0, 1);
//       dialogue_system_enter;
      end
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_SCIENCE) then begin
      script_overrides;
      if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, 0))) then begin
         set_local_var(0, 1);
         display_msg(mstr(176));
      end
      else
         display_msg(mstr(178));
      game_time_advance(game_ticks(300));
   end
end

procedure VConComp00 begin
   play_sfx("SLDOORSO");
   BMessage(101);
end

procedure VConComp01 begin
   play_sfx("SLDOORSO");
   Reply(102);
   GOption(203, VConComp01a, 1);
end

/////////////////////////////////////// MAIN MENU //////////////////////////////////////////////

procedure VConComp01a begin
   Reply(140);
   NOption(103, VConComp02, 4);
   NOption(104, VConComp11, 4);
   if fixt_disabled then begin
      NOption(106, VConComp05, 4);//set base to alert status
   end
   else begin
      NOption(105, VConComp16, 4);//medical uplink
      NOption(106, VConComp05, 4);//SAME AS ABOVE
      NOption(182, VConComp35, 4);//set base to alert status, disable console
      if (has_skill(dude_obj, SKILL_SCIENCE) >= 75) then begin
         NOption(201, VConComp32, 8);//disable alarms
      end
   end
   NOption(181, VConCompEnd, 1);
end

///////////////////////////////// ENCRYPTED BOMB CODES /////////////////////////////////////////

procedure VConComp02 begin
   if fixt_disabled then begin
      Reply(140);
      NOption(107, VConComp03, 4);// silent, 1 min (SAME AS BELOW)
      NOption(108, VConComp04, 4);// loud, 30 sec (SAME AS BELOW)
      NOption(109, VConComp05, 4);// alert
      NOption(110, VConComp06, 4);// silent, 3 min
      NOption(111, VConComp07, 4);// loud, 3 min (SAME AS BELOW)
      NOption(112, VConComp08, 4);// instant - bad idea  (SAME AS BELOW)
      NOption(113, VConComp02a, 5);
      NOption(204, VConComp01a, 1);
   end
   else begin
      Reply(140);
      NOption(107, VConComp03, 4);// silent, 1 min (SAME AS ABOVE)
      NOption(108, VConComp04, 4);// loud, 30 sec (SAME AS ABOVE)
      NOption(185, VConComp35, 4);// alert & lockout console
      NOption(110, VConComp36, 4);// silent, 5 min
      NOption(111, VConComp07, 4);// loud, 3 min (SAME AS ABOVE)
//    giq_option(4, 371, 186, VConComp37, 50);// loud, 1 min
      NOption(112, VConComp08, 4);// instant -bad idea  (SAME AS ABOVE)
      NOption(113, VConComp02a, 6);// int required 6 instead of 5
      NOption(204, VConComp01a, 1);
   end
end

////////////////////////////////// HACKED BOMB CODES ///////////////////////////////////////////

procedure VConComp09 begin
   Reply(120);
   if fixt_disabled then begin
      NOption(121, VConComp03, 4);// silent, 1 min
      NOption(122, VConComp04, 4);// loud, 30 sec
      NOption(123, VConComp05, 4);// alert
      NOption(124, VConComp06, 4);// silent, 3 min
      NOption(125, VConComp07, 4);// loud, 3 min
      NOption(126, VConComp08, 4);// instant - bad idea  (SAME AS BELOW)
   end
   else begin
      NOption(121, VConComp03, 4);// silent, 1 min
      NOption(187, VConComp37, 4);// loud, 1 min
      NOption(183, VConComp35, 4);// alert & lockout console
      NOption(184, VConComp36, 4);// silent, 5 min
      NOption(125, VConComp07, 4);// loud, 3 min
      NOption(126, VConComp08, 4);// instant -bad idea  (SAME AS ABOVE)
      if (has_skill(dude_obj, SKILL_SCIENCE) >= 50) then begin
         NOption(304, VConComp34, 7);// 10 min, silent   (entry added by Sduibek)
      end
      NOption(301, VConComp33, 4);// 5 min   (entry added by Sduibek)
   end
   NOption(208, VConComp01a, 1);//exit
end

////////////////////////////////////////////////////////////////////////////////////////////////

procedure VConComp32 begin
   set_global_var(GVAR_VATS_ALERT, 0);//  disable "VATS_ALARM_ALERT" (disable it)
   NMessage(205);
end

procedure VConComp33 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 300);
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(302);
   call VatsGoBoom_SETVARS;
end

procedure VConComp34 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 600);
   NMessage(305);
   call VatsGoBoom_SETVARS;
end

procedure VConComp37 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 60);
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(188);
   call VatsGoBoom_SETVARS;
end

procedure VConComp02a begin
   if is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, -20)) or (global_var(GVAR_MBASE_DECRYPTION_CODES) > 0) then begin// roll was -10
      call VConComp09;
   end
   else begin
      call VConComp10;
   end
end

procedure VConComp03 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 60);
   NMessage(114);
   call VatsGoBoom_SETVARS;
end

procedure VConComp04 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 30);
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(115);
   call VatsGoBoom_SETVARS;
end

procedure VConComp05 begin
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(116);
end

procedure VConComp35 begin
   set_local_var(2, 1);//  <-- lock out console
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(206);
end

procedure VConComp06 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 180);
   NMessage(117);
   call VatsGoBoom_SETVARS;
end

procedure VConComp36 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 300);
   NMessage(117);
   call VatsGoBoom_SETVARS;
end

procedure VConComp07 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10) + 180);
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(118);
   call VatsGoBoom_SETVARS;
end

procedure VConComp08 begin
   set_global_var(GVAR_VATS_COUNTDOWN, (game_time / 10));// plus nothing because it's instant boom
   set_global_var(GVAR_VATS_ALERT, 1);//  "VATS_ALARM_ALERT"
   NMessage(119);
   call VatsGoBoom_SETVARS;
end

procedure VConComp10 begin
   if (local_var(1) == 1) then
      set_global_var(GVAR_VATS_ALERT, 1);
   else
      set_local_var(1, 1);
   BMessage(127);
end

procedure VConComp11 begin
   Reply(128);
   NOption(129, VConComp12, 4);
   NOption(130, VConComp14, 4);
   NOption(131, VConComp13, 4);
   NOption(132, VConComp14, 4);
   NOption(204, VConComp01a, 1);
end

procedure VConComp12 begin
   Reply(133);
   NOption(134, VConComp12a, 4);
   NOption(135, VConComp11, 4);
end

procedure VConComp12a begin
   if global_var(GVAR_HOLODISK_VATS_GREY) != 1 then begin
      set_global_var(GVAR_HOLODISK_VATS_GREY, 1);
      Reply(202);
      NOption(203, VConComp15, 4);
   end
   else begin
      Reply(207);
      NOption(203, VConComp15, 4);
   end
end

procedure VConComp13 begin
   Reply(136);
   NOption(137, VConComp13a, 4);
   NOption(135, VConComp11, 4);
end

procedure VConComp13a begin
   if global_var(GVAR_HOLODISK_VATS_MAXSON) != 1 then begin
      set_global_var(GVAR_HOLODISK_VATS_MAXSON, 1);
      Reply(202);
      NOption(203, VConComp15, 4);
   end
   else begin
      Reply(207);
      NOption(203, VConComp15, 4);
   end
end

procedure VConComp14 begin
   Reply(139);
   NOption(203, VConComp01a, 1);
end

procedure VConComp15 begin
   call VConComp01a;
end

procedure VConComp16 begin
   Reply(141);
   NOption(142, VConComp17, 6);
   NOption(138, VConComp15, 4);
end

procedure VConComp17 begin
   Reply(143);
   giq_option(4, SCRIPT_MODREACT, 104, VConCompEnd, NEUTRAL_REACTION);
   NOption(144, VConComp17a, 6);
   NOption(145, VConComp17b, 6);
end

procedure VConComp17a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, 0))) then begin
      call VConComp18;
   end
   else begin
      call VConComp20;
   end
end

procedure VConComp17b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_DOCTOR, 0))) then begin
      call VConComp18;
   end
   else begin
      call VConComp20;
   end
end

procedure VConComp18 begin
   Reply(146);
   call VConComp18a;
end

procedure VConComp18a begin
   NOption(147, VConComp19, 6);
   NOption(148, VConComp19, 6);
   NOption(149, VConComp19, 7);
   NOption(150, VConCompEnd, 1);
end

procedure VConComp19 begin
   Reply(151);
   NOption(152, VConComp20, 6);
   NOption(153, VConComp21, 6);
   NOption(154, VConComp20, 6);
   NOption(155, VConComp19a, 7);
end

procedure VConComp19a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, -10))) then begin
      call VConComp21;
   end
   else begin
      call VConComp20;
   end
end

procedure VConComp20 begin
   Reply(156);
   call VConComp18a;
end

procedure VConComp21 begin
   Reply(157);
   NOption(158, VConComp27, 6);
   NOption(159, VConComp30, 7);
   NOption(150, VConCompEnd, 4);
end

procedure VConComp22 begin
   Reply(160);
   NOption(161, VConComp23, 4);
   NOption(162, VConComp24, 4);
   NOption(163, VConComp25, 4);
   NOption(164, VConComp26, 4);
end

procedure VConComp23 begin
   Reply(165);
   NOption(166, VConComp22, 4);
   NOption(138, VConComp18, 4);
end

procedure VConComp24 begin
   Reply(167);
   NOption(166, VConComp22, 4);
   NOption(138, VConComp18, 4);
end

procedure VConComp25 begin
   Reply(168);
   NOption(166, VConComp22, 4);
   NOption(138, VConComp18, 4);
end

procedure VConComp26 begin
   Reply(169);
   NOption(166, VConComp22, 4);
   NOption(138, VConComp18, 4);
end

procedure VConComp27 begin
   Reply(170);
   NOption(172, VConComp28, 4);
   NOption(173, VConComp29, 4);
end

procedure VConComp28 begin
   Reply(171);
   NOption(138, VConComp01a, 4);
   NOption(150, VConCompEnd, 4);
end

procedure VConComp29 begin
   Reply(146);
   call VConComp18a;
end

procedure VConComp30 begin
   Reply(174);
   NOption(172, VConComp31, 4);
   NOption(173, VConComp29, 4);
end

procedure VConComp31 begin
   Reply(175);
   NOption(138, VConComp01a, 4);
   NOption(150, VConCompEnd, 4);
end

procedure VConCompEnd begin
end

procedure Update_Invasion begin
   set_days_left(GVAR_THE_HUB_INVASION_DAYS);
   set_days_left(GVAR_BROTHERHOOD_INVASION_DAYS);
   set_days_left(GVAR_JUNKTOWN_INVASION_DAYS);
   set_days_left(GVAR_SHADY_SANDS_INVASION_DAYS);
   set_days_left(GVAR_VAULT_13_INVASION_DAYS);
   set_days_left(GVAR_BONEYARD_INVASION_DAYS);
   set_days_left(GVAR_NECROPOLIS_INVASION_DAYS);
end
