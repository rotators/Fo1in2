/*

   Mariposa - Van Hagen, Lou's side-dude.

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_VANHAG
#define TOWN_REP_VAR            (GVAR_TOWN_REP_MBASE)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

import variable Lt_ptr;

variable tmp_hostile;
variable sequence;
variable iseeu;
variable waiting;
variable clock := 4;
variable initial := 0;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_NECROPOLIS_MUTANT);
      set_self_ai(AI_CHILDREN_TRUE);
   end
end

procedure critter_p_proc begin
   if (tile_distance_objs(dude_obj, self_obj) < 12) then begin
      if (tmp_hostile) then begin
         tmp_hostile := 0;
         attack(dude_obj);
      end
      if (global_var(GVAR_ENTERING_VATS_HOW) < 1) then begin
         iseeu := 1;
      end
      if ((iseeu == 1) and (waiting == 0) and (Lt_ptr != 0) and (local_var(4) == 0)) then begin
         waiting := 1;
         add_timer_event(self_obj, game_ticks(clock), 1);
      end
   end
end

procedure destroy_p_proc begin
   sequence := 10;
   inc_inv_evil_crit
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   dude_look_at_self;
   float_msg(self_obj, mstr(101), FLOAT_MSG_NORMAL);
end

procedure timed_event_p_proc begin
   waiting := 0;
   if (sequence == 0) then begin
      float_msg(Lt_ptr, mstr(102), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 1) then begin
      float_msg(self_obj, mstr(103), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 2) then begin
      float_msg(Lt_ptr, mstr(104), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 3) then begin
      float_msg(self_obj, mstr(105), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 4) then begin
      float_msg(Lt_ptr, mstr(106), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 5) then begin
      float_msg(self_obj, mstr(107), FLOAT_MSG_NORMAL);
      clock := 6;
   end
   else if (sequence == 6) then begin
      float_msg(Lt_ptr, mstr(108), FLOAT_MSG_NORMAL);
      clock := 4;
   end
   else if (sequence == 7) then begin
      float_msg(self_obj, mstr(109), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 8) then begin
      float_msg(Lt_ptr, mstr(110), FLOAT_MSG_NORMAL);
   end
   else if (sequence == 9) then begin
      float_msg(self_obj, mstr(111), FLOAT_MSG_NORMAL);
      if (not(local_var(4))) then begin
         give_xp_msg(EXP_OVERHEARD_CONVERSATION, mstr(112));
         set_local_var(4, 1);
      end
   end
   sequence := sequence + 1;
end
