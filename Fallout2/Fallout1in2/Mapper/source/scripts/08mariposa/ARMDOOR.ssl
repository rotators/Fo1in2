/*

   Mariposa and Cathedral - Metal door

   - Door to the armory on level 2 in Mariposa.
   - Door to the bomb in Master's Lair.

*/

#include "define.h"
#include "command.h"

#define NAME                     SCRIPT_DOOR

procedure start;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_update_p_proc;
procedure damage_p_proc;

import variable Cur_Door_Ptr;

#define LVAR_DoorState        (2)
#define LVAR_Gave_Locks_XP    (3)

procedure start begin
end

procedure use_p_proc begin
   if (local_var(0) == 0) then begin
      obj_lock(self_obj);
   end
   else begin
      obj_unlock(self_obj);
   end
   if ((local_var(0) == 0) and (source_obj == dude_obj)) then begin
      script_overrides;
      display_msg(mstr(104));//{104}{}{The door is locked.}
   end
end

procedure use_skill_on_p_proc begin
   variable Item := 0;
   if (local_var(0) == 0) then begin
      if (action_being_used == SKILL_LOCKPICK) then begin
         script_overrides;
         Item := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -40);
         if (is_success(Item)) then begin
            set_local_var(0, 1);
            display_msg(mstr(100));
            if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
               set_local_var(LVAR_Gave_Locks_XP, 1);
               give_xp(EXP_LOCKPICK_NEG_40);
            end
         end
         else begin
            if (is_critical(Item)) then begin
               jam_lock(self_obj);
               display_msg(mstr(110));//{110}{}{The lock is beyond your ability to pick.}
            end
            else begin
               display_msg(mstr(103));//{103}{}{You were not able to pick the lock.}
            end
         end
      end
   end
   else begin
      display_msg(mstr(109));//{109}{}{The door is already unlocked.}
   end
end

procedure description_p_proc begin
   if (local_var(0) == 0) then begin
      display_msg(mstr(104));//{104}{}{The door is locked.}
   end
end

procedure use_obj_on_p_proc begin
   variable Item := 0;
   variable Skill := 0;
   Item := obj_being_used_with;
   Skill := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -20);

   if (obj_pid(Item) == PID_ELECTRONIC_LOCKPICKS or obj_pid(Item) == PID_ELEC_LOCKPICK_MKII) then begin
      script_overrides;

      if (item == PID_ELEC_LOCKPICK_MKII) then
         Skill := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -10);

      if (is_success(Skill)) then begin
         set_local_var(0, 1);
         display_msg(mstr(100));//{100}{}{You unlock the door.}
         if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
            set_local_var(LVAR_Gave_Locks_XP, 1);
            give_xp(EXP_LOCKPICK_NEG_40);
         end
      end
      else begin
         if (is_critical(Skill)) then begin
            rm_obj_from_inven(dude_obj, Item);
            destroy_object(Item);
            display_msg(mstr(101));//{101}{}{You broke your lockpicks!}
         end
         else begin
            display_msg(mstr(103));//{103}{}{You were not able to pick the lock.}
         end
      end
   end
end

procedure map_update_p_proc begin
   if (local_var(0) == 0) then begin
      obj_lock(self_obj);
   end
   else begin
      obj_unlock(self_obj);
   end
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin

      set_local_var(LVAR_DoorState, local_var(LVAR_DoorState) + 1);
      if (local_var(LVAR_DoorState) > 2) then begin
         if not(is_loading_game) then set_self_invisible;
         set_local_var(1, 1);
      end

   end
   else begin
       display_msg(mstr(193));
   end
end
