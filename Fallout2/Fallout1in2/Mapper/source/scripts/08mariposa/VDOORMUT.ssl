/*

   Mariposa - Outside Guard mutant
               ENTRANCE DOOR TO INSIDE

*/

/* Include Files */
#include "define.h"
#include "mbase.h"
#include "maps/mbent.h"

#define NAME                    SCRIPT_GENSUPR
#define TOWN_REP_VAR            (GVAR_TOWN_REP_MBASE)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure GenSupr00;
procedure GenSupr03;
procedure GenSupr03a;
procedure GenSupr03b;
procedure GenSupr04;
procedure GenSupr05;
procedure GenSupr06;
procedure GenSupr07;
procedure GenSupr08;
procedure GenSuprAlert;
procedure GenSuprxx;

#define LVAR_CreateHolodisk   (4)

import variable removal_ptr;

variable initial := 0;
variable tmp_hostile;
variable round_counter;
variable home_tile := 7000;
variable Item;

procedure start begin
   if (not(initial)) then begin
      if (local_var(LVAR_CreateHolodisk) == 0) then begin
         Item := create_object_sid(PID_MBASE_SEC_CODE, 0, 0, SCRIPT_DOORCODE);
         add_obj_to_inven(self_obj, Item);
         set_local_var(LVAR_CreateHolodisk, 1);
      end
      set_self_team(TEAM_NECROPOLIS_MUTANT);
      set_self_ai(AI_SUPER_MUTANT_SGT);
      initial := 1;
   end
end

procedure combat_p_proc begin
   if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      round_counter := round_counter + 1;
   end
   if (round_counter > 2) then begin
      call GenSuprAlert;
   end
end

procedure critter_p_proc begin
   if (round_counter > 0) then begin
      tmp_hostile := 1;
   end
   if (self_can_see_dude) then begin
      if (tmp_hostile) then begin
         tmp_hostile := 0;
         attack(dude_obj);
      end
      else if (global_var(GVAR_VATS_ALERT)) then begin
         tmp_hostile := 1;
      end
      else if (not(map_var(4))) then begin
         if (tile_distance_objs(self_obj, dude_obj) < 12) then
            dialogue_system_enter;
      end
   end
end

procedure destroy_p_proc begin
   inc_inv_evil_crit
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   set_tma_data(tma_source_generic, TMA_MSG_MBASE, -1, -1, 997, 999);

   dude_look_at_self;

   if bos_invading_mbase then begin
      float_msg(self_obj, mstr(random(101, 103)), FLOAT_MSG_RED);
      tmp_hostile := 1;
   end
   else if (global_var(GVAR_LIEUTENANTS_DEAD)) then begin
      call GenSupr08;
   end
   else begin
      if (dude_is_armed) and not(tmp_hostile) then begin
         if (random(0, 5) == 5) then
            call GenSupr00;
         else
            tmp_hostile := 1;
      end
      else begin
         start_dialog_at_node(GenSupr03);
      end
   end
end

procedure GenSupr00 begin
   float_msg(self_obj, mstr(random(101, 103)), FLOAT_MSG_RED);
   tmp_hostile := 1;
end

procedure GenSupr03 begin
   Reply(random(104, 106));
   BLowOption(107, GenSupr04);
   BOption(108, GenSupr04, 4);
   NOption(109, GenSupr05, 5);
   NOption(110, GenSupr03a, 6);
   if dude_wearing_coc_robe then
      NOption(111, GenSupr03b, 6);
end

procedure GenSupr03a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call GenSupr07;
   end
   else begin
      call GenSupr06;
   end
end

procedure GenSupr03b begin
   coc_disguise_check;
   if DISGUISED and (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 25))) then begin
      call GenSupr07;
   end
   else begin
      call GenSupr06;
   end
end

procedure GenSupr04 begin
   tmp_hostile := 1;
   BMessage(random(112, 114));
end

procedure GenSupr05 begin
   Reply(115);
   NOption(116, GenSuprxx, 5);
   BOption(117, GenSuprAlert, 5);
end

procedure GenSupr06 begin
   tmp_hostile := 1;
   BMessage(random(118, 120));
end

procedure GenSupr07 begin
   set_map_var(4, 1);
   NMessage(random(121, 123));
end

procedure GenSupr08 begin
   float_msg(self_obj, mstr(random(124, 127)), FLOAT_MSG_RED);
   tmp_hostile := 1;
end

procedure GenSuprAlert begin
   set_global_var(GVAR_VATS_ALERT, 1);
   tmp_hostile := 1;
end

procedure GenSuprxx begin
   set_global_var(GVAR_ENTERING_VATS_HOW, 2);
   load_map(MAP_MBVATS12, 5);
end
