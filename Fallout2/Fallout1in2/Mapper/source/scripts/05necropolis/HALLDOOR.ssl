/*

   Necropolis - Entrance door to the Hall of the Dead

*/

#include "define.h"
#include "command.h"
#include "maps/hallded.h"

#define NAME                     SCRIPT_DOOR

/* Door close distance */
/* How far do you want the last object that used the door to get away before it closes */
#define DOOR_CLOSE_DIST                 (10) //(3)

/* Timer id's */
#define TIMER_CLOSE                     (1)

/* Penalties for forcing the door open using strength */
#define Crowbar_Bonus                   (0)

/* Max and Min damage for the trap */
#define DOOR_STRENGTH                   (2)
#define MIN_DAMAGE                      (10)
#define MAX_DAMAGE                      (20)
#define Crowbar_Strain                  (2)

procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;

procedure roll_critical;
procedure roll_pry_success;
procedure roll_pry_destroy_crowbar;
procedure Pry_Door;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

//local_var(6) == HALLDED | has init Hallded door?

#define LVAR_HALLDED_Door           (4)
#define LVAR_DoorStatus             (5)
#define LVAR_Explosion_Attempts     (8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable GhDorGrd_Ptr;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/
variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;

/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

#define Hex_Inside         (17127)

procedure start begin
end

procedure look_at_p_proc begin
end

procedure description_p_proc begin
   if (obj_is_locked(self_obj)) then
      display_msg(mstr(104));
end

procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
             (checkPartyMembersNearDoor == false) and
             ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
              (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
            obj_close(self_obj);
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end

procedure map_enter_p_proc begin
   if (local_var(6) != 1) and (map_first_run) then begin
      set_local_var(LVAR_DoorStatus, 0);
      set_map_var(MVAR_Fixt_DOOR_LOCKED, 1);
      set_local_var(6, 1);
   end

   if necropolis_invaded then begin
      destroy_object(self_obj);
   end

   if night then begin
      if ((map_var(MVAR_Fixt_DOOR_LOCKED) == 0) or (local_var(LVAR_DoorStatus) == 1) or (map_var(MVAR_FIxt_CHARMED_IN_DOOR) == 1)) then begin
         obj_unlock(self_obj);
      end
   end
   else if (local_var(LVAR_DoorStatus) == 1) then begin
      obj_unlock(self_obj);
   end
   else if (local_var(LVAR_DoorStatus) == 0) and (map_var(MVAR_FIxt_CHARMED_IN_DOOR) != 1) then begin
      obj_close(self_obj);
      obj_lock(self_obj);
   end
end

procedure map_update_p_proc begin
   if night then begin
      if ((map_var(MVAR_Fixt_DOOR_LOCKED) == 0) or (local_var(LVAR_DoorStatus) == 1) or (map_var(MVAR_FIxt_CHARMED_IN_DOOR) == 1)) then begin
         obj_unlock(self_obj);
      end
   end
   else if (local_var(LVAR_DoorStatus) == 1) then begin
      obj_unlock(self_obj);
   end
   else if (local_var(LVAR_DoorStatus) == 0) and (map_var(MVAR_FIxt_CHARMED_IN_DOOR) != 1) then begin
      obj_close(self_obj);
      obj_lock(self_obj);
   end
end

procedure use_p_proc begin
   if ((map_var(MVAR_Fixt_DOOR_LOCKED) == 1) and source_is_dude) then begin
      if (local_var(LVAR_DoorStatus) == 0) then begin
         if (GhDorGrd_Ptr != 0) and not(combat_is_initialized) then begin
            if obj_can_see_obj(dude_obj, GhDorGrd_Ptr) then
               float_msg(GhDorGrd_Ptr, message_str(SCRIPT_GHDORGRD, 101), FLOAT_MSG_NORMAL);

            obj_lock(self_obj);
            script_overrides;
            display_msg(mstr(104));//{104}{}{The door is locked.}
         end
         else begin
            obj_lock(self_obj);
            script_overrides;
            display_msg(mstr(104));//{104}{}{The door is locked.}
         end
      end
      else if (local_var(LVAR_DoorStatus) == 1) then begin
         if (GhDorGrd_Ptr != 0) then begin
            if not(dude_is_sneaking) and source_is_dude then begin
               if (tile_distance(dude_tile, Hex_Inside) > 1) then begin
                  script_overrides;
                  if (global_var(GVAR_SET_DOOR_GUARD_WARNING) == 0) then begin
                     set_global_var(GVAR_SET_DOOR_GUARD_WARNING, 1);
                     float_msg(GhDorGrd_Ptr, message_str(SCRIPT_GHDORGRD, 101), FLOAT_MSG_NORMAL);
                     if (obj_is_open(self_obj)) then obj_close(self_obj);
                  end
                  else
                     set_global_var(GVAR_SET_DOOR_GUARD_WARNING, 2);
               end
            end
            else begin
               if dude_is_sneaking and dude_skill_success(SKILL_SNEAK, 0) and source_is_dude then begin
                  obj_unlock(self_obj);
               end
            end
         end
         else begin
            obj_unlock(self_obj);
         end
      end
   end

   if fo1in2_auto_doors_closing then begin
      last_source_obj := source_obj;
      add_timer_event(self_obj, 10, TIMER_CLOSE);
   end
end

procedure use_skill_on_p_proc begin
variable Skills_Roll;

   if (map_var(MVAR_Fixt_DOOR_LOCKED) == 1) and (local_var(LVAR_DoorStatus) == 0) then begin
      if (action_being_used == SKILL_LOCKPICK) then begin
         script_overrides;
         Skills_Roll := roll_vs_skill(source_obj, SKILL_LOCKPICK, 0);

         // Unlock the door:
         if (is_success(Skills_Roll)) then begin
            obj_unlock(self_obj);
            set_local_var(LVAR_DoorStatus, 1);
            if source_is_dude then
               display_msg(mstr(100));
            else
               display_msg(obj_name(source_obj) + message_str(SCRIPT_JUNKJAIL, 200));
            give_xp(EXP_LOCKPICK_NORMAL);
         end
         else begin
            // beyond capabilities to open:
            if (is_critical(Skills_Roll)) then begin
               jam_lock(self_obj);
               display_msg(mstr(110));
            end
            // unable to pick the lock:
            else begin
               if source_is_dude then
                  display_msg(mstr(103));
               else
                  display_msg(obj_name(source_obj) + message_str(SCRIPT_JUNKJAIL, 202));
            end
         end
      end
   end

   // Door is already open:
   else begin
      display_msg(mstr(109));
   end
end

procedure use_obj_on_p_proc begin
   variable Tool;
   variable Skills_Roll;
   Tool := obj_pid(obj_being_used_with);

   Skills_Roll := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 20);

   if ((Tool == PID_LOCKPICKS or Tool == PID_EXP_LOCKPICK_SET) and (map_var(MVAR_Fixt_DOOR_LOCKED) == 1)) then begin
      if (local_var(LVAR_DoorStatus) == 0) then begin
         script_overrides;

         if (Tool == PID_EXP_LOCKPICK_SET) then
            Skills_Roll := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 25);

         // Door unlocked:
         if (is_success(Skills_Roll)) then begin
            obj_unlock(self_obj);
            set_local_var(LVAR_DoorStatus, 1);
            display_msg(mstr(100));
            give_xp(EXP_LOCKPICK_NORMAL);
         end
         else begin
            // Lockpicks broken:
            if (is_critical(Skills_Roll)) then begin
               rm_obj_from_inven(dude_obj, obj_being_used_with);
               destroy_object(obj_being_used_with);
               display_msg(mstr(101));
            end
            // Not able to open the door:
            else begin
               display_msg(mstr(103));
            end
         end
      end
      // Door is already open:
      else begin
         display_msg(mstr(109));
      end
   end

   else if ((Tool == PID_CROWBAR) and (map_var(MVAR_Fixt_DOOR_LOCKED) == 1)) then begin
      script_overrides;
      call Pry_Door;
   end
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      obj_unlock(self_obj);
      destroy_object(self_obj);

      if (GhDorGrd_Ptr != 0) then begin
         attack_setup(GhDorGrd_Ptr, dude_obj);
      end
   end
   else begin
       display_msg(mstr(193));
   end
end

/***************************************************************************
   This procedure is used should the player try to pry the door open using a
   crowbar or some similar instrument.
***************************************************************************/
// Unbiased critical, used for prying with Crowbar.
procedure roll_critical begin
   variable rnd = random(1, 20);
   if rnd == 20 then return true;
   return false;
end

// For wood doors, Crowbar_Bonus = 0, which means always success
procedure roll_pry_success begin
   variable rnd = random(1, 10);
   if rnd <= (get_strength(source_obj) + Crowbar_Bonus) then return true;
   return false;
end

// Sturdier doors and high strength provide more chance to mangle the crowbar
// Any STR char + wood door = 1% chance to destroy
// 5 STR char + metal door = 10% chance to destroy
// 10 STR char + metal door = 20% chance to destroy
procedure roll_pry_destroy_crowbar begin
   variable rnd = random(1, 100);
   variable str = get_strength(source_obj);
   // Base Crowbar_Bonus = 0 (wood door). For metal doors, default is -2
   variable penalty = str * Crowbar_Bonus;
   if rnd + penalty <= 1 then return true;
   return false;
end

procedure Pry_Door begin
   variable pry_success;
   variable pry_strain;
   variable pry_destroy_crowbar;

   if not obj_is_locked(self_obj) then begin
      display_msg(mstr(105));
      return;
   end

   // crowbar destroy runs always, discouraging high STR characters from spamming it
   pry_destroy_crowbar = roll_pry_destroy_crowbar();
   if pry_destroy_crowbar then begin
      variable crowbar = get_item(source_obj, PID_CROWBAR);
      rm_obj_from_inven(source_obj, crowbar);
      destroy_object(crowbar);
      if (source_obj == dude_obj) then display_msg(mstr(620));
      else display_msg(obj_name(source_obj) + mstr(621));
      return;
   end

   pry_success = roll_pry_success();
   if pry_success then begin
      obj_unlock(self_obj);
      set_local_var(LVAR_DoorStatus, 1);
      if (source_obj == dude_obj) then begin
         display_msg(mstr(176));
      end else begin
         display_msg(obj_name(source_obj) + mstr(181));
      end
      give_xp(EXP_LOCKPICK_NORMAL);
      return;
   end

   // failure: damage
   pry_strain = roll_critical();
   if pry_strain then begin
      critter_dmg(source_obj, Crowbar_Strain, (DMG_normal_dam BWOR DMG_BYPASS_ARMOR));
      if (source_obj == dude_obj) then begin
         if (Crowbar_Strain == 1) then begin
            display_msg(mstr(177));
         end
         else begin
            display_msg(mstr(178) + Crowbar_Strain + mstr(179));
         end
      end
      else begin
         if source_is_dude then begin
            if (Crowbar_Strain == 1) then begin
               display_msg(obj_name(source_obj) + mstr(182));
            end
            else begin
               display_msg(obj_name(source_obj) + mstr(183) + Crowbar_Strain + mstr(184));
            end
         end
         else begin
            if (Crowbar_Strain == 1) then begin
               display_msg(obj_name(source_obj) + mstr(186));
            end
            else begin
               display_msg(obj_name(source_obj) + mstr(187) + Crowbar_Strain + mstr(188));
            end
         end
      end
   end

   // regular failure
   if not(pry_strain) then begin
      if (source_obj == dude_obj) then display_msg(mstr(180));
      else display_msg(obj_name(source_obj) + mstr(185));
   end
end
