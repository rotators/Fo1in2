/*

   Necropolis - Set the ghoul leader

*/

/* Include Files */
#include "define.h"
#include "necropolis.h"

#define NAME                    SCRIPT_SET
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure talk_p_proc;
procedure pickup_p_proc;
procedure look_at_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure set00;
procedure set00a;
procedure set00b;
procedure set00_2;
procedure set01;
procedure set01a;
procedure set02;
procedure set02a;
procedure set03;
procedure set04;
procedure set05;
procedure set06;
procedure set07;
procedure set08;
procedure set09;
procedure set09a;
procedure set09_2;
procedure set10;
procedure set10a;
procedure set11;
procedure set12;
procedure set12_2;
procedure set13;
procedure set13_2;
procedure set14;
procedure set15;
procedure set16;
procedure set17;
procedure set17_2;
procedure set18;
procedure set18a;
procedure set19;
procedure set19_2;
procedure set20;
procedure set21;
procedure set21a;
procedure set22;
procedure set23;
procedure set24;
procedure set25;
procedure set25_2;
procedure set26;
procedure set27;
procedure set28;
procedure set29;
procedure set30;
procedure set31;
procedure set32;
procedure set33;
procedure set34;
procedure set34_2;
procedure set35;
procedure set36;
procedure set38;
procedure set39;
procedure set40;
procedure set40_2;
procedure set41;
procedure set42;
procedure set43;
procedure set44;
procedure set42_2;
procedure set45;
procedure set45a;
procedure set46;
procedure set47;
procedure set48;
procedure set49;
procedure set50;
procedure set51;
procedure set52;
procedure set52a;
procedure set53;
procedure set54;
procedure set55;
procedure set56;
procedure set57;
procedure set57_2;
procedure set58;
procedure set59;
procedure set60;
procedure set61;
procedure set62;
procedure set63;
procedure set64;
procedure set65;
procedure set200;
procedure set201;
procedure set202;
procedure set203;
procedure set204;
procedure set205;
procedure set206;
procedure set207;
procedure set208;
procedure set209;
procedure set300;
procedure set301;
procedure set302;
procedure set303;
procedure set304;
procedure set305;
procedure set306;
procedure set307;
procedure set308;
procedure set309;
procedure set310;
procedure set311;
procedure setend;
procedure setcbt;

procedure travel;
procedure settime;

variable tmp_hostile;
variable initial := 0;
variable chip;
variable setgone;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_NECROPOLIS_GANGER);
      set_self_ai(AI_GHOUL_NASTY);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      set_local_var(9, 1);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure critter_p_proc begin
   if (global_var(GVAR_ENEMY_NECROPOLIS) and self_can_see_dude) and (local_var(6) == 0) then begin
      dialogue_system_enter;
   end
   else if (tmp_hostile) then begin
      tmp_hostile := 0;
      set_global_var(GVAR_ENEMY_NECROPOLIS, 1);
      attack(dude_obj);
   end
   else if (local_var(4) == 0 and (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6))) then begin
      dialogue_system_enter;
   end
   else if ((global_var(GVAR_NECROP_WATER_CHIP_TAKEN) == 1) and not(necropolis_wpump_fixed)) then begin
      if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
         dialogue_system_enter;
      end
   end
end

procedure destroy_p_proc begin
   set_global_var(GVAR_SET_DEAD, 1);
   inc_evil_critter
end

procedure damage_p_proc begin
   tmp_hostile := 1;
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure travel begin
   load_map(MAP_WATRSHD, 1);
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, 970, 970, TMA_MSG_DONTKNOW_START, 983);

   dude_look_at_self;

   get_reaction
   start_gdialog(15, self_obj, 4, 15, 4);
   gsay_start;
   if (global_var(GVAR_ENEMY_NECROPOLIS)) then begin
      tmp_hostile := 1;
   end
   if (tmp_hostile) then begin
      call set49;
   end
   else begin
      if (local_var(4)) then begin
         if ((global_var(GVAR_NECROP_WATER_CHIP_TAKEN) == 1) and not(necropolis_wpump_fixed)) then begin
            call set57;
         end
         else if cathedral_destroyed and (local_var(7) == 0) then begin
            call set52;
         end
         else if (day) then begin
            call set207;
         end
         else begin
            if (global_var(GVAR_NECROP_MUTANTS_KILLED) >= 1) then begin
               if (local_var(5) == 1) then begin
                  call set50;
               end
               if (global_var(GVAR_SIGNAL_REWARD) bwand 1) then begin
                  call set42;
               end
               else if (global_var(GVAR_PLAYER_CAPTURED) == 1) then begin
                  call set29;
               end
               else if ((global_var(GVAR_NECROP_MUTANTS_KILLED) == 2) or (global_var(GVAR_WATERSHED_MUTANTS_LEAVE) != 0)) then begin
                  call set18;
               end
               else begin
                  if (local_var(9)) then begin
                     call set25;
                  end
                  else begin
                     call set51;
                  end
               end
            end
            else begin
               call set51;
            end
         end
      end
      else begin
         add_timer_event(self_obj, game_ticks(600), 1);
         set_local_var(4, 1);
         if ((global_var(GVAR_NECROP_WATER_CHIP_TAKEN) == 1) and not(necropolis_wpump_fixed)) then begin
            call set57;
         end
         else if cathedral_destroyed and (local_var(7) == 0) then begin
            call set52;
         end
         else if ((global_var(GVAR_NECROP_MUTANTS_KILLED) == 2) or (global_var(GVAR_WATERSHED_MUTANTS_LEAVE) != 0)) then begin
            call set30;
         end
         else if (global_var(GVAR_VATS_BLOWN) != 2) then begin
            if (global_var(GVAR_PLAYER_CAPTURED) == 1) then begin
               call set16;
            end
            else begin
               call set00;
            end
         end
      end
   end
   gsay_end;
   end_dialogue;
end

procedure setend begin
end

procedure setcbt begin
   tmp_hostile := 1;
end

procedure settime begin
   call setcbt;
end

procedure set00 begin
   Reply(101);
   NOption(102, set00_2, 5);
   BOption(103, set00a, 4);
   BOption(104, set00b, 4);
   NLowOption(105, set05);
end

procedure set00_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      UpReact
      call set01;
   end
   else begin
      BigDownReact
      call set02;
   end
end

procedure set01
begin
   Reply(106);
   NOption(107, set09, 7);
   NOption(108, set01a, 4);
   NOption(109, set14, 4);
end

procedure set01a
begin
   Reply(110);
   NOption(111, set12, 1);
end

procedure set02
begin
   Reply(112);
   BOption(113, set03, 5);
   GOption(114, set02a, 5);
   NOption(115, set01, 1);
end

procedure set03
begin
   BMessage(116);
   call setcbt;
end

procedure set05
begin
   Reply(121);
   NLowOption(122, set06);
   NLowOption(123, set08);
end

procedure set06
begin
   set_global_var(GVAR_NECROP_MUTANTS_KILLED, 1);
   Reply(124);
   NOption(125, setend, 4);
   NOption(126, set07, 4);
   NLowOption(127, setend);
   NLowOption(128, set07);
end

procedure set07
begin
   NMessage(129);
   call setend;
end

procedure set08
begin
   NMessage(130);
   call settime;
end

procedure set09_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call set10;
   end
   else begin
      if (dude_is_male) then begin
         call set03;
      end
      else begin
         call set04;
      end
   end
end

procedure set09
begin
   Reply(131);
   NOption(132, set09_2, 6);
   BOption(133, set09a, 4);
   NOption(134, set15, 5);
end

procedure set10
begin
   Reply(135);
   NOption(136, set10a, 6);
   BOption(137, setcbt, 4);
end

procedure set10a
begin
   Reply(138);
   NOption(139, set11, 6);
end

procedure set11
begin
   Reply(140);
   NOption(141, set12, 5);
   NOption(142, set08, 4);
end

procedure set12
begin
   Reply(143);
   NOption(144, set06, 4);
   BOption(145, set12_2, 4);
end

procedure set12_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call set08;
   end
   else begin
      call set03;
   end
end

procedure set13
begin
   Reply(146);
   NOption(147, set06, 4);
   BOption(148, set13_2, 4);
end

procedure set13_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
      call set08;
   end
   else begin
      call set03;
   end
end

procedure set14
begin
   Reply(149);
   NOption(150, set12, 4);
   NOption(151, set15, 5);
end

procedure set15
begin
   Reply(152);
   NOption(153, set12, 4);
   NOption(154, set12_2, 4);
   BOption(155, set09a, 4);
end

procedure set16
begin
   Reply(156);
   NOption(157, set17, 4);
   BOption(158, set03, 4);
   NLowOption(159, set17);
   BLowOption(160, set03);
end

procedure set17
begin
   Reply(161);
   NOption(162, set17_2, 7);
   NOption(163, set06, 4);
   BOption(164, set03, 4);
   NLowOption(159, set06);
   BLowOption(160, set03);
end

procedure set17_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call set09;
   end
   else begin
      call set03;
   end
end

procedure set18
begin
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 1);
   Reply(165);
   NOption(166, setend, 4);
   BOption(167, set18a, 4);
   NLowOption(168, setend);
end

procedure set19_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call set20;
   end
   else begin
      call set23;
   end
end

procedure set19
begin
   Reply(169);
   NOption(170, set19_2, 5);
   NOption(171, setend, 4);
   NOption(172, set24, 4);
end

procedure set20
begin
   Reply(173);
   NOption(174, set21, 4);
   NOption(175, setend, 4);
end

procedure set21
begin
   Reply(176);
   NOption(177, set22, 4);
   NOption(178, set21a, 4);
end

procedure set21a
begin
   NMessage(179);
   call setend;
end

procedure set22
begin
   Reply(180);
   NOption(181, setend, 5);
end

procedure set23
begin
   Reply(182);
   NOption(183, setend, 4);
   BOption(184, setcbt, 4);
end

procedure set24
begin
   Reply(185);
   NOption(186, setend, 4);
   BOption(187, setcbt, 4);
end

procedure set25
begin
   Reply(188);
   NOption(189, set25_2, 5);
   NOption(190, set28, 4);
   NLowOption(191, set28);
end

procedure set25_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
      call set26;
   end
   else begin
      call set27;
   end
end

procedure set26
begin
   set_local_var(5, 1);
   NMessage(192);
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 1);
   call setend;
end

procedure set27
begin
   BMessage(193);
   call setcbt;
end

procedure set28
begin
   NMessage(194);
   call setend;
end

procedure set29
begin
   NMessage(195);
   call setcbt;
end

procedure set30
begin
   Reply(196);
   NOption(197, set31, 5);
   NOption(198, set34, 5);
   NOption(199, set38, 4);
   NOption(200, set40, 4);
   NLowOption(201, set41);
end

procedure set31
begin
   Reply(202);
   NOption(203, set32, 5);
   BOption(204, setcbt, 5);
end

procedure set32
begin
   Reply(205);
   BOption(206, setcbt, 4);
   NOption(207, set33, 4);
end

procedure set33
begin
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 1);
   Reply(208);
   call setend;
end

procedure set34
begin
   Reply(209);
   NOption(210, set18, 5);
   NOption(211, set34_2, 5);
end

procedure set34_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call set35;
   end
   else begin
      call set36;
   end
end

procedure set35
begin
   NMessage(212);
   call setend;
end

procedure set36
begin
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 1);
   NMessage(213);
   call setend;
end

procedure set38
begin
   Reply(214);
   NOption(215, set39, 4);
   NOption(216, setend, 4);
   BOption(217, setcbt, 4);
end

procedure set39
begin
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 1);
   NMessage(218);
   call setend;
end

procedure set40
begin
   Reply(219);
   NOption(220, set40_2, 4);
   BOption(221, setcbt, 4);
end

procedure set40_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call set34;
   end
   else begin
      call set48;
   end
end

procedure set41
begin
   Reply(222);
   NLowOption(223, set08);
   BLowOption(224, setcbt);
end

procedure set42
begin
   Reply(225);
   NOption(226, set42_2, 4);
   BOption(227, setcbt, 4);
   NOption(228, setend, 4);
   NLowOption(229, setend);
end

procedure set43
begin
   Reply(230);
   NOption(231, set44, 7);
   NOption(232, set47, 4);
   BOption(233, set48, 4);
end

procedure set44
begin
   Reply(234);
   if (is_success(do_check(dude_obj, STAT_iq, 0))) then begin
      NOption(235, set46, 13);
   end
   NOption(236, setend, 4);
   NOption(237, set45, 4);
end

procedure set42_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call set43;
   end
   else begin
      call set48;
   end
end

procedure set45
begin
   Reply(238);
   BOption(239, setcbt, 4);
   NOption(240, setend, 4);
   BOption(241, set45a, 4);
end

procedure set45a
begin
   BMessage(242);
   call setcbt;
end

procedure set46
begin
   Reply(243);
   NOption(244, setend, 4);
   BOption(245, setcbt, 4);
end

procedure set47
begin
   NMessage(246);
   call setend;
end

procedure set48
begin
   BMessage(247);
   call setcbt;
end

procedure set49
begin
   if (local_var(6) != 1) then begin
      set_local_var(6, 1);
      BMessage(248);
   end
   call setcbt;
end

procedure set50
begin
   set_local_var(5, 2);
   Reply(249);
   NOption(250, setend, 5);
   BOption(251, setcbt, 5);
end

procedure set51
begin
   NMessage(252);
   call setend;
end

procedure set52
begin
   set_local_var(7, 1);
   Reply(253);
   GOption(254, set53, 4);
   BOption(255, set03, 4);
   GLowOption(256, set52a);
end

procedure set52a
begin
   Reply(257);
   GLowOption(258, set53);
end

procedure set53
begin
   Reply(259);
   NOption(260, set54, 5);
   NOption(261, set56, 4);
   NOption(262, setend, 4);
   NLowOption(263, set56);
   NLowOption(264, setend);
end

procedure set54
begin
   Reply(265);
   NOption(266, set55, 4);
   NOption(267, set56, 4);
end

procedure set55
begin
   setgone := 1;
   NMessage(268);
   call setend;
end

procedure set56
begin
   set_global_var(GVAR_SIGNAL_REWARD, global_var(GVAR_SIGNAL_REWARD) bwor 2);
   NMessage(269);
   call setend;
end

procedure set57
begin
   Reply(270);
   if (dude_item_count(PID_PUMP_PARTS)) then begin
      NOption(271, set57_2, 6);
   end
   BOption(272, set63, 4);
   BOption(273, setcbt, 4);
   NOption(274, set64, 4);
   NLowOption(275, set63);
end

procedure set57_2
begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then begin
      call set58;
   end
   else begin
      call set62;
   end
end

procedure set58
begin
   Reply(276);
   NOption(277, set59, 5);
   BOption(278, set60, 4);
end

procedure set59
begin
   set_global_var(GVAR_NECROP_WATER_PUMP_FIXED, 1);
   set_global_var(GVAR_NECROP_WATER_PUMP_GUARD, 1);
   Reply(279);
   NOption(280, travel, 4);
end

procedure set60
begin
   Reply(281);
   NOption(282, set06, 4);
   BOption(283, setcbt, 4);
end

procedure set61
begin
   BMessage(284);
   call setcbt;
end

procedure set62
begin
   Reply(285);
   BOption(286, setcbt, 4);
end

procedure set63
begin
   Reply(287);
   BOption(288, setcbt, 4);
   BLowOption(289, setcbt);
end

procedure set64
begin
   Reply(290);
   BOption(291, set63, 4);
   NOption(292, set65, 4);
   BOption(293, setcbt, 4);
end

procedure set65 begin
   chip := dude_item(PID_WATER_CHIP);
   if (chip != 0) then begin
      rm_obj_from_inven(dude_obj, chip);
      set_global_var(GVAR_NECROP_WATER_CHIP_TAKEN, 0);
   end
   BMessage(294);
   BigDownReact
end

procedure set00a
begin
   if (dude_is_male) then begin
      call set03;
   end
   else begin
      call set04;
   end
end

procedure set00b
begin
   BigDownReact
   call set02;
end

procedure set02a
begin
   UpReact
   call set01;
end

procedure set04
begin
   Reply(117);
   BOption(118, setcbt, 4);
   BOption(119, setcbt, 4);
   BLowOption(120, setcbt);
end

procedure set09a
begin
   if (dude_is_male) then begin
      call set03;
   end
   else begin
      call set04;
   end
end

procedure set18a
begin
   BigDownReact
   call set19;
end

procedure set200
begin
   NMessage(295);
end

procedure set201
begin
   NMessage(296);
end

procedure set202
begin
   NMessage(297);
end

procedure set203
begin
   NMessage(298);
end

procedure set204
begin
   NMessage(299);
end

procedure set205
begin
   NMessage(300);
end

procedure set206
begin
   NMessage(301);
end

procedure set207
begin
   NMessage(302);
end

procedure set208
begin
   NMessage(303);
end

procedure set209
begin
   NMessage(304);
end

procedure set300
begin
   NMessage(305);
end

procedure set301
begin
   NMessage(306);
end

procedure set302
begin
   NMessage(307);
end

procedure set303
begin
   NMessage(308);
end

procedure set304
begin
   NMessage(309);
end

procedure set305
begin
   NMessage(310);
end

procedure set306
begin
   NMessage(311);
end

procedure set307
begin
   NMessage(312);
end

procedure set308
begin
   NMessage(313);
end

procedure set309
begin
   NMessage(314);
end

procedure set310
begin
   NMessage(315);
end

procedure set311
begin
   NMessage(316);
end
