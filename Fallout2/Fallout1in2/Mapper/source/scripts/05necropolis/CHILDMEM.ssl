/*

   Necropolis - CoC member

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_CHILDMEM
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure childend;
procedure childcbt;
procedure child_heal;
procedure child_pois;
procedure child00;
procedure child01;
procedure child02;
procedure child03;
procedure child04;
procedure child04a;
procedure child05;
procedure child05a;
procedure child06;
procedure child07;
procedure child08;
procedure child09;
procedure child09a;
procedure child10;
procedure child11;
procedure child12;
procedure child13;
procedure child14;
procedure child15;
procedure child16;

variable init_teams := 0;
variable tmp_hostile;
variable max_hp;
variable current_hp;
variable cur_pois;
variable hp_injured;
variable cost;
variable pois_cost;
variable cheat;
variable RADCOUNT := 0;

procedure start begin
   if (not(init_teams)) then begin
      set_self_team(TEAM_CATHEDRAL);
      set_self_ai(AI_BRAINWASHED_CHILDREN);
      init_teams := 1;
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure talk_p_proc begin
   if (local_var(5) == 0) then begin
      max_hp := dude_max_hp;
      current_hp := dude_cur_hp;
      RADCOUNT := dude_rads;
      if (local_var(4)) then begin
         call child16;
      end
      else begin
         if (global_var(GVAR_SUPER_MUTANTS_KILLED) > 0) then begin
            call child15;
         end
         else begin
            set_tma_data(NAME, 1000, -1, -1, TMA_MSG_DONTKNOW_START, TMA_MSG_DONTKNOW_END);

            dude_look_at_self;
            get_reaction

            start_dialog_at_node(child00);
         end
      end
   end
   else begin
      call childend;
   end
end

procedure childend begin
end

procedure childcbt begin
   tmp_hostile := 1;
end

////////////////////////////////////////////////////////////////////////////////

procedure child_heal begin
   game_time_advance(ONE_GAME_MINUTE * hp_injured);
   critter_heal(dude_obj, hp_injured);
   critter_uninjure(dude_obj, (DAM_CRIP_LEG_LEFT bwor DAM_CRIP_LEG_RIGHT bwor DAM_CRIP_ARM_LEFT bwor DAM_CRIP_ARM_RIGHT));
   dec_v13_days_left(1);
end

procedure child_pois begin
   if (dude_poison_stat != 0) then begin
      game_time_advance(ONE_GAME_HOUR * 3);
   end
   poison(dude_obj, -dude_poison_stat);
   dec_v13_days_left(1);
end

////////////////////////////////////////////////////////////////////////////////

procedure child00 begin
   Reply(101);
   NOption(102, child04, 4);
   NOption(103, child11, 5);
   NLowOption(104, child01);
end

procedure child01 begin
   NMessage(105);
   if (current_hp < max_hp) then begin
      hp_injured := max_hp - current_hp;
      call child_heal;
      call child03;
   end
   else begin
      call child02;
   end
end

procedure child02 begin
   NMessage(106);
   call childend;
end

procedure child03 begin
   NMessage(107);
   call childend;
end

procedure child04 begin
   variable LVar0 := 0;
   if (local_var(1) >= 3) then begin
      LVar0 := 5;
      pois_cost := 12;
   end
   else begin
      if (local_var(1) < 2) then begin
         LVar0 := 20;
         pois_cost := 50;
      end
      else begin
         LVar0 := 10;
         pois_cost := 25;
      end
   end
   hp_injured := max_hp - current_hp;
   cost := (hp_injured * LVar0) + pois_cost;
   cheat := 3 * cost / 4;
   if (hp_injured > 0) then begin
      NMessage(108);
   end
   else begin
      NMessage(109);
   end
   if (dude_poison_stat != 0) then begin
      NMessage(110);
   end
   if (RADCOUNT > 50) then begin
      NMessage(111);
   end
   if ((hp_injured > 0) or (dude_poison_stat != 0)) then begin
      Reply(mstr(113) + cost + mstr(114));
      NOption(115, child04a, 3);
      NOption(116, childend, 3);
      NOption(117, child09, 3);
      NOption(mstr(118) + cheat + mstr(119), child05, 3);
   end
end

procedure child04a begin
   if (cost > dude_caps) then begin
      call child08;
   end
   else begin
      call child06;
   end
end

procedure child05 begin
   Reply(120);
   NOption(121, child04a, 3);
   NOption(122, child05a, 3);
end

procedure child05a begin
   set_local_var(5, 1);
   call childend;
end

procedure child06 begin
   if (dude_is_male) then begin
      NMessage(123);
   end
   else begin
      NMessage(124);
   end
   dude_caps_adjust(-cost);
   gfade_out(1);
   gfade_in(1);
   if (hp_injured > 0) then begin
      call child_heal;
   end
   if (dude_poison_stat != 0) then begin
      call child_pois;
   end
   call child07;
end

procedure child07 begin
   NMessage(125);
   call childend;
end

procedure child08 begin
   if (cost > dude_caps) then begin
      cost := dude_caps;
   end
   Reply(126);
   if (dude_caps > 0) then begin
      NOption(127, child06, 3);
   end
   NOption(128, childend, 3);
end

procedure child09 begin
   Reply(129);
   if (dude_caps > 0) then begin
      NOption(130, child09a, 3);
   end
   NOption(131, childend, 3);
end

procedure child09a begin
   if (dude_caps >= cost) then begin
      call child10;
   end
   else begin
      cost := dude_caps;
      call child06;
   end
end

procedure child10 begin
   NMessage(132);
   call child06;
end

procedure child11 begin
   Reply(133);
   NOption(134, childend, 3);
   NOption(135, child12, 3);
end

procedure child12 begin
   Reply(136);
   NOption(137, child14, 3);
   NOption(138, child13, 3);
end

procedure child13 begin
   NMessage(139);
   call childend;
end

procedure child14 begin
   Reply(140);
   NOption(141, childend, 3);
end

procedure child15 begin
   float_msg(self_obj, mstr(142), FLOAT_MSG_LIGHT_RED);//    {142}{}{We have no time to talk. We are leaving. This place is dangerous for us.}
   call childend;
end

procedure child16 begin
   float_msg(self_obj, mstr(143), FLOAT_MSG_LIGHT_RED);//    {143}{}{Why are you doing this? We will do you no harm!}
   call childcbt;
end

procedure damage_p_proc begin
   set_local_var(4, 1);
end

procedure destroy_p_proc begin
   inc_good_critter
end
