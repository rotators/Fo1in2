/*******************************************************************************
        Name : Griffith
        Location : Necropolis
        Description : Motorcycle quest

            Created : by sFall Script Editor
            Updated:

*******************************************************************************/

/* Include Files */
#include "define.h"
#include "necropolis.h"
#include "maps/watrshd.h"
#include "sfall/lib.arrays.h"

#define NAME                    SCRIPT_GRIFFITH
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "command.h"
#include "modreact.h"
#include "updatmap.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure critter_p_proc;
procedure timed_event_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;

procedure NodeUsedBike;
procedure NodeGenQuestions;

procedure Node998;
procedure Node999;

procedure Node1000;
procedure Node1100;
procedure Node1200;
procedure Node1300;
procedure Node1400;
procedure Node1500;
procedure Node1600;
procedure Node1700;
procedure Node1800;
procedure Node1900;
procedure Node2000;
procedure Node2100;
procedure Node2200;
procedure Node2300;
procedure Node2400;

procedure Node3000;
procedure Node3100;
procedure Node3200;

/* Defines */
#define float(x)                    float_msg(self_obj, mstr(x), FLOAT_MSG_BLUE)
#define float_angry(x)              float_msg(self_obj, mstr(x), FLOAT_MSG_RED)

#define set_griffith_dead           set_global_var(GVAR_GRIFFITH_STATE, 1)
#define is_griffith_alive           (global_var(GVAR_GRIFFITH_STATE) == 0)

#define EVENT_WAIT                  (0)
#define EVENT_STOP                  (1)

#define KNOWS_NAME                  bit_1
#define DECLINED_JOB                bit_2
#define ASKED_ABOUT_BIKE            bit_3
#define KNOWS_BIKE_TYPE             bit_4

#define set_state_bit(x)            set_lvar_bit_on(LVAR_States, x)
#define get_state_bit(x)            (lvar_bit(LVAR_States, x))

/*****************************************************************
   Local Variables which are saved.
   All Local Variables need to be prepended by LVAR_
*****************************************************************/
#define LVAR_Hostile                (4)
#define LVAR_Here_Before            (5)
#define LVAR_Home_Tile              (6)
#define LVAR_Home_Rotation          (7)
#define LVAR_States                 (8)

variable Only_Once := 0;

import variable Griffith_Ptr;

/*******************************************************************
*                           PROCEDURES                             *
*******************************************************************/
procedure start begin
   Griffith_Ptr := self_obj;
end

procedure map_enter_p_proc begin
   if (map_first_run) then begin
      set_local_var(LVAR_Home_Tile, self_tile);
      set_local_var(LVAR_Home_Rotation, self_cur_rot);

      set_self_team(TEAM_NECROPOLIS_GANGER);
      set_self_ai(AI_GHOUL);
   end

   // Player has disabled the vehicle feature in the fo1_settings.ini
   if (not(fo1in2_motorcycle_enabled) or not(self_visible)) then
      destroy_object(self_obj);
end

procedure map_update_p_proc begin
end

procedure critter_p_proc begin
   if self_can_see_dude and (local_var(LVAR_Hostile) != 0) then begin
      self_attack_dude;
   end

   if not(combat_is_initialized) then begin
      // Player "used" the bike for the first time
      if (global_var(GVAR_QUEST_MOTORCYCLE) == 1) then begin
         start_dialog_at_node(NodeUsedBike);
      end
      else if (global_var(GVAR_QUEST_MOTORCYCLE) == 3) then begin
         float_angry(501);
         set_local_var(LVAR_Hostile, 1);
      end
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_WAIT) then begin
      game_ui_disable;
      gfade_out(1);
         set_self_invisible;
         set_griffith_dead;
      gfade_in(1);
      add_timer_event(self_obj, game_ticks(1), EVENT_STOP);
   end
   else if (fixed_param == EVENT_STOP) then begin
      gfade_out(1);
         game_time_advance(ONE_GAME_HOUR * random(2, 4));
         critter_attempt_placement(dude_obj, local_var(LVAR_Home_Tile), dude_elevation);
         dude_rotate(local_var(LVAR_Home_Rotation));
         display_msg(mstr(200));
      gfade_in(1);
      game_ui_enable;
      if dude_is_stupid then
         float_msg(dude_obj, mstr(202), FLOAT_MSG_NORMAL);
      else
         float_msg(dude_obj, mstr(201), FLOAT_MSG_NORMAL);

      destroy_object(self_obj);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Here_Before) == 0) then
      display_msg(mstr(101));
   else
      display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Hostile, 1);
   end
end

procedure talk_p_proc begin
   set_tma_necropolis

   dude_look_at_self;

   // Player has the controller and Griffith sees it:
   if (dude_item_count(PID_MOTO_KEY)) then begin
      float_angry(160);
      set_local_var(LVAR_Hostile, 1);
   end

   start_dialog_at_node(Node1000);
end

procedure use_skill_on_p_proc begin
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Hostile, 1);
   end
end

procedure destroy_p_proc begin
   set_griffith_dead;
   inc_good_critter
end

procedure NodeUsedBike begin
   set_global_var(GVAR_QUEST_MOTORCYCLE, 2);

   Reply(500);
   BOption(510, Node998, 004);
   NOption(520, Node999, 004);

   call NodeGenQuestions;
end

procedure NodeGenQuestions begin
   NLowOption(1050, Node3000);

   if not(get_state_bit(KNOWS_NAME)) then
      NOption(1010, Node1100, 004);

   NOption(1020, Node1200, 004);

   if get_state_bit(ASKED_ABOUT_BIKE) then
      NOption(1031, Node2000, 004);
   else
      NOption(1030, Node1900, 004);
end

procedure Node998 begin
   set_local_var(LVAR_Hostile, 1);
end

procedure Node999 begin
end

procedure Node1000 begin
   if get_state_bit(DECLINED_JOB) then begin
      Reply(1002);
      NOption(1040, Node1700, 004);
      if get_state_bit(ASKED_ABOUT_BIKE) then
         NOption(1031, Node2000, 004);
      else
         NOption(1030, Node1900, 004);
   end
   else begin
      if (local_var(LVAR_Here_Before) == 0) then begin
         set_local_var(LVAR_Here_Before, 1);
         Reply(1000);
      end
      else begin
         Reply(1001);
      end

      call NodeGenQuestions;
   end
   NOption(g_bye, Node999, 001);
end

procedure Node1100 begin
   set_state_bit(KNOWS_NAME);

   Reply(1100);
   NOption(1110, Node1200, 004);
   NOption(1120, Node999, 004);
end

procedure Node1200 begin
   Reply(1200);
   NOption(1210, Node1300, 004);
end

procedure Node1300 begin
   Reply(1300);
   NOption(1310, Node1400, 004);
end

procedure Node1400 begin
   Reply(1400);
   NOption(1410, Node1500, 005);
   NOption(1420, Node1800, 004);
end

procedure Node1500 begin
   NMessage(1500);
   Reply(1501);
   NOption(1510, Node1600, 004);
   GOption(1520, Node1700, 004);
end

procedure Node1600 begin
   set_state_bit(DECLINED_JOB);

   Reply(1600);
   GOption(1610, Node1700, 004);
   BOption(1620, Node2200, 004);
end

procedure Node1700 begin
variable PosList;

   PosList := [SEWER_POS_WATRSHED, SEWER_POS_HOTEL,SEWER_POS_HALLDED];
   set_global_var(GVAR_SEWER_KING_POS, array_random_value(PosList));
   debug("sewer king pos: " + global_var(GVAR_SEWER_KING_POS));

   if (global_var(GVAR_SEWER_KING_POS) == SEWER_POS_WATRSHED) then
      call spawn_sewer_king;

   if dude_is_stupid then
      Reply(3300);
   else
      Reply(1700);

   NOption(1710, Node999, 004);
   NLowOption(3310, Node999);

   add_timer_event(self_obj, game_ticks(0), EVENT_WAIT);
end

procedure Node1800 begin
   Reply(1800);
   NOption(1810, Node1500, 005);
   NOption(1820, Node1500, 004);
end

procedure Node1900 begin
   if get_state_bit(ASKED_ABOUT_BIKE) then begin
      call Node2000;
   end
   else begin
      Reply(1900);
      NOption(1910, Node2000, 004);
      NOption(1920, Node2300, 007);
   end
end

procedure Node2000 begin
   set_state_bit(ASKED_ABOUT_BIKE);
   if get_state_bit(KNOWS_BIKE_TYPE) then begin
      call Node2400;
   end
   else begin
      Reply(2000);
      NOption(2010, Node2100, 004);
   end
end

procedure Node2100 begin
   NMessage(2100);
end

procedure Node2200 begin
   BMessage(2200);
end

procedure Node2300 begin
   set_state_bit(KNOWS_BIKE_TYPE);
   Reply(2300);
   call NodeGenQuestions;
end

procedure Node2400 begin
   Reply(2400);
   call NodeGenQuestions;
end

procedure Node3000 begin
   Reply(3000);
   NLowOption(3010, Node3100);
end

procedure Node3100 begin
   Reply(3100);
   NLowOption(3110, Node1700);
   BLowOption(3120, Node3200);
end

procedure Node3200 begin
   Reply(3200);
   BLowOption(3210, Node2200);
   NLowOption(3220, Node1700);
end
