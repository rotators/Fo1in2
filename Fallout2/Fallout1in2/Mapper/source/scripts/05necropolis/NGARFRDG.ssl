/*

   Necropolis - Fridge in the Hall of the Dead

   TODO: Cleanup the locked state variables. Just lazily added obj_(un)lock from Fo2 for now.

*/

#include "define.h"

#define NAME                    SCRIPT_NGARFRDG

#include "command.h"

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure use_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;

procedure Initialize_Fridge;
procedure Looting_Fridge;
procedure Open_Fridge;
procedure pick_lock;

#define LOCKED    0
#define UNLOCKED  1

#define CLOSED    0
#define OPEN      1

#define LVAR_Fridge_Lock     (0)
#define LVAR_Fridge_State    (1)

import variable Garret_ptr;
import variable Fridge_ptr;

variable last_user;

procedure start begin
end

procedure map_enter_p_proc begin
   call Initialize_Fridge;

   if (local_var(LVAR_Fridge_Lock) == LOCKED) then obj_lock(self_obj);
end

procedure map_update_p_proc begin
   Fridge_ptr := self_obj;
end

procedure pickup_p_proc begin
   call Looting_Fridge;
end

procedure use_p_proc begin
   call Open_Fridge;
end

procedure timed_event_p_proc begin
   float_msg(Garret_ptr, mstr(105), FLOAT_MSG_NORMAL);
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);
   
   if (item == PID_LOCKPICKS or item == PID_EXP_LOCKPICK_SET) then begin
      call pick_lock;
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      call pick_lock;
   end
end

procedure Initialize_Fridge begin
   Fridge_ptr := self_obj;
end

procedure Looting_Fridge begin
   if (source_obj != Garret_ptr) then begin
      if (local_var(LVAR_Fridge_Lock) == LOCKED) then begin
         script_overrides;
      end
      else if (local_var(LVAR_Fridge_State) == CLOSED) then begin
         script_overrides;
      end
   end
end

procedure Open_Fridge begin
   last_user := source_obj;
   if (source_obj == Garret_ptr) then begin
      if (local_var(LVAR_Fridge_State) == CLOSED) then begin
         obj_unlock(self_obj);
         //obj_open(self_obj); // is done in GARRET.ssl
         set_local_var(LVAR_Fridge_Lock, UNLOCKED);
         set_local_var(LVAR_Fridge_State, OPEN);
      end
      else if (last_user == Garret_ptr) then begin
         //obj_close(self_obj); // is done in GARRET.ssl
         obj_lock(self_obj);
         set_local_var(LVAR_Fridge_State, CLOSED);
         set_local_var(LVAR_Fridge_Lock, LOCKED);
      end
      else begin
         script_overrides;
         float_msg(Garret_ptr, mstr(104), FLOAT_MSG_NORMAL);
      end
   end
   else begin
      if (local_var(LVAR_Fridge_Lock) == LOCKED) then begin
         //script_overrides;
         display_msg(mstr(100));
      end
      else if (local_var(LVAR_Fridge_State)) then begin
         set_local_var(LVAR_Fridge_State, CLOSED);
      end
      else begin
         set_local_var(LVAR_Fridge_State, OPEN);
      end
   end
end

procedure pick_lock begin
   script_overrides;
   if (local_var(LVAR_Fridge_Lock) == UNLOCKED) then begin
      display_msg(mstr(101));
   end
   else if (is_success(roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0))) then begin
      display_msg(mstr(102));
      obj_unlock(self_obj);
      set_local_var(LVAR_Fridge_Lock, UNLOCKED);
      give_xp(EXP_LOCKPICK_NORMAL);
   end
   else begin
      display_msg(mstr(103));
   end
end

