/*

   Hub - Decker

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_DECKER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */

procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;

procedure PlayerQuestions;
procedure Decker01;
procedure Decker02;
procedure Decker03;
procedure Decker04;
procedure Decker05;
procedure Decker06;
procedure Decker07;
procedure Decker08;
procedure Decker09;
procedure Decker10;
procedure Decker11;
procedure Decker12;
procedure Decker13;
procedure Decker14;
procedure Decker15;
procedure Decker16;
procedure Decker17;
procedure Decker18;
procedure Decker19;
procedure Decker25;
procedure Decker26;
procedure Decker27;
procedure Decker28;
procedure Decker29;
procedure Decker30;
procedure Decker31;
procedure Decker32;
procedure Decker33;
procedure Decker34;
procedure Decker35;
procedure Decker36;
procedure DeckerEndAcceptJob1;
procedure DeckerEndDeclineJob1;
procedure DeckerEndAcceptJob2;
procedure DeckerEndDeclineJob2;
procedure DeckerEndInsult;
procedure DeckerEndNormal;
procedure DeckerTransport;

variable tmp_hostile;
variable Only_Once := 1;
variable travel;

import variable Kane_Ptr;
import variable Decker_Ptr;

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      Decker_Ptr := self_obj;
      if (map_var(50) == 1) then begin
         if not(is_loading_game) then set_self_invisible;
      end
      set_self_team(TEAM_HUB_UNDERGROUND);
      set_self_ai(AI_DECKER);
   end
end

procedure combat begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   if (travel == 1) then begin
      travel := 0;
      call DeckerTransport;
   end
   else begin
      if (tile_distance_objs(self_obj, dude_obj) <= 10) then begin
         dialogue_system_enter;
      end
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, TMA_MSG_DONTKNOW_START, 981);

   dude_look_at_self;
   set_global_var(GVAR_DECKER_KNOWN, 1);
   get_reaction
   if ((map_var(49) == 1) or (map_var(45) != 1)) then begin
      if (map_var(52) == 0) then begin
         float_msg(self_obj, mstr(230), FLOAT_MSG_RED);
         call combat;
      end
      else begin
         float_msg(self_obj, mstr(231), FLOAT_MSG_RED);
         call combat;
      end
   end
   else begin
      set_map_var(45, 0);
      start_gdialog(42, self_obj, 4, 7, 3);
      gsay_start;
      if (local_var(4) == 0) then begin
         set_local_var(4, 1);
         call Decker01;
      end
      else if (global_var(GVAR_KILL_JAIN) == 2) then begin
         call Decker15;
      end
      else if (global_var(GVAR_KILL_MERCHANT) == 2) then begin
         call Decker26;
      end
      gsay_end;
      end_dialogue;
   end
end

procedure destroy_p_proc begin
   inc_evil_critter
   set_map_var(50, 1);
   set_global_var(GVAR_DECKER_STATUS, 1);
   if ((map_var(49) == 1) and (map_var(50) == 1)) then begin
      set_global_var(GVAR_UNDERGROUND_STATUS, 1);
      set_map_var(11, 1);
      set_map_var(44, 1);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure PlayerQuestions begin
   NOption(144, Decker17, 4);
   NOption(145, Decker25, 4);
   NOption(146, DeckerEndNormal, 4);
end

procedure Decker01 begin
   Reply(103);
   NOption(mstr(104) + dude_name + mstr(105), Decker02, 4);
   BOption(106, Decker13, 4);
end

procedure Decker02 begin
   Reply(107);
   NOption(108, Decker03, 4);
   NOption(109, Decker14, 4);
end

procedure Decker03 begin
   Reply(110);
   NOption(111, Decker04, 4);
end

procedure Decker04 begin
   Reply(112);
   NOption(113, Decker05, 4);
   NOption(114, Decker11, 4);
   BOption(115, Decker10, 4);
end

procedure Decker05 begin
   Reply(116);
   NOption(117, Decker06, 4);
   NOption(118, Decker10, 4);
   NOption(119, Decker06, 4);
end

procedure Decker06 begin
   Reply(120);
   NOption(121, Decker07, 4);
end

procedure Decker07 begin
   Reply(122);
   NOption(123, Decker08, 4);
   NOption(124, Decker09, 4);
   NOption(125, Decker10, 4);
end

procedure Decker08 begin
   NMessage(126);
   call DeckerEndAcceptJob1;
end

procedure Decker09 begin
   Reply(127);
   NOption(128, Decker08, 4);
   NOption(129, Decker10, 4);
end

procedure Decker10 begin
   NMessage(130);
   call DeckerEndDeclineJob1;
end

procedure Decker11 begin
   Reply(131);
   NOption(132, Decker10, 4);
   NOption(133, Decker12, 4);
end

procedure Decker12 begin
   NMessage(134);
   call DeckerEndAcceptJob1;
end

procedure Decker13 begin
   Reply(135);
   NOption(mstr(136) + dude_name + mstr(137), Decker02, 4);
   NOption(138, Decker14, 4);
end

procedure Decker14 begin
   BMessage(139);
   call DeckerEndInsult;
end

procedure Decker15 begin
   Reply(140);
   NOption(141, Decker16, 4);
   NOption(142, DeckerEndNormal, 4);
end

procedure Decker16 begin
   Reply(143);
   call PlayerQuestions;
end

procedure Decker17 begin
   Reply(148);
   NOption(149, Decker18, 4);
   NOption(150, Decker16, 4);
end

procedure Decker18 begin
   Reply(151);
   NOption(152, Decker19, 4);
   NOption(153, Decker16, 4);
end

procedure Decker19 begin
   Reply(154);
   NOption(155, Decker16, 4);
end

procedure Decker25 begin
   Reply(167);
   call PlayerQuestions;
end

procedure Decker26 begin
   if (dude_is_male) then begin
      Reply(232);
   end
   else begin
      Reply(233);
   end
   NOption(169, Decker27, 4);
   BOption(170, Decker35, 4);
end

procedure Decker27 begin
   Reply(171);
   NOption(172, Decker28, 4);
   BOption(173, Decker35, 4);
end

procedure Decker28 begin
   Reply(174);
   NOption(175, Decker29, 4);
end

procedure Decker29 begin
   Reply(176);
   NOption(177, Decker30, 4);
   BOption(178, Decker32, 4);
end

procedure Decker30 begin
   UpReact
   Reply(179);
   NOption(180, Decker31, 4);
end

procedure Decker31 begin
   NMessage(181);
   call DeckerEndAcceptJob2;
end

procedure Decker32 begin
   Reply(182);
   NOption(183, Decker33, 4);
   NOption(184, Decker34, 4);
end

procedure Decker33 begin
   Reply(185);
   NOption(186, Decker31, 4);
end

procedure Decker34 begin
   if (dude_is_male) then begin
      BMessage(234);
   end
   else begin
      BMessage(235);
   end
   call DeckerEndDeclineJob2;
end

procedure Decker35 begin
   Reply(188);
   NOption(189, Decker36, 4);
   NOption(190, Decker28, 4);
end

procedure Decker36 begin
   BMessage(191);
   call DeckerEndDeclineJob2;
end

procedure DeckerEndAcceptJob1 begin
   set_map_var(46, 2);
   set_global_var(GVAR_KILL_MERCHANT, 1);
   travel := 1;
end

procedure DeckerEndDeclineJob1 begin
   set_map_var(46, 1);
   set_map_var(11, 1);
   set_global_var(GVAR_KILL_MERCHANT, 0);
   travel := 1;
end

procedure DeckerEndAcceptJob2 begin
   set_map_var(47, 3);
   set_global_var(GVAR_KILL_JAIN, 1);
   travel := 1;
end

procedure DeckerEndDeclineJob2 begin
   set_map_var(47, 2);
   set_map_var(11, 1);
   set_global_var(GVAR_KILL_JAIN, 0);
   travel := 1;
end

procedure DeckerEndInsult begin
   set_map_var(46, 1);
   set_map_var(11, 1);
   set_map_var(44, 1);
   travel := 1;
end

procedure DeckerEndNormal begin
   travel := 1;
end

procedure DeckerTransport begin
   gfade_out(1);
      move_to(Kane_Ptr, 24336, 0);
      move_to(dude_obj, 23736, 0);
      obj_rotate(Kane_Ptr, rotation_to_tile(tile_num(Kane_Ptr), dude_tile));
      dude_rotate(rotation_to_tile(dude_tile, tile_num(Kane_Ptr)));
   gfade_in(1);
end
