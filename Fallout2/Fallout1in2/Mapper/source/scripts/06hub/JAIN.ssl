/*

   Hub - Jain, the CoC healer

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_JAIN
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;

procedure Jain00;
procedure Jain01;
procedure Jain02;
procedure Jain03;
procedure Jain04;
procedure Jain05;
procedure Jain06;
procedure Jain07;
procedure Jain08;
procedure Jain09;
procedure Jain10;
procedure Jain11;
procedure Jain12;
procedure Jain13;
procedure Jain14;
procedure Jain15;
procedure Jain16;
procedure Jain17;
procedure Jain18;
procedure Jain19;
procedure Jain20;
procedure Jain21;
procedure Jain22;
procedure Jain23;
procedure Jain24;
procedure Jain25;
procedure Jain26;
procedure Jain27;
procedure Jain28;
procedure Jain29;
procedure Jain30;
procedure Jain31;
procedure Jain32;
procedure Jain33;
procedure Jain34;
procedure Jain35;
procedure Jain36;
procedure Jain37;
procedure Jain38;
procedure Jain39;
procedure JainEnd;
procedure JainEndCombat;

variable tmp_hostile;
variable Only_Once := 1;

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_HUB_CATHEDRAL);
      set_self_ai(AI_COC_HUB_BRAINWASHED);
   end
end

procedure combat begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   if ((map_var(6) == 1) and (self_can_see_dude)) then begin
      call combat;
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, 188, 188);

   dude_look_at_self;
   get_reaction

   start_gdialog(46, self_obj, 4, 18, 3);
   gsay_start;
   if (map_var(0) == 1) then begin
      call Jain29;
   end
   else if cathedral_destroyed then begin
      call Jain30;
   end
   else if (local_var(4) == 0) then begin
      set_local_var(4, 1);
      call Jain00;
   end
   else if (local_var(1) >= 2) then begin
      call Jain27;
   end
   else begin
      call Jain29;
   end
   gsay_end;
   end_dialogue;
end

procedure destroy_p_proc begin
   inc_inv_evil_crit
   set_global_var(GVAR_KILL_JAIN, 2);
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_map_var(6, 1);
   end
end

procedure Jain00
begin
   Reply(101);
   NOption(102, Jain04, 4);
   NOption(103, Jain07, 4);
   NOption(104, Jain10, 4);
   NLowOption(105, Jain02);
end

procedure Jain01
begin
   Reply(106);
   NLowOption(107, Jain03);
   NLowOption(108, Jain02);
end

procedure Jain02
begin
   BMessage(109);
   call JainEndCombat;
end

procedure Jain03
begin
   set_map_var(0, 1);
   NMessage(110);
end

procedure Jain04
begin
   Reply(111);
   NOption(112, Jain05, 4);
   NOption(113, Jain03, 4);
end

procedure Jain05
begin
   set_map_var(0, 1);
   BMessage(114);
end

procedure Jain06
begin
end

procedure Jain07
begin
   Reply(115);
   NOption(116, Jain10, 4);
   NOption(117, Jain09, 4);
   BOption(118, Jain08, 4);
   NOption(119, JainEnd, 4);
end

procedure Jain08
begin
   BMessage(120);
   call JainEndCombat;
end

procedure Jain09
begin
   BigDownReact
   BMessage(121);
   call JainEndCombat;
end

procedure Jain10
begin
   Reply(122);
   GOption(123, Jain11, 4);
   BOption(124, Jain26, 4);
   NOption(125, Jain20, 4);
end

procedure Jain11
begin
   UpReact
   Reply(126);
   BOption(127, Jain17, 4);
   NOption(128, Jain13, 4);
   NOption(129, Jain12, 4);
end

procedure Jain12
begin
   set_map_var(0, 1);
   Reply(130);
   NOption(131, JainEnd, 4);
   BOption(132, JainEndCombat, 4);
end

procedure Jain13
begin
   Reply(133);
   NOption(134, Jain14, 4);
   BOption(135, Jain15, 4);
end

procedure Jain14
begin
   Reply(136);
   GOption(137, Jain20, 4);
   BOption(138, Jain09, 4);
   BOption(139, Jain15, 4);
end

procedure Jain15
begin
   DownReact
   NMessage(140);
end

procedure Jain16
begin
end

procedure Jain17
begin
   Reply(141);
   BOption(142, Jain18, 4);
   NOption(143, Jain19, 4);
end

procedure Jain18
begin
   DownReact
   BMessage(144);
end

procedure Jain19
begin
   Reply(145);
   NOption(146, Jain13, 4);
   NOption(147, JainEnd, 4);
end

procedure Jain20
begin
   UpReact
   Reply(148);
   NOption(149, Jain21, 4);
   NOption(150, Jain22, 4);
end

procedure Jain21
begin
   Reply(151);
   NOption(152, Jain38, 4);
   BOption(153, JainEndCombat, 4);
   NOption(154, Jain37, 4);
   NOption(155, JainEnd, 4);
end

procedure Jain22
begin
   Reply(156);
   NOption(157, Jain37, 4);
   BOption(158, Jain15, 4);
   NOption(159, JainEnd, 4);
end

procedure Jain23
begin
end

procedure Jain24
begin
end

procedure Jain25
begin
end

procedure Jain26
begin
   BigDownReact
   Reply(160);
   NOption(161, Jain19, 4);
   NOption(162, JainEndCombat, 4);
end

procedure Jain27
begin
   Reply(163);
   NOption(164, Jain36, 4);
   BOption(165, Jain28, 4);
   NOption(166, JainEnd, 4);
   NLowOption(167, Jain39);
   NLowOption(168, Jain34);
end

procedure Jain28
begin
   BigDownReact
   set_map_var(0, 1);
   NMessage(169);
end

procedure Jain29
begin
   NMessage(170);
end

procedure Jain30
begin
   Reply(171);
   NOption(172, Jain31, 4);
   NOption(173, Jain32, 4);
   NLowOption(174, Jain39);
   NLowOption(175, JainEnd);
end

procedure Jain31
begin
   BMessage(176);
   call JainEndCombat;
end

procedure Jain32
begin
   Reply(177);
   NOption(178, Jain33, 4);
   NOption(179, JainEnd, 4);
end

procedure Jain33
begin
   NMessage(180);
end

procedure Jain34
begin
   set_map_var(0, 1);
   BMessage(181);
end

procedure Jain35
begin
   set_map_var(0, 1);
   BMessage(182);
end

procedure Jain36
begin
   Reply(183);
   NOption(184, Jain14, 4);
   NOption(185, JainEnd, 4);
end

procedure Jain37
begin
   UpReact
   GMessage(186);
end

procedure Jain38
begin
   NMessage(187);
end

procedure Jain39
begin
   NMessage(188);
end

procedure JainEnd
begin
end

procedure JainEndCombat
begin
   BottomReact
   set_map_var(0, 1);
   call combat;
end
