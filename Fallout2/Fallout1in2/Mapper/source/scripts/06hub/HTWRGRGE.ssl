/*

   Hub - Hightower / door guard

*/

/* Include Files */
#include "define.h"
#include "maps/hubheigt.h"

#define NAME                    SCRIPT_HTWRGRGE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure combat;
procedure critter_p_proc;
procedure timed_event_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;

procedure George01;
procedure George01a;
procedure George01b;
procedure George02;
procedure George02a;
procedure George03;
procedure George04;
procedure George05;
procedure George06;
procedure George07;
procedure George08;
procedure GeorgeEnd;

import variable George_ptr;

variable tmp_hostile;
variable Only_Once := 1;
variable lastTraverse;
variable currentLocation;
variable hereBefore;
variable visible := 1;

#define LVAR_Investigate            (4)

#define door_hex           (22529)
#define step_away_hex      (19516)
#define investigate_hex    (24916)

procedure start begin
   George_ptr := self_obj;

   if Only_Once then begin
      Only_Once := 0;
      set_map_var(MVAR_Let_Player_Through, 0);
      if (global_var(GVAR_KILL_MERCHANT) == 5) then begin
         if not(is_loading_game) then set_self_invisible;
         visible := 0;
         set_map_var(MVAR_Let_Player_Through, 1);
      end
      set_self_team(TEAM_HUB_HEIGHTS);
      set_self_ai(AI_GUARD_SADISTIC);
   end
end

procedure combat begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (visible == 0) then begin
      script_overrides;
   end
   else begin
      if (tmp_hostile) then begin
         tmp_hostile := 0;
         attack(dude_obj);
      end
      if (map_var(MVAR_Hightower_Hostile) == 1) then begin
         if (/*(self_can_hear_dude) or*/ (self_can_see_dude)) then begin
            call combat;
         end
      end
      else begin
         if (local_var(LVAR_Investigate) == 1) then begin
            self_run_to_tile(investigate_hex);
            if (self_tile == investigate_hex) then begin
               set_local_var(LVAR_Investigate, 0);
            end
         end
         else begin
            if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
               if (/*(self_can_hear_dude) or*/ (self_can_see_dude)) then begin
                  dialogue_system_enter;
               end
               else begin
                  if ((global_var(GVAR_KILL_MERCHANT) == 1) or (global_var(GVAR_STEAL_NECKLACE) == 1)) then begin
                     set_map_var(MVAR_Let_Player_Through, 1);
                     if (((game_time / 10) - lastTraverse) >= 20) then begin
                        lastTraverse := game_time / 10;
                        if (currentLocation == 0) then begin
                           currentLocation := 1;
                           self_walk_to_tile(step_away_hex);
                        end
                        else begin
                           currentLocation := 0;
                           self_walk_to_tile(door_hex);
                        end
                     end
                  end
                  else begin
                     if (self_tile != door_hex) then begin
                        self_walk_to_tile(door_hex);
                     end
                  end
               end
            end
            else begin
               if (self_tile != door_hex) then begin
                  self_walk_to_tile(door_hex);
               end
               if (map_var(MVAR_Player_Tried_Door) == 1) then begin
                  dialogue_system_enter;
               end
            end

         end
      end
   end
end

procedure timed_event_p_proc begin
   set_local_var(LVAR_Investigate, 1);
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   set_tma_data_generic(TMA_MSG_HUBHEIGT);

   dude_look_at_self;
   get_reaction
   if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
      float_msg(self_obj, mstr(118), FLOAT_MSG_RED);
      call combat;
   end
   else begin
      if (global_var(GVAR_ENEMY_HUB) == 1) then begin
         float_msg(self_obj, mstr(120), FLOAT_MSG_RED);
         call combat;
      end
      else if (map_var(MVAR_Player_Tried_Door) == 1) then begin
         set_map_var(MVAR_Player_Tried_Door, 0);
         call George08;
      end
      else begin
         if (hereBefore == 0) then begin
            hereBefore := 1;
            start_dialog_at_node(George01);
         end
         else begin
            call George07;
         end
      end
   end
end

procedure destroy_p_proc begin
   set_map_var(MVAR_George_Dead, 1);
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure damage_p_proc begin
   set_map_var(MVAR_Hightower_Hostile, 1);
end

procedure George01 begin
   Reply(101);
   NOption(103, George01a, 4);
   NOption(104, George01b, 4);
   NOption(105, George06, 4);
   NLowOption(102, George06);
end

procedure George01a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call George03;
   end
   else begin
      call George02;
   end
end

procedure George01b begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 10))) then begin
      call George05;
   end
   else begin
      call George02;
   end
end

procedure George02 begin
   Reply(106);
   NOption(107, George02a, 4);
   NOption(108, George06, 4);
   NOption(109, George03, 4);
   NOption(110, GeorgeEnd, 4);
end

procedure George02a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call George03;
   end
   else begin
      call George06;
   end
end

procedure George03 begin
   set_map_var(MVAR_Let_Player_Through, 1);
   NMessage(111);
end

procedure George04 begin
   BMessage(112);
end

procedure George05 begin
   set_map_var(MVAR_Let_Player_Through, 1);
   NMessage(113);
end

procedure George06 begin
   BMessage(114);
end

procedure George07 begin
   float_msg(self_obj, mstr(random(114, 117)), FLOAT_MSG_RED);
end

procedure George08 begin
   float_msg(self_obj, mstr(119), FLOAT_MSG_RED);
end

procedure GeorgeEnd begin
end
