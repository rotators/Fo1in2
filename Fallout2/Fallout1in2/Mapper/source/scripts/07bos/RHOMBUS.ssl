/*

   Rhombus - Brotherhood of Steel

*/

/* Include Files */
#include "define.h"
#include "brotherhood.h"
#include "maps/brohd12.h"

#define NAME                    SCRIPT_RHOMBUS
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BOS)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;

procedure timeforwhat;

procedure rhombus00;
procedure rhombus01;
procedure rhombus02;
procedure rhombus03;
procedure rhombus03_01;
procedure rhombus04;
procedure rhombus05;
procedure rhombus06;
procedure rhombus06a;
procedure rhombus07;
procedure rhombus08;
procedure rhombus09;
procedure rhombus09_1;
procedure rhombus10;
procedure rhombus11;
procedure rhombus12;
procedure rhombus13;
procedure rhombus14;
procedure rhombus15;
procedure rhombus16;
procedure rhombus17;
procedure rhombus18;
procedure rhombus19;
procedure rhombus20;
procedure rhombus21;
procedure rhombus22;
procedure rhombus22a;
procedure rhombus23;
procedure rhombus24;
procedure rhombus25;
procedure rhombus26;
procedure rhombus27;
procedure rhombus27_1;
procedure rhombus28;
procedure rhombus28_1;
procedure rhombus28_2;
procedure rhombus29;
procedure rhombus30;
procedure rhombus31;
procedure rhombus32;
procedure rhombus33;
procedure rhombus34;
procedure rhombus35;
procedure rhombus37;
procedure rhombus38;
procedure rhombus39;
procedure rhombus39_1;
procedure rhombus40;
procedure rhombus41;
procedure rhombus42;
procedure rhombus43;
procedure rhombus44;
procedure rhombus45;
procedure rhombus46;
procedure rhombus47;
procedure rhombus48;
procedure rhombus49;
procedure rhombus51;
procedure rhombus51a;
procedure rhombus52;
procedure rhombus53;
procedure rhombus54;
procedure rhombus55;
procedure rhombus56;
procedure rhombusx;
procedure rhombusx1;
procedure rhombusx2;
procedure rhombusok;

procedure anger;
procedure annoyed;
procedure combat;
procedure kickout;
procedure Remove_Player;

#define LVAR_Move_to       (7)

import variable locker_ptr;

variable MAD;
variable Q1;
variable Q2;
variable Q4;

variable VATS;
variable tmp_hostile;
variable ILLEGAL;
variable Only_Once := 1;
variable here;
variable conmod;
variable loot;
variable sense;
variable denounce;
variable Test;

#define foreroom_hex    (22123)
#define store_room_hex  (23928)
#define bedroom_hex     (23920)

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_BROTHERHOOD);
      set_self_ai(AI_BOS_RHOMBUS);
   end
end

procedure timed_event_p_proc begin
   call timeforwhat;
end

procedure rhombus01 begin
   Reply(105);
   NOption(106, rhombus02, 4);
   BOption(107, rhombus03, 4);
   NLowOption(108, rhombus32);
end

procedure rhombus02 begin
   Reply(109);
   call rhombus00;
end

procedure rhombus03 begin
   DownReact
   Reply(110);
   NOption(111, rhombus03_01, 4);
   BOption(112, rhombus05, 4);
end

procedure rhombus03_01 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -10))) then begin
      call rhombus04;
   end
   else begin
      call rhombus06;
   end
end

procedure rhombus04 begin
   Reply(113);
   NOption(114, rhombus02, 4);
   BOption(115, rhombus05, 4);
end

procedure rhombus05 begin
   BMessage(116);
   call rhombusx1;
end

procedure rhombus06 begin
   call anger;
end

procedure rhombus06a begin
   DownReact
   call rhombus06;
end

procedure rhombus07 begin
   Q1 := Q1 + 1;

   if (Q1 > 4) then begin
      call anger;
   end
   else if (Q1 > 3) then begin
      call annoyed;
   end
   else if (Q1 > 1) then begin
      NMessage(179);
   end

   Reply(118);
   NOption(119, rhombus08, 4);
   NOption(120, rhombus12, 4);
   NOption(121, rhombus19, 6);
end

procedure rhombus08 begin
   Reply(122);
   NOption(123, rhombus09, 5);
   NOption(124, rhombus17, 6);
   BOption(125, rhombus18, 4);
end

procedure rhombus09 begin
   Reply(126);
   NOption(127, rhombus09_1, 5);
   NOption(128, rhombus04, 5);
end

procedure rhombus09_1 begin
   if dude_is_male then begin
      call rhombus11;
   end
   else begin
      if (is_success(do_check(dude_obj, STAT_ch, -1))) then begin
         call rhombus10;
      end
      else begin
         call rhombus11;
      end
   end
end

procedure rhombus10 begin
   set_local_var(6, 1);
   Reply(129);
   BOption(130, rhombus06a, 5);
   NOption(131, rhombus02, 5);
end

procedure rhombus11 begin
   Reply(132);
   BOption(133, rhombus06a, 5);
   NOption(134, rhombus02, 5);
end

procedure rhombus12 begin
   Reply(135);
   BOption(136, rhombus03, 4);
   NOption(137, rhombus13, 4);
end

procedure rhombus13 begin
   Reply(138);
   NOption(139, rhombus14, 5);
   BOption(140, rhombus03, 4);
   NOption(141, rhombus02, 4);
end

procedure rhombus14 begin
   Reply(142);
   NOption(143, rhombus15, 5);
   BOption(144, rhombus03, 5);
end

procedure rhombus15 begin
   Reply(145);
   NOption(146, rhombus02, 5);
   NOption(147, rhombus16, 5);
end

procedure rhombus16 begin
   NMessage(148);
end

procedure rhombus17 begin
   Reply(149);
   BOption(150, rhombus03, 4);
   NOption(151, rhombus12, 4);
   NOption(152, rhombus02, 4);
end

procedure rhombus18 begin
   NMessage(153);
   call rhombusx1;
end

procedure rhombus19 begin
   Reply(154);
   NOption(155, rhombus20, 5);
   NOption(156, rhombus13, 4);
end

procedure rhombus20 begin
   Reply(157);
   NOption(158, rhombus02, 5);
end

procedure rhombus21 begin
   Q2 := Q2 + 1;

   if (Q2 > 4) then begin
      call anger;
   end
   else if (Q2 > 3) then begin
      call annoyed;
   end
   else if (Q2 == 2) then begin
      NMessage(180);
   end
   else if (Q2 == 3) then begin
      NMessage(179);
   end

   NMessage(159);
   call rhombus00;
end

procedure rhombus22 begin
   if (local_var(6) == 0) then begin
      call rhombus22a;
   end
   else begin
      call annoyed;
   end
end

procedure rhombus22a begin
   Reply(160);
   NOption(161, rhombus09_1, 4);
   NOption(162, rhombus00, 4);
end

procedure rhombus23 begin
   Q4 := Q4 + 1;
   if (Q4 > 4) then begin
      call anger;
   end
   else begin
      if (Q4 > 3) then begin
         call annoyed;
      end
      else begin
         if (global_var(GVAR_WORLDMAPLIST_THE_HUB) == 0) then
            set_global_var(GVAR_WORLDMAPLIST_THE_HUB, 1);
         mark_on_map(AREA_HUB)

         if (global_var(GVAR_WORLDMAPLIST_BONEYARD) == 0) then
            set_global_var(GVAR_WORLDMAPLIST_BONEYARD, 1);
         mark_on_map(AREA_BONEYARD)

         if (Q4 == 2) then begin
            NMessage(180);
         end
         else begin
            if (Q4 == 3) then begin
               NMessage(179);
            end
         end
         NMessage(163);
         call rhombus00;
      end
   end
end

procedure rhombus24 begin
   DownReact
   NMessage(164);
end

procedure rhombus25 begin
   DownReact
   NMessage(165);
   call rhombusx1;
end

procedure rhombus26 begin
   DownReact
   NMessage(166);
end

procedure rhombus27 begin
   DownReact
   Reply(167);
   NOption(168, rhombus27_1, 4);
   NOption(169, rhombusx1, 4);
end

procedure rhombus27_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call rhombus28;
   end
   else begin
      call rhombus30;
   end
end

procedure rhombus28 begin
   Reply(170);
   NOption(171, rhombus28_1, 4);
   NOption(172, rhombus28_2, 4);
end

procedure rhombus28_1 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -25))) then begin
      call rhombus29;
   end
   else begin
      call rhombus30;
   end
end

procedure rhombus28_2 begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -15))) then begin
      call rhombus29;
   end
   else begin
      call rhombus30;
   end
end

procedure rhombus29 begin
   Reply(173);
   NOption(174, rhombusx2, 4);
   BOption(175, rhombus05, 4);
end

procedure rhombus30 begin
   NMessage(176);
   call rhombusx1;
end

procedure rhombus31 begin
   call rhombusx1;
end

procedure rhombus32 begin
   NMessage(177);
end

procedure rhombus33 begin
   NMessage(178);
end

procedure rhombus35 begin
   NMessage(180);
end

procedure rhombus37 begin
   NMessage(182);
end

procedure rhombus38 begin
   NMessage(183);
end

procedure rhombus39 begin
   NMessage(184);
end

procedure rhombus40 begin
   NMessage(186);
end

procedure rhombus41 begin
   NMessage(187);
end

procedure rhombus42 begin
   NMessage(188);
end

procedure rhombus43 begin
   NMessage(189);
end

procedure rhombus44 begin
   NMessage(190);
end

procedure rhombus45 begin
   NMessage(191);
end

procedure rhombus46 begin
   NMessage(192);
end

procedure rhombus47 begin
   NMessage(193);
end

procedure rhombus48 begin
   NMessage(194);
end

procedure rhombus51 begin
   Reply(170);
   NOption(172, rhombus51a, 4);
   BOption(201, rhombus54, 4);
   GOption(200, rhombus52, 7);
   BLowOption(108, rhombus54);
end

procedure rhombus51a begin
   Test := roll_vs_skill(dude_obj, SKILL_SPEECH, conmod);
   if (is_success(Test)) then begin
      call rhombus52;
   end
   else begin
      call rhombus53;
   end
end

procedure rhombus52 begin
   Reply(173);
   NOption(202, rhombusok, 4);
   BOption(203, rhombus54, 4);
end

procedure rhombus53 begin
   BMessage(176);
   call kickout;
end

procedure rhombus54 begin
   BMessage(165);
   call kickout;
end

procedure rhombus55 begin
   Reply(167);
   BOption(168, rhombus56, 4);
   BLowOption(108, rhombus56);
end

procedure rhombus56 begin
   Test := roll_vs_skill(dude_obj, SKILL_SPEECH, conmod);
   if (is_critical(Test)) then begin
      call combat;
   end
   else begin
      call kickout;
   end
end

procedure rhombusx begin
end

procedure rhombusx1 begin
   call combat;
end

procedure rhombusx2 begin
end

procedure rhombusok begin
   critter_attempt_placement(dude_obj, 22123, 0);
end

procedure anger begin
   DownReact
   MAD := MAD + 1;
   if (MAD == 1) then begin
      BMessage(182);
   end
   else if (MAD == 2) then begin
      BMessage(117);
   end
   else if (MAD == 3) then begin
      BMessage(177);
      call kickout;
   end
end

procedure annoyed begin
   DownReact
   BMessage(181);
end

procedure combat begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (global_var(GVAR_ENEMY_BROTHERHOOD)) then begin
      tmp_hostile := 1;
   end
   if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
      tmp_hostile := 0;
   end
   if (tmp_hostile) then begin
      set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin

      if (self_can_see_dude and (ILLEGAL == 0)) then begin
         here := dude_tile;

         if (tile_distance(here, 24130) < 6) then begin
            ILLEGAL := 1;
         end
         else if (tile_distance(here, 24322) < 6) then begin
            ILLEGAL := 1;
         end

         if (map_var(MVAR_TOUCHING) > 0) then begin
            ILLEGAL := 1;
            set_map_var(MVAR_TOUCHING, 0);
         end
         else if ((self_tile == 22123) and (tile_distance(here, 22930) < 3)) then begin
            float_msg(self_obj, mstr(209), FLOAT_MSG_GREEN);
         end

         if (ILLEGAL) then begin
            loot := 0;
            loot := dude_item(PID_MOTIVATOR);
            if (loot) then begin
               rm_obj_from_inven(dude_obj, loot);
               add_obj_to_inven(locker_ptr, loot);
               display_msg(mstr(207));
            end
            set_local_var(5, local_var(5) + 1);
            dialogue_system_enter;
         end

      end
      else begin
         if ((local_var(LVAR_Move_to) == 1) and (self_tile != foreroom_hex)) then begin
            self_walk_to_tile(foreroom_hex);
         end
         else if ((local_var(LVAR_Move_to) == 2) and (self_tile != store_room_hex)) then begin
            self_walk_to_tile(store_room_hex);
         end
         else if (local_var(LVAR_Move_to) == 3) then begin
            if (local_var(5) > 0) then begin
               sense := 0;
            end
            else begin
               sense := 1;
            end
            if (map_var(MVAR_TOUCHING) > sense) then begin
               float_msg(self_obj, mstr(206), FLOAT_MSG_GREEN);
               set_map_var(MVAR_TOUCHING, 0);
               set_local_var(LVAR_Move_to, 2);
               add_timer_event(self_obj, game_ticks(30), 1);
            end
            else if (self_tile != bedroom_hex) then begin
               self_walk_to_tile(bedroom_hex);
            end
         end
         //else begin
         if (map_var(MVAR_TOUCHING) == 0) then begin
            if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
               if (local_var(8) == 0) then begin
                  set_local_var(8, 1);
                  set_local_var(LVAR_Move_to, 3);
               end
            end
            else if (local_var(8) == 1) then begin
               set_local_var(8, 0);
               set_local_var(LVAR_Move_to, 1);
            end
         end
      end
   end
end

procedure pickup_p_proc begin
   if source_obj == dude_obj then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, TMA_MSG_DONTKNOW_START, TMA_MSG_DONTKNOW_END);

   dude_look_at_self;
   start_gdialog(56, self_obj, 4, 20, 5);
   get_reaction
   gsay_start;

   if (ILLEGAL) then begin
      ILLEGAL := 0;
      conmod := (dude_charisma - 5) * 10;
      if (local_var(5) == 1) then begin
         call rhombus51;
      end
      else begin
         call rhombus55;
      end
   end
   else begin
      if (MAD) then begin
         if (MAD < 3) then begin
            call anger;
         end
         else begin
            call rhombus05;
         end
      end
      else begin
         call rhombus01;
      end
   end
   gsay_end;
   end_dialogue;
   if (denounce == 1) then begin
      call Remove_Player;
   end
end

procedure destroy_p_proc begin
   // There is nobody else but dude_obj to kill her!
   // This will also prevent the dynamite-exploit.
   //if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
   //end
   inc_good_critter
   set_global_var(GVAR_RHOMBUS_STATUS, 1);
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure timeforwhat begin
   if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
      if (local_var(LVAR_Move_to) == 2) then begin
         set_local_var(LVAR_Move_to, 3);
      end
   end
end

procedure kickout begin
   denounce := 1;
end

// Player gets kicked out from the Brotherhood
procedure Remove_Player begin
   set_dude_kicked_out;
end

procedure rhombus00 begin
   gsay_reply(0, 0);
   NOption(101, rhombus07, 4);
   NOption(102, rhombus21, 4);
   if (local_var(6) == 0) then begin
      NOption(103, rhombus22, 4);
   end
   NOption(104, rhombus23, 4);
   NOption(174, rhombusx, 4);
end

procedure rhombus34 begin
   NMessage(179);
end

procedure rhombus39_1 begin
   NMessage(185);
end

procedure rhombus49 begin
   NMessage(195);
end
