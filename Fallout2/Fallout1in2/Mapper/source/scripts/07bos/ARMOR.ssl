/*

   Brotherhood of Steel - Damaged Power Armor

*/

/* Include Files */
#include "define.h"

#define NAME                    SCRIPT_ARMOR

#include "command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure pickup_p_proc;
procedure look_at_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;

procedure repair_pa;
procedure chance;
procedure fixed;
procedure failure;

variable Test;
variable RepairBonus := 0;

procedure start begin
end

procedure use_p_proc begin
   if source_obj == dude_obj then begin
      display_msg(mstr(101));
   end
end

procedure pickup_p_proc begin
   call use_p_proc;
end

procedure look_at_p_proc begin
   display_msg(mstr(100));
end

procedure use_skill_on_p_proc begin
   script_overrides;
   if (action_being_used == SKILL_REPAIR) then begin
      call repair_pa;
   end
   else begin
      display_msg(mstr(105));
   end
end

procedure use_obj_on_p_proc begin
variable item := obj_pid(obj_being_used_with);

   script_overrides;
   dude_anim_magic_hands;

   if (item == PID_MULTI_TOOL or item == PID_SUPER_TOOL_KIT) then begin
      RepairBonus := 10;
      call repair_pa;
   end
   else begin
      display_msg(mstr(105));
   end
end

procedure repair_pa begin
   if (global_var(GVAR_BROTHER_BUILD_POWER_ARMOR) > 1) then begin
      if (global_var(GVAR_BROTHER_BUILD_POWER_ARMOR) == 3) then begin
         if (has_skill(dude_obj, SKILL_REPAIR) < 75) then begin
            display_msg(mstr(103));
         end
         else
            call chance;
      end
      else
         call chance;
   end
   else begin
      display_msg(mstr(102));
   end
end

procedure chance begin
   Test := roll_vs_skill(dude_obj, SKILL_REPAIR, RepairBonus);
   if (is_success(Test)) then begin
      call fixed;
   end
   else begin
      call failure;
   end
end

procedure fixed begin
   script_overrides;

   set_global_var(GVAR_BROTHER_BUILD_POWER_ARMOR, 4);
   display_msg(mstr(104));
   create_object(PID_POWERED_ARMOR, 22475, 0);

   give_xp_msg(EXP_REPAIR_PA, mstr(108));

   destroy_object(self_obj);
end

procedure failure begin
   script_overrides;

   set_global_var(GVAR_BROTHER_BUILD_POWER_ARMOR, 3);
   display_msg(mstr(106));
end
