/*

        Boneyard, Tine - Merchant inventory container
        This script covers two different containers!

*/

/* Include Files */
#include "define.h"
#include "boneyard.h"

#define NAME                    SCRIPT_ADYSTORE

#include "command.h"

#define LVAR_RESTOCK_TIME                       (0)

procedure start;
procedure map_update_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;

procedure inv_table_1;
procedure inv_table_2;

import variable AdyStor1_ptr;
import variable AdyStor2_ptr;
import variable Tine_barter;

#define table_upper_hex     (12315)
#define table_lower_hex     (13115)

procedure start begin
end

procedure map_update_p_proc begin
   if (self_tile == table_upper_hex) then begin // Upper table
      AdyStor1_ptr := self_obj;
   end
   else if (self_tile == table_lower_hex) then begin // Lower table
      AdyStor2_ptr := self_obj;
   end
end

procedure map_enter_p_proc begin
   if (self_tile == table_upper_hex) then
      AdyStor1_ptr := self_obj;
   else if (self_tile == table_lower_hex) then
      AdyStor2_ptr := self_obj;

   if (self_obj == AdyStor1_ptr) then
      call inv_table_1;
   else
      call inv_table_2;
end

procedure use_p_proc begin
   script_overrides;
   if (self_tile == table_upper_hex) then
      Tine_barter := 1;
   else if (self_tile == table_lower_hex) then
      Tine_barter := 2;
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_STEAL) then begin
      if (not(is_success(roll_vs_skill(source_obj, action_being_used, 0)))) then begin
         script_overrides;
         Tine_barter := -1;
      end
   end
end

procedure inv_table_1 begin
   // Fo2-style merchant inventory:
   if not(fo1in2_merch_restock_disabled) then begin
      if (is_loading_game == false) then begin
         if (local_var(LVAR_RESTOCK_TIME) < game_time) then begin
            self_caps_adjust(random(50, 300) - self_caps);

            check_restock_item(PID_STIMPAK, 2, 5, 100)
            check_restock_item(PID_DYNAMITE, 0, 2, 100)
            check_restock_item(PID_FLARE, 1, 4, 100)
            check_restock_item(PID_PLASTIC_EXPLOSIVES, 1, 3, 100)

            check_restock_item(PID_BEER, 1, 4, 60)
            check_restock_item(PID_BOOZE, 1, 2, 60)

            set_local_var(LVAR_RESTOCK_TIME, (random(1, 2) * ONE_GAME_DAY) + game_time);
         end
      end
   end

   // Fo1-style merchant inventory:
   else if (local_var(LVAR_RESTOCK_TIME) == 0) then begin
      set_local_var(LVAR_RESTOCK_TIME, 1);

      give_pid_qty(self_obj, PID_BOTTLE_CAPS, 70)

      give_pid_qty(self_obj, PID_BEER, 4)
      give_pid_qty(self_obj, PID_BOOZE, 3)

      give_pid_qty(self_obj, PID_STIMPAK, 5)
      give_pid_qty(self_obj, PID_DYNAMITE, 2)
      give_pid_qty(self_obj, PID_FLARE, 4)
      give_pid_qty(self_obj, PID_PLASTIC_EXPLOSIVES, 3)
   end
end

procedure inv_table_2 begin
   // Fo2-style merchant inventory:
   if not(fo1in2_merch_restock_disabled) then begin
      if (is_loading_game == false) then begin
         if (local_var(LVAR_RESTOCK_TIME) < game_time) then begin

            check_restock_item(PID_223_FMJ, 1, 3, 100)
            check_restock_item(PID_45_CALIBER_AMMO, 1, 6, 100)
            check_restock_item(PID_7_62MM_AMMO, 0, 2, 25)
            check_restock_item(PID_FLAMETHROWER_FUEL, 1, 3, 100)
            check_restock_item(PID_PLASMA_GRENADE, 1, 3, 100)
            check_restock_item(PID_NUKA_COLA, 2, 5, 100)

            if get_blades_attack_finished then
               check_restock_item(PID_GREASE_GUN, 1, 1, 50)

            set_local_var(LVAR_RESTOCK_TIME, (random(1, 2) * ONE_GAME_DAY) + game_time);
         end
      end
   end

   // Fo1-style merchant inventory:
   else if (local_var(LVAR_RESTOCK_TIME) == 0) then begin
      set_local_var(LVAR_RESTOCK_TIME, 1);

      give_pid_qty(self_obj, PID_223_FMJ, 3)
      give_pid_qty(self_obj, PID_45_CALIBER_AMMO, 6)
      give_pid_qty(self_obj, PID_7_62MM_AMMO, 3)
      give_pid_qty(self_obj, PID_FLAMETHROWER_FUEL, 3)
      give_pid_qty(self_obj, PID_PLASMA_GRENADE, 3)
      give_pid_qty(self_obj, PID_NUKA_COLA, 5)
   end
end
