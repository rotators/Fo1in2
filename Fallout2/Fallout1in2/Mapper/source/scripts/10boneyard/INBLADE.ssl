/*

   Boneyard, Adytum - Blades invading Adytum

*/

/* Include Files */
#include "define.h"
#include "maps/laadytum.h"
#include "boneyard.h"

#define NAME                    SCRIPT_BLADE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure push_p_proc;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;

variable Only_Once := 1;
variable PsstTime;

variable whichblade;

import variable InBladePtr1;
import variable InBladePtr2;
import variable InBladePtr3;
import variable InBladePtr4;
import variable InBladePtr5;
import variable InBladePtr6;
import variable InBladePtr7;
import variable InBladePtr8;
import variable RegGuard1;
import variable RegGuard2;

procedure start begin
end

procedure push_p_proc begin
end

procedure map_enter_p_proc begin
   if map_first_run then
      self_caps_adjust(random(10, 100));

   if Only_Once then begin
      variable whichblade := 0;

      // TODO: Rewrite this part of the script to remove redundance
      // Seems the game sometimes forgets who is who and thus the
      // temp variables will be "0" and the placement in LAADYTUM.ssl fails.
      if (get_blades_attacking or get_blades_attacking_wait) and (whichblade < 8) then begin
         set_self_team(TEAM_PLAYER);
         whichblade := global_var(GVAR_WATER_CHIP_10);
         if (whichblade == 0) then begin
            InBladePtr1 := self_obj;
         end
         else if (whichblade == 1) then begin
            InBladePtr2 := self_obj;
         end
         else if (whichblade == 2) then begin
            InBladePtr3 := self_obj;
         end
         else if (whichblade == 3) then begin
            InBladePtr4 := self_obj;
         end
         else if (whichblade == 4) then begin
            InBladePtr5 := self_obj;
         end
         else if (whichblade == 5) then begin
            InBladePtr6 := self_obj;
         end
         else if (whichblade == 6) then begin
            InBladePtr7 := self_obj;
         end
         else if (whichblade == 7) then begin
            InBladePtr8 := self_obj;
            set_global_var(GVAR_BLADES_INVASION_READY, 1);
         end
         whichblade := whichblade + 1;
         set_global_var(GVAR_WATER_CHIP_10, whichblade);
      end
      else begin
         set_self_team(TEAM_LA_BLADES);
      end

      Only_Once := 0;
   end

   // Refresh variables if they get cleared for whatever reason:
   if (get_blades_attacking or get_blades_attacking_wait) then begin
      if (InBladePtr1 == 0) then
         InBladePtr1 := self_obj;
      else if (InBladePtr2 == 0) then
         InBladePtr2 := self_obj;
      else if (InBladePtr3 == 0) then
         InBladePtr3 := self_obj;
      else if (InBladePtr4 == 0) then
         InBladePtr4 := self_obj;
      else if (InBladePtr5 == 0) then
         InBladePtr5 := self_obj;
      else if (InBladePtr6 == 0) then
         InBladePtr6 := self_obj;
      else if (InBladePtr7 == 0) then
         InBladePtr7 := self_obj;
      else if (InBladePtr8 == 0) then
         InBladePtr8 := self_obj;
   end

   //if (global_var(GVAR_WATER_CHIP_10) >= 8) then
   // debug("blades ready to rock! Ready? " + global_var(GVAR_BLADES_INVASION_READY));
end

procedure map_update_p_proc begin
   //debug("my elevation is: " + self_elevation + " and my hex is: " + self_tile);
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (global_var(GVAR_ENEMY_BLADES) == 1) then
      float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_RED);
   else if get_blades_attack_finished then
      float_msg(self_obj, mstr(random(101, 115)), FLOAT_MSG_NORMAL);
end

procedure critter_p_proc begin
   if ((((game_time / 10) - PsstTime) >= 30) and (tile_distance_objs(self_obj, dude_obj) <= 4) and (global_var(GVAR_ENEMY_BLADES) == 0)) then begin
      if get_blades_attack_finished then begin
         float_msg(self_obj, mstr(random(101, 115)), FLOAT_MSG_NORMAL);
      end
      PsstTime := game_time / 10;
   end
   if (self_can_see_dude) then begin
      if (global_var(GVAR_ENEMY_BLADES) == 1) then begin
         attack(dude_obj);
      end
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_BLADES, 1);
      set_self_team(TEAM_LA_BLADES);
   end
end

procedure destroy_p_proc begin
   if source_obj == dude_obj then begin
      inc_good_critter
      set_global_var(GVAR_ENEMY_BLADES, 1);
      set_self_team(TEAM_LA_BLADES);
   end
end

procedure pickup_p_proc begin
   set_global_var(GVAR_ENEMY_BLADES, 1);
end
