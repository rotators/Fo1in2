/*

        Boneyard, Zack - Merchant inventory container

*/

/* Include Files */
#include "define.h"
#include "boneyard.h"

#define NAME                    SCRIPT_GUNCACHE

#include "command.h"

#define LVAR_RESTOCK_TIME                       (0)
#define LVAR_INIT_INVEN                         (1)

#define set_restock_time      set_local_var(LVAR_RESTOCK_TIME, (random(1, 4) * ONE_GAME_DAY) + game_time)

#define bonus_chance          (25 * global_var(GVAR_GUN_RUNNERS_BONUS))

procedure start;
procedure map_enter_p_proc;

import variable Locker_Ptr;

variable bonus := 0;

procedure start begin
   Locker_Ptr := self_obj;
end

procedure map_enter_p_proc begin
/* Set up the door state when the player first enters the map */
   Locker_Ptr := self_obj;

   //if get_all_deathclaws_killed then
   //   bonus := 5 + bonus_chance;
   bonus := bonus_chance;

   // Initial inventory:
   if (local_var(LVAR_INIT_INVEN) == 0) then begin
      set_local_var(LVAR_INIT_INVEN, 1);

      give_pid_qty(self_obj, PID_ROCKET_LAUNCHER, 1)
      give_pid_qty(self_obj, PID_EXPLOSIVE_ROCKET, 3)
      give_pid_qty(self_obj, PID_ROCKET_AP, 10)
      give_pid_qty(self_obj, PID_10MM_JHP, 14)
      give_pid_qty(self_obj, PID_10MM_AP, 14)
      give_pid_qty(self_obj, PID_5MM_JHP, 20)
      give_pid_qty(self_obj, PID_5MM_AP, 20)
      give_pid_qty(self_obj, PID_223_FMJ, 21)
      give_pid_qty(self_obj, PID_14MM_AP, 11)
      give_pid_qty(self_obj, PID_7_62MM_AMMO, 6)
      give_pid_qty(self_obj, PID_PLASMA_GRENADE, 6)
      give_pid_qty(self_obj, PID_FRAG_GRENADE, 14)
      give_pid_qty(self_obj, PID_PLASMA_RIFLE, 2)
      give_pid_qty(self_obj, PID_SNIPER_RIFLE, 2)
      give_pid_qty(self_obj, PID_FLAMER, 2)
      give_pid_qty(self_obj, PID_MINIGUN, 1)
      give_pid_qty(self_obj, PID_PLASMA_PISTOL, 2)
      give_pid_qty(self_obj, PID_PULSE_GRENADE, 1)
      give_pid_qty(self_obj, PID_SMALL_ENERGY_CELL, 10)
      give_pid_qty(self_obj, PID_MICRO_FUSION_CELL, 10)
      give_pid_qty(self_obj, PID_ASSAULT_RIFLE, 2)
      give_pid_qty(self_obj, PID_SHOTGUN_SHELLS, 18)
      give_pid_qty(self_obj, PID_CATTLE_PROD, 1)
      give_pid_qty(self_obj, PID_POWER_FIST, 1)
      give_pid_qty(self_obj, PID_SPIKED_KNUCKLES, 2)
      give_pid_qty(self_obj, PID_COMBAT_SHOTGUN, 2)
      give_pid_qty(self_obj, PID_COMBAT_KNIFE, 2)
      give_pid_qty(self_obj, PID_10MM_PISTOL, 4)
      give_pid_qty(self_obj, PID_10MM_SMG, 4)
      give_pid_qty(self_obj, PID_FLAMETHROWER_FUEL, 4)
      give_pid_qty(self_obj, PID_COMBAT_ARMOR, 1)
      give_pid_qty(self_obj, PID_44_MAGNUM_JHP, 7)
      give_pid_qty(self_obj, PID_44_FMJ_MAGNUM, 8)
      give_pid_qty(self_obj, PID_RIPPER, 1)

      set_restock_time;
   end

   // Fo2-style merchant inventory:
   else if fo1in2_merch_restock_enabled then begin
      if (is_loading_game == false) then begin
         if (local_var(LVAR_RESTOCK_TIME) < game_time) then begin
            //item_caps_adjust(self_obj, random(151, 161) - self_caps); // Caps still adjusted via main trader script

            check_restock_item(PID_ROCKET_LAUNCHER, 1, 1, 50)
            check_restock_item(PID_EXPLOSIVE_ROCKET, 1, 3, 100)
            check_restock_item(PID_ROCKET_AP, 3, 10, 100)
            check_restock_item(PID_10MM_JHP, 4, 14, 100)
            check_restock_item(PID_10MM_AP, 4, 14, 100)
            check_restock_item(PID_5MM_JHP, 5, 20, 100)
            check_restock_item(PID_5MM_AP, 5, 20, 100)
            check_restock_item(PID_223_FMJ, 6, 21, 100)
            check_restock_item(PID_14MM_AP, 2, 11, 100)
            check_restock_item(PID_7_62MM_AMMO, 1, 4, 50)
            check_restock_item(PID_PLASMA_GRENADE, 2, 6, 100)
            check_restock_item(PID_FRAG_GRENADE, 4, 14, 100)
            check_restock_item(PID_PLASMA_RIFLE, 1, 2, 75)
            check_restock_item(PID_SNIPER_RIFLE, 1, 2, 80)
            check_restock_item(PID_FLAMER, 1, 2, 80)
            check_restock_item(PID_MINIGUN, 1, 1, 60)
            check_restock_item(PID_PLASMA_PISTOL, 1, 2, 50)
            check_restock_item(PID_PULSE_GRENADE, 1, 1, 50)
            check_restock_item(PID_SMALL_ENERGY_CELL, 2, 10, 100)
            check_restock_item(PID_MICRO_FUSION_CELL, 2, 10, 100)
            check_restock_item(PID_ASSAULT_RIFLE, 1, 2, 50)

            // SUPER SPECIAL!!!
            // Increased chance after the story has been completed.
            if is_story_finished then begin
               check_restock_item(PID_BOZAR, 0, 1, 40 + bonus)
               //check_restock_item(PID_ASSAULT_RIFLE_EXT_MAG, 0, 1, 50 + bonus)
               check_restock_item(PID_FN_FAL, 0, 1, 40 + bonus)
               check_restock_item(PID_HK_CAWS, 0, 1, 40 + bonus)
               check_restock_item(PID_PANCOR_JACKHAMMER, 0, 1, 40 + bonus)
               check_restock_item(PID_HK_P90C, 0, 1, 40 + bonus)
            end
            else begin
               check_restock_item(PID_BOZAR, 0, 1, 10 + bonus)
               //check_restock_item(PID_ASSAULT_RIFLE_EXT_MAG, 0, 1, 20 + bonus)
               check_restock_item(PID_FN_FAL, 0, 1, 25 + bonus)
               check_restock_item(PID_HK_CAWS, 0, 1, 10 + bonus)
               check_restock_item(PID_PANCOR_JACKHAMMER, 0, 1, 15 + bonus)
               check_restock_item(PID_HK_P90C, 0, 1, 25 + bonus)
            end

            check_restock_item(PID_SHOTGUN_SHELLS, 8, 18, 100)
            check_restock_item(PID_CATTLE_PROD, 1, 1, 50)
            check_restock_item(PID_POWER_FIST, 1, 1, 55)
            check_restock_item(PID_SPIKED_KNUCKLES, 0, 2, 100)
            check_restock_item(PID_COMBAT_SHOTGUN, 0, 2, 100)
            check_restock_item(PID_COMBAT_KNIFE, 0, 2, 100)
            check_restock_item(PID_10MM_PISTOL, 1, 4, 100)
            check_restock_item(PID_10MM_SMG, 1, 4, 100)
            check_restock_item(PID_FLAMETHROWER_FUEL, 1, 4, 100)
            check_restock_item(PID_COMBAT_ARMOR, 1, 1, 65)
            check_restock_item(PID_COMBAT_ARMOR_MK_II, 1, 1, 30 + bonus)
            check_restock_item(PID_METAL_ARMOR_MK_II, 1, 2, 45 + bonus)
            check_restock_item(PID_44_MAGNUM_JHP, 2, 7, 100)
            check_restock_item(PID_44_FMJ_MAGNUM, 3, 8, 100)
            check_restock_item(PID_RIPPER, 1, 1, 50)

            set_restock_time;
         end
      end
   end
end
