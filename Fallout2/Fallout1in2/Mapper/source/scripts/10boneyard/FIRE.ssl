/*

   Boneyard - Fire, Blades member

*/

/* Include Files */
#include "define.h"
//#include "necropolis.h"

#define NAME                    SCRIPT_FIRE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure Fire00;
procedure Fire01;
procedure Fire02;
procedure Fire03;
procedure Fire04;
procedure Fire05;
procedure Fire06;
procedure Fire07;
procedure Fire08;
procedure Fire09;
procedure Fire10;
procedure Fire11;
procedure Fire12;
procedure Fire13;
procedure Fire14;
procedure Fire15;
procedure Fire16;
procedure Fire17;
procedure Fire18;
procedure Fire19;
procedure Fire20;
procedure Fire21;
procedure FireCombat;
procedure FireEnd;

procedure follow_player;
procedure show_true_name;
procedure show_false_name;

variable tmp_hostile;
variable initial := 0;
variable prev_tile := 7000;
variable tmp_dest_tile := 7000;
variable name;

procedure timed_event_p_proc;

procedure start begin
end

procedure critter_p_proc
begin
   if (self_can_see_dude and (global_var(GVAR_BLADES_LEFT) < 41)) then begin
      tmp_hostile := 1;
   end
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure destroy_p_proc begin
   set_global_var(GVAR_BLADES_LEFT, global_var(GVAR_BLADES_LEFT) - 1);
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_BLADES_HELP, 0);
   end
   inc_good_critter
end

procedure look_at_p_proc
begin
   if ((global_var(GVAR_QUEST_BONEYARD_1_ME_BLADE) == 2) or (dude_luck > 6)) then begin
      call show_true_name;
   end
   else if (dude_luck < 4) then begin
      call show_false_name;
   end
   else if (dude_iq < 5) then begin
      call show_false_name;
   end
   else if (random(0, 1)) then begin
      call show_false_name;
   end
   else begin
      call show_true_name;
   end
end

procedure map_update_p_proc begin
   if not(initial) then begin
      set_self_ai(AI_BLADES);
      if (CUR_MAP_LABLADES) then begin //  L.A. BONEYARD - BLADES
         set_self_team(TEAM_LA_BLADES);
      end
      else begin
         if (CUR_MAP_CHILDRN1) or (CUR_MAP_CHILDRN2) then begin //  CATHEDRAL - ENTRANCE AND ANY LEVELS
            party_add(self_obj);
            if (global_var(GVAR_BLADES_HELP) == 1) then begin
               if not(is_loading_game) then set_self_visible;
                  set_self_team(TEAM_PLAYER);
               add_timer_event(self_obj, game_ticks(1), 1);
            end
            else begin
               if not(is_loading_game) then set_self_invisible;
            end
         end
         else begin
            if ((cur_map_index != MAP_CHILDRN1) and (cur_map_index != MAP_CHILDRN2)) then begin
               party_remove(self_obj);
            end
         end
      end
      initial := 1;
   end
   if ((self_elevation != dude_elevation) and (global_var(GVAR_BLADES_HELP) == 1)) then begin
      move_to(self_obj, tile_num_in_direction(dude_tile, random(4, 5), 1), dude_elevation);
   end
end

procedure pickup_p_proc
begin
   tmp_hostile := 1;
end

procedure talk_p_proc
begin
   dude_look_at_self;
   start_gdialog(280, self_obj, 4, -1, -1);
   gsay_start;
   set_local_var(4, 1);
   if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
      call Fire18;
   end
   else begin
      if (global_var(GVAR_QUEST_BONEYARD_1_ME_BLADE) == 2) then begin
         call Fire21;
      end
      else begin
         if (global_var(GVAR_QUEST_BONEYARD_1_ME_BLADE) == 1) then begin
            if (global_var(GVAR_BLADES_HELP) == 1) then begin
               call Fire19;
            end
            else begin
               call Fire20;
            end
         end
         else begin
            call Fire00;
         end
      end
   end
   gsay_end;
   end_dialogue;
end

procedure Fire00
begin
   Reply(111);
   NLowOption(112, Fire01);
   NOption(113, Fire07, 4);
   NOption(114, Fire11, 6);
   NOption(115, FireCombat, 5);
   NOption(116, FireEnd, 4);
   NOption(117, Fire17, 6);
end

procedure Fire01
begin
   Reply(118);
   NLowOption(119, Fire02);
   NLowOption(120, Fire05);
   NLowOption(121, Fire06);
end

procedure Fire02
begin
   Reply(122);
   NLowOption(123, Fire03);
   NLowOption(124, Fire04);
end

procedure Fire03
begin
   NMessage(125);
end

procedure Fire04
begin
   NMessage(126);
   call FireCombat;
end

procedure Fire05
begin
   NMessage(127);
   call FireCombat;
end

procedure Fire06
begin
   NMessage(128);
end

procedure Fire07
begin
   Reply(129);
   NOption(130, FireEnd, 4);
   NOption(131, Fire08, 4);
   NOption(132, Fire09, 5);
   NOption(133, Fire10, 7);
end

procedure Fire08
begin
   NMessage(134);
   call FireCombat;
end

procedure Fire09
begin
   Reply(135);
   NOption(136, FireEnd, 5);
   NOption(137, Fire08, 5);
end

procedure Fire10
begin
   NMessage(138);
end

procedure Fire11
begin
   Reply(139);
   NOption(140, Fire12, 6);
   NOption(141, Fire15, 6);
   NOption(142, Fire16, 6);
end

procedure Fire12
begin
   Reply(143);
   NOption(144, Fire13, 6);
   NOption(145, Fire14, 6);
end

procedure Fire13
begin
   NMessage(146);
end

procedure Fire14
begin
   NMessage(147);
   call FireCombat;
end

procedure Fire15
begin
   NMessage(148);
end

procedure Fire16
begin
   NMessage(149);
   call FireCombat;
end

procedure Fire17
begin
   NMessage(150);
   call FireCombat;
end

procedure Fire18
begin
   NMessage(151);
   add_timer_event(self_obj, game_ticks(10), 2);
end

procedure Fire19
begin
   NMessage(152);
end

procedure Fire20
begin
   NMessage(153);
end

procedure Fire21
begin
   NMessage(154);
end

procedure FireCombat
begin
   tmp_hostile := 1;
end

procedure FireEnd
begin
end

procedure follow_player
begin
   variable LVar0 := 0;
   prev_tile := tmp_dest_tile;
   LVar0 := (dude_cur_rot + random(4, 5)) % 6;
   tmp_dest_tile := tile_num_in_direction(dude_tile, LVar0, random(2, 3));
   if (tile_distance(prev_tile, dude_tile) > tile_distance(tmp_dest_tile, dude_tile)) then begin
      if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
         self_run_to_tile_force(tmp_dest_tile);
      end
      else begin
         self_walk_to_tile_force(tmp_dest_tile);
      end
   end
   else begin
      if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
         self_run_to_tile(tmp_dest_tile);
      end
      else begin
         self_walk_to_tile(tmp_dest_tile);
      end
   end
   if (tile_distance_objs(self_obj, dude_obj) > 3) then begin
      add_timer_event(self_obj, game_ticks(1), 1);
   end
   else begin
      add_timer_event(self_obj, game_ticks(random(2, 5)), 1);
   end
end

procedure show_true_name
begin
   script_overrides;
   if (local_var(4)) then begin
      display_msg(mstr(100));
   end
   else begin
      display_msg(mstr(103));
   end
end

procedure show_false_name
begin
   script_overrides;
   display_msg(mstr(random(104, 110)));
end

procedure timed_event_p_proc
begin
   if (fixed_param == 1) then begin
      call follow_player;
   end
   else begin
      if (self_can_see_dude) then begin
         tmp_hostile := 1;
      end
   end
end
