/*

   The Glow - Zax, the super computer

*/

/* Include Files */
#include "define.h"
#include "glow.h"

#define NAME                    SCRIPT_ZAX
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GLOW)

#include "command.h"
//#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;

procedure ZAX01;
procedure ZAX02;
procedure ZAX03;
procedure ZAX04;
procedure ZAX05;
procedure ZAX06;
procedure ZAX07;
procedure ZAX08;
procedure ZAX09;
procedure ZAX10;
procedure ZAX11;
procedure ZAX12;
procedure ZAX13;
procedure ZAX14;
procedure ZAX15;
procedure ZAX16;
procedure ZAX17;
procedure ZAX18;
procedure ZAX19;
procedure ZAX20;
procedure ZAX21;
procedure ZAX22;
procedure ZAX23;
procedure ZAX24;
procedure ZAX25;
procedure ZAXClearance;

procedure Term01;
procedure Term02;
procedure Term03;
procedure Term03a;
procedure Term04;
procedure Term05;
procedure Term06;
procedure Term06a;
procedure Term07;
procedure Term08;
procedure Term09;
procedure Term09a;
procedure Term10;
procedure Term11;
procedure Term11a;
procedure Term12;
procedure Term13;
procedure Term14;
procedure Term14a;
procedure Term15;
procedure TermEnd;
procedure TermStart;

procedure Mainframe00;
procedure Mainframe01;
procedure Mainframe02;
procedure Mainframe03;
procedure Mainframe04;
procedure Mainframe04a;
procedure Mainframe05;
procedure Mainframe05a;
procedure Mainframe05b;
procedure Mainframe05c;
procedure Mainframe06;
procedure Mainframe06a;
procedure Mainframe07;
procedure Mainframe07a;
procedure Mainframe08;
procedure Mainframe08a;
procedure Mainframe09;
procedure Mainframe10;

// for Fallout Fixt:
procedure ChessBlack;
procedure ChessWhite;
procedure ChessLongTourn;
procedure ChessTourn;
procedure ChessShortTourn;
procedure ChessQuick;
procedure ChessBlitz;
procedure ChessBullet;
procedure ChessPLAY;
procedure ChessLength;

variable BLACK;
variable WHITE;
variable Length;
variable ZAXroll;
variable XP;
variable Penalty;
variable LuckBonus;
variable PlayerRoll;

#define LVAR_Here_Before      (4)

#define LVAR_Chess_Defeated   (6)

procedure start begin
end

procedure use_p_proc begin
   dialogue_system_enter;
end

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Here_Before) == 1) then begin
      display_msg(mstr(100));
   end
   else begin
      display_msg(mstr(101));
   end
end

procedure description_p_proc begin
   if (local_var(LVAR_Here_Before) == 1) then begin
      script_overrides;
      display_msg(mstr(101));
   end
end

procedure talk_p_proc begin
   script_overrides;
   dude_look_at_self;

   start_gdialog(312, self_obj, 4, -1, -1);
   gsay_start;
   call ZAX01;
   gsay_end;
   end_dialogue;
end

procedure ZAX01 begin
   Reply(102);
   if (local_var(LVAR_Here_Before) == 0) then begin
      NOption(103, ZAX02, 5);
   end
   NOption(105, ZAX04, 5);
   NOption(106, ZAX12, 5);
   giq_option(5, SCRIPT_GPWRTERM, 200, Mainframe00, NEUTRAL_REACTION);
   NOption(108, ZAX13, 5);
   NOption(109, ZAX05, -4);
end

procedure ZAX02 begin
   set_local_var(LVAR_Here_Before, 1);
   Reply(110);
   NOption(111, ZAX06, 5);
   NOption(112, ZAX04, 5);
   NOption(113, ZAX07, 5);
   NOption(114, ZAX08, 7);
   NOption(115, ZAX13, 1);
end

procedure ZAX03 begin
   NMessage(116);
   set_local_var(5, 1);
   call ZAX01;
end

procedure ZAX04 begin
   call ZAXClearance;
   gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
   NOption(119, ZAX21, 7);
   NOption(120, ZAX15, 7);
   NOption(121, ZAX13, 5);
end

procedure ZAX05 begin
   NMessage(122);
end

procedure ZAX06 begin
   call ZAXClearance;
   Reply(123);
   NOption(124, ZAX14, 5);
   NOption(125, ZAX15, 7);
   NOption(126, ZAX07, 5);
end

procedure ZAX07 begin
   Reply(127);
   NOption(128, ZAX08, 7);
   NOption(121, ZAX13, 5);
end

procedure ZAX08 begin
   NMessage(129);
   Reply(130);
   NOption(131, ZAX01, 5);
   NOption(132, ZAX09, 7);
   NOption(133, ZAX11, 9);
end

procedure ZAX09 begin
   NMessage(134);
   Reply(135);
   NOption(136, ZAX10, 7);
   NOption(137, ZAX01, 7);
   NOption(138, ZAX11, 9);
end

procedure ZAX10 begin
   NMessage(139);
   Reply(140);
   NOption(141, ZAX01, 7);
   NOption(142, ZAX11, 9);
end

procedure ZAX11 begin
   NMessage(143);
   NMessage(144);
   Reply(145);
   NOption(146, ZAX01, 5);
   NOption(147, ZAX13, 5);
end

procedure ZAX12 begin
   Reply(mstr(148) + local_var(11) + mstr(228) + local_var(12) + mstr(229) + local_var(13) + mstr(230));
   NOption(215, ChessBlack, 5);
   NOption(216, ChessWhite, 5);
end

procedure ChessBlack begin
   BLACK := 1;
   WHITE := 0;
   call ChessLength;
end

procedure ChessWhite begin
   WHITE := 1;
   BLACK := 0;
   call ChessLength;
end

procedure ChessLength begin
   Reply(217);
   NOption(218, ChessLongTourn, 5);
   NOption(219, ChessTourn, 5);
   NOption(220, ChessShortTourn, 5);
   NOption(221, ChessQuick, 5);
   NOption(222, ChessBlitz, 5);
   NOption(223, ChessBullet, 5);
end

procedure ChessLongTourn begin
   Length := 360;//  6 hours
   Penalty := random(3, 9);
   LuckBonus := 0;
   XP := 700;// 650 or 750
   call ChessPLAY;
end

procedure ChessTourn begin
   Length := 240;//  4 hours
   Penalty := random(2, 6);
   LuckBonus := 0;
   XP := 600;// 550 or 650
   call ChessPLAY;
end

procedure ChessShortTourn begin
   Length := 120;//  2 hours
   Penalty := random(1, 3);
   LuckBonus := 0;
   XP := 500;// 450 or 550
   call ChessPLAY;
end

procedure ChessQuick begin
   Length := 60;//   1 hour
   Penalty := 0;
   LuckBonus := 0;
   XP := 450;// 400 or 500
   call ChessPLAY;
end

procedure ChessBlitz begin
   Length := 30;//  minutes
   Penalty := 0;
   if dude_luck > 5 then begin
      LuckBonus := dude_luck - 5;
   end
   XP := 350;// 300 or 400
   call ChessPLAY;
end

procedure ChessBullet begin
   Length := 6;//  minutes
   Penalty := 0;
   if dude_luck > 5 then begin
      LuckBonus := dude_luck;
   end
   XP := 250;// 200 or 300
   call ChessPLAY;
end

procedure ChessPLAY begin
   gfade_out(1);
   game_time_advance(10 * 60 * Length);// how many minutes
   gfade_in(1);
   if dude_iq == 10 then begin
// ZAX rolls 1 to 101
      ZAXroll := 1 + random(0, 100);
      PlayerRoll := (50 - Penalty) + LuckBonus;
      if BLACK == 1 then begin
         XP := (XP + 50);
         PlayerRoll := (PlayerRoll - (random(2, 6)));
      end
      else begin
         if WHITE == 1 then begin
            XP := (XP - 50);
            PlayerRoll := (PlayerRoll + (random(2, 6)));
         end
      end
      if PlayerRoll == ZAXroll then begin
         set_local_var(12, local_var(12) + 1);// Draws
         Reply(225);
      end
      else if PlayerRoll > ZAXroll then begin
         set_local_var(11, local_var(11) + 1);// Wins
         if local_var(LVAR_Chess_Defeated) == 0 then begin
            set_local_var(LVAR_Chess_Defeated, 1);// already_got_XP flag
            give_xp_msg(XP, mstr(227));
            inc_glow_rep(REP_BONUS_DEFEAT_ZAX);
         end
         Reply(149);
      end
      else begin
         set_local_var(13, local_var(13) + 1);// Losses
         Reply(150);
      end
   end
   else begin
      set_local_var(13, local_var(13) + 1);// Losses
      Reply(224);
   end
   NOption(151, ZAX12, 5);
   NOption(152, ZAX01, 5);
end

procedure ZAX13 begin
   NMessage(153);
end

procedure ZAX14 begin
   Reply(154);
   NOption(155, ZAX13, 5);
   NOption(156, ZAX01, 5);
end

procedure ZAX15 begin
   NMessage(157);
   Reply(158);
   NOption(159, ZAX16, 5);
   NOption(160, ZAX17, 7);
   NOption(161, ZAX18, 9);
end

procedure ZAX16 begin
   Reply(162);
   NOption(163, ZAX01, 5);
   NOption(164, ZAX17, 7);
   NOption(165, ZAX18, 9);
end

procedure ZAX17 begin
   Reply(166);
   NOption(167, ZAX01, 5);
   NOption(168, ZAX18, 9);
end

procedure ZAX18 begin
   NMessage(169);
   NMessage(170);
   NMessage(171);
   NMessage(172);
   Reply(173);
   NOption(174, ZAX19, 9);
   NOption(175, ZAX20, 10);
   NOption(176, ZAX01, 5);
   NOption(177, ZAX13, 5);
end

procedure ZAX19 begin
   NMessage(178);
   NMessage(179);
   Reply(180);
   NOption(181, ZAX20, 10);
   NOption(182, ZAX01, 5);
   NOption(183, ZAX13, 5);
end

procedure ZAX20 begin
   Reply(184);
   NOption(185, ZAX19, 9);
   NOption(186, ZAX01, 5);
   NOption(187, ZAX13, 5);
end

procedure ZAX21 begin
   Reply(188);
   NOption(189, ZAX22, 5);
   NOption(190, ZAX23, 5);
   NOption(191, ZAX24, 5);
   NOption(192, ZAX01, 5);
end

procedure ZAX22 begin
   Reply(193);
   NOption(194, ZAX23, 5);
   NOption(195, ZAX24, 5);
   NOption(196, ZAX01, 5);
   NOption(197, ZAX13, 5);
end

procedure ZAX23 begin
   Reply(198);
   NOption(199, ZAX22, 5);
   NOption(200, ZAX24, 5);
   NOption(201, ZAX01, 5);
   NOption(202, ZAX13, 5);
end

procedure ZAX24 begin
   Reply(203);
   NOption(204, ZAX22, 5);
   NOption(205, ZAX23, 5);
   NOption(206, ZAX01, 5);
   NOption(207, ZAX13, 5);
end

procedure ZAX25 begin
   NMessage(208);
   if glow_weapons_locked then begin
      NMessage(209);
      set_glow_weapons_unlocked;
   end
end

procedure ZAXClearance begin
   if glow_traps_active then begin
      NMessage(210);
      NMessage(211);
      set_glow_taps_active;
   end
end

procedure Term01 begin
   gsay_reply(SCRIPT_GPWRTERM, 100);
   giq_option(4, SCRIPT_GPWRTERM, 101, Term02, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 102, Term10, NEUTRAL_REACTION);
   giq_option(0, SCRIPT_GPWRTERM, 103, Mainframe02, NEUTRAL_REACTION);
end

procedure Term02 begin
   gsay_reply(SCRIPT_GPWRTERM, 104);
   giq_option(4, SCRIPT_GPWRTERM, 105, Term03, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 106, Term06, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 107, Term01, NEUTRAL_REACTION);
end

procedure Term03 begin
   gsay_reply(SCRIPT_GPWRTERM, 108);
   giq_option(4, SCRIPT_GPWRTERM, 109, Term03a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 110, Term02, NEUTRAL_REACTION);
end

procedure Term03a begin
   if not(glow_quest_power_restored) then begin
      call Term04;
   end
   else begin
      set_glow_power_online;
   end
end

procedure Term04 begin
   gsay_reply(SCRIPT_GPWRTERM, 111);
   giq_option(8, SCRIPT_GPWRTERM, 112, Term05, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 113, Term02, NEUTRAL_REACTION);
end

procedure Term05 begin
   gsay_reply(SCRIPT_GPWRTERM, 114);
   giq_option(4, SCRIPT_GPWRTERM, 115, Term02, NEUTRAL_REACTION);
end

procedure Term06 begin
   gsay_reply(SCRIPT_GPWRTERM, 116);
   giq_option(4, SCRIPT_GPWRTERM, 117, Term06a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 118, Term02, NEUTRAL_REACTION);
end

procedure Term06a begin
   set_glow_power_offline;
end

procedure Term07 begin
   gsay_reply(SCRIPT_GPWRTERM, 119);
   giq_option(4, SCRIPT_GPWRTERM, 120, Term08, NEUTRAL_REACTION);
   giq_option(0, SCRIPT_GPWRTERM, 121, Mainframe02, NEUTRAL_REACTION);
end

procedure Term08 begin
   gsay_reply(SCRIPT_GPWRTERM, 122);
   giq_option(4, SCRIPT_GPWRTERM, 123, Term09a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 124, Term07, NEUTRAL_REACTION);
end

procedure Term09 begin
   gsay_reply(SCRIPT_GPWRTERM, 125);
   giq_option(-3, SCRIPT_GPWRTERM, 126, Term09a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 127, Term09a, NEUTRAL_REACTION);
   giq_option(0, SCRIPT_GPWRTERM, 128, Mainframe02, NEUTRAL_REACTION);
end

procedure Term09a begin
   set_glow_power_emergency;
end

procedure Term10 begin
   gsay_reply(SCRIPT_GPWRTERM, 129);
   giq_option(-3, SCRIPT_GPWRTERM, 130, Term11, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 131, Term13, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 132, Term01, NEUTRAL_REACTION);
end

procedure Term11 begin
   gsay_reply(SCRIPT_GPWRTERM, 133);
   giq_option(-3, SCRIPT_GPWRTERM, 134, Term11a, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 135, Term10, NEUTRAL_REACTION);
end

procedure Term11a begin
   if not(glow_quest_power_restored) then begin
      call Term12;
   end
   else begin
      set_glow_power_online;
   end
end

procedure Term12 begin
   gsay_reply(SCRIPT_GPWRTERM, 136);
   giq_option(-3, SCRIPT_GPWRTERM, 137, Term10, NEUTRAL_REACTION);
end

procedure Term13 begin
   gsay_reply(SCRIPT_GPWRTERM, 138);
   giq_option(-3, SCRIPT_GPWRTERM, 148, Term06a, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 137, Term10, NEUTRAL_REACTION);
end

procedure Term14 begin
   gsay_reply(SCRIPT_GPWRTERM, 139);
   giq_option(4, SCRIPT_GPWRTERM, 140, Term14a, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 141, Term15, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 142, Term15, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 143, Term14a, NEUTRAL_REACTION);
   giq_option(-3, SCRIPT_GPWRTERM, 144, Term15, NEUTRAL_REACTION);
   giq_option(0, SCRIPT_GPWRTERM, 145, Mainframe02, NEUTRAL_REACTION);
end

procedure Term14a begin
   set_glow_power_emergency;
   if glow_quest_power_restored then begin
      call Term01;
   end
end

procedure Term15 begin
   gsay_reply(SCRIPT_GPWRTERM, 146);
   giq_option(0, SCRIPT_GPWRTERM, 147, Mainframe02, NEUTRAL_REACTION);
end

procedure TermEnd begin
end

procedure TermStart begin
   if glow_power_offline then begin
      call Term14;
   end
   else if glow_power_emergency then begin
      call Term01;
   end
   else begin
      call Term09;
   end
end

procedure Mainframe00 begin
   if (has_skill(dude_obj, SKILL_SCIENCE) >= 25) then begin
      set_local_var(8, 0);
   end
   if (local_var(8) == 0) then begin
      if (local_var(7) == 1) then begin
         call Mainframe01;
      end
      else begin
         if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, -10))) then begin
            set_local_var(7, 1);
            call Mainframe01;
         end
         else begin
            if (has_skill(dude_obj, SKILL_SCIENCE) < 25) then begin
               set_local_var(8, 1);
            end
            gsay_message(SCRIPT_GPWRTERM, 201, NEUTRAL_REACTION);
         end
      end
   end
   else begin
      gsay_message(SCRIPT_GPWRTERM, 201, NEUTRAL_REACTION);
      display_msg(mstr(214));
   end
end

procedure Mainframe01 begin
   gsay_reply(SCRIPT_GPWRTERM, 202);
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 204, ZAX01, NEUTRAL_REACTION);
end

procedure Mainframe02 begin
   gsay_reply(SCRIPT_GPWRTERM, 206);
   giq_option(4, SCRIPT_GPWRTERM, 207, Mainframe03, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 208, Mainframe04, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 209, Mainframe05, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 210, TermStart, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 204, ZAX01, NEUTRAL_REACTION);
end

procedure Mainframe03 begin
   gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe04 begin
   if (glow_traps_active and glow_power_online) then begin
      gsay_reply(SCRIPT_GPWRTERM, 212);
   end
   else begin
      gsay_reply(SCRIPT_GPWRTERM, 213);
   end
   if glow_power_online then begin
      if glow_traps_active then begin
         giq_option(4, SCRIPT_GPWRTERM, 214, Mainframe04a, NEUTRAL_REACTION);
      end
      else begin
         giq_option(4, SCRIPT_GPWRTERM, 215, Mainframe04a, NEUTRAL_REACTION);
      end
   end
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe04a begin
   game_time_advance(game_ticks(600));
   if (has_skill(dude_obj, SKILL_SCIENCE) >= 40) then begin
      set_local_var(9, 0);
   end

// HOLODISK_SECDISK_GLOW //  484  // ! Fallout Fixt: SECDISK.SSL, has read it?
   if (global_var(GVAR_SECDISK_HOLODISK_FLAG) == 1) then begin
      if glow_traps_active then begin
         set_glow_taps_inactive;
      end
      else begin
         set_glow_taps_active;
      end
      if (local_var(10) == 0) then begin
         give_xp_msg(EXP_MAINFRAME_ACCESS, mstr(213));
         set_local_var(10, 1);
      end
      call Mainframe09;
   end

   if (local_var(9) == 0) then begin
      if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, -25))) then begin
         if glow_traps_active then begin
            set_glow_taps_inactive;
         end
         else begin
            set_glow_taps_active;
         end
         if (local_var(10) == 0) then begin
            give_xp_msg(EXP_MAINFRAME_ACCESS, mstr(213));
            set_local_var(10, 1);
         end
         call Mainframe09;
      end
      else begin
         if (has_skill(dude_obj, SKILL_SCIENCE) < 40) then begin
            set_local_var(9, 1);
         end
         call Mainframe10;
      end
   end
   else begin
      if (local_var(9) == 1) then begin
         display_msg(mstr(214));
         call Mainframe10;
      end
      else begin
         call Mainframe10;
      end
   end
end

procedure Mainframe05 begin
   gsay_reply(SCRIPT_GPWRTERM, 216);
   giq_option(4, SCRIPT_GPWRTERM, 217, Mainframe05a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 218, Mainframe05b, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 219, Mainframe05c, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe05a begin
   call Mainframe06;
end

procedure Mainframe05b begin
   call Mainframe07;
end

procedure Mainframe05c begin
   call Mainframe08;
end

procedure Mainframe06 begin
   gsay_message(SCRIPT_GPWRTERM, 220, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 221, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 222, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 223, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 224, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 225, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 226, NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, 227, NEUTRAL_REACTION);
   gsay_reply(SCRIPT_GPWRTERM, 228);
   giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe06a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe06a begin
   set_global_var(GVAR_HOLODISK_PERSONNEL_RECORD, 1);
   call Mainframe05;
end

procedure Mainframe07 begin
   gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 231) + message_str(SCRIPT_GPWRTERM, 250) + message_str(SCRIPT_GPWRTERM, 251) + message_str(SCRIPT_GPWRTERM, 252));
   giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe07a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe07a begin
   set_global_var(GVAR_HOLODISK_POWER_ARMOR_SPEC, 1);
   call Mainframe05;
end

procedure Mainframe08 begin
   gsay_message(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 232) + message_str(SCRIPT_GPWRTERM, 233), NEUTRAL_REACTION);
   gsay_message(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 234) + message_str(SCRIPT_GPWRTERM, 235), NEUTRAL_REACTION);
   gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 236) + message_str(SCRIPT_GPWRTERM, 237) + message_str(SCRIPT_GPWRTERM, 238));
   giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe08a, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe08a begin
   set_global_var(GVAR_HOLODISK_FEV_SUMMARY_INFO, 1);
   call Mainframe05;
end

procedure Mainframe09 begin
   gsay_reply(SCRIPT_GPWRTERM, 239);
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe10 begin
   game_time_advance(game_ticks(18000));
   gsay_reply(SCRIPT_GPWRTERM, 240);
   giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
   giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end
