/*

   Check where we are on the worldmap and do stuff to get the scripted encounters working.

*/

/* Include Files */
#include "define.h"
#include "command.h"
#include "mapenc.h"
#include "sfall/sfall.rotators.h"
#include "sfall/lib.math.h"
#include "sfall/lib.arrays.h"

#include "gl_worldmap.h"

#define south_table        (global_var(GVAR_WORLDMAP_TABLE) == 3)
#define vats_table         (global_var(GVAR_WORLDMAP_TABLE) == 11)
#define glow_table         (global_var(GVAR_WORLDMAP_TABLE) == 12)

// some consts
#define  TILE_COUNT        (20)
variable TILE_COUNT_X := 0;
#define  TILE_COUNT_Y      (TILE_COUNT / TILE_COUNT_X)
#define  TILE_ZONES_X      (7)
#define  TILE_ZONES_Y      (6)

#define ZONE_SIZE          (50)
#define ZONE_COUNT_X       (TILE_COUNT_X * TILE_ZONES_X)
#define ZONE_COUNT_Y       (TILE_COUNT_Y * TILE_ZONES_Y)

#define EVENT_RADS         (1)

//
// worldmap zones table
//
// zone := GetZoneInfo( zx, zy );
// zone := GetCurrentZoneInfo();
//
// zx := zone["zx"];           // zone X coordinates (top-left is 0,0)
// zy := zone["zy"];           // zone Y coordinates (top-left is 0,0)
// terrain := zone["terrain"]; // zone terrain; copy of 1st element of [Tile T]->X_Y
// table := zone["table"];     // zone table; copy of 6th (last) element of [Tile T]->X_Y
//
// debug info
// tile := zone["tile"];     // T from [Tile T]->X_Y
// tile_x := zone["tile_x"]; // X from [Tile T]->X_Y
// tile_y := zone["tile_y"]; // Y from [Tile T]->X_Y
//

variable ZONES;
variable tick;

procedure GetZone(variable zx, variable zy) begin
   return ZONES[zx][zy];
end

procedure GetCurrentZone begin
   return GetZone(worldmap_xpos / ZONE_SIZE, worldmap_ypos / ZONE_SIZE);
end

// read [Tile*] sections of WORLDMAP.TXT and save parts of info in ZONES[][]
// TODO it should be called earlier
procedure ReadWorldmapTxt begin
   variable forTile, forX, forY;
   variable counter := get_uptime;

   // must be set before using some TILE_/ZONE_ macros
   TILE_COUNT_X := get_ini_setting("mods\\fo1_base\\data\\WORLDMAP.TXT|Tile Data|num_horizontal_tiles");

   if(ZONES == 0) then
   begin
      // no idea how to create 2d array properly
      variable x;
      ZONES := create_array(ZONE_COUNT_X, 0);
      for( x := 0; x < ZONE_COUNT_Y; x++ )
      begin
         ZONES[x] := create_array(ZONE_COUNT_Y, 0);
      end
   end

   for( forTile := 0; forTile < TILE_COUNT; forTile++ )
   begin
      for( forX := 0; forX < TILE_ZONES_X; forX++ )
      begin
         for( forY := 0; forY < TILE_ZONES_Y; forY++ )
         begin
            variable zx := (forTile % TILE_COUNT_X) * TILE_ZONES_X + forX;
            variable zy := (forTile / TILE_COUNT_X) * TILE_ZONES_Y + forY;
            variable line, cfg, zone := create_lookup_map;

            if(sfall_rotators) then
            begin // TODO cfg := r_get_ini_list(), use db::fastread()
               line := r_get_ini_string("mods\\fo1_base\\data\\WORLDMAP.TXT", "Tile " + forTile, "" + forX + "_" + forY, "");
               cfg := string_split(line, ",");
            end
            else // so slow i'm not sure is it worth keeping
            begin
               line := get_ini_string("mods\\fo1_base\\data\\WORLDMAP.TXT|Tile " + forTile + "|" + forX + "_" + forY);
               cfg := string_split(line, ",");
            end

            zone["zx"] := zx;
            zone["zy"] := zy;
            zone["terrain"] := cfg[0];
            zone["fill"]    := cfg[1];
            zone["table"]   := cfg[5];

            // debug info
            zone["tile"]   := forTile;
            zone["tile_x"] := forX;
            zone["tile_y"] := forY;

            ZONES[zx][zy] := zone;

            if(debug_mode and zone["table"] != "0" and atoi(zone["table"]) == 0) then
               debug_red("BUG BUG BUG : [Tile " + forTile + "]->" + forX + "_" + forY + " : table<" + zone["table"] + "> is not a number");
         end
      end
   end
   debug("ReadWorldmapTxt=" + (get_uptime-counter) + "ms");
end

variable prevTerrain := "";
variable prevTable := -1;
procedure SetWorldmapInfo begin
   variable zone := GetCurrentZone();
   variable terrain := WORLDMAP_TERRAIN_UNKNOWN, table := atoi(zone["table"]); // if table is not a number, we're in trouble

   // get terrain type from string
   switch (zone["terrain"]) begin
      case "City":     terrain := WORLDMAP_TERRAIN_CITY;
      case "Desert":   terrain := WORLDMAP_TERRAIN_DESERT;
      case "Mountain": terrain := WORLDMAP_TERRAIN_MOUNTAIN;
      case "Ocean":    terrain := WORLDMAP_TERRAIN_OCEAN;
      default : display_msg("BUG BUG BUG : unknown terrain<" + zone["terrain"] + ">");
   end
   // spam when changing zone type
   if (debug_mode and (prevTerrain != terrain or prevTable != table)) then
   begin
      if(not (prevTerrain == "" and prevTable == -1)) then
         debug("exit " + prevTerrain + prevTable);

      debug("enter " + zone["terrain"] + table + " (" + terrain + "," + table + ") : " + "zone<" + zone["zx"] + "," + zone["zy"] + "> tile<" + zone["tile"] + ":" + zone["tile_x"] + "_" + zone["tile_y"] + ">");
      prevTerrain := terrain;
      prevTable := table;
   end

   set_global_var(GVAR_WORLDMAP_TABLE, table);
   set_global_var(GVAR_WORLDMAP_TERRAIN, terrain);
end

procedure SetRadiation begin
   if is_radiated_wm_tile then begin
      if (unsigned_int_compare(game_time, tick) > 0) then begin
         tick := game_time + (ONE_GAME_HOUR * 6);
         radiation_inc(dude_obj, random(1, 2));
         debug_yellow("Radiation from WM! Geiger counter says " + dude_rads + " rads!");
      end
   end
end

procedure override_terrain_type begin
   // Override zone hotspot text

   // Rewrite zone titles around the Glow
   // Traveling on these zones will radiate the player (see gl_worldmap.ssl)
   if fo1in2_radiation_enabled then begin
      set_terrain_name(23, 24, mstr_worldmap(1005));
      set_terrain_name(24, 24, mstr_worldmap(1005));
      set_terrain_name(25, 24, mstr_worldmap(1006));

      set_terrain_name(23, 25, mstr_worldmap(1005));
      set_terrain_name(25, 25, mstr_worldmap(1006));

      set_terrain_name(23, 26, mstr_worldmap(1005));
      set_terrain_name(24, 26, mstr_worldmap(1005));
      set_terrain_name(25, 26, mstr_worldmap(1005));
   end
end

procedure Encounter_handler begin
   variable
      Maps_List,
      event := get_sfall_arg,
      mapID := get_sfall_arg;

   // If the player enters a map on the worldmap, we set it depending on the current terrain type.
   // event 0 is random encounter, 1 is player initiated "encounter"
   if (event == 1 AndAlso mapID == MAP_DESERT0) then begin
      set_global_var(GVAR_LOAD_MAP_INDEX, 1); // Disable spawning enemies from the encounter map script
      if is_terrain_mountain then begin
         Maps_List := [MAP_MOUNTN1, MAP_MOUNTN2];
      end
      else if is_terrain_city then begin
         if fo1in2_expanded_wrecks_enabled then
            Maps_List := [MAP_CITY1, MAP_CITY1, MAP_CITY2, MAP_CITY3, MAP_CITY4, MAP_CITY5];
         else
            Maps_List := [MAP_CITY1, MAP_CITY1, MAP_CITY2, MAP_CITY3];
      end
      else if is_terrain_ocean then begin
         Maps_List := [MAP_COAST1, MAP_COAST2];
      end
      else begin // Desert is always the default
         Maps_List := [MAP_DESERT1, MAP_DESERT2, MAP_DESERT3];
      end
      mapID := array_random_value(Maps_List);
      set_sfall_return(mapID);
   end
   else if (event == 0) then begin
      if is_terrain_city then begin
         if fo1in2_expanded_wrecks_enabled then
            Maps_List := [MAP_CITY1, MAP_CITY1, MAP_CITY2, MAP_CITY3, MAP_CITY4, MAP_CITY5];
         else
            Maps_List := [MAP_CITY1, MAP_CITY1, MAP_CITY2, MAP_CITY3];
         mapID := array_random_value(Maps_List);
         set_sfall_return(mapID);
      end
      else if is_terrain_mountain then begin
         variable
            rnd_cave := random(1, 100),
            Bonus := 0;

         if south_table then Bonus := 15;
         else if glow_table then Bonus := 35;
         else Bonus := 0;
         Bonus := Bonus + (has_skill(dude_obj, SKILL_OUTDOORSMAN) / 20);
         debug("Cavern chance is " + rnd_cave + " and cavern bonus is " + bonus + ".");

         if (fo1in2_cave_maps_enabled AndAlso (rnd_cave <= (15 + Bonus))) then begin
            if glow_table then Bonus := 35;
            else Bonus := 0;
            Bonus := Bonus + (has_skill(dude_obj, SKILL_OUTDOORSMAN) / 20);

            if (south_table or vats_table or glow_table) and (random(1, 100) <= (5 + Bonus)) then
               Maps_List := [MAP_MINE1, MAP_MINE2, MAP_MINE3];
            else
               Maps_List := [MAP_CAVE0, MAP_CAVE1, MAP_CAVE2, MAP_CAVE3, MAP_CAVE4, MAP_CAVE5];
         end
         else
            Maps_List := [MAP_MOUNTN1, MAP_MOUNTN2];

         mapID := array_random_value(Maps_List);
         set_sfall_return(mapID);
      end
   end
end

procedure start begin
variable terrain_time, time, skill;

   if (game_loaded) then begin
      set_global_script_type(2);
      set_global_script_repeat(1);

      register_hook_proc(HOOK_ENCOUNTER, Encounter_handler);

      call ReadWorldmapTxt;
      call override_terrain_type;
   end
   call SetWorldmapInfo;
   if fo1in2_radiation_enabled then call SetRadiation;

   // Override Fo2 wm travel time to match Fo1 more closely
   //skill := has_skill(dude_obj, SKILL_OUTDOORSMAN);
   skill := has_skill_party(SKILL_OUTDOORSMAN);
   if (skill > 100) then skill := 100;

   // Add flat +20 if player has a motion sensor or the Eyebot is in the party
   if (party_has_item(PID_MOTION_SENSOR) or Eyebot_In_Party) then skill := skill + 20;

   // Add flat +50 if the player is driving with the bike
   // Disabled for now, since car on its own already increases travel speed a lot
   //if car_on_wm then skill := skill + 50;

   if is_terrain_mountain then begin
      terrain_time := 0.625; // 20h
   end
   else if is_terrain_city then begin
      terrain_time := 0.245; // 6h
   end
   else begin
      terrain_time := 0.408; // 10h
   end
   time := ((-0.0075717243419 * skill + 1.75717243419) * terrain_time);

   //debug("terrain_time: " + time);
   set_map_time_multi(time);
end
