/*

   Recreates the "Tell Me About"-function from Fallout 1 (with improvements).

   NOTE:

      To use TMA, add "set_tma_data()" to the talk_p_proc procedure of the critter script
      before starting the actual dialog. See Fo1.h for more details on that.

      If a dialog with critter or scenery (computer terminal) is initialized without running
      set_tma_data() first, clicking the TMA button will not return anything.

*/

/* Include Files */
#include "define.h"
#include "command.h"
#include "sfall/sfall.h"
#include "sfall/sfall.rotators.h"
#include "sfall/dik.h"

/* Standard Script Procedures */
procedure start;

procedure create_button;
procedure delete_button;
procedure do_on;
procedure do_off;
procedure do_off_small;
procedure do_down;
procedure do_down_small;
procedure do_up;
procedure do_up_cancel;
procedure do_up_ok;

procedure GameModeChange_Handler;
procedure KeyPress_Handler;
procedure MouseClick_Handler;

procedure OpenInput;
procedure CloseInput;
procedure GenerateReply;
procedure PrintReply(variable text);
procedure ClearInputBox;

#define mstr_tma(x)        message_str(SCRIPT_OBJ_DUDE, x)
#define Draw_Image(img)    sfall_func("draw_image", img)

// Russian language cannot into lower/uppercase
#define convert_to_lower(val)    if (language != "russian") then \
                                    val := string_tolower(val)

// Button sfx
#define SoundP             "butin4"
#define SoundR             "butout4"
#define SoundOff           "IB2LU1X1"
#define SoundDown          "IB1P1XX1"
#define SoundError         "IISXXXX1"

//Default paths
#define key_map_path       "config\\keymap.ini"
#define lang_ini_str       "fallout2.cfg|system|language"

variable tellme_button;
variable fetch_input;
variable input;

variable Scr_Height;
variable Scr_Width;
variable MousonBut;
variable ButPres;
variable charactersMap := 0;
variable charactersMapUpper := 0;
variable shiftPressed := 0;
variable game_mode;
variable language := "english";

procedure start begin
   if (game_loaded) then begin
      variable iniVal := get_ini_string(key_map_path + "|main|language"); // get lang from keymap.ini
      if(iniVal == "" or iniVal == -1) then begin
         iniVal := get_ini_string(lang_ini_str);
         if(iniVal != "" and iniVal != -1) then language := iniVal;
         debug_msg(lang_ini_str + "=" + language);
      end else
         language := iniVal;

      register_hook_proc(HOOK_GAMEMODECHANGE, GameModeChange_Handler);
      register_hook_proc(HOOK_KEYPRESS, KeyPress_Handler);

      // Create an array and write the array of the ID number in the global variable
      // access to an array of other scripts
      tma_data_array := create_array(6, 0);
      set_sfall_global("TMA_DATA", tma_data_array);

      tma_gvar_array := create_array(3, 0);
      set_sfall_global("TMA_GVAR", tma_gvar_array);
   end
end

procedure GameModeChange_Handler begin
   variable key, iniVals, iniVal;
   variable prev_mode := game_mode;
   game_mode := get_game_mode;

   if (tellme_button == false and game_mode == DIALOG) then begin
      // TMA doesn't work with party members (different interface)
      if (obj_in_party(dialog_obj) == false) then begin
         if (charactersMap == 0) then begin
            // English is default language
            charactersMap := {
                2:"1",  3:"2",  4:"3",  5:"4",  6:"5",  7:"6",  8:"7",  9:"8", 10:"9", 11:"0",
               12:"-", 13:"=", 16:"q", 17:"w", 18:"e", 19:"r", 20:"t", 21:"y", 22:"u", 23:"i",
               24:"o", 25:"p", 30:"a", 31:"s", 32:"d", 33:"f", 34:"g", 35:"h", 36:"j", 37:"k",
               38:"l", 39:";", 44:"z", 45:"x", 46:"c", 47:"v", 48:"b", 49:"n", 50:"m", 51:",",
               52:".", 57: " "
            };
            charactersMapUpper := {
                2:"!",  3:"@",  4:"#",  5:"$",  6:"%",  7:"^",  8:"&",  9:"*", 10:"(", 11:")",
               12:"_", 13:"+", 16:"Q", 17:"W", 18:"E", 19:"R", 20:"T", 21:"Y", 22:"U", 23:"I",
               24:"O", 25:"P", 30:"A", 31:"S", 32:"D", 33:"F", 34:"G", 35:"H", 36:"J", 37:"K",
               38:"L", 39:":", 44:"Z", 45:"X", 46:"C", 47:"V", 48:"B", 49:"N", 50:"M", 51:"<",
               52:">", 57: " "
            };
            // Read chars from keymap.ini
            iniVals := get_ini_section(key_map_path, language);
            foreach (key: iniVal in iniVals) begin
               if (strlen(iniVal) > 1) then begin
                  key := atoi(key);
                  charactersMap[key] := iniVal[0];
                  charactersMapUpper[key] := iniVal[1];
               end
            end
            fix_array(charactersMap);
            fix_array(charactersMapUpper);
         end

         if (prev_mode bwand BARTER) then
            call create_button in 1; // delay call
         else
            call create_button;
      end
   end
   else if (tellme_button and (game_mode bwand DIALOG) == false) then begin
      call delete_button;

      // Unset TMA data when exiting dialog mode
      reset_tma_data;
      debug_msg("Unset TMA data.");
   end
   else if (tellme_button and (game_mode bwand (DIALOG + SPECIAL) or game_mode bwand BARTER)) then begin
      call delete_button;
      if (fetch_input) then call CloseInput;
   end
end

procedure KeyPress_Handler begin
   variable
      key_state := get_sfall_arg,
      key_dik := get_sfall_arg,
      char;

   if (key_state) then begin
      if (fetch_input) then begin
         if (key_dik == DIK_ESCAPE) then begin
            call CloseInput;
            return;
         end
         else if (key_dik == DIK_LSHIFT or key_dik == DIK_RSHIFT) then begin
            shiftPressed := true;
            return;
         end

         call ClearInputBox;

         if (key_dik == DIK_RETURN or key_dik == DIK_NUMPADENTER and input != "") then begin
            call GenerateReply;
         end
         else if (key_dik == DIK_BACK and input != "") then begin
            input := substr(input, 0, -1);
         end
         else begin
            if (shiftPressed > 0) then
               char := charactersMapUpper[key_dik];
            else
               char := charactersMap[key_dik];
            if (char) then begin
               char := input + char;
               if (get_text_width(char) < 234) then
                  input := char;
               else
                  play_sfx(SoundError);
            end
            //debug("width: " + get_text_width(input) + " " + input);
         end

         SelectWin("tellme_interface");
         Format(input + "_", 200, 102, 240, 14, justifyleft);
         ShowWin;

         // Override key with something else, because 1, 2, 3, 4, etc. can still advance through dialog
         // Allow screenshots, though
         if (key_dik != DIK_F12) then set_sfall_return(-1);
      end
   end
   else if (fetch_input) then begin
      if (key_dik == DIK_LSHIFT or key_dik == DIK_RSHIFT) then shiftPressed := false;
   end
end

procedure create_button begin
   tellme_button := true;

   Scr_Width  := (get_screen_width / 2);
   Scr_Height := (get_screen_height / 2);

   if ((get_ini_setting("f2_res.ini|IFACE|IFACE_BAR_MODE") == 1 or get_ini_setting("f2_res.ini|OTHER_SETTINGS|DIALOG_SCRN_BACKGROUND") == 1) or Scr_Height == 240) then begin
      Scr_Height += 50;
   end

   create_win("win_input", (Scr_Width + 272), (Scr_Height + 116), 15, 15);
   SelectWin("win_input");
   AddButton("button_input", 0, 0, 15, 15);
   AddButtonGFX("button_input", "PCX\\DI_RDBT1.pcx", "PCX\\DI_RDBT2.pcx", "PCX\\DI_RDBT2.pcx");
   AddButtonProc("button_input", do_on, do_off, do_down, do_up);
   ShowWin;
end

procedure delete_button begin
   if (tellme_button) then begin
      tellme_button := false;
      DeleteWin("win_input");
   end
end

procedure do_on begin
   MousonBut := true;
end

procedure do_off begin
   if (ButPres) then play_sfx(SoundOff);
   MousonBut := false;
   ButPres := false;
end

procedure do_off_small begin
   if (ButPres) then play_sfx(SoundR);
   MousonBut := false;
   ButPres := false;
end

procedure do_down begin
   if (ButPres == false) then begin
      ButPres := true;
      play_sfx(SoundP);
   end
end

procedure do_down_small begin
   if (ButPres == false) then begin
      ButPres := true;
      play_sfx(SoundDown);
   end
end

procedure do_up begin
   ButPres := false;
   play_sfx(SoundOff);
   if (fetch_input == false) then call OpenInput;
end

procedure do_up_cancel begin
   ButPres := false;
   play_sfx(SoundR);
   call CloseInput;
end

procedure do_up_ok begin
   ButPres := false;
   play_sfx(SoundR);

   if (input != "") then begin
      call ClearInputBox;
      Format("_", 200, 102, 240, 14, justifyleft);
      ShowWin; // redraw tellme interface
      call GenerateReply;
   end
end

// Create input interface
procedure OpenInput begin
   variable caps, w;

   // Only open interface if valid TMA data has been saved
   // (computer terminals and some other critters don't have TMAs)
   if (tma_data_array[0] > 0) then begin
      shiftPressed := false;
      fetch_input := true;
      input := "";

      //Scr_Width := get_interface_x(WINTYPE_DIALOG);
      //Scr_Height := get_interface_y(WINTYPE_DIALOG);

      // Reply window (clear the Reply window)
      //create_win("tellme_reply", (Scr_Width + 132), (Scr_Height + 226), 390, 64);
      create_win("tellme_reply", (Scr_Width - 188), (Scr_Height - 64), 390, 64);
      SelectWin("tellme_reply");
      Display("PCX\\tellmeabout_reply.pcx");
      ShowWin;

      // Fake input / dialog option overlay
      //create_win("tellme_interface", (Scr_Width), (Scr_Height + 290), 640, 190);
      create_win("tellme_interface", (Scr_Width - 320), Scr_Height, 640, 190);
      SelectWin("tellme_interface");
      FillWin(0, 0, 0);

      if (language == "german") then
         Draw_Image("art\\intrface\\di_talk_ger.frm");
      else
         Draw_Image("art\\intrface\\di_talk.frm");
      draw_image("art\\intrface\\lsgbox.frm", 0, 320, 24, false);

      // CANCEL button
      AddButton("button_cancel", 335, 124, 15, 16);
      AddButtonGFX("button_cancel", "PCX\\lilreddn.pcx", "PCX\\lilredup.pcx", "PCX\\lilredup.pcx");
      AddButtonProc("button_cancel", do_on, do_off_small, do_down_small, do_up_cancel);
      // OK button
      AddButton("button_ok", 209, 124, 15, 16);
      AddButtonGFX("button_ok", "PCX\\lilreddn.pcx", "PCX\\lilredup.pcx", "PCX\\lilredup.pcx");
      AddButtonProc("button_ok", do_on, do_off_small, do_down_small, do_up_ok);

      SetFont(103);
      SetTextColor(0.52, 0.75, 0.15);

      Format(mstr_tma(1), 240, 74, 200, 30, 0);
      Format(mstr_tma(2), 230, 123, 100, 30, 0);
      Format(mstr_tma(3), 355, 123, 100, 30, 0);

      SetFont(101);
      SetTextColor(0.0, 1.0, 0.0);
      Format("_", 200, 102, 240, 14, justifyleft);

      caps := "$" + dude_caps;
      w := get_text_width(caps);
      if w > 60 then w := 60;
      Format(caps, 38 - (w / 2), 36, w, 15, justifyleft);

      ShowWin;
   end
end

procedure CloseInput begin
   fetch_input := false;
   DeleteWin("tellme_interface");
   DeleteWin("tellme_reply");
end

// "critical" keyword
// "ensure [procedure] works reliably. AFAIK it basically tells the engine "just stop what you're doing and focus on running this procedure first" -NovaRain
critical procedure GenerateReply begin
   variable
      critter := dialog_obj,
      reply_source := tma_data_array[0],
      msg_offset := tma_data_array[1],
      reply_name_start := tma_data_array[2],
      reply_name_end := tma_data_array[3],
      reply_unknown_start := tma_data_array[4],
      reply_unknown_end := tma_data_array[5],

      i, input_check, reply_final, split, word, keyword, split_sentence, found := 0,

      // Testcode for the future: Set variable if player hits a specific reply
      tma_var_line := tma_gvar_array[0],
      tma_var_gvar := tma_gvar_array[1],
      tma_var_state := tma_gvar_array[2];

   // Remove potential excess signs and spaces at the end of input
   for (i := strlen(input) - 1; (i > 0); i--) begin
      If input[i] == "?" then i--;
      If input[i] == "!" then i--;
      If input[i] != " " then begin
         input := substr(input, 0, i + 1);
         break;
      end
   end

   /*******************************************************
      Find reply - Check the whole sentence
   *******************************************************/
   input := " " + input + " "; // We do this to check for words like "Shady" and not "xShadyx"
   convert_to_lower(input);

   if (reply_name_start > 0) then begin
      variable crit_name := obj_name(critter);
      convert_to_lower(crit_name);
      if (len_array(string_split(input, crit_name)) > 1) then begin
         reply_final := message_str(reply_source, random(reply_name_start, reply_name_end));
         found := 1;
      end
   end

   for (i := 0; (i < 100 and found == 0); i++) begin
      input_check := message_str(reply_source, i + msg_offset);
      if (input_check != "Error" and input_check != "") then begin
         //debug("input_check: " + input_check);
         split := string_split(input_check, "|");

         foreach (word : keyword in split) begin
            //debug("keyword: " + keyword);
            keyword := " " + keyword + " "; // If keyword with spaces is in the sentence, we know it won't be "xShadyx"
            convert_to_lower(keyword);

            if (len_array(string_split(input, keyword)) > 1) then begin
               reply_final := message_str(reply_source, (i + msg_offset) + 100);
               found := 1;

               if ((i + msg_offset) == tma_var_line) then
                  set_global_var(tma_var_gvar, tma_var_state);

               break;
            end
         end
      end
      else
         break;
   end

   debug_msg("input: <" + input + ">");

   // No valid reply found
   if (reply_final <= 0) then reply_final := message_str(reply_source, random(reply_unknown_start, reply_unknown_end));

   // Print reply
   call PrintReply(reply_final);

   // Reset input
   input := "";
end

procedure PrintReply(variable text) begin
   SelectWin("tellme_reply");
   Display("PCX\\tellmeabout_reply.pcx");
   GotoXY(3, 9);
   PrintRect("  " + text, 380, justifyleft);
   ShowWin;
end

procedure ClearInputBox begin
   SelectWin("tellme_interface");
   FillRect(198, 98, 242, 14, 0.02, 0.05, 0);
end
