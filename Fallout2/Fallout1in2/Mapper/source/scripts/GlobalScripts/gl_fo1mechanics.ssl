/*

   Adjust Fo2 core mechanics to get them closer to Fo1.

*/

/* Include Files */
#include "define.h"
#include "command.h"
#include "updatmap.h"
#include "voodoo.h"
#include "sfall/main.h"
#include "sfall/sfall.rotators.h"

#include "area/boneyard.h"

/* Standard Script Procedures */
procedure start;

procedure general;
procedure GameModeChange_handler;
procedure scene_master_destroyed;
procedure scene_vats_destroyed;

procedure night_person;
procedure gecko_skinning;
procedure skilled;
procedure motion_scanner;
procedure mrhandy_fix;

procedure DescriptionObj_handler;
procedure AfterHitRoll_handler;
procedure UseAnimObj_handler;
procedure UseSkillOn_handler;
procedure UseObjOn_handler;
procedure WithinPerception_handler;
procedure CalcAPcost_handler;

procedure steal_urn;

variable iniVal;
variable dude_elev := 0;

variable item;
variable tmpScanner := false;

#define get_active_hand(slot)    if (active_hand == 0) then slot := INVEN_TYPE_LEFT_HAND; \
                                 else slot := INVEN_TYPE_RIGHT_HAND
#define get_inactive_hand(slot)  if (active_hand == 0) then slot := INVEN_TYPE_RIGHT_HAND; \
                                 else slot := INVEN_TYPE_LEFT_HAND

#define set_lootable(PID)     set_proto_data(PID, PROTO_CR_FLAGS, get_proto_data(PID, PROTO_CR_FLAGS) bwand bwnot(CFLG_NOSTEAL))
#define set_unlootable(PID)   set_proto_data(PID, PROTO_CR_FLAGS, get_proto_data(PID, PROTO_CR_FLAGS) bwor CFLG_NOSTEAL)

import variable Neal_urn_ptr;

procedure start begin
   if (game_loaded) then begin
      set_global_script_type(0);
      register_hook_proc(HOOK_GAMEMODECHANGE, GameModeChange_handler);
      register_hook_proc(HOOK_DESCRIPTIONOBJ, DescriptionObj_handler);
      register_hook_proc(HOOK_AFTERHITROLL, AfterHitRoll_handler);
      register_hook_proc(HOOK_USESKILLON, UseSkillOn_handler);
      register_hook_proc(HOOK_USEOBJON, UseObjOn_handler);
      register_hook_proc(HOOK_USEANIMOBJ, UseAnimObj_handler);
      register_hook_proc(HOOK_WITHINPERCEPTION, WithinPerception_handler);
      //register_hook_proc(HOOK_CALCAPCOST, CalcAPcost_handler);

      //iniVal := get_ini_string("ddraw.ini|misc|FastShotFix");
      //intface_redraw;
   end

   call general;
end

procedure general begin
   // Max skill is 200%
   set_skill_max(200);

   // Max rad resistance is 100%
   set_pc_stat_max(STAT_rad_resist, 100);

   // Changes the PipBoy rest timer from 08:00 to 06:00
   VOODOO_rest_till_0600;

   // Disable the "You encounter: ..." message
   VOODOO_disable_YouEncounter_message;

   // Fix dogmeat party member dialog
   VOODOO_dogmeat_pm_dialog;

   // Change the skill bonus from Survivalist Perk to 0.
   VOODOO_survivalist_bonus;

   // Change the skill bonus from Mr. Fixit perk to +20%.
   VOODOO_mr_fixit_bonus;

   // Change the credits and wordlmap music tracks to Fo1 files.
   VOODOO_fo1_music;

   // Enable / Disable looting Geckos based on perk.
   call gecko_skinning;
end

procedure GameModeChange_handler begin
   if (get_game_mode bwand WORLDMAP) then begin
      call scene_master_destroyed;
      call scene_vats_destroyed;
   end
   call night_person;
   call skilled;

   // The Eyebot has a built-in motion scanner function
   if Eyebot_In_Party then
      call motion_scanner;

   if MrHandyC_In_Party then
      call mrhandy_fix;

   // Activate special radiation death if > 1000 rem. See data/enddeath.txt
   set_global_var(GVAR_SPECIAL_RADIATION_DEATH, dude_rads);
end

procedure scene_master_destroyed begin
   if master_killed and not(cathedral_destroyed) then begin
      set_cathedral_destroyed;

      inc_cathedral_rep(REP_BONUS_BLOWN_UP_MASTER);

      give_xp_msg(EXP_MASTER_DESTROYED, gen_mstr(702));

      mark_map_entrance_state(MAP_CHILDRN1, 0);
      mark_map_entrance_state(MAP_CHILDRN2, 0);
      mark_map_entrance_state(MAP_MSTRLR12, 0);
      mark_map_entrance_state(MAP_MSTRLR34, 0);
      mark_map_entrance_elev_state(MAP_CHILDRN1, 1, 0); // We need this additionally, otherwise the stupid entry point won't disable itself.
      mark_map_entrance_state(MAP_CHILDEAD, 1);

      play_gmovie(CATHEXPLODE_MOVIE);

      if vats_destruction_started and waterchip_returned then begin
         force_encounter_with_flags(MAP_V13ENT, ENCOUNTER_FLAG_FADEOUT);
      end
   end
end

procedure scene_vats_destroyed begin
   if vats_destruction_started and not(military_base_destroyed) then begin
      set_military_base_destroyed;

      inc_mbase_rep(REP_BONUS_BLOWN_UP_VATS);

      give_xp_msg(EXP_VATS_DESTROYED, gen_mstr(701));

      mark_map_entrance_state(MAP_MBENT, 0);
      mark_map_entrance_state(MAP_MBSTRG12, 0);
      mark_map_entrance_state(MAP_MBVATS12, 0);
      mark_map_entrance_state(MAP_MBDEAD, 1);

      play_gmovie(VATSEXPLODE_MOVIE);

      if master_killed and waterchip_returned then begin
         force_encounter_with_flags(MAP_V13ENT, ENCOUNTER_FLAG_FADEOUT);
      end
   end
end

procedure night_person begin
   /* Night Person Trait
   As a night-time person, you are more awake when the sun goes down.
   Your Intelligence and Perception are improved at night, but dulled during the day. */
   if (dude_trait(TRAIT_night_person)) then begin
      if (global_var(GVAR_NIGHT_PERSON_ACTIVE) == 0) then begin
         set_global_var(GVAR_NIGHT_PERSON_ACTIVE, 1);
         mod_skill_points_per_level(2);
      end

      if night AndAlso (global_var(GVAR_NIGHT_PERSON_ACTIVE) == 1) then begin
         set_global_var(GVAR_NIGHT_PERSON_ACTIVE, 2);
         set_critter_extra_stat(dude_obj, STAT_pe, get_critter_extra_stat(dude_obj, STAT_pe) + 2);
         set_critter_extra_stat(dude_obj, STAT_iq, get_critter_extra_stat(dude_obj, STAT_iq) + 2);
         debug_msg("Night person trait is active!");
      end
      else if not(night) AndAlso (global_var(GVAR_NIGHT_PERSON_ACTIVE) == 2) then begin
         set_global_var(GVAR_NIGHT_PERSON_ACTIVE, 1);
         set_critter_extra_stat(dude_obj, STAT_pe, get_critter_extra_stat(dude_obj, STAT_pe) - 2);
         set_critter_extra_stat(dude_obj, STAT_iq, get_critter_extra_stat(dude_obj, STAT_iq) - 2);
         debug_msg("Night person trait is not active!");
      end
   end
   // If used Mutate!-perk to remove Night Person, reset everything to default:
   else if (not(dude_trait(TRAIT_night_person)) AndAlso (global_var(GVAR_NIGHT_PERSON_ACTIVE) > 0)) then begin
      set_global_var(GVAR_NIGHT_PERSON_ACTIVE, 0);
      mod_skill_points_per_level(0);
      if night then begin
         set_critter_extra_stat(dude_obj, STAT_pe, get_critter_extra_stat(dude_obj, STAT_pe) - 2);
         set_critter_extra_stat(dude_obj, STAT_iq, get_critter_extra_stat(dude_obj, STAT_iq) - 2);
      end
      debug_msg("Night person trait is disabled!");
   end
end

procedure skilled begin
   // We have to manually do this, because we are overwriting the hardcoded effect in the perks.ini file.
   if dude_trait(TRAIT_skilled) then
      set_perk_freq(4);
end

procedure gecko_skinning begin
   if dude_perk(PERK_gecko_skinning_perk) then begin
      set_proto_data(PID_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_GECKO, PROTO_CR_FLAGS) bwand bwnot(CFLG_NOSTEAL));
      set_proto_data(PID_GOLDEN_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_GOLDEN_GECKO, PROTO_CR_FLAGS) bwand bwnot(CFLG_NOSTEAL));
      set_proto_data(PID_FIRE_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_FIRE_GECKO, PROTO_CR_FLAGS) bwand bwnot(CFLG_NOSTEAL));
   end
   else begin
      set_proto_data(PID_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_GECKO, PROTO_CR_FLAGS) bwor CFLG_NOSTEAL);
      set_proto_data(PID_GOLDEN_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_GOLDEN_GECKO, PROTO_CR_FLAGS) bwor CFLG_NOSTEAL);
      set_proto_data(PID_FIRE_GECKO, PROTO_CR_FLAGS, get_proto_data(PID_FIRE_GECKO, PROTO_CR_FLAGS) bwor CFLG_NOSTEAL);
   end
end

procedure motion_scanner begin
   variable
   event := get_sfall_arg,
   prevMode := get_sfall_arg,
   slot, tmpItem, flag;

   if (get_game_mode bwand AUTOMAP) then begin
      get_inactive_hand(slot);
      item := critter_inven_obj2(dude_obj, slot);
      if (obj_pid(item) != PID_MOTION_SENSOR) then begin
         unwield_slot(dude_obj, slot);
         tmpItem := create_object(PID_MOTION_SENSOR, 0, 0);
         add_obj_to_inven(dude_obj, tmpItem);
         if (slot == INVEN_TYPE_LEFT_HAND) then begin
            set_flags(tmpItem, get_flags(tmpItem) bwor FLAG_LEFT_HAND);
         end else begin
            set_flags(tmpItem, get_flags(tmpItem) bwor FLAG_RIGHT_HAND);
         end
         tmpScanner := true;
      end
   end else if (tmpScanner andAlso (prevMode bwand AUTOMAP)) then begin
      get_inactive_hand(slot);
      tmpItem := critter_inven_obj2(dude_obj, slot);
      if (tmpItem andAlso obj_pid(tmpItem) == PID_MOTION_SENSOR) then begin
         rm_obj_from_inven(dude_obj, tmpItem);
         destroy_object(tmpItem);
         if (slot == INVEN_TYPE_LEFT_HAND) then begin
            set_flags(item, get_flags(item) bwor FLAG_LEFT_HAND);
         end else begin
            set_flags(item, get_flags(item) bwor FLAG_RIGHT_HAND);
         end
         tmpScanner := false;
         item := 0;
      end
   end
end

procedure mrhandy_fix begin
   // Because Mr.Handy has the "robot" bodytype, it's not possible to transfer items via the stealing skill.
   // So we switch him to a human once the loot interface is open, and revert him back to robot once done.
   if (get_game_mode bwand INTFACELOOT) then begin
      if (loot_obj == Handy_ptr) then begin
         set_proto_data(obj_pid(Handy_ptr), PROTO_CR_BODY_TYPE, 0);
      end
   end
   else if (get_proto_data(obj_pid(Handy_ptr), PROTO_CR_BODY_TYPE) == 0) then begin
      set_proto_data(obj_pid(Handy_ptr), PROTO_CR_BODY_TYPE, 2);
   end
end

procedure DescriptionObj_handler begin
   variable
      item := obj_pid(get_sfall_arg),
      description;

   if (item == PID_FARM_PARTS) AndAlso get_quest_farm_active then begin
      //if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, 0))) then begin
         description := get_string_pointer(message_str(SCRIPT_FARMPART, 101));
         set_sfall_return(description);
      //end
   end
end

procedure AfterHitRoll_handler begin
   variable
      willHit := get_sfall_arg,
      attacker := get_sfall_arg,
      target := get_sfall_arg,
      slot, item;

   if (attacker) then begin
      if (attacker == dude_obj) then begin
         get_active_hand(slot);
         item := critter_inven_obj(attacker, slot);
      end else begin
         item := get_right_hand(attacker);
      end

      if (item > 0) then begin
         if (obj_pid(item) == PID_MOLOTOV_COCKTAIL) then begin
            if (obj_type(target) == OBJ_TYPE_SCENERY and willHit > 1) then begin
               set_proto_data(PID_MOLOTOV_COCKTAIL, PROTO_WP_DMG_TYPE, DMG_explosion);
            end
            else begin
               set_proto_data(PID_MOLOTOV_COCKTAIL, PROTO_WP_DMG_TYPE, DMG_fire);
               set_attack_explosion_radius(2); // grenade radius
               set_attack_is_explosion_fire;
            end
         end
      end
   end
end

procedure UseAnimObj_handler begin
   variable
      critter := get_sfall_arg,
      target := get_sfall_arg,
      use_anim := get_sfall_arg,
      sound,
      training_anim;

   if (obj_pid(target) == PID_PUNCHING_BAG) then begin
      if (get_script(target) == SCRIPT_ZSPNCHBG) then begin
         training_anim := random(0, 1);
         if (training_anim == 0) then
            training_anim := ANIM_throw_punch;
         else
            training_anim := ANIM_kick_leg;
         sound := sfx_build_char_name(critter, training_anim, snd_contact);
         reg_anim_play_sfx(critter, sound, 0);
         set_sfall_return(training_anim);

         //set_sfall_return(-1); // TODO: The animation started in SCRIPT_ZSPNCHBG will only run once if this is set to -1.
      end
   end
end

procedure UseSkillOn_handler begin
   variable
      critter := get_sfall_arg,
      target := get_sfall_arg,
      skill := get_sfall_arg;

   if (skill == SKILL_STEAL) then begin
      if (obj_type(target) == OBJ_TYPE_SCENERY and obj_pid(target) == PID_TROPHY) then begin
         set_cursor_mode(0);
         reg_anim_begin();
         if (tile_distance_objs(critter, target) < 5) or (dude_is_sneaking) then
            reg_anim_obj_move_to_obj(critter, target, 0);
         else
            reg_anim_obj_run_to_obj(critter, target, 0);
         reg_anim_animate(critter, ANIM_magic_hands_middle, 0);
         reg_anim_callback(steal_urn);
         reg_anim_end();
      end
   end
end

procedure steal_urn begin
   if (Neal_urn_ptr != 0) then begin
      add_timer_event(Neal_urn_ptr, game_ticks(0), 1);
   end
end

procedure UseObjOn_handler begin
   variable
      target := get_sfall_arg,
      source := get_sfall_arg,
      item := get_sfall_arg;

   // Give 1 bottle cap when drinking a Nuka Cola :>
   if (obj_pid(item) == PID_NUKA_COLA) then
      item_caps_adjust(source, 1);
end

procedure WithinPerception_handler begin
   variable
      watcher := get_sfall_arg,
      target := get_sfall_arg,
      oResult := get_sfall_arg,
      type := get_sfall_arg;

   // Latest Sfall would end the combat automatically and the player gets teleported away.
   // This is to allow the fight against Decker to continue, even after the thugs surrendered
   if (CUR_MAP_HUBDWNTN AndAlso dude_elevation == 1) then begin
      if ((global_var(GVAR_UNDERGROUND_STATUS) == 1) AndAlso (map_var(54) == 1) AndAlso watcher != dude_obj) then begin
         debug_msg("WithinPerception: Decker and Kane are dead!!");
         set_sfall_return(0);
      end
   end
   else if CUR_AREA_GLOW then begin
      // Can't end combat after attacking disabled robots in the Glow, so we do the same as above.
      if (((global_var(GVAR_GLOW_POWER) < 2) or (global_var(GVAR_GLOW_TRAPS_STATE) == 1)) AndAlso watcher != dude_obj AndAlso (true_party_size == 0)) then begin
         set_sfall_return(0);
      end
   end
end

procedure CalcAPcost_hAndAlsoler begin
   // This is done by latest Sfall now.
   /*variable
      critter := get_sfall_arg,
      atkType := get_sfall_arg,
      isAimed := get_sfall_arg,
      apCost := get_sfall_arg,
      slot, item;

   // Replicates Fo1 behavior of the Fast Shot Trait (Unarmed attacks are unaffected, but also can't be aimed)
   // This is needed because the Sfall FastShotFix effect is wrong.
   if dude_trait(TRAIT_fast_shot) AndAlso (iniVal == 2) then begin
      get_active_hAndAlso(slot);
      item := critter_inven_obj(dude_obj, slot);
      if (item == 0) then begin
         set_sfall_return(apCost + 1);
      end
   end*/
end
