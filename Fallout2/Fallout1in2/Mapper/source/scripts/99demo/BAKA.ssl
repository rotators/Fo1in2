/*

   Scrapheap - Baka, fools gang member

*/

/* Include Files */
#include "define.h"
#include "scrapheap.h"
#include "maps/junkdemo.h"

#define NAME                    SCRIPT_BAKA
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SCRAPHEAP)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;

procedure baka00;
procedure baka00a;
procedure baka00b;
procedure baka01;
procedure baka01_1;
procedure baka02;
procedure baka02a;
procedure baka03;
procedure baka04;
procedure baka05;
procedure baka06;
procedure baka07;
procedure baka07a;
procedure baka08;
procedure baka08_1;
procedure baka09;
procedure baka10;
procedure baka11;
procedure baka12;
procedure baka13;
procedure baka14;
procedure baka15;
procedure baka16;
procedure baka17;
procedure baka17a;
procedure baka18;
procedure baka19;
procedure baka20;
procedure baka21;
procedure baka22;
procedure baka23;
procedure baka24;
procedure baka25;
procedure baka25_1;
procedure baka25a;
procedure baka26;
procedure baka27;
procedure baka28;
procedure baka29;
procedure baka30;
procedure baka26a;
procedure bakacombat;
procedure bakadone;
procedure bakaend;

variable HEREBEFORE;
variable Only_Once := 1;
variable visit;
variable tmp_hostile;

import variable skippy_talk;
import variable Phrax_Pointer;
import variable Rock_Pointer;

variable This_Once;

procedure start begin
   if DUDE_IS_FOOL then begin
      set_self_team(TEAM_PLAYER);
   end
   else begin
      set_self_team(TEAM_DEMO_FOOLS);
   end
   if Only_Once then begin
      Only_Once := 0;
      Fool_Pointer := self_obj;
      I_Am_A_Fool := 1;
   end
end

procedure look_at_p_proc begin
   script_overrides;
   if KNOWS_FOOLS then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

procedure description_p_proc begin
   script_overrides;
   if KNOWS_FOOLS then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      call Start_War;
   end
   else if (self_can_see_dude) then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   if (CRYPT_COUNTER == 0) then begin
      float_msg(self_obj, mstr(172), FLOAT_MSG_NORMAL);
      //signal_end_game;
      debug("signal_end_game");
   end
   else begin
      dude_look_at_self;
      start_gdialog(414, self_obj, 4, -1, -1);
      gsay_start;
      if DUDE_IS_CRYPT then begin
         call baka00;
      end
      else begin
         if DUDE_IS_FOOL then begin
            if (visit == 0) then begin
               call baka22;
            end
            else begin
               call baka26;
            end
         end
         else begin
            if (HEREBEFORE == 0) then begin
               call baka06;
            end
            else begin
               call baka12;
            end
         end
      end
      gsay_end;
      end_dialogue;
   end
end

procedure baka00 begin
   Reply(102);
   NOption(103, baka00a, 4);
   NOption(104, baka03, 4);
   NOption(105, baka00b, 4);
end

procedure baka00a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call baka02;
   end
   else begin
      call baka01;
   end
end

procedure baka00b begin
   add_timer_event(self_obj, game_ticks(20), 2);
end

procedure baka01 begin
   Reply(106);
   NOption(164, baka01_1, 4);
end

procedure baka01_1 begin
   NMessage(174);
   call bakacombat;
end

procedure baka02 begin
   Reply(107);
   NOption(164, baka02a, 4);
end

procedure baka02a begin
   Reply(172);
   set_dude_is_fool;
   call bakadone;
end

procedure baka03 begin
   Reply(108);
   NOption(109, bakacombat, 4);
   NOption(110, baka05, 4);
   NOption(111, baka04, 4);
end

procedure baka04 begin
   Reply(112);
   NOption(163, bakacombat, 1);
end

procedure baka05 begin
   Reply(113);
   NOption(163, bakacombat, 1);
end

procedure baka06 begin
   set_knows_fools;
   Reply(114);
   NOption(115, baka07, 4);
   if KNOWS_CRYPTS then
      NOption(116, baka08, 4);
   NOption(117, baka09, 4);
end

procedure baka07 begin
   Reply(118);
   NOption(164, baka07a, 4);
   NOption(171, bakaend, 4);
end

procedure baka07a begin
   Reply(172);
   NOption(119, baka08, 4);
   NOption(171, bakaend, 4);
end

procedure baka08 begin
   Reply(120);
   NOption(164, baka08_1, 4);
end

procedure baka08_1 begin
   Reply(175);
   set_dude_is_fool;
   call bakadone;
end

procedure baka09 begin
   Reply(121);
   NOption(122, baka10, 4);
   NOption(123, baka11, 4);
end

procedure baka10 begin
   Reply(124);
   call bakadone;
   call bakacombat;
end

procedure baka11 begin
   Reply(125);
   call bakadone;
end

procedure baka12 begin
   Reply(126);
   NOption(127, baka13, 4);
   if KNOWS_POWER then
      NOption(128, baka17, 4);
   NOption(168, bakaend, 4);
end

procedure baka13 begin
   Reply(129);
   NOption(130, baka14, 4);
   NOption(131, baka15, 4);
   NOption(132, baka16, 4);
   NOption(170, bakaend, 4);
end

procedure baka14 begin
   Reply(133);
   set_dude_is_fool;
   call bakadone;
end

procedure baka15 begin
   NMessage(134);
   call bakacombat;
end

procedure baka16 begin
   Reply(135);
   skippy_talk := 1;
   call bakadone;
end

procedure baka17 begin
   Reply(136);
   NOption(164, baka17a, 4);
end

procedure baka17a begin
   Reply(176);
   NOption(137, baka18, 4);
   NOption(138, bakaend, 4);
end

procedure baka18 begin
   Reply(139);
   NOption(140, baka19, 4);
   NOption(141, bakaend, 4);
end

procedure baka19 begin
   Reply(142);
   NOption(143, baka20, 4);
   NOption(144, baka21, 4);
end

procedure baka20 begin
   Reply(145);
   set_dude_is_fool;
   call bakadone;
end

procedure baka21 begin
   Reply(146);
   call bakadone;
   call bakacombat;
end

procedure baka22 begin
   visit := 1;
   Reply(147);
   NOption(148, baka23, 4);
   NOption(149, baka24, 4);
   if (obj_pid(dude_armor) == PID_METAL_ARMOR) then begin
      NOption(150, baka29, 4);
   end
end

procedure baka23 begin
   Reply(151);
   NOption(152, baka24, 4);
end

procedure baka24 begin
   set_knows_power;
   Reply(153);
   NOption(154, baka25, 4);
end

procedure baka25 begin
   Reply(155);
   NOption(164, baka25_1, 4);
end

procedure baka25_1 begin
   Reply(177);
   NOption(156, baka25a, 4);
end

procedure baka25a begin
   set_global_var(GVAR_CSCOUT_1, 1);
end

procedure baka26 begin
   Reply(157);
   NOption(158, baka26a, 4);
   NOption(159, baka27, 4);
end

procedure baka27 begin
   Reply(160);
   call bakadone;
end

procedure baka28 begin
   Reply(161);
   set_demo_gangwar_active;
   call bakadone;
end

procedure baka29 begin
   Reply(162);
   call bakadone;
end

procedure baka30 begin
   Reply(169);
   call bakadone;
end

procedure baka26a begin
   if (global_var(GVAR_CSCOUT_1) == 2) then begin
      call baka28;
   end
   else begin
      call baka30;
   end
end

procedure bakacombat begin
   tmp_hostile := 1;
end

procedure bakadone begin
   NOption(163, bakaend, 4);
end

procedure bakaend begin
end

procedure critter_p_proc begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   LVar0 := (self_obj == Fool_Pointer) or (self_obj == Crypt_Pointer) or (self_obj == Phrax_Pointer) or (self_obj == Rock_Pointer);
   if (I_Am_A_Fool and Crypt_Taunt) then begin
      Crypt_Taunt := 0;
      if (random(1, 5) == 1) then begin
         float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(100, 113)), FLOAT_MSG_SEQUENTIAL);
      end
   end
   else if (I_Am_A_Crypt and Fool_Taunt) then begin
      Fool_Taunt := 0;
      if (random(1, 5) == 1) then begin
         float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, random(200, 218)), FLOAT_MSG_SEQUENTIAL);
      end
   end
   else if (get_demo_gangwar_active and (self_tile != 20725)) then begin
      self_walk_to_tile(20725);
   end
   else if (self_tile == 20725) then begin
      add_timer_event(self_obj, game_ticks(2), 1);
   end
   else if (map_var(MVAR_Broken_Gen) and (self_tile != 27504)) then begin
      if ((self_obj == Phrax_Pointer) and (This_Once == 0)) then begin
         This_Once := 1;
         float_msg(self_obj, message_str(SCRIPT_JUNKDEMO, 300), FLOAT_MSG_DARK_GREY);
      end
      set_demo_gangwar_completed;
      self_walk_to_tile(27504);
   end
   else if ((self_tile == 27504) and get_demo_gangwar_completed) then begin
      if not(is_loading_game) then set_self_invisible;
      if (I_Am_A_Fool) then begin
         dec_fools_counter;
      end
      else begin
         dec_crypt_counter;
      end
   end
   else begin
      if (tmp_hostile) then begin// This must come FIRST as an if/then/else before "attack dude" type code, otherwise it runs too soon and can override other attack calls
         attack(dude_obj);
      end
      else if (not(LVar0)) then begin
         if (random(0, 21) == 1) then begin
            LVar1 := tile_num_in_direction(self_tile, random(0, 5), 2);
            self_walk_to_tile(LVar1);
         end
      end
   end
end

procedure destroy_p_proc begin
   dec_fools_counter;
end
