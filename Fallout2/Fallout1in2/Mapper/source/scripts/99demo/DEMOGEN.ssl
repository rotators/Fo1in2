/*

   Scrapheap - Generator

*/

/* Include Files */
#include "define.h"
#include "scrapheap.h"
#include "maps/junkdemo.h"

#define NAME                    SCRIPT_DEMOGEN

#include "command.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure timed_event_p_proc;
procedure use_p_proc;

#define LVAR_Science_Check       (0)
#define LVAR_Repair_Check        (1)

import variable Phrax_Pointer;

#define EVENT_ANIM         (1)
#define EVENT_ENDGAME      (2)
#define EVENT_GENERATOR    (3)

procedure start begin
end

procedure map_enter_p_proc begin
   if not(map_var(MVAR_Broken_Gen)) then begin
      reg_anim_clear(self_obj);
      reg_anim_begin();
      reg_anim_animate_forever(self_obj, ANIM_stand);
      reg_anim_end();
   end
   flush_add_timer_event(self_obj, 1, EVENT_ANIM);
end

procedure map_update_p_proc begin
   if not(map_var(MVAR_Broken_Gen)) then begin
      reg_anim_clear(self_obj);
      reg_anim_begin();
      reg_anim_animate_forever(self_obj, ANIM_stand);
      reg_anim_end();
   end
   else begin
      self_set_frame(0);
      reg_anim_clear(self_obj);
   end
end

procedure look_at_p_proc begin
   script_overrides;
   if (map_var(MVAR_Broken_Gen)) then begin
      display_msg(mstr(100));
   end
   else begin
      display_msg(mstr(101));
   end
end

procedure description_p_proc begin
   script_overrides;
   if (map_var(MVAR_Broken_Gen)) then begin
      display_msg(mstr(100));
   end
   else begin
      display_msg(mstr(101));
   end
end

procedure use_obj_on_p_proc begin
   script_overrides;
   if ((obj_pid(obj_being_used_with) == PID_MULTI_TOOL) and not(map_var(MVAR_Broken_Gen))) then begin
      set_map_var(MVAR_Broken_Gen, 1);
      give_exp_points(250);
      display_msg(mstr(102));
      inc_scrapheap_rep(REP_BONUS_GENERATOR_BROKEN);
   end
   else begin
      if (obj_being_used_with == PID_MULTI_TOOL) then begin
         display_msg(mstr(103));
      end
      else begin
         display_msg(mstr(104));
      end
   end
end

procedure use_skill_on_p_proc begin
   script_overrides;
   if (action_being_used == SKILL_SCIENCE) then begin
      if not(map_var(MVAR_Broken_Gen)) then begin
         if (local_var(LVAR_Science_Check)) then begin
            display_msg(mstr(105));
         end
         else begin
            if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, 30))) then begin
               // unused GVAR?
               //set_global_var(GVAR_ARADESH_NICER_ROBES_GFX, 1);
               display_msg(mstr(106));
            end
            else begin
               display_msg(mstr(107));
            end
         end
      end
      else begin
         if (local_var(LVAR_Science_Check)) then begin
            display_msg(mstr(108));
         end
         else begin
            if (is_success(roll_vs_skill(dude_obj, SKILL_SCIENCE, 0))) then begin
               display_msg(mstr(109));
            end
            else begin
               display_msg(mstr(110));
            end
         end
      end
      set_local_var(LVAR_Science_Check, 1);
   end
   else if (action_being_used == SKILL_REPAIR) then begin
      if not(map_var(MVAR_Broken_Gen)) then begin
         if (local_var(LVAR_Repair_Check)) then begin
            display_msg(mstr(111));
         end
         if (is_success(roll_vs_skill(dude_obj, SKILL_REPAIR, 0))) then begin
            display_msg(mstr(112));
         end
         else begin
            display_msg(mstr(113));
         end
      end
      else begin
         if (local_var(LVAR_Repair_Check)) then begin
            display_msg(mstr(114));
         end
         else begin
            if (is_success(roll_vs_skill(dude_obj, SKILL_REPAIR, 0))) then begin
               display_msg(mstr(115));
            end
            else begin
               display_msg(mstr(116));
            end
         end
         add_timer_event(self_obj, game_ticks(5), EVENT_ENDGAME);
      end
      set_local_var(LVAR_Repair_Check, 1);
   end
   else begin
      display_msg(mstr(117));
   end
   set_map_var(MVAR_Use_Generator, map_var(MVAR_Use_Generator) + 1);
   add_timer_event(Phrax_Pointer, 0, EVENT_GENERATOR);
end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_ANIM) then begin
      if ((anim_busy(self_obj) == false) and not(combat_is_initialized)) then begin
         if not(map_var(MVAR_Broken_Gen)) then begin
            reg_anim_begin();
            reg_anim_animate_forever(self_obj, ANIM_stand);
            reg_anim_end();
         end
      end
      add_timer_event(self_obj, 1, EVENT_ANIM);
   end
   else if (fixed_param == EVENT_ENDGAME) then begin
      //signal_end_game;
      debug("signal_end_game");
   end
end

procedure use_p_proc begin
   if not(map_var(MVAR_Broken_Gen)) then
      display_msg(mstr(118));
   else
      display_msg(mstr(119));
   set_map_var(MVAR_Use_Generator, map_var(MVAR_Use_Generator) + 1);
end
