/*

   Scrapheap - Generic peasant

*/

/* Include Files */
#include "define.h"
#include "scrapheap.h"
#include "maps/junkdemo.h"

#define NAME                    SCRIPT_PEZ
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SCRAPHEAP)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure push_p_proc;
procedure timed_event_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure pickup_p_proc;
procedure critter_p_proc;
procedure talk_p_proc;

procedure pez00;
procedure pez01;
procedure pez02;
procedure pez03;
procedure pez04;
procedure pez05;
procedure pezdone;
procedure pezend;
procedure timeforwhat;

#define LVAR_my_tile       (4)

variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable critter_tile;
variable HEREBEFORE;
variable PICK;
variable init_teams := 0;

procedure start begin
   if (init_teams == 0) then begin
      set_self_team(TEAM_DEMO_PEASANT);
      init_teams := 1;
   end
end

procedure map_enter_p_proc begin
   if map_first_run then begin
      set_local_var(LVAR_my_tile, self_tile);
   end
end

procedure push_p_proc begin
end

procedure timed_event_p_proc begin
   call timeforwhat;
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure pickup_p_proc begin
   attack(dude_obj);
end

procedure critter_p_proc begin
   loopcount := loopcount + 1;
   if (loopcount > 40) then begin
      loopcount := 0;
      if (noevent == 0) then begin
         noevent := 1;
         rndx := 5 + random(1, 10);
         add_timer_event(self_obj, game_ticks(rndx), 0);
      end
   end
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (map_var(MVAR_Broken_Gen) == 1) then begin
      call pez00;
   end
   else begin
      if (global_var(GVAR_QUEST_DEMO_GANG_WAR)) then begin
         call pez01;
      end
      else if DUDE_IS_CRYPT then begin
         call pez02;
      end
      else if DUDE_IS_FOOL then begin
         call pez03;
      end
      else begin
         call pez04;
      end
   end
end

procedure pez00 begin
   PICK := random(1, 4);
   if (PICK == 1) then begin
      set_global_var(GVAR_QUEST_DEMO_FIX_POWER, 1);
   end
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(101), FLOAT_MSG_BLUE);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(102), FLOAT_MSG_BLUE);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(103), FLOAT_MSG_BLUE);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(104), FLOAT_MSG_BLUE);
   end
end

procedure pez01 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      set_global_var(GVAR_GANG_1_GVAR, 1);
   end
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(105), FLOAT_MSG_BLUE);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(106), FLOAT_MSG_BLUE);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(107), FLOAT_MSG_BLUE);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(108), FLOAT_MSG_BLUE);
   end
   else if (PICK == 5) then begin
      float_msg(self_obj, mstr(109), FLOAT_MSG_BLUE);
   end
end

procedure pez02 begin
   PICK := random(1, 4);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(110), FLOAT_MSG_BLUE);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(111), FLOAT_MSG_BLUE);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(112), FLOAT_MSG_BLUE);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(113), FLOAT_MSG_BLUE);
   end
end

procedure pez03 begin
   PICK := random(1, 5);
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(114), FLOAT_MSG_BLUE);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(115), FLOAT_MSG_BLUE);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(116), FLOAT_MSG_BLUE);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(117), FLOAT_MSG_BLUE);
   end
   else if (PICK == 5) then begin
      float_msg(self_obj, mstr(118), FLOAT_MSG_BLUE);
   end
end

procedure pez04 begin
   PICK := random(1, 7);
   /*if (PICK == 3) then begin
      set_global_var(GVAR_DOGMEAT_SOMETHING_0, 1);
   end*/
   if (PICK == 1) then begin
      float_msg(self_obj, mstr(119), FLOAT_MSG_BLUE);
   end
   else if (PICK == 2) then begin
      float_msg(self_obj, mstr(120), FLOAT_MSG_BLUE);
   end
   else if (PICK == 3) then begin
      float_msg(self_obj, mstr(121), FLOAT_MSG_BLUE);
   end
   else if (PICK == 4) then begin
      float_msg(self_obj, mstr(122), FLOAT_MSG_BLUE);
   end
   else if (PICK == 5) then begin
      float_msg(self_obj, mstr(123), FLOAT_MSG_BLUE);
   end
   else if (PICK == 6) then begin
      call pez05;
   end
   else if (PICK == 7) then begin
      float_msg(self_obj, mstr(124), FLOAT_MSG_BLUE);
   end
end

procedure pez05 begin
   PICK := random(1, 10);
   if (PICK < 3) then begin
      float_msg(self_obj, mstr(125), FLOAT_MSG_BLUE);
   end
   else begin
      float_msg(self_obj, mstr(126), FLOAT_MSG_BLUE);
   end
end

procedure pezdone begin
   NOption(127, pezend, 4);
end

procedure pezend begin
end

procedure timeforwhat begin
   noevent := 0;
   rndy := random(1, 6);
   if (rndy > 1) then begin
      dist := 2;
   end
   if (rndy > 5) then begin
      dist := 3;
   end
   rndz := random(0, 5);
   prev_tile := self_tile;
   new_tile := tile_num_in_direction(prev_tile, rndz, dist);
   self_walk_to_tile(new_tile);
end
