/*
   Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************
   Filename : iiMine.ssl

   Purpose : This is for the mines in the Raiders Cave.

   Created : December 18, 1997   RWH2

   Updated:
        April 14, 1998          rwh2
                Made the template more generic for any weapon to be
                fired from any floor plate. All defines at the top
                are the only things that will need to be changed
                from now on
******************************************************************/


/* Include Files */
#include "define.h"

#define NAME                    SCRIPT_SPRTRP0
#define CUR_SCRIPT              SCRIPT_IIMINE

#include "command.h"

#define TRAP_BONUS                      (-25)
#define PERCEPTION_BONUS                (-4)
#define DIST_BONUS                      (2)

#define TRAP_EXP                        EXP_TRAPS_NORMAL
#define TRAP_TIME                       (0)             // In Seconds

#define MIN_DMG                         (10)
#define MAX_DMG                         (20)
#define DAMAGE_TYPE                     DMG_explosive_dam

#define TRAP_LVAR                       LVAR_Mine_Status

#define ART_TRAP_VISIBLE                (PID_CAVE_FLOOR_TRAP_VISIBLE)
#define ART_TRAP_EXPLODED               (PID_CAVE_FLOOR_TRAP_DEPRESSED)
#define ART_TRAP_DISARMED               (PID_CAVE_FLOOR_TRAP_DISARMED)

procedure start;
procedure spatial_p_proc;
procedure use_skill_on_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure damage_p_proc;

#define LVAR_Trap_Found                 (0)
#define LVAR_Trap_Exploded              (1)
#define LVAR_Gave_Exp                   (2)
#define LVAR_Got_Perception_Roll        (3)
#define LVAR_Extended_Look              (4)
#define LVAR_Mine_Status                (5)

procedure start begin
end

procedure damage_p_proc begin
   variable Trap;

   if(( local_var(LVAR_Trap_Exploded) == 0) and ( local_var(TRAP_LVAR) == 0)) then begin
      if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_VISIBLE)) then begin
         debug_msg("Destroying Visible Trap");
         destroy_object(tile_contains_pid_obj(self_tile, self_elevation, ART_TRAP_VISIBLE));
         debug_msg("Destroyed Visible Trap");
      end
      Trap := create_object(ART_TRAP_EXPLODED, self_tile, self_elevation);

      explosion(self_tile, self_elevation, 1);
      critter_dmg(source_obj, random(MIN_DMG, MAX_DMG), (DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));

      set_local_var(LVAR_Trap_Exploded, 1);
      set_local_var(TRAP_LVAR, 1);
   end
end

procedure spatial_p_proc begin
   variable Range;
   variable Range_Mod;
   variable Detection_Roll;
   variable Trap;

   if (obj_type(source_obj) == 1) then begin

       Range := get_perception(source_obj) + PERCEPTION_BONUS;
       Range_Mod := Range - (tile_distance_objs(self_obj, source_obj)*DIST_BONUS);

       if ((tile_distance_objs(self_obj, source_obj) <= Range) and
           (local_var(LVAR_Trap_Found) == 0) and (local_var(LVAR_Trap_Exploded) == 0)) then begin

           if (Range_Mod > PERCEPTION_BONUS) then
               Range_Mod := PERCEPTION_BONUS;

           Detection_Roll := do_check(source_obj, STAT_pe, Range_Mod);

           if (is_success(Detection_Roll)) then begin

               set_local_var(LVAR_Trap_Found, 1);
               reg_anim_clear(source_obj);
               Trap := create_object_sid(ART_TRAP_VISIBLE, self_tile, self_elevation, CUR_SCRIPT);

               if (is_critical(Detection_Roll)) then begin
                   if (source_obj == dude_obj) then
                       display_msg(mstr(100));
                   else if ((proto_data(obj_pid(source_obj), cr_body_type) == CR_BODY_BIPED) and (obj_can_see_obj(source_obj, dude_obj))) then
                       display_msg(obj_name(source_obj)+mstr(101));
               end

               else begin
                   if (source_obj == dude_obj) then
                       display_msg(mstr(102));
                   else if ((proto_data(obj_pid(source_obj), cr_body_type) == CR_BODY_BIPED) and (obj_can_see_obj(source_obj, dude_obj))) then
                       display_msg(obj_name(source_obj)+mstr(103));
               end
           end
       end

       if ( (tile_distance_objs(self_obj, source_obj) == 0) and
            (local_var(LVAR_Trap_Exploded) == 0) and
            (local_var(TRAP_LVAR) == 0) and
            ( not(tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_DISARMED)) ) and
            ( not(tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_EXPLODED)) ) ) then begin

              //game_ui_disable;

              debug("Set off the Trap!");
              //Projectile:=create_object(PROJECTILE_WEAPON,INITIAL_TILE,elevation(self_obj));
              //Face_Critter(source_obj,Projectile);
              if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_VISIBLE)) then begin
                  debug("Destroying Visible Trap");
                  destroy_object(tile_contains_pid_obj(self_tile, self_elevation, ART_TRAP_VISIBLE));
                  debug("Destroyed Visible Trap");
              end
              Trap := create_object(ART_TRAP_EXPLODED, self_tile, self_elevation);

              //added by killap
              if ((source_obj == dude_obj) and (dude_perk(PERK_light_step_perk)) and (random(0, 1) == 1)) then
                  debug("Used Light Step.");
              else begin
                  explosion (self_tile, self_elevation, 1);
                  critter_dmg(source_obj, random(MIN_DMG, MAX_DMG), (DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));
              end
              //end added by killap

              set_local_var(LVAR_Trap_Exploded, 1);
              set_local_var(TRAP_LVAR, 1);
       end
   end

end

procedure use_skill_on_p_proc begin
   variable Traps_Roll;
   variable Trap;

   if ((local_var(LVAR_Trap_Exploded) == 0) and (local_var(TRAP_LVAR) == 0) and (action_being_used == SKILL_TRAPS)) then begin
       script_overrides;
       Traps_Roll := roll_vs_skill(source_obj, SKILL_TRAPS, TRAP_BONUS);
       if (source_obj == dude_obj) then begin
           if (is_success(Traps_Roll)) then begin
               Trap := create_object_sid(ART_TRAP_DISARMED, self_tile, self_elevation, CUR_SCRIPT);
               set_local_var(LVAR_Trap_Exploded, 1);
               set_local_var(TRAP_LVAR, 1);
               display_msg(g_mstr(102));
               if (local_var(LVAR_Gave_Exp) == 0) then begin
                   set_local_var(LVAR_Gave_Exp, 1);
                   give_xp(TRAP_EXP);
               end
           end
           else if (is_critical(Traps_Roll)) then begin
               set_local_var(LVAR_Trap_Exploded, 1);
               set_local_var(TRAP_LVAR, 1);
               display_msg(g_mstr(104));
               if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_VISIBLE)) then begin
                   debug_msg("Destroying Visible Trap");
                   destroy_object(tile_contains_pid_obj(self_tile, self_elevation, ART_TRAP_VISIBLE));
                   debug_msg("Destroyed Visible Trap");
               end
               Trap := create_object_sid(ART_TRAP_EXPLODED, self_tile, self_elevation, CUR_SCRIPT);
               explosion(self_tile, self_elevation, 1);
               critter_dmg(source_obj, random(MIN_DMG, MAX_DMG), (DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));
           end
           else begin
               display_msg(g_mstr(103));
           end
       end
       else begin
           if (is_success(Traps_Roll)) then begin
               Trap := create_object_sid(ART_TRAP_DISARMED, self_tile, self_elevation, CUR_SCRIPT);
               set_local_var(TRAP_LVAR, 1);
               display_msg(obj_name(source_obj)+g_mstr(105));
               if (local_var(LVAR_Gave_Exp) == 0) then begin
                   set_local_var(LVAR_Gave_Exp, 1);
                   give_xp(TRAP_EXP);
               end
           end
           else if (is_critical(Traps_Roll)) then begin
               set_local_var(LVAR_Trap_Exploded, 1);
               set_local_var(TRAP_LVAR, 1);
               display_msg(obj_name(source_obj)+g_mstr(107));
               if (tile_contains_obj_pid(self_tile, self_elevation, ART_TRAP_VISIBLE)) then begin
                   debug_msg("Destroying Visible Trap");
                   destroy_object(tile_contains_pid_obj(self_tile, self_elevation, ART_TRAP_VISIBLE));
                   debug_msg("Destroyed Visible Trap");
               end
               Trap := create_object_sid(ART_TRAP_EXPLODED, self_tile, self_elevation, CUR_SCRIPT);
               explosion(self_tile, self_elevation, 1);
               critter_dmg(source_obj, random(MIN_DMG, MAX_DMG), (DMG_normal_dam BWOR DMG_BYPASS_ARMOR BWOR DMG_NOANIMATE));
           end
           else begin
               display_msg(obj_name(source_obj)+g_mstr(106));
           end
       end
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(102));
   debug_msg("Looking At the Trap");
end

procedure description_p_proc begin
   variable Perception_Roll;

   script_overrides;

   if (local_var(LVAR_Got_Perception_Roll) == 0) then begin
       set_local_var(LVAR_Got_Perception_Roll, 1);
       Perception_Roll := do_check(dude_obj, STAT_pe, PERCEPTION_BONUS);
       set_local_var(LVAR_Extended_Look, Perception_Roll);
   end

   if (is_critical(local_var(LVAR_Extended_Look))) then begin
       if (is_success(local_var(LVAR_Extended_Look))) then
           display_msg(mstr(100));
       else
           display_msg(mstr(106));
   end
   else begin
       display_msg(mstr(102));
   end
end
