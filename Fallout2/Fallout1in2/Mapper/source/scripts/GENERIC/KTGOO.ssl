/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

// Goo.ssl
// damages critters in the goo

#include "define.h"

#define NAME                    SCRIPT_KTGOO
#include "command.h"

procedure start;
procedure map_enter_p_proc;
procedure spatial_p_proc;

procedure meltem;
procedure pain;

variable my_boots;
variable worn;
variable k;
variable mutate := 0;

procedure start begin
end

procedure map_enter_p_proc begin
   if map_first_run then begin
      variable goo_size := 0;
      if (self_pid == PID_RAD_GOO_1 or self_pid == PID_RAD_GOO_2) then
         goo_size := 1;

      debug_msg("create goo spatial!");
      Scenery_Creation := create_spatial(SCRIPT_KTGOO, self_tile, self_elevation, goo_size);
   end
end

procedure spatial_p_proc begin
     my_boots := 0;
     worn := 0;
     //dont need to be carrying boots in hand
     if (get_item(source_obj, PID_RUBBER_BOOTS)) then begin
        //if carrying boots ..do boot damage
       //debug_msg("NPC Code");
        k := random(1, 100);
        if (k < 2) then begin //1% chance to melt
           my_boots := get_item(source_obj, PID_RUBBER_BOOTS);
           rm_obj_from_inven(source_obj, my_boots);
           destroy_object(my_boots);
           if (source_obj == dude_obj) then
              display_msg(mstr(130));
        end
     end
     else begin //check if target is a gecko
        if ((obj_pid(source_obj) == PID_GECKO) or (obj_pid(source_obj) == PID_GOLDEN_GECKO) or (obj_pid(source_obj) == PID_FIRE_GECKO)
          or (obj_pid(source_obj) == PID_FLOATER) or (obj_pid(source_obj) == PID_BLOODY_FLOATER)
          or (obj_pid(source_obj) == PID_CENTAUR_LESSER) or (obj_pid(source_obj) == PID_GREATER_CENTAUR)
          or (obj_pid(source_obj) == PID_MRHANDYC) or (obj_pid(source_obj) == PID_MRHANDY)
          or (obj_pid(source_obj) == PID_FLOATING_EYE) or (obj_pid(source_obj) == PID_EYEBALL_MK2)
          or (obj_pid(source_obj) == PID_ANT)) then begin
            //do nothing
            debug_msg("Stronk!");
          end
          else
             call pain;
     end
 end

procedure meltem begin
   //debug_msg("My Boots Protect Me!");
   k := random(1, 100);
   if (k < 2) then begin //1% chance to melt
      //debug_msg("Melting");
      rm_obj_from_inven(dude_obj, my_boots);
      destroy_object(my_boots);
      display_msg(mstr(130));
      //remove boots from players inventory
   end
end

procedure pain begin
   if (get_armor(source_obj) != 0) then
      worn := obj_pid(get_armor(source_obj));
   if ((worn != PID_POWERED_ARMOR) and (worn != PID_HARDENED_POWER_ARMOR) and (worn != PID_ADVANCED_POWER_ARMOR)) then begin
        //if not wearing powered armor then do damage
        //debug_msg("It hurts!");
        if ( (source_obj == dude_obj) and (global_var(GVAR_MUTATE_STAGE) < 1) ) then begin
           mutate := global_var(GVAR_MUTATE);
           mutate := mutate+2;
           set_global_var(GVAR_MUTATE, mutate);
           if (mutate > 29) then begin
              //set_global_var(GVAR_MUTATE, 1); //set state of character to mutate
              set_global_var(GVAR_MUTATE_WHEN, GAME_TIME_IN_DAYS); //store the time
              set_global_var(GVAR_MUTATE_STAGE, 1);
              display_msg(mstr(150));
           end
           else if (mutate > 14) then
              display_msg(mstr(140));
           else
              display_msg(mstr(110));
        end
        critter_dmg(source_obj, 4, DMG_plasma);
     end
end
