/*

   Generic wood and metal door, used almost everywhere in the game.
   Has either a broken, or no lock at all!

      TODO: Move all Necropolis related stuff into a new sub-script.

*/

#include "define.h"
#include "command.h"
#ifdef EXTRA_HEADER
   #include EXTRA_HEADER
#endif

#define NAME                     SCRIPT_DOOR

/* Door close distance */
/* How far do you want the last object that used the door to get away before it closes */
#define DOOR_CLOSE_DIST                 (10) //(3)

/* Timer id's */
#define TIMER_CLOSE                     (1)

#define is_metal_door                   (self_pid == PID_DOOR_METAL_EW or self_pid == PID_DOOR_METAL_NS or self_pid == PID_VDOOR_OLD_METAL_NS or self_pid == PID_VDOOR_OLD_METAL_EW)
#define is_wood_door                    not(is_metal_door)

/* Penalties for forcing the door open using strength */
#define Crowbar_Bonus                   (0)

/* Max and Min damage for the trap */
#define DOOR_STRENGTH                   (2)
#define MIN_DAMAGE                      (10)
#define MAX_DAMAGE                      (20)
#define Crowbar_Strain                  (2)

procedure start;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure map_exit_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                  (0)
#define LVAR_Explosion_Attempts     (1)

#define gave_warning_bit                     bit_11

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
#ifdef WATCHER_OBJ
   import variable WATCHER_OBJ;
#endif

#ifndef WATCHER_OBJ
   #define WATCHER_OBJ                       (0)               // object of script watching locker
#endif
#ifndef DO_CHECK_TAMPER_CONDITION
   #define DO_CHECK_TAMPER_CONDITION         (true)            // setting this to true will always check no matter what
#endif

#ifndef SKIP_WARNING
   #define SKIP_WARNING                      (false)
#endif
#define gave_warning                         ((lvar_bit(LVAR_Flags, gave_warning_bit)) or (SKIP_WARNING))
#ifndef do_warning_action
   #define do_warning_action                 float_msg(WATCHER_OBJ, g_mstr(5400), FLOAT_COLOR_NORMAL);
#endif
#ifndef do_attack_action
   #define do_attack_action                  attack_setup(WATCHER_OBJ, user_obj);
#endif
#define set_gave_warning                     if (gave_warning) then begin        \
                                                do_attack_action                 \
                                             end else begin                      \
                                                do_warning_action                \
                                             end                                 \
                                             set_lvar_bit_on(LVAR_Flags, gave_warning_bit)

// exporting self_obj
#ifdef EXPORT_VAR
import variable EXPORT_VAR;
   #define export_self_var                   EXPORT_VAR := self_obj;
#else
   #define export_self_var
#endif

#ifndef look_at_action
   #define look_at_action
#endif
#ifndef description_action
   #define description_action                if (obj_is_locked(self_obj)) then display_msg(message_str(SCRIPT_DOOR, 104));
#endif

// general a generic way to deal with each response as one
#ifndef genereral_caught_action
   #define genereral_caught_action           if (caught_tamper) then begin          \
                                                script_overrides;                   \
                                                set_gave_warning;                   \
                                             end
#endif

#ifndef watch_box_conditions
   #define watch_box_conditions              (obj_can_see_obj(WATCHER_OBJ, user_obj))
#endif
// what to do when source is caught using locker
#define caught_use_action                    genereral_caught_action
// what to do when source is caught using an object on the locker
#define caught_use_obj_action                genereral_caught_action
// what to do when source is caught using a skill on the locker
#define caught_use_skill_action              genereral_caught_action
// what to do when locker is damaged
#define damage_action                        genereral_caught_action
#define check_tamper                         if (caught_tamper == false) then begin                                                          \
                                                if (DO_CHECK_TAMPER_CONDITION) then begin                                                    \
                                                   if (WATCHER_OBJ != 0) then begin                                                          \
                                                      if ((is_visible(WATCHER_OBJ)) and (is_critter_dead(WATCHER_OBJ) == false)) then begin  \
                                                         if (watch_box_conditions) then begin                                                \
                                                            caught_tamper := true;                                                           \
                                                         end                                                                                 \
                                                      end                                                                                    \
                                                   end                                                                                       \
                                                end                                                                                          \
                                             end
#ifndef map_enter_action
   #define map_enter_action
#endif
#ifndef map_update_action
   #define map_update_action
#endif

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;

variable caught_tamper;
variable user_obj;


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure look_at_p_proc begin
   look_at_action
end

procedure description_p_proc begin
   description_action
end

procedure timed_event_p_proc begin
   if (obj_is_open(self_obj)) then begin
      if not combat_is_initialized then begin
         if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
             (checkPartyMembersNearDoor == false) and
             ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
              (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
            obj_close(self_obj);
         end else begin
            add_timer_event(self_obj, 10, TIMER_CLOSE);
         end
      end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end

procedure map_enter_p_proc begin
   map_enter_action
   export_self_var
end

procedure map_update_p_proc begin
   map_update_action
   export_self_var
end

procedure map_exit_p_proc begin
   set_lvar_bit_off(LVAR_Flags, gave_warning_bit);
end

procedure use_p_proc begin
   caught_tamper := false;
   //debug("using object");
   user_obj := source_obj;
   if (user_obj != 0) then begin
      //debug("about to run check_tamper");
      check_tamper
      if (caught_tamper) then begin
         caught_use_action
      end
   end

   if fo1in2_auto_doors_closing then begin
   // debug("door will close");
      last_source_obj := source_obj;
      add_timer_event(self_obj, 10, TIMER_CLOSE);
   end
end

procedure use_skill_on_p_proc begin
variable Skills_Roll;

   caught_tamper := false;
   user_obj := source_obj;
   if (user_obj != 0) then begin
      check_tamper
      if (caught_tamper) then begin
         caught_use_skill_action
      end
   end
end

procedure use_obj_on_p_proc begin
   variable Tool;
   variable Skills_Roll;
   Tool := obj_pid(obj_being_used_with);

   caught_tamper := false;
   user_obj := source_obj;
   if (user_obj != 0) then begin
      check_tamper
      if (caught_tamper) then begin
         caught_use_obj_action
      end
   end
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      /************ Wood Door ****************/
      if is_wood_door then begin
         obj_unlock(self_obj);
         destroy_object(self_obj);
      end

      /************ Metal Door ****************/
      else if is_metal_door then begin
          set_local_var(LVAR_Explosion_Attempts, local_var(LVAR_Explosion_Attempts)+1);
          if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
              obj_unlock(self_obj);
              destroy_object(self_obj);
          end
      end
   end
   else begin
       display_msg(mstr(193));
   end

   user_obj := source_obj;
   if (user_obj != 0) then begin
      damage_action
   end
end

